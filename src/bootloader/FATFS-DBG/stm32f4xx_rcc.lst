ARM GAS  /tmp/cc69dDoz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3	@ Tag_ABI_HardFP_use
   4              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   7              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   8              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   9              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
  10              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
  11              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  12              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  13              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  14              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  15              		.file	"stm32f4xx_rcc.c"
  16              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.7.4 20130913 (release) [ARM/embedded-4_7-
  17              	@	compiled by GNU C version 4.7.3, GMP version 5.0.5, MPFR version 3.1.1-p2, MPC version 0.9
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed:  -I . -I ../ -I cmsis/ -imultilib armv7e-m/fpu
  20              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/4.7.4/
  21              	@ -isysroot /usr/bin/../arm-none-eabi -MD stm32f4xx_rcc.d
  22              	@ -MF .dep/stm32f4xx_rcc.o.d -MP -MQ stm32f4xx_rcc.o -D__USES_INITFINI__
  23              	@ -D __FPU_USED=1 -D __arm__ -D __ASSEMBLY__ -D USE_STDPERIPH_DRIVER
  24              	@ -D STM32F4XX -D HSE_VALUE=8000000 -D __FPU_PRESENT=1 -D __FPU_USED=1
  25              	@ -D STM32F405VG -D USE_USB_OTG_FS -D RUN_FROM_FLASH=1 stm32f4xx_rcc.c
  26              	@ -mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb
  27              	@ -auxbase-strip stm32f4xx_rcc.o -gdwarf-2 -Os -Wall -Wstrict-prototypes
  28              	@ -std=gnu99 -falign-functions=16 -fno-inline -fomit-frame-pointer
  29              	@ -fverbose-asm -ffunction-sections -fdata-sections
  30              	@ options enabled:  -fauto-inc-dec -fbranch-count-reg -fcaller-saves
  31              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  32              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdebug-types-section
  33              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize -fdwarf2-cfi-asm
  34              	@ -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  35              	@ -fforward-propagate -ffunction-cse -ffunction-sections -fgcse -fgcse-lm
  36              	@ -fgnu-runtime -fguess-branch-probability -fident -fif-conversion
  37              	@ -fif-conversion2 -findirect-inlining -finline-atomics -finline-functions
  38              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  39              	@ -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
  40              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  41              	@ -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
  42              	@ -fmerge-debug-strings -fomit-frame-pointer -foptimize-register-move
  43              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  44              	@ -fprefetch-loop-arrays -freg-struct-return -fregmove -frename-registers
  45              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  46              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  47              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  48              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  49              	@ -fsched-stalled-insns-dep -fschedule-insns2 -fsection-anchors
  50              	@ -fshow-column -fshrink-wrap -fsigned-zeros -fsplit-ivs-in-unroller
  51              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  52              	@ -fstrict-volatile-bitfields -fthread-jumps -ftoplevel-reorder
  53              	@ -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp
  54              	@ -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-cselim -ftree-dce
  55              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  56              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  57              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
ARM GAS  /tmp/cc69dDoz.s 			page 2


  58              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  59              	@ -ftree-slp-vectorize -ftree-sra -ftree-switch-conversion
  60              	@ -ftree-tail-merge -ftree-ter -ftree-vect-loop-version -ftree-vrp
  61              	@ -funit-at-a-time -funroll-loops -fvar-tracking -fvar-tracking-assignments
  62              	@ -fverbose-asm -fweb -fzero-initialized-in-bss -mlittle-endian
  63              	@ -msched-prolog -mthumb -munaligned-access -mvectorize-with-neon-quad
  64              	
  65              		.text
  66              	.Ltext0:
  67              		.cfi_sections	.debug_frame
  68              		.section	.text.RCC_DeInit,"ax",%progbits
  69              		.align	1
  70              		.global	RCC_DeInit
  71              		.thumb
  72              		.thumb_func
  73              		.type	RCC_DeInit, %function
  74              	RCC_DeInit:
  75              	.LFB110:
  76              		.file 1 "stm32f4xx_rcc.c"
   1:stm32f4xx_rcc.c **** /**
   2:stm32f4xx_rcc.c ****   ******************************************************************************
   3:stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:stm32f4xx_rcc.c ****   * @version V1.1.0
   6:stm32f4xx_rcc.c ****   * @date    11-January-2013
   7:stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:stm32f4xx_rcc.c ****   *
  14:stm32f4xx_rcc.c ****  @verbatim                
  15:stm32f4xx_rcc.c ****  ===============================================================================
  16:stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:stm32f4xx_rcc.c ****  ===============================================================================
  18:stm32f4xx_rcc.c ****     [..]  
  19:stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:stm32f4xx_rcc.c ****     [..]          
  29:stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
  30:stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:stm32f4xx_rcc.c ****  @endverbatim    
  38:stm32f4xx_rcc.c ****   ******************************************************************************
ARM GAS  /tmp/cc69dDoz.s 			page 3


  39:stm32f4xx_rcc.c ****   * @attention
  40:stm32f4xx_rcc.c ****   *
  41:stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  42:stm32f4xx_rcc.c ****   *
  43:stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:stm32f4xx_rcc.c ****   *
  47:stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:stm32f4xx_rcc.c ****   *
  49:stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:stm32f4xx_rcc.c ****   * limitations under the License.
  54:stm32f4xx_rcc.c ****   *
  55:stm32f4xx_rcc.c ****   ******************************************************************************
  56:stm32f4xx_rcc.c ****   */
  57:stm32f4xx_rcc.c **** 
  58:stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:stm32f4xx_rcc.c **** 
  61:stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:stm32f4xx_rcc.c ****   * @{
  63:stm32f4xx_rcc.c ****   */
  64:stm32f4xx_rcc.c **** 
  65:stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:stm32f4xx_rcc.c ****   * @{
  68:stm32f4xx_rcc.c ****   */ 
  69:stm32f4xx_rcc.c **** 
  70:stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:stm32f4xx_rcc.c **** 
  89:stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  90:stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  91:stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  92:stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  93:stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  94:stm32f4xx_rcc.c **** 
  95:stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
ARM GAS  /tmp/cc69dDoz.s 			page 4


  96:stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  97:stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  98:stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  99:stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 100:stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 101:stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 102:stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 103:stm32f4xx_rcc.c **** 
 104:stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 105:stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 106:stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 107:stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 108:stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 109:stm32f4xx_rcc.c **** 
 110:stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 111:stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 112:stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 113:stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 114:stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 115:stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 116:stm32f4xx_rcc.c **** /* CFGR register bit mask */
 117:stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 118:stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 119:stm32f4xx_rcc.c **** 
 120:stm32f4xx_rcc.c **** /* RCC Flag Mask */
 121:stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 122:stm32f4xx_rcc.c **** 
 123:stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 124:stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 125:stm32f4xx_rcc.c **** 
 126:stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 127:stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 128:stm32f4xx_rcc.c **** 
 129:stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 130:stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 131:stm32f4xx_rcc.c **** 
 132:stm32f4xx_rcc.c **** /* BDCR register base address */
 133:stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 134:stm32f4xx_rcc.c **** 
 135:stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 136:stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 137:stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 138:stm32f4xx_rcc.c **** 
 139:stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 140:stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 141:stm32f4xx_rcc.c **** 
 142:stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 143:stm32f4xx_rcc.c ****   * @{
 144:stm32f4xx_rcc.c ****   */ 
 145:stm32f4xx_rcc.c **** 
 146:stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 147:stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 148:stm32f4xx_rcc.c ****  *
 149:stm32f4xx_rcc.c **** @verbatim   
 150:stm32f4xx_rcc.c ****  ===================================================================================
 151:stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 152:stm32f4xx_rcc.c ****  ===================================================================================  
ARM GAS  /tmp/cc69dDoz.s 			page 5


 153:stm32f4xx_rcc.c ****     [..]
 154:stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 155:stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 156:stm32f4xx_rcc.c ****   
 157:stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 158:stm32f4xx_rcc.c ****           the PLL as System clock source.
 159:stm32f4xx_rcc.c **** 
 160:stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 161:stm32f4xx_rcc.c ****           clock source.
 162:stm32f4xx_rcc.c **** 
 163:stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 164:stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 165:stm32f4xx_rcc.c **** 
 166:stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 167:stm32f4xx_rcc.c **** 
 168:stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 169:stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 170:stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 171:stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 172:stm32f4xx_rcc.c **** 
 173:stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 174:stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface.
 175:stm32f4xx_rcc.c ****   
 176:stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 177:stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 178:stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 179:stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 180:stm32f4xx_rcc.c ****          exception vector.   
 181:stm32f4xx_rcc.c **** 
 182:stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 183:stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 184:stm32f4xx_rcc.c **** 
 185:stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 186:stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 187:stm32f4xx_rcc.c ****  @endverbatim
 188:stm32f4xx_rcc.c ****   * @{
 189:stm32f4xx_rcc.c ****   */
 190:stm32f4xx_rcc.c **** 
 191:stm32f4xx_rcc.c **** /**
 192:stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 193:stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 194:stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 195:stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 196:stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 197:stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 198:stm32f4xx_rcc.c ****   *            - All interrupts disabled
 199:stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 200:stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 201:stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 202:stm32f4xx_rcc.c ****   * @param  None
 203:stm32f4xx_rcc.c ****   * @retval None
 204:stm32f4xx_rcc.c ****   */
 205:stm32f4xx_rcc.c **** void RCC_DeInit(void)
 206:stm32f4xx_rcc.c **** {
  77              		.loc 1 206 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc69dDoz.s 			page 6


  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
 207:stm32f4xx_rcc.c ****   /* Set HSION bit */
 208:stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  82              		.loc 1 208 0
  83 0000 0B4B     		ldr	r3, .L2	@ tmp140,
  84 0002 1A68     		ldr	r2, [r3, #0]	@ D.6376, MEM[(struct RCC_TypeDef *)1073887232B].CR
  85 0004 42F00100 		orr	r0, r2, #1	@ D.6377, D.6376,
 209:stm32f4xx_rcc.c **** 
 210:stm32f4xx_rcc.c ****   /* Reset CFGR register */
 211:stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  86              		.loc 1 211 0
  87 0008 0022     		movs	r2, #0	@ tmp143,
 208:stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  88              		.loc 1 208 0
  89 000a 1860     		str	r0, [r3, #0]	@ D.6377, MEM[(struct RCC_TypeDef *)1073887232B].CR
  90              		.loc 1 211 0
  91 000c 9A60     		str	r2, [r3, #8]	@ tmp143, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 212:stm32f4xx_rcc.c **** 
 213:stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
 214:stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFAF6FFFF;
  92              		.loc 1 214 0
  93 000e 1968     		ldr	r1, [r3, #0]	@ D.6378, MEM[(struct RCC_TypeDef *)1073887232B].CR
  94 0010 21F0A160 		bic	r0, r1, #84410368	@ tmp145, D.6378,
  95 0014 20F48031 		bic	r1, r0, #65536	@ D.6379, tmp145,
  96 0018 1960     		str	r1, [r3, #0]	@ D.6379, MEM[(struct RCC_TypeDef *)1073887232B].CR
 215:stm32f4xx_rcc.c **** 
 216:stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 217:stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  97              		.loc 1 217 0
  98 001a 0648     		ldr	r0, .L2+4	@ tmp148,
 218:stm32f4xx_rcc.c **** 
 219:stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 220:stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  99              		.loc 1 220 0
 100 001c 0649     		ldr	r1, .L2+8	@ tmp150,
 217:stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
 101              		.loc 1 217 0
 102 001e 5860     		str	r0, [r3, #4]	@ tmp148, MEM[(struct RCC_TypeDef *)1073887232B].PLLCFGR
 103              		.loc 1 220 0
 104 0020 C3F88410 		str	r1, [r3, #132]	@ tmp150, MEM[(struct RCC_TypeDef *)1073887232B].PLLI2SCFGR
 221:stm32f4xx_rcc.c **** 
 222:stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 223:stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 105              		.loc 1 223 0
 106 0024 1868     		ldr	r0, [r3, #0]	@ D.6380, MEM[(struct RCC_TypeDef *)1073887232B].CR
 107 0026 20F48021 		bic	r1, r0, #262144	@ D.6381, D.6380,
 108 002a 1960     		str	r1, [r3, #0]	@ D.6381, MEM[(struct RCC_TypeDef *)1073887232B].CR
 224:stm32f4xx_rcc.c **** 
 225:stm32f4xx_rcc.c ****   /* Disable all interrupts */
 226:stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
 109              		.loc 1 226 0
 110 002c DA60     		str	r2, [r3, #12]	@ tmp143, MEM[(struct RCC_TypeDef *)1073887232B].CIR
 111 002e 7047     		bx	lr	@
 112              	.L3:
 113              		.align	2
 114              	.L2:
ARM GAS  /tmp/cc69dDoz.s 			page 7


 115 0030 00380240 		.word	1073887232
 116 0034 10300024 		.word	603992080
 117 0038 00300020 		.word	536883200
 118              		.cfi_endproc
 119              	.LFE110:
 120              		.size	RCC_DeInit, .-RCC_DeInit
 121              		.section	.text.RCC_HSEConfig,"ax",%progbits
 122              		.align	1
 123              		.global	RCC_HSEConfig
 124              		.thumb
 125              		.thumb_func
 126              		.type	RCC_HSEConfig, %function
 127              	RCC_HSEConfig:
 128              	.LFB111:
 227:stm32f4xx_rcc.c **** 
 228:stm32f4xx_rcc.c **** #ifdef STM32F427X 
 229:stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection */
 230:stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
 231:stm32f4xx_rcc.c **** #endif /* STM32F427X */ 
 232:stm32f4xx_rcc.c **** 
 233:stm32f4xx_rcc.c **** }
 234:stm32f4xx_rcc.c **** 
 235:stm32f4xx_rcc.c **** /**
 236:stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 237:stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 238:stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 239:stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 240:stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 241:stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 242:stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 243:stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 244:stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 245:stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 246:stm32f4xx_rcc.c ****   *         function.    
 247:stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 248:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 249:stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 250:stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 251:stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 252:stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 253:stm32f4xx_rcc.c ****   * @retval None
 254:stm32f4xx_rcc.c ****   */
 255:stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 256:stm32f4xx_rcc.c **** {
 129              		.loc 1 256 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL0:
 257:stm32f4xx_rcc.c ****   /* Check the parameters */
 258:stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 259:stm32f4xx_rcc.c **** 
 260:stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 261:stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 135              		.loc 1 261 0
 136 0000 024B     		ldr	r3, .L5	@ tmp135,
ARM GAS  /tmp/cc69dDoz.s 			page 8


 137 0002 0022     		movs	r2, #0	@ tmp136,
 138 0004 1A70     		strb	r2, [r3, #0]	@ tmp136, MEM[(volatile uint8_t *)1073887234B]
 262:stm32f4xx_rcc.c **** 
 263:stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 264:stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 139              		.loc 1 264 0
 140 0006 1870     		strb	r0, [r3, #0]	@ RCC_HSE, MEM[(volatile uint8_t *)1073887234B]
 141 0008 7047     		bx	lr	@
 142              	.L6:
 143 000a 00BF     		.align	2
 144              	.L5:
 145 000c 02380240 		.word	1073887234
 146              		.cfi_endproc
 147              	.LFE111:
 148              		.size	RCC_HSEConfig, .-RCC_HSEConfig
 149              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 150              		.align	1
 151              		.global	RCC_AdjustHSICalibrationValue
 152              		.thumb
 153              		.thumb_func
 154              		.type	RCC_AdjustHSICalibrationValue, %function
 155              	RCC_AdjustHSICalibrationValue:
 156              	.LFB113:
 265:stm32f4xx_rcc.c **** }
 266:stm32f4xx_rcc.c **** 
 267:stm32f4xx_rcc.c **** /**
 268:stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 269:stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 270:stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 271:stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 272:stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 273:stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 274:stm32f4xx_rcc.c ****   * @param  None
 275:stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 276:stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 277:stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 278:stm32f4xx_rcc.c ****   */
 279:stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 280:stm32f4xx_rcc.c **** {
 281:stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 282:stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 283:stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 284:stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 285:stm32f4xx_rcc.c ****   do
 286:stm32f4xx_rcc.c ****   {
 287:stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 288:stm32f4xx_rcc.c ****     startupcounter++;
 289:stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 290:stm32f4xx_rcc.c **** 
 291:stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 292:stm32f4xx_rcc.c ****   {
 293:stm32f4xx_rcc.c ****     status = SUCCESS;
 294:stm32f4xx_rcc.c ****   }
 295:stm32f4xx_rcc.c ****   else
 296:stm32f4xx_rcc.c ****   {
 297:stm32f4xx_rcc.c ****     status = ERROR;
 298:stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/cc69dDoz.s 			page 9


 299:stm32f4xx_rcc.c ****   return (status);
 300:stm32f4xx_rcc.c **** }
 301:stm32f4xx_rcc.c **** 
 302:stm32f4xx_rcc.c **** /**
 303:stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 304:stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 305:stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 306:stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 307:stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 308:stm32f4xx_rcc.c ****   * @retval None
 309:stm32f4xx_rcc.c ****   */
 310:stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 311:stm32f4xx_rcc.c **** {
 157              		.loc 1 311 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162              	.LVL1:
 312:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 313:stm32f4xx_rcc.c ****   /* Check the parameters */
 314:stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 315:stm32f4xx_rcc.c **** 
 316:stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 163              		.loc 1 316 0
 164 0000 034B     		ldr	r3, .L8	@ tmp140,
 165 0002 1A68     		ldr	r2, [r3, #0]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CR
 166              	.LVL2:
 317:stm32f4xx_rcc.c **** 
 318:stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 319:stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 167              		.loc 1 319 0
 168 0004 22F0F801 		bic	r1, r2, #248	@ tmpreg, tmpreg,
 169              	.LVL3:
 320:stm32f4xx_rcc.c **** 
 321:stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 322:stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 170              		.loc 1 322 0
 171 0008 41EAC000 		orr	r0, r1, r0, lsl #3	@, tmpreg, tmpreg, HSICalibrationValue,
 172              	.LVL4:
 323:stm32f4xx_rcc.c **** 
 324:stm32f4xx_rcc.c ****   /* Store the new value */
 325:stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 173              		.loc 1 325 0
 174 000c 1860     		str	r0, [r3, #0]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CR
 175 000e 7047     		bx	lr	@
 176              	.L9:
 177              		.align	2
 178              	.L8:
 179 0010 00380240 		.word	1073887232
 180              		.cfi_endproc
 181              	.LFE113:
 182              		.size	RCC_AdjustHSICalibrationValue, .-RCC_AdjustHSICalibrationValue
 183              		.section	.text.RCC_HSICmd,"ax",%progbits
 184              		.align	1
 185              		.global	RCC_HSICmd
 186              		.thumb
ARM GAS  /tmp/cc69dDoz.s 			page 10


 187              		.thumb_func
 188              		.type	RCC_HSICmd, %function
 189              	RCC_HSICmd:
 190              	.LFB114:
 326:stm32f4xx_rcc.c **** }
 327:stm32f4xx_rcc.c **** 
 328:stm32f4xx_rcc.c **** /**
 329:stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 330:stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 331:stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 332:stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 333:stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 334:stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 335:stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 336:stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 337:stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 338:stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 339:stm32f4xx_rcc.c ****   *         system clock source.  
 340:stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 341:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 342:stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 343:stm32f4xx_rcc.c ****   *         clock cycles.  
 344:stm32f4xx_rcc.c ****   * @retval None
 345:stm32f4xx_rcc.c ****   */
 346:stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 347:stm32f4xx_rcc.c **** {
 191              		.loc 1 347 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL5:
 348:stm32f4xx_rcc.c ****   /* Check the parameters */
 349:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 350:stm32f4xx_rcc.c **** 
 351:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 197              		.loc 1 351 0
 198 0000 014B     		ldr	r3, .L11	@ tmp136,
 199 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111949312B]
 200 0004 7047     		bx	lr	@
 201              	.L12:
 202 0006 00BF     		.align	2
 203              	.L11:
 204 0008 00004742 		.word	1111949312
 205              		.cfi_endproc
 206              	.LFE114:
 207              		.size	RCC_HSICmd, .-RCC_HSICmd
 208              		.section	.text.RCC_LSEConfig,"ax",%progbits
 209              		.align	1
 210              		.global	RCC_LSEConfig
 211              		.thumb
 212              		.thumb_func
 213              		.type	RCC_LSEConfig, %function
 214              	RCC_LSEConfig:
 215              	.LFB115:
 352:stm32f4xx_rcc.c **** }
 353:stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc69dDoz.s 			page 11


 354:stm32f4xx_rcc.c **** /**
 355:stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 356:stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 357:stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 358:stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 359:stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 360:stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 361:stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 362:stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 363:stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 364:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 365:stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 366:stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 367:stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 368:stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 369:stm32f4xx_rcc.c ****   * @retval None
 370:stm32f4xx_rcc.c ****   */
 371:stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 372:stm32f4xx_rcc.c **** {
 216              		.loc 1 372 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL6:
 373:stm32f4xx_rcc.c ****   /* Check the parameters */
 374:stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 375:stm32f4xx_rcc.c **** 
 376:stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 377:stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 378:stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 222              		.loc 1 378 0
 223 0000 064B     		ldr	r3, .L18	@ tmp135,
 224 0002 0022     		movs	r2, #0	@ tmp136,
 379:stm32f4xx_rcc.c **** 
 380:stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 381:stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 382:stm32f4xx_rcc.c **** 
 383:stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 384:stm32f4xx_rcc.c ****   switch (RCC_LSE)
 225              		.loc 1 384 0
 226 0004 0128     		cmp	r0, #1	@ RCC_LSE,
 378:stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 227              		.loc 1 378 0
 228 0006 1A70     		strb	r2, [r3, #0]	@ tmp136, MEM[(volatile uint8_t *)1073887344B]
 381:stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 229              		.loc 1 381 0
 230 0008 1A70     		strb	r2, [r3, #0]	@ tmp136, MEM[(volatile uint8_t *)1073887344B]
 231              		.loc 1 384 0
 232 000a 04D0     		beq	.L15	@,
 233 000c 0428     		cmp	r0, #4	@ RCC_LSE,
 234 000e 04D1     		bne	.L13	@,
 385:stm32f4xx_rcc.c ****   {
 386:stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 387:stm32f4xx_rcc.c ****       /* Set LSEON bit */
 388:stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 389:stm32f4xx_rcc.c ****       break;
ARM GAS  /tmp/cc69dDoz.s 			page 12


 390:stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 391:stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 392:stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 235              		.loc 1 392 0
 236 0010 0520     		movs	r0, #5	@ tmp145,
 237              	.LVL7:
 238 0012 1870     		strb	r0, [r3, #0]	@ tmp145, MEM[(volatile uint8_t *)1073887344B]
 393:stm32f4xx_rcc.c ****       break;
 239              		.loc 1 393 0
 240 0014 01E0     		b	.L13	@
 241              	.LVL8:
 242              	.L15:
 388:stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 243              		.loc 1 388 0
 244 0016 1870     		strb	r0, [r3, #0]	@ RCC_LSE, MEM[(volatile uint8_t *)1073887344B]
 389:stm32f4xx_rcc.c ****       break;
 245              		.loc 1 389 0
 246 0018 7047     		bx	lr	@
 247              	.LVL9:
 248              	.L13:
 249 001a 7047     		bx	lr	@
 250              	.L19:
 251              		.align	2
 252              	.L18:
 253 001c 70380240 		.word	1073887344
 254              		.cfi_endproc
 255              	.LFE115:
 256              		.size	RCC_LSEConfig, .-RCC_LSEConfig
 257              		.section	.text.RCC_LSICmd,"ax",%progbits
 258              		.align	1
 259              		.global	RCC_LSICmd
 260              		.thumb
 261              		.thumb_func
 262              		.type	RCC_LSICmd, %function
 263              	RCC_LSICmd:
 264              	.LFB116:
 394:stm32f4xx_rcc.c ****     default:
 395:stm32f4xx_rcc.c ****       break;
 396:stm32f4xx_rcc.c ****   }
 397:stm32f4xx_rcc.c **** }
 398:stm32f4xx_rcc.c **** 
 399:stm32f4xx_rcc.c **** /**
 400:stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 401:stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 402:stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 403:stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 404:stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 405:stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 406:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 407:stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 408:stm32f4xx_rcc.c ****   *         clock cycles. 
 409:stm32f4xx_rcc.c ****   * @retval None
 410:stm32f4xx_rcc.c ****   */
 411:stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 412:stm32f4xx_rcc.c **** {
 265              		.loc 1 412 0
 266              		.cfi_startproc
ARM GAS  /tmp/cc69dDoz.s 			page 13


 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270              	.LVL10:
 413:stm32f4xx_rcc.c ****   /* Check the parameters */
 414:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 415:stm32f4xx_rcc.c **** 
 416:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 271              		.loc 1 416 0
 272 0000 014B     		ldr	r3, .L21	@ tmp136,
 273 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111953024B]
 274 0004 7047     		bx	lr	@
 275              	.L22:
 276 0006 00BF     		.align	2
 277              	.L21:
 278 0008 800E4742 		.word	1111953024
 279              		.cfi_endproc
 280              	.LFE116:
 281              		.size	RCC_LSICmd, .-RCC_LSICmd
 282              		.section	.text.RCC_PLLConfig,"ax",%progbits
 283              		.align	1
 284              		.global	RCC_PLLConfig
 285              		.thumb
 286              		.thumb_func
 287              		.type	RCC_PLLConfig, %function
 288              	RCC_PLLConfig:
 289              	.LFB117:
 417:stm32f4xx_rcc.c **** }
 418:stm32f4xx_rcc.c **** 
 419:stm32f4xx_rcc.c **** /**
 420:stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 421:stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 422:stm32f4xx_rcc.c ****   *  
 423:stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 424:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 425:stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 426:stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 427:stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 428:stm32f4xx_rcc.c ****   *  
 429:stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 430:stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 431:stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 432:stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 433:stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 434:stm32f4xx_rcc.c ****   *  
 435:stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 436:stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 437:stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 438:stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 439:stm32f4xx_rcc.c ****   *   
 440:stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 441:stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 442:stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 443:stm32f4xx_rcc.c ****   *         the System clock frequency.
 444:stm32f4xx_rcc.c ****   *  
 445:stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 446:stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
ARM GAS  /tmp/cc69dDoz.s 			page 14


 447:stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 448:stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 449:stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 450:stm32f4xx_rcc.c ****   *         correctly.
 451:stm32f4xx_rcc.c ****   *   
 452:stm32f4xx_rcc.c ****   * @retval None
 453:stm32f4xx_rcc.c ****   */
 454:stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 455:stm32f4xx_rcc.c **** {
 290              		.loc 1 455 0
 291              		.cfi_startproc
 292              		@ args = 4, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL11:
 295 0000 10B5     		push	{r4, lr}	@
 296              	.LCFI0:
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 4, -8
 299              		.cfi_offset 14, -4
 456:stm32f4xx_rcc.c ****   /* Check the parameters */
 457:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 458:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 459:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 460:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 461:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 462:stm32f4xx_rcc.c **** 
 463:stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 300              		.loc 1 463 0
 301 0002 0143     		orrs	r1, r1, r0	@, tmp148, PLLM, RCC_PLLSource
 302              	.LVL12:
 303 0004 029C     		ldr	r4, [sp, #8]	@ PLLQ, PLLQ
 304 0006 41EA8212 		orr	r2, r1, r2, lsl #6	@, tmp150, tmp148, PLLN,
 305              	.LVL13:
 306 000a 5B08     		lsrs	r3, r3, #1	@ tmp153, PLLP,
 307              	.LVL14:
 308 000c 42EA0460 		orr	r0, r2, r4, lsl #24	@, tmp152, tmp150, PLLQ,
 309              	.LVL15:
 310 0010 591E     		subs	r1, r3, #1	@ tmp154, tmp153,
 311 0012 024A     		ldr	r2, .L24	@ tmp156,
 312 0014 40EA0144 		orr	r4, r0, r1, lsl #16	@, D.6353, tmp152, tmp154,
 313 0018 5460     		str	r4, [r2, #4]	@ D.6353, MEM[(struct RCC_TypeDef *)1073887232B].PLLCFGR
 314 001a 10BD     		pop	{r4, pc}	@
 315              	.L25:
 316              		.align	2
 317              	.L24:
 318 001c 00380240 		.word	1073887232
 319              		.cfi_endproc
 320              	.LFE117:
 321              		.size	RCC_PLLConfig, .-RCC_PLLConfig
 322              		.section	.text.RCC_PLLCmd,"ax",%progbits
 323              		.align	1
 324              		.global	RCC_PLLCmd
 325              		.thumb
 326              		.thumb_func
 327              		.type	RCC_PLLCmd, %function
 328              	RCC_PLLCmd:
 329              	.LFB118:
ARM GAS  /tmp/cc69dDoz.s 			page 15


 464:stm32f4xx_rcc.c ****                  (PLLQ << 24);
 465:stm32f4xx_rcc.c **** }
 466:stm32f4xx_rcc.c **** 
 467:stm32f4xx_rcc.c **** /**
 468:stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 469:stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 470:stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 471:stm32f4xx_rcc.c ****   *         be used as system clock source.
 472:stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 473:stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 474:stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 475:stm32f4xx_rcc.c ****   * @retval None
 476:stm32f4xx_rcc.c ****   */
 477:stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 478:stm32f4xx_rcc.c **** {
 330              		.loc 1 478 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335              	.LVL16:
 479:stm32f4xx_rcc.c ****   /* Check the parameters */
 480:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 481:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 336              		.loc 1 481 0
 337 0000 014B     		ldr	r3, .L27	@ tmp136,
 338 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111949408B]
 339 0004 7047     		bx	lr	@
 340              	.L28:
 341 0006 00BF     		.align	2
 342              	.L27:
 343 0008 60004742 		.word	1111949408
 344              		.cfi_endproc
 345              	.LFE118:
 346              		.size	RCC_PLLCmd, .-RCC_PLLCmd
 347              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 348              		.align	1
 349              		.global	RCC_PLLI2SConfig
 350              		.thumb
 351              		.thumb_func
 352              		.type	RCC_PLLI2SConfig, %function
 353              	RCC_PLLI2SConfig:
 354              	.LFB119:
 482:stm32f4xx_rcc.c **** }
 483:stm32f4xx_rcc.c **** 
 484:stm32f4xx_rcc.c **** /**
 485:stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 486:stm32f4xx_rcc.c ****   *  
 487:stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 488:stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 489:stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 490:stm32f4xx_rcc.c ****   *             
 491:stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 492:stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 493:stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 494:stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 495:stm32f4xx_rcc.c ****   *    
ARM GAS  /tmp/cc69dDoz.s 			page 16


 496:stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 497:stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 498:stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 499:stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 500:stm32f4xx_rcc.c ****   *   
 501:stm32f4xx_rcc.c ****   * @retval None
 502:stm32f4xx_rcc.c ****   */
 503:stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 504:stm32f4xx_rcc.c **** {
 355              		.loc 1 504 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 360              	.LVL17:
 505:stm32f4xx_rcc.c ****   /* Check the parameters */
 506:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 507:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 508:stm32f4xx_rcc.c **** 
 509:stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 361              		.loc 1 509 0
 362 0000 8001     		lsls	r0, r0, #6	@ tmp140, PLLI2SN,
 363              	.LVL18:
 364 0002 034B     		ldr	r3, .L30	@ tmp141,
 365 0004 40EA0171 		orr	r1, r0, r1, lsl #28	@, D.6341, tmp140, PLLI2SR,
 366              	.LVL19:
 367 0008 C3F88410 		str	r1, [r3, #132]	@ D.6341, MEM[(struct RCC_TypeDef *)1073887232B].PLLI2SCFGR
 368 000c 7047     		bx	lr	@
 369              	.L31:
 370 000e 00BF     		.align	2
 371              	.L30:
 372 0010 00380240 		.word	1073887232
 373              		.cfi_endproc
 374              	.LFE119:
 375              		.size	RCC_PLLI2SConfig, .-RCC_PLLI2SConfig
 376              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 377              		.align	1
 378              		.global	RCC_PLLI2SCmd
 379              		.thumb
 380              		.thumb_func
 381              		.type	RCC_PLLI2SCmd, %function
 382              	RCC_PLLI2SCmd:
 383              	.LFB120:
 510:stm32f4xx_rcc.c **** }
 511:stm32f4xx_rcc.c **** 
 512:stm32f4xx_rcc.c **** /**
 513:stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 514:stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 515:stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 516:stm32f4xx_rcc.c ****   * @retval None
 517:stm32f4xx_rcc.c ****   */
 518:stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 519:stm32f4xx_rcc.c **** {
 384              		.loc 1 519 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc69dDoz.s 			page 17


 388              		@ link register save eliminated.
 389              	.LVL20:
 520:stm32f4xx_rcc.c ****   /* Check the parameters */
 521:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 390              		.loc 1 522 0
 391 0000 014B     		ldr	r3, .L33	@ tmp136,
 392 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111949416B]
 393 0004 7047     		bx	lr	@
 394              	.L34:
 395 0006 00BF     		.align	2
 396              	.L33:
 397 0008 68004742 		.word	1111949416
 398              		.cfi_endproc
 399              	.LFE120:
 400              		.size	RCC_PLLI2SCmd, .-RCC_PLLI2SCmd
 401              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 402              		.align	1
 403              		.global	RCC_ClockSecuritySystemCmd
 404              		.thumb
 405              		.thumb_func
 406              		.type	RCC_ClockSecuritySystemCmd, %function
 407              	RCC_ClockSecuritySystemCmd:
 408              	.LFB121:
 523:stm32f4xx_rcc.c **** }
 524:stm32f4xx_rcc.c **** 
 525:stm32f4xx_rcc.c **** /**
 526:stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 527:stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 528:stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 529:stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 530:stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 531:stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 532:stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 533:stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 534:stm32f4xx_rcc.c ****   * @retval None
 535:stm32f4xx_rcc.c ****   */
 536:stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 537:stm32f4xx_rcc.c **** {
 409              		.loc 1 537 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		@ link register save eliminated.
 414              	.LVL21:
 538:stm32f4xx_rcc.c ****   /* Check the parameters */
 539:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 415              		.loc 1 540 0
 416 0000 014B     		ldr	r3, .L36	@ tmp136,
 417 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111949388B]
 418 0004 7047     		bx	lr	@
 419              	.L37:
 420 0006 00BF     		.align	2
 421              	.L36:
 422 0008 4C004742 		.word	1111949388
 423              		.cfi_endproc
ARM GAS  /tmp/cc69dDoz.s 			page 18


 424              	.LFE121:
 425              		.size	RCC_ClockSecuritySystemCmd, .-RCC_ClockSecuritySystemCmd
 426              		.section	.text.RCC_MCO1Config,"ax",%progbits
 427              		.align	1
 428              		.global	RCC_MCO1Config
 429              		.thumb
 430              		.thumb_func
 431              		.type	RCC_MCO1Config, %function
 432              	RCC_MCO1Config:
 433              	.LFB122:
 541:stm32f4xx_rcc.c **** }
 542:stm32f4xx_rcc.c **** 
 543:stm32f4xx_rcc.c **** /**
 544:stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 545:stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 546:stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 547:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 548:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 549:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 550:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 551:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 552:stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 553:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 554:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 555:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 556:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 557:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 558:stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 559:stm32f4xx_rcc.c ****   * @retval None
 560:stm32f4xx_rcc.c ****   */
 561:stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 562:stm32f4xx_rcc.c **** {
 434              		.loc 1 562 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439              	.LVL22:
 563:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 564:stm32f4xx_rcc.c ****   
 565:stm32f4xx_rcc.c ****   /* Check the parameters */
 566:stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 567:stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 568:stm32f4xx_rcc.c **** 
 569:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 440              		.loc 1 569 0
 441 0000 034B     		ldr	r3, .L39	@ tmp140,
 442 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 443              	.LVL23:
 570:stm32f4xx_rcc.c **** 
 571:stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 572:stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 444              		.loc 1 572 0
 445 0004 22F0EC62 		bic	r2, r2, #123731968	@ tmp141, tmpreg,
 446              	.LVL24:
 573:stm32f4xx_rcc.c **** 
 574:stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
ARM GAS  /tmp/cc69dDoz.s 			page 19


 575:stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 447              		.loc 1 575 0
 448 0008 1043     		orrs	r0, r0, r2	@, D.6333, RCC_MCO1Source, tmp141
 449              	.LVL25:
 450 000a 0143     		orrs	r1, r1, r0	@, tmpreg, RCC_MCO1Div, D.6333
 451              	.LVL26:
 576:stm32f4xx_rcc.c **** 
 577:stm32f4xx_rcc.c ****   /* Store the new value */
 578:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 452              		.loc 1 578 0
 453 000c 9960     		str	r1, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 454 000e 7047     		bx	lr	@
 455              	.L40:
 456              		.align	2
 457              	.L39:
 458 0010 00380240 		.word	1073887232
 459              		.cfi_endproc
 460              	.LFE122:
 461              		.size	RCC_MCO1Config, .-RCC_MCO1Config
 462              		.section	.text.RCC_MCO2Config,"ax",%progbits
 463              		.align	1
 464              		.global	RCC_MCO2Config
 465              		.thumb
 466              		.thumb_func
 467              		.type	RCC_MCO2Config, %function
 468              	RCC_MCO2Config:
 469              	.LFB123:
 579:stm32f4xx_rcc.c **** }
 580:stm32f4xx_rcc.c **** 
 581:stm32f4xx_rcc.c **** /**
 582:stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 583:stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 584:stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 585:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 586:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 587:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 588:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 589:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 590:stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 591:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 592:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 593:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 594:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 595:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 596:stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 597:stm32f4xx_rcc.c ****   * @retval None
 598:stm32f4xx_rcc.c ****   */
 599:stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 600:stm32f4xx_rcc.c **** {
 470              		.loc 1 600 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474              		@ link register save eliminated.
 475              	.LVL27:
 601:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 602:stm32f4xx_rcc.c ****   
ARM GAS  /tmp/cc69dDoz.s 			page 20


 603:stm32f4xx_rcc.c ****   /* Check the parameters */
 604:stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 605:stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 606:stm32f4xx_rcc.c ****   
 607:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 476              		.loc 1 607 0
 477 0000 034B     		ldr	r3, .L42	@ tmp140,
 478 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 479              	.LVL28:
 608:stm32f4xx_rcc.c ****   
 609:stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 610:stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 480              		.loc 1 610 0
 481 0004 22F07842 		bic	r2, r2, #-134217728	@ tmp141, tmpreg,
 482              	.LVL29:
 611:stm32f4xx_rcc.c **** 
 612:stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 613:stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 483              		.loc 1 613 0
 484 0008 1043     		orrs	r0, r0, r2	@, D.6331, RCC_MCO2Source, tmp141
 485              	.LVL30:
 486 000a 0143     		orrs	r1, r1, r0	@, tmpreg, RCC_MCO2Div, D.6331
 487              	.LVL31:
 614:stm32f4xx_rcc.c **** 
 615:stm32f4xx_rcc.c ****   /* Store the new value */
 616:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 488              		.loc 1 616 0
 489 000c 9960     		str	r1, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 490 000e 7047     		bx	lr	@
 491              	.L43:
 492              		.align	2
 493              	.L42:
 494 0010 00380240 		.word	1073887232
 495              		.cfi_endproc
 496              	.LFE123:
 497              		.size	RCC_MCO2Config, .-RCC_MCO2Config
 498              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 499              		.align	1
 500              		.global	RCC_SYSCLKConfig
 501              		.thumb
 502              		.thumb_func
 503              		.type	RCC_SYSCLKConfig, %function
 504              	RCC_SYSCLKConfig:
 505              	.LFB124:
 617:stm32f4xx_rcc.c **** }
 618:stm32f4xx_rcc.c **** 
 619:stm32f4xx_rcc.c **** /**
 620:stm32f4xx_rcc.c ****   * @}
 621:stm32f4xx_rcc.c ****   */
 622:stm32f4xx_rcc.c **** 
 623:stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 624:stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 625:stm32f4xx_rcc.c ****  *
 626:stm32f4xx_rcc.c **** @verbatim   
 627:stm32f4xx_rcc.c ****  ===============================================================================
 628:stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 629:stm32f4xx_rcc.c ****  ===============================================================================  
ARM GAS  /tmp/cc69dDoz.s 			page 21


 630:stm32f4xx_rcc.c ****     [..]
 631:stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 632:stm32f4xx_rcc.c ****       APB2 busses clocks.
 633:stm32f4xx_rcc.c ****   
 634:stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 635:stm32f4xx_rcc.c ****           HSE and PLL.
 636:stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 637:stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 638:stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 639:stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 640:stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 641:stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 642:stm32f4xx_rcc.c **** 
 643:stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 644:stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 645:stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 646:stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 647:stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 648:stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 649:stm32f4xx_rcc.c ****              functions to configure this clock. 
 650:stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 651:stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 652:stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 653:stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 654:stm32f4xx_rcc.c ****        
 655:stm32f4xx_rcc.c ****       (#) The maximum frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz 
 656:stm32f4xx_rcc.c ****           and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 657:stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 658:stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 659:stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 660:stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 661:stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 662:stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 663:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 664:stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 665:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 666:stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 667:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 668:stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 669:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 670:stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 671:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 672:stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 673:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 674:stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 168|120< HCLK <= 144|90 < HCLK <= 108 |80 < HCLK <= 96  | 
 675:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 676:stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|108 < HCLK <= 120|96 < HCLK <= 112 | 
 677:stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 678:stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |120 < HCLK <= 138|112 < HCLK <= 120| 
 679:stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 680:stm32f4xx_rcc.c ****       -@- When VOS bits (in PWR_CR register) is reset to 0 , the maximum value of HCLK is 144 MHz.
 681:stm32f4xx_rcc.c ****           You can use PWR_MainRegulatorModeConfig() function to set or reset this bit.
 682:stm32f4xx_rcc.c **** 
 683:stm32f4xx_rcc.c **** @endverbatim
 684:stm32f4xx_rcc.c ****   * @{
 685:stm32f4xx_rcc.c ****   */
 686:stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc69dDoz.s 			page 22


 687:stm32f4xx_rcc.c **** /**
 688:stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 689:stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 690:stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 691:stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 692:stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 693:stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 694:stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 695:stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 696:stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 697:stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 698:stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 699:stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 700:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 701:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 702:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 703:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 704:stm32f4xx_rcc.c ****   * @retval None
 705:stm32f4xx_rcc.c ****   */
 706:stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 707:stm32f4xx_rcc.c **** {
 506              		.loc 1 707 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511              	.LVL32:
 708:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 709:stm32f4xx_rcc.c **** 
 710:stm32f4xx_rcc.c ****   /* Check the parameters */
 711:stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 712:stm32f4xx_rcc.c **** 
 713:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 512              		.loc 1 713 0
 513 0000 034B     		ldr	r3, .L45	@ tmp138,
 514 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 515              	.LVL33:
 714:stm32f4xx_rcc.c **** 
 715:stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 716:stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 516              		.loc 1 716 0
 517 0004 22F00301 		bic	r1, r2, #3	@ tmpreg, tmpreg,
 518              	.LVL34:
 717:stm32f4xx_rcc.c **** 
 718:stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 719:stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 519              		.loc 1 719 0
 520 0008 0843     		orrs	r0, r0, r1	@, tmpreg, RCC_SYSCLKSource, tmpreg
 521              	.LVL35:
 720:stm32f4xx_rcc.c **** 
 721:stm32f4xx_rcc.c ****   /* Store the new value */
 722:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 522              		.loc 1 722 0
 523 000a 9860     		str	r0, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 524 000c 7047     		bx	lr	@
 525              	.L46:
 526 000e 00BF     		.align	2
ARM GAS  /tmp/cc69dDoz.s 			page 23


 527              	.L45:
 528 0010 00380240 		.word	1073887232
 529              		.cfi_endproc
 530              	.LFE124:
 531              		.size	RCC_SYSCLKConfig, .-RCC_SYSCLKConfig
 532              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 533              		.align	1
 534              		.global	RCC_GetSYSCLKSource
 535              		.thumb
 536              		.thumb_func
 537              		.type	RCC_GetSYSCLKSource, %function
 538              	RCC_GetSYSCLKSource:
 539              	.LFB125:
 723:stm32f4xx_rcc.c **** }
 724:stm32f4xx_rcc.c **** 
 725:stm32f4xx_rcc.c **** /**
 726:stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 727:stm32f4xx_rcc.c ****   * @param  None
 728:stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 729:stm32f4xx_rcc.c ****   *         of the following:
 730:stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 731:stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 732:stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 733:stm32f4xx_rcc.c ****   */
 734:stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 735:stm32f4xx_rcc.c **** {
 540              		.loc 1 735 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 736:stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 545              		.loc 1 736 0
 546 0000 024B     		ldr	r3, .L48	@ tmp138,
 547 0002 9868     		ldr	r0, [r3, #8]	@ D.6326, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 737:stm32f4xx_rcc.c **** }
 548              		.loc 1 737 0
 549 0004 00F00C00 		and	r0, r0, #12	@, D.6326,
 550 0008 7047     		bx	lr	@
 551              	.L49:
 552 000a 00BF     		.align	2
 553              	.L48:
 554 000c 00380240 		.word	1073887232
 555              		.cfi_endproc
 556              	.LFE125:
 557              		.size	RCC_GetSYSCLKSource, .-RCC_GetSYSCLKSource
 558              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 559              		.align	1
 560              		.global	RCC_HCLKConfig
 561              		.thumb
 562              		.thumb_func
 563              		.type	RCC_HCLKConfig, %function
 564              	RCC_HCLKConfig:
 565              	.LFB126:
 738:stm32f4xx_rcc.c **** 
 739:stm32f4xx_rcc.c **** /**
 740:stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
ARM GAS  /tmp/cc69dDoz.s 			page 24


 741:stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 742:stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 743:stm32f4xx_rcc.c ****   *         (for more details refer to section above
 744:stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 745:stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 746:stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 747:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 748:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 749:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 750:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 751:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 752:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 753:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 754:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 755:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 756:stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 757:stm32f4xx_rcc.c ****   * @retval None
 758:stm32f4xx_rcc.c ****   */
 759:stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 760:stm32f4xx_rcc.c **** {
 566              		.loc 1 760 0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571              	.LVL36:
 761:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 762:stm32f4xx_rcc.c ****   
 763:stm32f4xx_rcc.c ****   /* Check the parameters */
 764:stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 765:stm32f4xx_rcc.c **** 
 766:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 572              		.loc 1 766 0
 573 0000 034B     		ldr	r3, .L51	@ tmp138,
 574 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 575              	.LVL37:
 767:stm32f4xx_rcc.c **** 
 768:stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 769:stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 576              		.loc 1 769 0
 577 0004 22F0F001 		bic	r1, r2, #240	@ tmpreg, tmpreg,
 578              	.LVL38:
 770:stm32f4xx_rcc.c **** 
 771:stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 772:stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 579              		.loc 1 772 0
 580 0008 0843     		orrs	r0, r0, r1	@, tmpreg, RCC_SYSCLK, tmpreg
 581              	.LVL39:
 773:stm32f4xx_rcc.c **** 
 774:stm32f4xx_rcc.c ****   /* Store the new value */
 775:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 582              		.loc 1 775 0
 583 000a 9860     		str	r0, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 584 000c 7047     		bx	lr	@
 585              	.L52:
 586 000e 00BF     		.align	2
 587              	.L51:
ARM GAS  /tmp/cc69dDoz.s 			page 25


 588 0010 00380240 		.word	1073887232
 589              		.cfi_endproc
 590              	.LFE126:
 591              		.size	RCC_HCLKConfig, .-RCC_HCLKConfig
 592              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 593              		.align	1
 594              		.global	RCC_PCLK1Config
 595              		.thumb
 596              		.thumb_func
 597              		.type	RCC_PCLK1Config, %function
 598              	RCC_PCLK1Config:
 599              	.LFB127:
 776:stm32f4xx_rcc.c **** }
 777:stm32f4xx_rcc.c **** 
 778:stm32f4xx_rcc.c **** 
 779:stm32f4xx_rcc.c **** /**
 780:stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 781:stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 782:stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 783:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 784:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 785:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 786:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 787:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 788:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 789:stm32f4xx_rcc.c ****   * @retval None
 790:stm32f4xx_rcc.c ****   */
 791:stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 792:stm32f4xx_rcc.c **** {
 600              		.loc 1 792 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 605              	.LVL40:
 793:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 794:stm32f4xx_rcc.c **** 
 795:stm32f4xx_rcc.c ****   /* Check the parameters */
 796:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 797:stm32f4xx_rcc.c **** 
 798:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 606              		.loc 1 798 0
 607 0000 034B     		ldr	r3, .L54	@ tmp138,
 608 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 609              	.LVL41:
 799:stm32f4xx_rcc.c **** 
 800:stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 801:stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 610              		.loc 1 801 0
 611 0004 22F4E051 		bic	r1, r2, #7168	@ tmpreg, tmpreg,
 612              	.LVL42:
 802:stm32f4xx_rcc.c **** 
 803:stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 804:stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 613              		.loc 1 804 0
 614 0008 0843     		orrs	r0, r0, r1	@, tmpreg, RCC_HCLK, tmpreg
 615              	.LVL43:
ARM GAS  /tmp/cc69dDoz.s 			page 26


 805:stm32f4xx_rcc.c **** 
 806:stm32f4xx_rcc.c ****   /* Store the new value */
 807:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 616              		.loc 1 807 0
 617 000a 9860     		str	r0, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 618 000c 7047     		bx	lr	@
 619              	.L55:
 620 000e 00BF     		.align	2
 621              	.L54:
 622 0010 00380240 		.word	1073887232
 623              		.cfi_endproc
 624              	.LFE127:
 625              		.size	RCC_PCLK1Config, .-RCC_PCLK1Config
 626              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 627              		.align	1
 628              		.global	RCC_PCLK2Config
 629              		.thumb
 630              		.thumb_func
 631              		.type	RCC_PCLK2Config, %function
 632              	RCC_PCLK2Config:
 633              	.LFB128:
 808:stm32f4xx_rcc.c **** }
 809:stm32f4xx_rcc.c **** 
 810:stm32f4xx_rcc.c **** /**
 811:stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 812:stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 813:stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 814:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 815:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 816:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 817:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 818:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 819:stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 820:stm32f4xx_rcc.c ****   * @retval None
 821:stm32f4xx_rcc.c ****   */
 822:stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 823:stm32f4xx_rcc.c **** {
 634              		.loc 1 823 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639              	.LVL44:
 824:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 825:stm32f4xx_rcc.c **** 
 826:stm32f4xx_rcc.c ****   /* Check the parameters */
 827:stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 828:stm32f4xx_rcc.c **** 
 829:stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 640              		.loc 1 829 0
 641 0000 034B     		ldr	r3, .L57	@ tmp139,
 642 0002 9A68     		ldr	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 643              	.LVL45:
 830:stm32f4xx_rcc.c **** 
 831:stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 832:stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 644              		.loc 1 832 0
ARM GAS  /tmp/cc69dDoz.s 			page 27


 645 0004 22F46041 		bic	r1, r2, #57344	@ tmpreg, tmpreg,
 646              	.LVL46:
 833:stm32f4xx_rcc.c **** 
 834:stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 835:stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 647              		.loc 1 835 0
 648 0008 41EAC000 		orr	r0, r1, r0, lsl #3	@, tmpreg, tmpreg, RCC_HCLK,
 649              	.LVL47:
 836:stm32f4xx_rcc.c **** 
 837:stm32f4xx_rcc.c ****   /* Store the new value */
 838:stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 650              		.loc 1 838 0
 651 000c 9860     		str	r0, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 652 000e 7047     		bx	lr	@
 653              	.L58:
 654              		.align	2
 655              	.L57:
 656 0010 00380240 		.word	1073887232
 657              		.cfi_endproc
 658              	.LFE128:
 659              		.size	RCC_PCLK2Config, .-RCC_PCLK2Config
 660              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 661              		.align	1
 662              		.global	RCC_GetClocksFreq
 663              		.thumb
 664              		.thumb_func
 665              		.type	RCC_GetClocksFreq, %function
 666              	RCC_GetClocksFreq:
 667              	.LFB129:
 839:stm32f4xx_rcc.c **** }
 840:stm32f4xx_rcc.c **** 
 841:stm32f4xx_rcc.c **** /**
 842:stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 843:stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 844:stm32f4xx_rcc.c ****   * 
 845:stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 846:stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 847:stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 848:stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 849:stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 850:stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 851:stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 852:stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 853:stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 854:stm32f4xx_rcc.c ****   *               in voltage and temperature.
 855:stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 856:stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 857:stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 858:stm32f4xx_rcc.c ****   *                have wrong result.
 859:stm32f4xx_rcc.c ****   *                
 860:stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 861:stm32f4xx_rcc.c ****   *         value for HSE crystal.
 862:stm32f4xx_rcc.c ****   *   
 863:stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 864:stm32f4xx_rcc.c ****   *          the clocks frequencies.
 865:stm32f4xx_rcc.c ****   *     
 866:stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
ARM GAS  /tmp/cc69dDoz.s 			page 28


 867:stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 868:stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 869:stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 870:stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 871:stm32f4xx_rcc.c ****   *    
 872:stm32f4xx_rcc.c ****   * @retval None
 873:stm32f4xx_rcc.c ****   */
 874:stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 875:stm32f4xx_rcc.c **** {
 668              		.loc 1 875 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              	.LVL48:
 876:stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 877:stm32f4xx_rcc.c **** 
 878:stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 879:stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 673              		.loc 1 879 0
 674 0000 1E4B     		ldr	r3, .L69	@ tmp176,
 675 0002 9A68     		ldr	r2, [r3, #8]	@ D.6289, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 676              	.LVL49:
 677 0004 02F00C01 		and	r1, r2, #12	@ tmp177, D.6289,
 678              	.LVL50:
 880:stm32f4xx_rcc.c **** 
 881:stm32f4xx_rcc.c ****   switch (tmp)
 679              		.loc 1 881 0
 680 0008 0429     		cmp	r1, #4	@ tmp177,
 875:stm32f4xx_rcc.c **** {
 681              		.loc 1 875 0
 682 000a 10B5     		push	{r4, lr}	@
 683              	.LCFI1:
 684              		.cfi_def_cfa_offset 8
 685              		.cfi_offset 4, -8
 686              		.cfi_offset 14, -4
 687              		.loc 1 881 0
 688 000c 03D0     		beq	.L62	@,
 689 000e 0829     		cmp	r1, #8	@ tmp177,
 690 0010 03D0     		beq	.L63	@,
 691 0012 1B4B     		ldr	r3, .L69+4	@ tmp223,
 692 0014 18E0     		b	.L68	@
 693              	.L62:
 882:stm32f4xx_rcc.c ****   {
 883:stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 884:stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 885:stm32f4xx_rcc.c ****       break;
 886:stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 887:stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 694              		.loc 1 887 0
 695 0016 1B4B     		ldr	r3, .L69+8	@ tmp179,
 696 0018 16E0     		b	.L68	@
 697              	.L63:
 888:stm32f4xx_rcc.c ****       break;
 889:stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 890:stm32f4xx_rcc.c **** 
 891:stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 892:stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
ARM GAS  /tmp/cc69dDoz.s 			page 29


 893:stm32f4xx_rcc.c ****          */    
 894:stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 698              		.loc 1 894 0
 699 001a 5C68     		ldr	r4, [r3, #4]	@ D.6290, MEM[(struct RCC_TypeDef *)1073887232B].PLLCFGR
 700              	.LVL51:
 895:stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 701              		.loc 1 895 0
 702 001c 5A68     		ldr	r2, [r3, #4]	@ D.6292, MEM[(struct RCC_TypeDef *)1073887232B].PLLCFGR
 896:stm32f4xx_rcc.c ****       
 897:stm32f4xx_rcc.c ****       if (pllsource != 0)
 898:stm32f4xx_rcc.c ****       {
 899:stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 900:stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 703              		.loc 1 900 0
 704 001e 5968     		ldr	r1, [r3, #4]	@ D.6296,
 705              	.LVL52:
 897:stm32f4xx_rcc.c ****       if (pllsource != 0)
 706              		.loc 1 897 0
 707 0020 14F4800F 		tst	r4, #4194304	@ D.6290,
 708              		.loc 1 900 0
 709 0024 14BF     		ite	ne
 710 0026 174B     		ldrne	r3, .L69+8	@ tmp190,
 901:stm32f4xx_rcc.c ****       }
 902:stm32f4xx_rcc.c ****       else
 903:stm32f4xx_rcc.c ****       {
 904:stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 905:stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 711              		.loc 1 905 0
 712 0028 154B     		ldreq	r3, .L69+4	@ tmp197,
 895:stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 713              		.loc 1 895 0
 714 002a 02F03F02 		and	r2, r2, #63	@ pllm, D.6292,
 715              	.LVL53:
 716              		.loc 1 905 0
 717 002e B3FBF2F3 		udiv	r3, r3, r2	@ tmp196, tmp197, pllm
 906:stm32f4xx_rcc.c ****       }
 907:stm32f4xx_rcc.c **** 
 908:stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 718              		.loc 1 908 0
 719 0032 124A     		ldr	r2, .L69	@ tmp198,
 720              	.LVL54:
 900:stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 721              		.loc 1 900 0
 722 0034 C1F38814 		ubfx	r4, r1, #6, #9	@ tmp187, D.6296,,
 723              	.LVL55:
 724              		.loc 1 908 0
 725 0038 5168     		ldr	r1, [r2, #4]	@ D.6304, MEM[(struct RCC_TypeDef *)1073887232B].PLLCFGR
 905:stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 726              		.loc 1 905 0
 727 003a 6343     		muls	r3, r4, r3	@ pllvco, tmp194
 728              	.LVL56:
 729              		.loc 1 908 0
 730 003c C1F30144 		ubfx	r4, r1, #16, #2	@ tmp200, D.6304,,
 731 0040 621C     		adds	r2, r4, #1	@ tmp201, tmp200,
 732 0042 5100     		lsls	r1, r2, #1	@ tmp202, tmp201,
 733              	.LVL57:
 909:stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
ARM GAS  /tmp/cc69dDoz.s 			page 30


 734              		.loc 1 909 0
 735 0044 B3FBF1F3 		udiv	r3, r3, r1	@ tmp203, pllvco, tmp202
 736              	.LVL58:
 737              	.L68:
 910:stm32f4xx_rcc.c ****       break;
 911:stm32f4xx_rcc.c ****     default:
 912:stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 913:stm32f4xx_rcc.c ****       break;
 914:stm32f4xx_rcc.c ****   }
 915:stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 916:stm32f4xx_rcc.c **** 
 917:stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 918:stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 738              		.loc 1 918 0
 739 0048 0C49     		ldr	r1, .L69	@ tmp205,
 909:stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 740              		.loc 1 909 0
 741 004a 0360     		str	r3, [r0, #0]	@ tmp203, RCC_Clocks_11(D)->SYSCLK_Frequency
 742              		.loc 1 918 0
 743 004c 8C68     		ldr	r4, [r1, #8]	@ D.6309, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 744              	.LVL59:
 919:stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 920:stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 745              		.loc 1 920 0
 746 004e 0E4A     		ldr	r2, .L69+12	@ tmp206,
 919:stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 747              		.loc 1 919 0
 748 0050 C4F30313 		ubfx	r3, r4, #4, #4	@ tmp, D.6309,,
 749              	.LVL60:
 750              		.loc 1 920 0
 751 0054 D45C     		ldrb	r4, [r2, r3]	@ zero_extendqisi2	@ tmp209, APBAHBPrescTable
 752              	.LVL61:
 921:stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 922:stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 753              		.loc 1 922 0
 754 0056 0368     		ldr	r3, [r0, #0]	@ RCC_Clocks_11(D)->SYSCLK_Frequency, RCC_Clocks_11(D)->SYSCLK_Frequency
 755              	.LVL62:
 756 0058 23FA04F3 		lsr	r3, r3, r4	@ D.6313, RCC_Clocks_11(D)->SYSCLK_Frequency, tmp209
 757 005c 4360     		str	r3, [r0, #4]	@ D.6313, RCC_Clocks_11(D)->HCLK_Frequency
 923:stm32f4xx_rcc.c **** 
 924:stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 925:stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 758              		.loc 1 925 0
 759 005e 8C68     		ldr	r4, [r1, #8]	@ D.6314, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 760              	.LVL63:
 926:stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 761              		.loc 1 926 0
 762 0060 C4F38224 		ubfx	r4, r4, #10, #3	@ tmp, D.6314,,
 763              	.LVL64:
 927:stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 764              		.loc 1 927 0
 765 0064 145D     		ldrb	r4, [r2, r4]	@ zero_extendqisi2	@ tmp215, APBAHBPrescTable
 766              	.LVL65:
 928:stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 929:stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 767              		.loc 1 929 0
 768 0066 23FA04F4 		lsr	r4, r3, r4	@ tmp216, D.6313, tmp215
ARM GAS  /tmp/cc69dDoz.s 			page 31


 769              	.LVL66:
 770 006a 8460     		str	r4, [r0, #8]	@ tmp216, RCC_Clocks_11(D)->PCLK1_Frequency
 930:stm32f4xx_rcc.c **** 
 931:stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 932:stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 771              		.loc 1 932 0
 772 006c 8968     		ldr	r1, [r1, #8]	@ D.6318, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 773              	.LVL67:
 933:stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 774              		.loc 1 933 0
 775 006e C1F34231 		ubfx	r1, r1, #13, #3	@ tmp, D.6318,,
 776              	.LVL68:
 934:stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 777              		.loc 1 934 0
 778 0072 525C     		ldrb	r2, [r2, r1]	@ zero_extendqisi2	@ tmp221, APBAHBPrescTable
 779              	.LVL69:
 935:stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 936:stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 780              		.loc 1 936 0
 781 0074 23FA02F3 		lsr	r3, r3, r2	@ tmp222, D.6313, tmp221
 782 0078 C360     		str	r3, [r0, #12]	@ tmp222, RCC_Clocks_11(D)->PCLK2_Frequency
 783 007a 10BD     		pop	{r4, pc}	@
 784              	.L70:
 785              		.align	2
 786              	.L69:
 787 007c 00380240 		.word	1073887232
 788 0080 0024F400 		.word	16000000
 789 0084 00127A00 		.word	8000000
 790 0088 00000000 		.word	.LANCHOR0
 791              		.cfi_endproc
 792              	.LFE129:
 793              		.size	RCC_GetClocksFreq, .-RCC_GetClocksFreq
 794              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 795              		.align	1
 796              		.global	RCC_RTCCLKConfig
 797              		.thumb
 798              		.thumb_func
 799              		.type	RCC_RTCCLKConfig, %function
 800              	RCC_RTCCLKConfig:
 801              	.LFB130:
 937:stm32f4xx_rcc.c **** }
 938:stm32f4xx_rcc.c **** 
 939:stm32f4xx_rcc.c **** /**
 940:stm32f4xx_rcc.c ****   * @}
 941:stm32f4xx_rcc.c ****   */
 942:stm32f4xx_rcc.c **** 
 943:stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 944:stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 945:stm32f4xx_rcc.c ****  *
 946:stm32f4xx_rcc.c **** @verbatim   
 947:stm32f4xx_rcc.c ****  ===============================================================================
 948:stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
 949:stm32f4xx_rcc.c ****  ===============================================================================  
 950:stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
 951:stm32f4xx_rcc.c ****   
 952:stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
 953:stm32f4xx_rcc.c ****           by 2 to 31.
ARM GAS  /tmp/cc69dDoz.s 			page 32


 954:stm32f4xx_rcc.c ****      
 955:stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
 956:stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
 957:stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
 958:stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 959:stm32f4xx_rcc.c **** 
 960:stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
 961:stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 962:stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
 963:stm32f4xx_rcc.c ****      
 964:stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
 965:stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
 966:stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
 967:stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
 968:stm32f4xx_rcc.c **** 
 969:stm32f4xx_rcc.c **** @endverbatim
 970:stm32f4xx_rcc.c ****   * @{
 971:stm32f4xx_rcc.c ****   */
 972:stm32f4xx_rcc.c **** 
 973:stm32f4xx_rcc.c **** /**
 974:stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 975:stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 976:stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 977:stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 978:stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 979:stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 980:stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 981:stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 982:stm32f4xx_rcc.c ****   *    
 983:stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 984:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 985:stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 986:stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 987:stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 988:stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 989:stm32f4xx_rcc.c ****   *  
 990:stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 991:stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 992:stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 993:stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 994:stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 995:stm32f4xx_rcc.c ****   *         RTC clock source).
 996:stm32f4xx_rcc.c ****   *  
 997:stm32f4xx_rcc.c ****   * @retval None
 998:stm32f4xx_rcc.c ****   */
 999:stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1000:stm32f4xx_rcc.c **** {
 802              		.loc 1 1000 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 807              	.LVL70:
1001:stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1002:stm32f4xx_rcc.c **** 
1003:stm32f4xx_rcc.c ****   /* Check the parameters */
1004:stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
ARM GAS  /tmp/cc69dDoz.s 			page 33


1005:stm32f4xx_rcc.c **** 
1006:stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 808              		.loc 1 1006 0
 809 0000 00F44073 		and	r3, r0, #768	@ tmp143, RCC_RTCCLKSource,
 810 0004 B3F5407F 		cmp	r3, #768	@ tmp143,
 811 0008 084B     		ldr	r3, .L73	@ tmp152,
 812 000a 08D1     		bne	.L72	@,
1007:stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1008:stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 813              		.loc 1 1008 0
 814 000c 9968     		ldr	r1, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 815              	.LVL71:
1009:stm32f4xx_rcc.c **** 
1010:stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1011:stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1012:stm32f4xx_rcc.c **** 
1013:stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1014:stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 816              		.loc 1 1014 0
 817 000e 20F07042 		bic	r2, r0, #-268435456	@ tmp146, RCC_RTCCLKSource,
1011:stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 818              		.loc 1 1011 0
 819 0012 21F4F811 		bic	r1, r1, #2031616	@ tmpreg, tmpreg,
 820              	.LVL72:
 821              		.loc 1 1014 0
 822 0016 22F44072 		bic	r2, r2, #768	@ tmp145, tmp146,
 823 001a 0A43     		orrs	r2, r2, r1	@, tmpreg, tmp145, tmpreg
 824              	.LVL73:
1015:stm32f4xx_rcc.c **** 
1016:stm32f4xx_rcc.c ****     /* Store the new value */
1017:stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 825              		.loc 1 1017 0
 826 001c 9A60     		str	r2, [r3, #8]	@ tmpreg, MEM[(struct RCC_TypeDef *)1073887232B].CFGR
 827              	.LVL74:
 828              	.L72:
1018:stm32f4xx_rcc.c ****   }
1019:stm32f4xx_rcc.c ****     
1020:stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1021:stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 829              		.loc 1 1021 0
 830 001e 196F     		ldr	r1, [r3, #112]	@ D.6285, MEM[(struct RCC_TypeDef *)1073887232B].BDCR
 831 0020 0005     		lsls	r0, r0, #20	@ tmp150, RCC_RTCCLKSource,
 832              	.LVL75:
 833 0022 41EA1052 		orr	r2, r1, r0, lsr #20	@, D.6287, D.6285, tmp150,
 834 0026 1A67     		str	r2, [r3, #112]	@ D.6287, MEM[(struct RCC_TypeDef *)1073887232B].BDCR
 835 0028 7047     		bx	lr	@
 836              	.L74:
 837 002a 00BF     		.align	2
 838              	.L73:
 839 002c 00380240 		.word	1073887232
 840              		.cfi_endproc
 841              	.LFE130:
 842              		.size	RCC_RTCCLKConfig, .-RCC_RTCCLKConfig
 843              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 844              		.align	1
 845              		.global	RCC_RTCCLKCmd
 846              		.thumb
ARM GAS  /tmp/cc69dDoz.s 			page 34


 847              		.thumb_func
 848              		.type	RCC_RTCCLKCmd, %function
 849              	RCC_RTCCLKCmd:
 850              	.LFB131:
1022:stm32f4xx_rcc.c **** }
1023:stm32f4xx_rcc.c **** 
1024:stm32f4xx_rcc.c **** /**
1025:stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1026:stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1027:stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1028:stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1029:stm32f4xx_rcc.c ****   * @retval None
1030:stm32f4xx_rcc.c ****   */
1031:stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1032:stm32f4xx_rcc.c **** {
 851              		.loc 1 1032 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 0
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855              		@ link register save eliminated.
 856              	.LVL76:
1033:stm32f4xx_rcc.c ****   /* Check the parameters */
1034:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1035:stm32f4xx_rcc.c **** 
1036:stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 857              		.loc 1 1036 0
 858 0000 014B     		ldr	r3, .L76	@ tmp136,
 859 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111952956B]
 860 0004 7047     		bx	lr	@
 861              	.L77:
 862 0006 00BF     		.align	2
 863              	.L76:
 864 0008 3C0E4742 		.word	1111952956
 865              		.cfi_endproc
 866              	.LFE131:
 867              		.size	RCC_RTCCLKCmd, .-RCC_RTCCLKCmd
 868              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 869              		.align	1
 870              		.global	RCC_BackupResetCmd
 871              		.thumb
 872              		.thumb_func
 873              		.type	RCC_BackupResetCmd, %function
 874              	RCC_BackupResetCmd:
 875              	.LFB132:
1037:stm32f4xx_rcc.c **** }
1038:stm32f4xx_rcc.c **** 
1039:stm32f4xx_rcc.c **** /**
1040:stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1041:stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1042:stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1043:stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1044:stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1045:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:stm32f4xx_rcc.c ****   * @retval None
1047:stm32f4xx_rcc.c ****   */
1048:stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1049:stm32f4xx_rcc.c **** {
ARM GAS  /tmp/cc69dDoz.s 			page 35


 876              		.loc 1 1049 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881              	.LVL77:
1050:stm32f4xx_rcc.c ****   /* Check the parameters */
1051:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1052:stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 882              		.loc 1 1052 0
 883 0000 014B     		ldr	r3, .L79	@ tmp136,
 884 0002 1860     		str	r0, [r3, #0]	@ NewState, MEM[(volatile uint32_t *)1111952960B]
 885 0004 7047     		bx	lr	@
 886              	.L80:
 887 0006 00BF     		.align	2
 888              	.L79:
 889 0008 400E4742 		.word	1111952960
 890              		.cfi_endproc
 891              	.LFE132:
 892              		.size	RCC_BackupResetCmd, .-RCC_BackupResetCmd
 893              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 894              		.align	1
 895              		.global	RCC_I2SCLKConfig
 896              		.thumb
 897              		.thumb_func
 898              		.type	RCC_I2SCLKConfig, %function
 899              	RCC_I2SCLKConfig:
 900              	.LFB133:
1053:stm32f4xx_rcc.c **** }
1054:stm32f4xx_rcc.c **** 
1055:stm32f4xx_rcc.c **** /**
1056:stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1057:stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1058:stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1059:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1060:stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1061:stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1062:stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1063:stm32f4xx_rcc.c ****   * @retval None
1064:stm32f4xx_rcc.c ****   */
1065:stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1066:stm32f4xx_rcc.c **** {
 901              		.loc 1 1066 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              		@ link register save eliminated.
 906              	.LVL78:
1067:stm32f4xx_rcc.c ****   /* Check the parameters */
1068:stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1069:stm32f4xx_rcc.c **** 
1070:stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 907              		.loc 1 1070 0
 908 0000 014B     		ldr	r3, .L82	@ tmp135,
 909 0002 1860     		str	r0, [r3, #0]	@ RCC_I2SCLKSource, MEM[(volatile uint32_t *)1111949660B]
 910 0004 7047     		bx	lr	@
 911              	.L83:
ARM GAS  /tmp/cc69dDoz.s 			page 36


 912 0006 00BF     		.align	2
 913              	.L82:
 914 0008 5C014742 		.word	1111949660
 915              		.cfi_endproc
 916              	.LFE133:
 917              		.size	RCC_I2SCLKConfig, .-RCC_I2SCLKConfig
 918              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 919              		.align	1
 920              		.global	RCC_TIMCLKPresConfig
 921              		.thumb
 922              		.thumb_func
 923              		.type	RCC_TIMCLKPresConfig, %function
 924              	RCC_TIMCLKPresConfig:
 925              	.LFB134:
1071:stm32f4xx_rcc.c **** }
1072:stm32f4xx_rcc.c **** 
1073:stm32f4xx_rcc.c **** /**
1074:stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1075:stm32f4xx_rcc.c ****   * 
1076:stm32f4xx_rcc.c ****   * @note   This feature is only available with STM32F427x/437x Devices.  
1077:stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1078:stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1079:stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1080:stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1081:stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1082:stm32f4xx_rcc.c ****   *                 division by 4 or more.
1083:stm32f4xx_rcc.c ****   *                   
1084:stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1085:stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1086:stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1087:stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1088:stm32f4xx_rcc.c ****   * @retval None
1089:stm32f4xx_rcc.c ****   */
1090:stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1091:stm32f4xx_rcc.c **** {
 926              		.loc 1 1091 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931              	.LVL79:
1092:stm32f4xx_rcc.c ****   /* Check the parameters */
1093:stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1094:stm32f4xx_rcc.c **** 
1095:stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 932              		.loc 1 1095 0
 933 0000 014B     		ldr	r3, .L85	@ tmp135,
 934 0002 1860     		str	r0, [r3, #0]	@ RCC_TIMCLKPrescaler, MEM[(volatile uint32_t *)1111953888B]
 935 0004 7047     		bx	lr	@
 936              	.L86:
 937 0006 00BF     		.align	2
 938              	.L85:
 939 0008 E0114742 		.word	1111953888
 940              		.cfi_endproc
 941              	.LFE134:
 942              		.size	RCC_TIMCLKPresConfig, .-RCC_TIMCLKPresConfig
 943              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
ARM GAS  /tmp/cc69dDoz.s 			page 37


 944              		.align	1
 945              		.global	RCC_AHB1PeriphClockCmd
 946              		.thumb
 947              		.thumb_func
 948              		.type	RCC_AHB1PeriphClockCmd, %function
 949              	RCC_AHB1PeriphClockCmd:
 950              	.LFB135:
1096:stm32f4xx_rcc.c ****   
1097:stm32f4xx_rcc.c **** }
1098:stm32f4xx_rcc.c **** 
1099:stm32f4xx_rcc.c **** /**
1100:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1101:stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1102:stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1103:stm32f4xx_rcc.c ****   *         using it.   
1104:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1105:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1106:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1107:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1108:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1109:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1110:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1111:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1112:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1113:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1114:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock 
1115:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1116:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1117:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1118:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1119:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock 
1120:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1121:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1122:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1123:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1124:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1125:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1126:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1127:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1128:stm32f4xx_rcc.c ****   * @retval None
1129:stm32f4xx_rcc.c ****   */
1130:stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1131:stm32f4xx_rcc.c **** {
 951              		.loc 1 1131 0
 952              		.cfi_startproc
 953              		@ args = 0, pretend = 0, frame = 0
 954              		@ frame_needed = 0, uses_anonymous_args = 0
 955              		@ link register save eliminated.
 956              	.LVL80:
 957 0000 044B     		ldr	r3, .L91	@ tmp146,
1132:stm32f4xx_rcc.c ****   /* Check the parameters */
1133:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1134:stm32f4xx_rcc.c **** 
1135:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1136:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1137:stm32f4xx_rcc.c ****   {
1138:stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
ARM GAS  /tmp/cc69dDoz.s 			page 38


 958              		.loc 1 1138 0
 959 0002 1A6B     		ldr	r2, [r3, #48]	@ D.6268,
1136:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 960              		.loc 1 1136 0
 961 0004 09B1     		cbz	r1, .L88	@ NewState,
 962              		.loc 1 1138 0
 963 0006 1043     		orrs	r0, r0, r2	@, D.6269, RCC_AHB1Periph, D.6268
 964              	.LVL81:
 965 0008 01E0     		b	.L90	@
 966              	.LVL82:
 967              	.L88:
1139:stm32f4xx_rcc.c ****   }
1140:stm32f4xx_rcc.c ****   else
1141:stm32f4xx_rcc.c ****   {
1142:stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 968              		.loc 1 1142 0
 969 000a 22EA0000 		bic	r0, r2, r0	@ D.6273, D.6271, RCC_AHB1Periph
 970              	.LVL83:
 971              	.L90:
 972 000e 1863     		str	r0, [r3, #48]	@ D.6273,
 973 0010 7047     		bx	lr	@
 974              	.L92:
 975 0012 00BF     		.align	2
 976              	.L91:
 977 0014 00380240 		.word	1073887232
 978              		.cfi_endproc
 979              	.LFE135:
 980              		.size	RCC_AHB1PeriphClockCmd, .-RCC_AHB1PeriphClockCmd
 981              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 982              		.align	1
 983              		.global	RCC_AHB2PeriphClockCmd
 984              		.thumb
 985              		.thumb_func
 986              		.type	RCC_AHB2PeriphClockCmd, %function
 987              	RCC_AHB2PeriphClockCmd:
 988              	.LFB136:
1143:stm32f4xx_rcc.c ****   }
1144:stm32f4xx_rcc.c **** }
1145:stm32f4xx_rcc.c **** 
1146:stm32f4xx_rcc.c **** /**
1147:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1148:stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1149:stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1150:stm32f4xx_rcc.c ****   *         using it. 
1151:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1152:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1153:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1154:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1155:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1156:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1157:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1158:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1159:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1160:stm32f4xx_rcc.c ****   * @retval None
1161:stm32f4xx_rcc.c ****   */
1162:stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1163:stm32f4xx_rcc.c **** {
ARM GAS  /tmp/cc69dDoz.s 			page 39


 989              		.loc 1 1163 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993              		@ link register save eliminated.
 994              	.LVL84:
 995 0000 044B     		ldr	r3, .L97	@ tmp146,
1164:stm32f4xx_rcc.c ****   /* Check the parameters */
1165:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1166:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1167:stm32f4xx_rcc.c **** 
1168:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1169:stm32f4xx_rcc.c ****   {
1170:stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 996              		.loc 1 1170 0
 997 0002 5A6B     		ldr	r2, [r3, #52]	@ D.6259,
1168:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 998              		.loc 1 1168 0
 999 0004 09B1     		cbz	r1, .L94	@ NewState,
 1000              		.loc 1 1170 0
 1001 0006 1043     		orrs	r0, r0, r2	@, D.6260, RCC_AHB2Periph, D.6259
 1002              	.LVL85:
 1003 0008 01E0     		b	.L96	@
 1004              	.LVL86:
 1005              	.L94:
1171:stm32f4xx_rcc.c ****   }
1172:stm32f4xx_rcc.c ****   else
1173:stm32f4xx_rcc.c ****   {
1174:stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1006              		.loc 1 1174 0
 1007 000a 22EA0000 		bic	r0, r2, r0	@ D.6264, D.6262, RCC_AHB2Periph
 1008              	.LVL87:
 1009              	.L96:
 1010 000e 5863     		str	r0, [r3, #52]	@ D.6264,
 1011 0010 7047     		bx	lr	@
 1012              	.L98:
 1013 0012 00BF     		.align	2
 1014              	.L97:
 1015 0014 00380240 		.word	1073887232
 1016              		.cfi_endproc
 1017              	.LFE136:
 1018              		.size	RCC_AHB2PeriphClockCmd, .-RCC_AHB2PeriphClockCmd
 1019              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1020              		.align	1
 1021              		.global	RCC_AHB3PeriphClockCmd
 1022              		.thumb
 1023              		.thumb_func
 1024              		.type	RCC_AHB3PeriphClockCmd, %function
 1025              	RCC_AHB3PeriphClockCmd:
 1026              	.LFB137:
1175:stm32f4xx_rcc.c ****   }
1176:stm32f4xx_rcc.c **** }
1177:stm32f4xx_rcc.c **** 
1178:stm32f4xx_rcc.c **** /**
1179:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1180:stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1181:stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
ARM GAS  /tmp/cc69dDoz.s 			page 40


1182:stm32f4xx_rcc.c ****   *         using it. 
1183:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1184:stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1185:stm32f4xx_rcc.c ****   *                                  
1186:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1187:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1188:stm32f4xx_rcc.c ****   * @retval None
1189:stm32f4xx_rcc.c ****   */
1190:stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1191:stm32f4xx_rcc.c **** {
 1027              		.loc 1 1191 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 1032              	.LVL88:
 1033 0000 044B     		ldr	r3, .L103	@ tmp146,
1192:stm32f4xx_rcc.c ****   /* Check the parameters */
1193:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1194:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1195:stm32f4xx_rcc.c **** 
1196:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1197:stm32f4xx_rcc.c ****   {
1198:stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1034              		.loc 1 1198 0
 1035 0002 9A6B     		ldr	r2, [r3, #56]	@ D.6250,
1196:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1036              		.loc 1 1196 0
 1037 0004 09B1     		cbz	r1, .L100	@ NewState,
 1038              		.loc 1 1198 0
 1039 0006 1043     		orrs	r0, r0, r2	@, D.6251, RCC_AHB3Periph, D.6250
 1040              	.LVL89:
 1041 0008 01E0     		b	.L102	@
 1042              	.LVL90:
 1043              	.L100:
1199:stm32f4xx_rcc.c ****   }
1200:stm32f4xx_rcc.c ****   else
1201:stm32f4xx_rcc.c ****   {
1202:stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1044              		.loc 1 1202 0
 1045 000a 22EA0000 		bic	r0, r2, r0	@ D.6255, D.6253, RCC_AHB3Periph
 1046              	.LVL91:
 1047              	.L102:
 1048 000e 9863     		str	r0, [r3, #56]	@ D.6255,
 1049 0010 7047     		bx	lr	@
 1050              	.L104:
 1051 0012 00BF     		.align	2
 1052              	.L103:
 1053 0014 00380240 		.word	1073887232
 1054              		.cfi_endproc
 1055              	.LFE137:
 1056              		.size	RCC_AHB3PeriphClockCmd, .-RCC_AHB3PeriphClockCmd
 1057              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1058              		.align	1
 1059              		.global	RCC_APB1PeriphClockCmd
 1060              		.thumb
 1061              		.thumb_func
ARM GAS  /tmp/cc69dDoz.s 			page 41


 1062              		.type	RCC_APB1PeriphClockCmd, %function
 1063              	RCC_APB1PeriphClockCmd:
 1064              	.LFB138:
1203:stm32f4xx_rcc.c ****   }
1204:stm32f4xx_rcc.c **** }
1205:stm32f4xx_rcc.c **** 
1206:stm32f4xx_rcc.c **** /**
1207:stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1208:stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1209:stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1210:stm32f4xx_rcc.c ****   *         using it. 
1211:stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1212:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1213:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1214:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1215:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1216:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1217:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1218:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1219:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1220:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1221:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1222:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1223:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1224:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1225:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1226:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1227:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1228:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1229:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1230:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1231:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1232:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1233:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1234:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1235:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1236:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1237:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1238:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1239:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1240:stm32f4xx_rcc.c ****   * @retval None
1241:stm32f4xx_rcc.c ****   */
1242:stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1243:stm32f4xx_rcc.c **** {
 1065              		.loc 1 1243 0
 1066              		.cfi_startproc
 1067              		@ args = 0, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 1069              		@ link register save eliminated.
 1070              	.LVL92:
 1071 0000 044B     		ldr	r3, .L109	@ tmp146,
1244:stm32f4xx_rcc.c ****   /* Check the parameters */
1245:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1246:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1247:stm32f4xx_rcc.c **** 
1248:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1249:stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cc69dDoz.s 			page 42


1250:stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1072              		.loc 1 1250 0
 1073 0002 1A6C     		ldr	r2, [r3, #64]	@ D.6241,
1248:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1074              		.loc 1 1248 0
 1075 0004 09B1     		cbz	r1, .L106	@ NewState,
 1076              		.loc 1 1250 0
 1077 0006 1043     		orrs	r0, r0, r2	@, D.6242, RCC_APB1Periph, D.6241
 1078              	.LVL93:
 1079 0008 01E0     		b	.L108	@
 1080              	.LVL94:
 1081              	.L106:
1251:stm32f4xx_rcc.c ****   }
1252:stm32f4xx_rcc.c ****   else
1253:stm32f4xx_rcc.c ****   {
1254:stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1082              		.loc 1 1254 0
 1083 000a 22EA0000 		bic	r0, r2, r0	@ D.6246, D.6244, RCC_APB1Periph
 1084              	.LVL95:
 1085              	.L108:
 1086 000e 1864     		str	r0, [r3, #64]	@ D.6246,
 1087 0010 7047     		bx	lr	@
 1088              	.L110:
 1089 0012 00BF     		.align	2
 1090              	.L109:
 1091 0014 00380240 		.word	1073887232
 1092              		.cfi_endproc
 1093              	.LFE138:
 1094              		.size	RCC_APB1PeriphClockCmd, .-RCC_APB1PeriphClockCmd
 1095              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1096              		.align	1
 1097              		.global	RCC_APB2PeriphClockCmd
 1098              		.thumb
 1099              		.thumb_func
 1100              		.type	RCC_APB2PeriphClockCmd, %function
 1101              	RCC_APB2PeriphClockCmd:
 1102              	.LFB139:
1255:stm32f4xx_rcc.c ****   }
1256:stm32f4xx_rcc.c **** }
1257:stm32f4xx_rcc.c **** 
1258:stm32f4xx_rcc.c **** /**
1259:stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1260:stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1261:stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1262:stm32f4xx_rcc.c ****   *         using it.
1263:stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1264:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1265:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1266:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1267:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1268:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1269:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1270:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1271:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1272:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1273:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1274:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
ARM GAS  /tmp/cc69dDoz.s 			page 43


1275:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1276:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1277:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1278:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1279:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1280:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1281:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1282:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1283:stm32f4xx_rcc.c ****   * @retval None
1284:stm32f4xx_rcc.c ****   */
1285:stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1286:stm32f4xx_rcc.c **** {
 1103              		.loc 1 1286 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              		@ link register save eliminated.
 1108              	.LVL96:
 1109 0000 044B     		ldr	r3, .L115	@ tmp146,
1287:stm32f4xx_rcc.c ****   /* Check the parameters */
1288:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1289:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1290:stm32f4xx_rcc.c **** 
1291:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1292:stm32f4xx_rcc.c ****   {
1293:stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1110              		.loc 1 1293 0
 1111 0002 5A6C     		ldr	r2, [r3, #68]	@ D.6232,
1291:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1112              		.loc 1 1291 0
 1113 0004 09B1     		cbz	r1, .L112	@ NewState,
 1114              		.loc 1 1293 0
 1115 0006 1043     		orrs	r0, r0, r2	@, D.6233, RCC_APB2Periph, D.6232
 1116              	.LVL97:
 1117 0008 01E0     		b	.L114	@
 1118              	.LVL98:
 1119              	.L112:
1294:stm32f4xx_rcc.c ****   }
1295:stm32f4xx_rcc.c ****   else
1296:stm32f4xx_rcc.c ****   {
1297:stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1120              		.loc 1 1297 0
 1121 000a 22EA0000 		bic	r0, r2, r0	@ D.6237, D.6235, RCC_APB2Periph
 1122              	.LVL99:
 1123              	.L114:
 1124 000e 5864     		str	r0, [r3, #68]	@ D.6237,
 1125 0010 7047     		bx	lr	@
 1126              	.L116:
 1127 0012 00BF     		.align	2
 1128              	.L115:
 1129 0014 00380240 		.word	1073887232
 1130              		.cfi_endproc
 1131              	.LFE139:
 1132              		.size	RCC_APB2PeriphClockCmd, .-RCC_APB2PeriphClockCmd
 1133              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1134              		.align	1
 1135              		.global	RCC_AHB1PeriphResetCmd
ARM GAS  /tmp/cc69dDoz.s 			page 44


 1136              		.thumb
 1137              		.thumb_func
 1138              		.type	RCC_AHB1PeriphResetCmd, %function
 1139              	RCC_AHB1PeriphResetCmd:
 1140              	.LFB140:
1298:stm32f4xx_rcc.c ****   }
1299:stm32f4xx_rcc.c **** }
1300:stm32f4xx_rcc.c **** 
1301:stm32f4xx_rcc.c **** /**
1302:stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1303:stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1304:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1305:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1306:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1307:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1308:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1309:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1310:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1311:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1312:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1313:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock  
1314:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1315:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1316:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock 
1317:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1318:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1319:stm32f4xx_rcc.c ****   *                  
1320:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1321:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1322:stm32f4xx_rcc.c ****   * @retval None
1323:stm32f4xx_rcc.c ****   */
1324:stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1325:stm32f4xx_rcc.c **** {
 1141              		.loc 1 1325 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 1146              	.LVL100:
 1147 0000 044B     		ldr	r3, .L121	@ tmp146,
1326:stm32f4xx_rcc.c ****   /* Check the parameters */
1327:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1328:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1329:stm32f4xx_rcc.c **** 
1330:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1331:stm32f4xx_rcc.c ****   {
1332:stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1148              		.loc 1 1332 0
 1149 0002 1A69     		ldr	r2, [r3, #16]	@ D.6223,
1330:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1150              		.loc 1 1330 0
 1151 0004 09B1     		cbz	r1, .L118	@ NewState,
 1152              		.loc 1 1332 0
 1153 0006 1043     		orrs	r0, r0, r2	@, D.6224, RCC_AHB1Periph, D.6223
 1154              	.LVL101:
 1155 0008 01E0     		b	.L120	@
 1156              	.LVL102:
ARM GAS  /tmp/cc69dDoz.s 			page 45


 1157              	.L118:
1333:stm32f4xx_rcc.c ****   }
1334:stm32f4xx_rcc.c ****   else
1335:stm32f4xx_rcc.c ****   {
1336:stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1158              		.loc 1 1336 0
 1159 000a 22EA0000 		bic	r0, r2, r0	@ D.6228, D.6226, RCC_AHB1Periph
 1160              	.LVL103:
 1161              	.L120:
 1162 000e 1861     		str	r0, [r3, #16]	@ D.6228,
 1163 0010 7047     		bx	lr	@
 1164              	.L122:
 1165 0012 00BF     		.align	2
 1166              	.L121:
 1167 0014 00380240 		.word	1073887232
 1168              		.cfi_endproc
 1169              	.LFE140:
 1170              		.size	RCC_AHB1PeriphResetCmd, .-RCC_AHB1PeriphResetCmd
 1171              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1172              		.align	1
 1173              		.global	RCC_AHB2PeriphResetCmd
 1174              		.thumb
 1175              		.thumb_func
 1176              		.type	RCC_AHB2PeriphResetCmd, %function
 1177              	RCC_AHB2PeriphResetCmd:
 1178              	.LFB141:
1337:stm32f4xx_rcc.c ****   }
1338:stm32f4xx_rcc.c **** }
1339:stm32f4xx_rcc.c **** 
1340:stm32f4xx_rcc.c **** /**
1341:stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1342:stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1343:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1344:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1345:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1346:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1347:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1348:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1349:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1350:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1351:stm32f4xx_rcc.c ****   * @retval None
1352:stm32f4xx_rcc.c ****   */
1353:stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1354:stm32f4xx_rcc.c **** {
 1179              		.loc 1 1354 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 0
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 1183              		@ link register save eliminated.
 1184              	.LVL104:
 1185 0000 044B     		ldr	r3, .L127	@ tmp146,
1355:stm32f4xx_rcc.c ****   /* Check the parameters */
1356:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1357:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1358:stm32f4xx_rcc.c **** 
1359:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1360:stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/cc69dDoz.s 			page 46


1361:stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1186              		.loc 1 1361 0
 1187 0002 5A69     		ldr	r2, [r3, #20]	@ D.6214,
1359:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1188              		.loc 1 1359 0
 1189 0004 09B1     		cbz	r1, .L124	@ NewState,
 1190              		.loc 1 1361 0
 1191 0006 1043     		orrs	r0, r0, r2	@, D.6215, RCC_AHB2Periph, D.6214
 1192              	.LVL105:
 1193 0008 01E0     		b	.L126	@
 1194              	.LVL106:
 1195              	.L124:
1362:stm32f4xx_rcc.c ****   }
1363:stm32f4xx_rcc.c ****   else
1364:stm32f4xx_rcc.c ****   {
1365:stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1196              		.loc 1 1365 0
 1197 000a 22EA0000 		bic	r0, r2, r0	@ D.6219, D.6217, RCC_AHB2Periph
 1198              	.LVL107:
 1199              	.L126:
 1200 000e 5861     		str	r0, [r3, #20]	@ D.6219,
 1201 0010 7047     		bx	lr	@
 1202              	.L128:
 1203 0012 00BF     		.align	2
 1204              	.L127:
 1205 0014 00380240 		.word	1073887232
 1206              		.cfi_endproc
 1207              	.LFE141:
 1208              		.size	RCC_AHB2PeriphResetCmd, .-RCC_AHB2PeriphResetCmd
 1209              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1210              		.align	1
 1211              		.global	RCC_AHB3PeriphResetCmd
 1212              		.thumb
 1213              		.thumb_func
 1214              		.type	RCC_AHB3PeriphResetCmd, %function
 1215              	RCC_AHB3PeriphResetCmd:
 1216              	.LFB142:
1366:stm32f4xx_rcc.c ****   }
1367:stm32f4xx_rcc.c **** }
1368:stm32f4xx_rcc.c **** 
1369:stm32f4xx_rcc.c **** /**
1370:stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1371:stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1372:stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1373:stm32f4xx_rcc.c ****   *                                   
1374:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1375:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1376:stm32f4xx_rcc.c ****   * @retval None
1377:stm32f4xx_rcc.c ****   */
1378:stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1379:stm32f4xx_rcc.c **** {
 1217              		.loc 1 1379 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 0
 1220              		@ frame_needed = 0, uses_anonymous_args = 0
 1221              		@ link register save eliminated.
 1222              	.LVL108:
ARM GAS  /tmp/cc69dDoz.s 			page 47


 1223 0000 044B     		ldr	r3, .L133	@ tmp146,
1380:stm32f4xx_rcc.c ****   /* Check the parameters */
1381:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1382:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1383:stm32f4xx_rcc.c **** 
1384:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1385:stm32f4xx_rcc.c ****   {
1386:stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1224              		.loc 1 1386 0
 1225 0002 9A69     		ldr	r2, [r3, #24]	@ D.6205,
1384:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1226              		.loc 1 1384 0
 1227 0004 09B1     		cbz	r1, .L130	@ NewState,
 1228              		.loc 1 1386 0
 1229 0006 1043     		orrs	r0, r0, r2	@, D.6206, RCC_AHB3Periph, D.6205
 1230              	.LVL109:
 1231 0008 01E0     		b	.L132	@
 1232              	.LVL110:
 1233              	.L130:
1387:stm32f4xx_rcc.c ****   }
1388:stm32f4xx_rcc.c ****   else
1389:stm32f4xx_rcc.c ****   {
1390:stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1234              		.loc 1 1390 0
 1235 000a 22EA0000 		bic	r0, r2, r0	@ D.6210, D.6208, RCC_AHB3Periph
 1236              	.LVL111:
 1237              	.L132:
 1238 000e 9861     		str	r0, [r3, #24]	@ D.6210,
 1239 0010 7047     		bx	lr	@
 1240              	.L134:
 1241 0012 00BF     		.align	2
 1242              	.L133:
 1243 0014 00380240 		.word	1073887232
 1244              		.cfi_endproc
 1245              	.LFE142:
 1246              		.size	RCC_AHB3PeriphResetCmd, .-RCC_AHB3PeriphResetCmd
 1247              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1248              		.align	1
 1249              		.global	RCC_APB1PeriphResetCmd
 1250              		.thumb
 1251              		.thumb_func
 1252              		.type	RCC_APB1PeriphResetCmd, %function
 1253              	RCC_APB1PeriphResetCmd:
 1254              	.LFB143:
1391:stm32f4xx_rcc.c ****   }
1392:stm32f4xx_rcc.c **** }
1393:stm32f4xx_rcc.c **** 
1394:stm32f4xx_rcc.c **** /**
1395:stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1396:stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1397:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1398:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1399:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1400:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1401:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1402:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1403:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
ARM GAS  /tmp/cc69dDoz.s 			page 48


1404:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1405:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1406:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1407:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1408:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1409:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1410:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1411:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1412:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1413:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1414:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1415:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1416:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1417:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1418:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1419:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1420:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1421:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1422:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
1423:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1424:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1425:stm32f4xx_rcc.c ****   * @retval None
1426:stm32f4xx_rcc.c ****   */
1427:stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1428:stm32f4xx_rcc.c **** {
 1255              		.loc 1 1428 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
 1259              		@ link register save eliminated.
 1260              	.LVL112:
 1261 0000 044B     		ldr	r3, .L139	@ tmp146,
1429:stm32f4xx_rcc.c ****   /* Check the parameters */
1430:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1431:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1432:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1433:stm32f4xx_rcc.c ****   {
1434:stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1262              		.loc 1 1434 0
 1263 0002 1A6A     		ldr	r2, [r3, #32]	@ D.6196,
1432:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1264              		.loc 1 1432 0
 1265 0004 09B1     		cbz	r1, .L136	@ NewState,
 1266              		.loc 1 1434 0
 1267 0006 1043     		orrs	r0, r0, r2	@, D.6197, RCC_APB1Periph, D.6196
 1268              	.LVL113:
 1269 0008 01E0     		b	.L138	@
 1270              	.LVL114:
 1271              	.L136:
1435:stm32f4xx_rcc.c ****   }
1436:stm32f4xx_rcc.c ****   else
1437:stm32f4xx_rcc.c ****   {
1438:stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1272              		.loc 1 1438 0
 1273 000a 22EA0000 		bic	r0, r2, r0	@ D.6201, D.6199, RCC_APB1Periph
 1274              	.LVL115:
 1275              	.L138:
ARM GAS  /tmp/cc69dDoz.s 			page 49


 1276 000e 1862     		str	r0, [r3, #32]	@ D.6201,
 1277 0010 7047     		bx	lr	@
 1278              	.L140:
 1279 0012 00BF     		.align	2
 1280              	.L139:
 1281 0014 00380240 		.word	1073887232
 1282              		.cfi_endproc
 1283              	.LFE143:
 1284              		.size	RCC_APB1PeriphResetCmd, .-RCC_APB1PeriphResetCmd
 1285              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1286              		.align	1
 1287              		.global	RCC_APB2PeriphResetCmd
 1288              		.thumb
 1289              		.thumb_func
 1290              		.type	RCC_APB2PeriphResetCmd, %function
 1291              	RCC_APB2PeriphResetCmd:
 1292              	.LFB144:
1439:stm32f4xx_rcc.c ****   }
1440:stm32f4xx_rcc.c **** }
1441:stm32f4xx_rcc.c **** 
1442:stm32f4xx_rcc.c **** /**
1443:stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1444:stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1445:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1446:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1447:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1448:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1449:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1450:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1451:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1452:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1453:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1454:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1455:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
1456:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1457:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1458:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1459:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1460:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1461:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock 
1462:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1463:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1464:stm32f4xx_rcc.c ****   * @retval None
1465:stm32f4xx_rcc.c ****   */
1466:stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1467:stm32f4xx_rcc.c **** {
 1293              		.loc 1 1467 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298              	.LVL116:
 1299 0000 044B     		ldr	r3, .L145	@ tmp146,
1468:stm32f4xx_rcc.c ****   /* Check the parameters */
1469:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1470:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1471:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/cc69dDoz.s 			page 50


1472:stm32f4xx_rcc.c ****   {
1473:stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1300              		.loc 1 1473 0
 1301 0002 5A6A     		ldr	r2, [r3, #36]	@ D.6187,
1471:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1302              		.loc 1 1471 0
 1303 0004 09B1     		cbz	r1, .L142	@ NewState,
 1304              		.loc 1 1473 0
 1305 0006 1043     		orrs	r0, r0, r2	@, D.6188, RCC_APB2Periph, D.6187
 1306              	.LVL117:
 1307 0008 01E0     		b	.L144	@
 1308              	.LVL118:
 1309              	.L142:
1474:stm32f4xx_rcc.c ****   }
1475:stm32f4xx_rcc.c ****   else
1476:stm32f4xx_rcc.c ****   {
1477:stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1310              		.loc 1 1477 0
 1311 000a 22EA0000 		bic	r0, r2, r0	@ D.6192, D.6190, RCC_APB2Periph
 1312              	.LVL119:
 1313              	.L144:
 1314 000e 5862     		str	r0, [r3, #36]	@ D.6192,
 1315 0010 7047     		bx	lr	@
 1316              	.L146:
 1317 0012 00BF     		.align	2
 1318              	.L145:
 1319 0014 00380240 		.word	1073887232
 1320              		.cfi_endproc
 1321              	.LFE144:
 1322              		.size	RCC_APB2PeriphResetCmd, .-RCC_APB2PeriphResetCmd
 1323              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1324              		.align	1
 1325              		.global	RCC_AHB1PeriphClockLPModeCmd
 1326              		.thumb
 1327              		.thumb_func
 1328              		.type	RCC_AHB1PeriphClockLPModeCmd, %function
 1329              	RCC_AHB1PeriphClockLPModeCmd:
 1330              	.LFB145:
1478:stm32f4xx_rcc.c ****   }
1479:stm32f4xx_rcc.c **** }
1480:stm32f4xx_rcc.c **** 
1481:stm32f4xx_rcc.c **** /**
1482:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1483:stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1484:stm32f4xx_rcc.c ****   *         power consumption.
1485:stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1486:stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1487:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1488:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1489:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1490:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1491:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1492:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1493:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1494:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1495:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1496:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
ARM GAS  /tmp/cc69dDoz.s 			page 51


1497:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock 
1498:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1499:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1500:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1501:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1502:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1503:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1504:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1505:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1506:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1507:stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1508:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1509:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1510:stm32f4xx_rcc.c ****   * @retval None
1511:stm32f4xx_rcc.c ****   */
1512:stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1513:stm32f4xx_rcc.c **** {
 1331              		.loc 1 1513 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              		@ link register save eliminated.
 1336              	.LVL120:
 1337 0000 044B     		ldr	r3, .L151	@ tmp146,
1514:stm32f4xx_rcc.c ****   /* Check the parameters */
1515:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1516:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1517:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1518:stm32f4xx_rcc.c ****   {
1519:stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1338              		.loc 1 1519 0
 1339 0002 1A6D     		ldr	r2, [r3, #80]	@ D.6178,
1517:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1340              		.loc 1 1517 0
 1341 0004 09B1     		cbz	r1, .L148	@ NewState,
 1342              		.loc 1 1519 0
 1343 0006 1043     		orrs	r0, r0, r2	@, D.6179, RCC_AHB1Periph, D.6178
 1344              	.LVL121:
 1345 0008 01E0     		b	.L150	@
 1346              	.LVL122:
 1347              	.L148:
1520:stm32f4xx_rcc.c ****   }
1521:stm32f4xx_rcc.c ****   else
1522:stm32f4xx_rcc.c ****   {
1523:stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1348              		.loc 1 1523 0
 1349 000a 22EA0000 		bic	r0, r2, r0	@ D.6183, D.6181, RCC_AHB1Periph
 1350              	.LVL123:
 1351              	.L150:
 1352 000e 1865     		str	r0, [r3, #80]	@ D.6183,
 1353 0010 7047     		bx	lr	@
 1354              	.L152:
 1355 0012 00BF     		.align	2
 1356              	.L151:
 1357 0014 00380240 		.word	1073887232
 1358              		.cfi_endproc
 1359              	.LFE145:
ARM GAS  /tmp/cc69dDoz.s 			page 52


 1360              		.size	RCC_AHB1PeriphClockLPModeCmd, .-RCC_AHB1PeriphClockLPModeCmd
 1361              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1362              		.align	1
 1363              		.global	RCC_AHB2PeriphClockLPModeCmd
 1364              		.thumb
 1365              		.thumb_func
 1366              		.type	RCC_AHB2PeriphClockLPModeCmd, %function
 1367              	RCC_AHB2PeriphClockLPModeCmd:
 1368              	.LFB146:
1524:stm32f4xx_rcc.c ****   }
1525:stm32f4xx_rcc.c **** }
1526:stm32f4xx_rcc.c **** 
1527:stm32f4xx_rcc.c **** /**
1528:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1529:stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1530:stm32f4xx_rcc.c ****   *           power consumption.
1531:stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1532:stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1533:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1534:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1535:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1536:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1537:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1538:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1539:stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1540:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1541:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1542:stm32f4xx_rcc.c ****   * @retval None
1543:stm32f4xx_rcc.c ****   */
1544:stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1545:stm32f4xx_rcc.c **** {
 1369              		.loc 1 1545 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 0
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374              	.LVL124:
 1375 0000 044B     		ldr	r3, .L157	@ tmp146,
1546:stm32f4xx_rcc.c ****   /* Check the parameters */
1547:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1548:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1549:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1550:stm32f4xx_rcc.c ****   {
1551:stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1376              		.loc 1 1551 0
 1377 0002 5A6D     		ldr	r2, [r3, #84]	@ D.6169,
1549:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1378              		.loc 1 1549 0
 1379 0004 09B1     		cbz	r1, .L154	@ NewState,
 1380              		.loc 1 1551 0
 1381 0006 1043     		orrs	r0, r0, r2	@, D.6170, RCC_AHB2Periph, D.6169
 1382              	.LVL125:
 1383 0008 01E0     		b	.L156	@
 1384              	.LVL126:
 1385              	.L154:
1552:stm32f4xx_rcc.c ****   }
1553:stm32f4xx_rcc.c ****   else
ARM GAS  /tmp/cc69dDoz.s 			page 53


1554:stm32f4xx_rcc.c ****   {
1555:stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1386              		.loc 1 1555 0
 1387 000a 22EA0000 		bic	r0, r2, r0	@ D.6174, D.6172, RCC_AHB2Periph
 1388              	.LVL127:
 1389              	.L156:
 1390 000e 5865     		str	r0, [r3, #84]	@ D.6174,
 1391 0010 7047     		bx	lr	@
 1392              	.L158:
 1393 0012 00BF     		.align	2
 1394              	.L157:
 1395 0014 00380240 		.word	1073887232
 1396              		.cfi_endproc
 1397              	.LFE146:
 1398              		.size	RCC_AHB2PeriphClockLPModeCmd, .-RCC_AHB2PeriphClockLPModeCmd
 1399              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1400              		.align	1
 1401              		.global	RCC_AHB3PeriphClockLPModeCmd
 1402              		.thumb
 1403              		.thumb_func
 1404              		.type	RCC_AHB3PeriphClockLPModeCmd, %function
 1405              	RCC_AHB3PeriphClockLPModeCmd:
 1406              	.LFB147:
1556:stm32f4xx_rcc.c ****   }
1557:stm32f4xx_rcc.c **** }
1558:stm32f4xx_rcc.c **** 
1559:stm32f4xx_rcc.c **** /**
1560:stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1561:stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1562:stm32f4xx_rcc.c ****   *         power consumption.
1563:stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1564:stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1565:stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1566:stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1567:stm32f4xx_rcc.c ****   *                                  
1568:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1569:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1570:stm32f4xx_rcc.c ****   * @retval None
1571:stm32f4xx_rcc.c ****   */
1572:stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1573:stm32f4xx_rcc.c **** {
 1407              		.loc 1 1573 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412              	.LVL128:
 1413 0000 044B     		ldr	r3, .L163	@ tmp146,
1574:stm32f4xx_rcc.c ****   /* Check the parameters */
1575:stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1576:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1577:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1578:stm32f4xx_rcc.c ****   {
1579:stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 1414              		.loc 1 1579 0
 1415 0002 9A6D     		ldr	r2, [r3, #88]	@ D.6160,
1577:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/cc69dDoz.s 			page 54


 1416              		.loc 1 1577 0
 1417 0004 09B1     		cbz	r1, .L160	@ NewState,
 1418              		.loc 1 1579 0
 1419 0006 1043     		orrs	r0, r0, r2	@, D.6161, RCC_AHB3Periph, D.6160
 1420              	.LVL129:
 1421 0008 01E0     		b	.L162	@
 1422              	.LVL130:
 1423              	.L160:
1580:stm32f4xx_rcc.c ****   }
1581:stm32f4xx_rcc.c ****   else
1582:stm32f4xx_rcc.c ****   {
1583:stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1424              		.loc 1 1583 0
 1425 000a 22EA0000 		bic	r0, r2, r0	@ D.6165, D.6163, RCC_AHB3Periph
 1426              	.LVL131:
 1427              	.L162:
 1428 000e 9865     		str	r0, [r3, #88]	@ D.6165,
 1429 0010 7047     		bx	lr	@
 1430              	.L164:
 1431 0012 00BF     		.align	2
 1432              	.L163:
 1433 0014 00380240 		.word	1073887232
 1434              		.cfi_endproc
 1435              	.LFE147:
 1436              		.size	RCC_AHB3PeriphClockLPModeCmd, .-RCC_AHB3PeriphClockLPModeCmd
 1437              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1438              		.align	1
 1439              		.global	RCC_APB1PeriphClockLPModeCmd
 1440              		.thumb
 1441              		.thumb_func
 1442              		.type	RCC_APB1PeriphClockLPModeCmd, %function
 1443              	RCC_APB1PeriphClockLPModeCmd:
 1444              	.LFB148:
1584:stm32f4xx_rcc.c ****   }
1585:stm32f4xx_rcc.c **** }
1586:stm32f4xx_rcc.c **** 
1587:stm32f4xx_rcc.c **** /**
1588:stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1589:stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1590:stm32f4xx_rcc.c ****   *         power consumption.
1591:stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1592:stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1593:stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1594:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1595:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1596:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1597:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1598:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1599:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1600:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1601:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1602:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1603:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1604:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1605:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1606:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1607:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
ARM GAS  /tmp/cc69dDoz.s 			page 55


1608:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1609:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1610:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1611:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1612:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1613:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1614:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1615:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1616:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1617:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1618:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1619:stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1620:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1621:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1622:stm32f4xx_rcc.c ****   * @retval None
1623:stm32f4xx_rcc.c ****   */
1624:stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1625:stm32f4xx_rcc.c **** {
 1445              		.loc 1 1625 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450              	.LVL132:
 1451 0000 044B     		ldr	r3, .L169	@ tmp146,
1626:stm32f4xx_rcc.c ****   /* Check the parameters */
1627:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1628:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1629:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1630:stm32f4xx_rcc.c ****   {
1631:stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1452              		.loc 1 1631 0
 1453 0002 1A6E     		ldr	r2, [r3, #96]	@ D.6151,
1629:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1454              		.loc 1 1629 0
 1455 0004 09B1     		cbz	r1, .L166	@ NewState,
 1456              		.loc 1 1631 0
 1457 0006 1043     		orrs	r0, r0, r2	@, D.6152, RCC_APB1Periph, D.6151
 1458              	.LVL133:
 1459 0008 01E0     		b	.L168	@
 1460              	.LVL134:
 1461              	.L166:
1632:stm32f4xx_rcc.c ****   }
1633:stm32f4xx_rcc.c ****   else
1634:stm32f4xx_rcc.c ****   {
1635:stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1462              		.loc 1 1635 0
 1463 000a 22EA0000 		bic	r0, r2, r0	@ D.6156, D.6154, RCC_APB1Periph
 1464              	.LVL135:
 1465              	.L168:
 1466 000e 1866     		str	r0, [r3, #96]	@ D.6156,
 1467 0010 7047     		bx	lr	@
 1468              	.L170:
 1469 0012 00BF     		.align	2
 1470              	.L169:
 1471 0014 00380240 		.word	1073887232
 1472              		.cfi_endproc
ARM GAS  /tmp/cc69dDoz.s 			page 56


 1473              	.LFE148:
 1474              		.size	RCC_APB1PeriphClockLPModeCmd, .-RCC_APB1PeriphClockLPModeCmd
 1475              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1476              		.align	1
 1477              		.global	RCC_APB2PeriphClockLPModeCmd
 1478              		.thumb
 1479              		.thumb_func
 1480              		.type	RCC_APB2PeriphClockLPModeCmd, %function
 1481              	RCC_APB2PeriphClockLPModeCmd:
 1482              	.LFB149:
1636:stm32f4xx_rcc.c ****   }
1637:stm32f4xx_rcc.c **** }
1638:stm32f4xx_rcc.c **** 
1639:stm32f4xx_rcc.c **** /**
1640:stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1641:stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1642:stm32f4xx_rcc.c ****   *         power consumption.
1643:stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1644:stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1645:stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1646:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1647:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1648:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1649:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1650:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1651:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1652:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1653:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1654:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1655:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1656:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1657:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1658:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1659:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1660:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1661:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1662:stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock  
1663:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1664:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1665:stm32f4xx_rcc.c ****   * @retval None
1666:stm32f4xx_rcc.c ****   */
1667:stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1668:stm32f4xx_rcc.c **** {
 1483              		.loc 1 1668 0
 1484              		.cfi_startproc
 1485              		@ args = 0, pretend = 0, frame = 0
 1486              		@ frame_needed = 0, uses_anonymous_args = 0
 1487              		@ link register save eliminated.
 1488              	.LVL136:
 1489 0000 044B     		ldr	r3, .L175	@ tmp146,
1669:stm32f4xx_rcc.c ****   /* Check the parameters */
1670:stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1671:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1672:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1673:stm32f4xx_rcc.c ****   {
1674:stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1490              		.loc 1 1674 0
ARM GAS  /tmp/cc69dDoz.s 			page 57


 1491 0002 5A6E     		ldr	r2, [r3, #100]	@ D.6142,
1672:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1492              		.loc 1 1672 0
 1493 0004 09B1     		cbz	r1, .L172	@ NewState,
 1494              		.loc 1 1674 0
 1495 0006 1043     		orrs	r0, r0, r2	@, D.6143, RCC_APB2Periph, D.6142
 1496              	.LVL137:
 1497 0008 01E0     		b	.L174	@
 1498              	.LVL138:
 1499              	.L172:
1675:stm32f4xx_rcc.c ****   }
1676:stm32f4xx_rcc.c ****   else
1677:stm32f4xx_rcc.c ****   {
1678:stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1500              		.loc 1 1678 0
 1501 000a 22EA0000 		bic	r0, r2, r0	@ D.6147, D.6145, RCC_APB2Periph
 1502              	.LVL139:
 1503              	.L174:
 1504 000e 5866     		str	r0, [r3, #100]	@ D.6147,
 1505 0010 7047     		bx	lr	@
 1506              	.L176:
 1507 0012 00BF     		.align	2
 1508              	.L175:
 1509 0014 00380240 		.word	1073887232
 1510              		.cfi_endproc
 1511              	.LFE149:
 1512              		.size	RCC_APB2PeriphClockLPModeCmd, .-RCC_APB2PeriphClockLPModeCmd
 1513              		.section	.text.RCC_ITConfig,"ax",%progbits
 1514              		.align	1
 1515              		.global	RCC_ITConfig
 1516              		.thumb
 1517              		.thumb_func
 1518              		.type	RCC_ITConfig, %function
 1519              	RCC_ITConfig:
 1520              	.LFB150:
1679:stm32f4xx_rcc.c ****   }
1680:stm32f4xx_rcc.c **** }
1681:stm32f4xx_rcc.c **** 
1682:stm32f4xx_rcc.c **** /**
1683:stm32f4xx_rcc.c ****   * @}
1684:stm32f4xx_rcc.c ****   */
1685:stm32f4xx_rcc.c **** 
1686:stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1687:stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1688:stm32f4xx_rcc.c ****  *
1689:stm32f4xx_rcc.c **** @verbatim   
1690:stm32f4xx_rcc.c ****  ===============================================================================
1691:stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
1692:stm32f4xx_rcc.c ****  ===============================================================================  
1693:stm32f4xx_rcc.c **** 
1694:stm32f4xx_rcc.c **** @endverbatim
1695:stm32f4xx_rcc.c ****   * @{
1696:stm32f4xx_rcc.c ****   */
1697:stm32f4xx_rcc.c **** 
1698:stm32f4xx_rcc.c **** /**
1699:stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1700:stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
ARM GAS  /tmp/cc69dDoz.s 			page 58


1701:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1702:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1703:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1704:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1705:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1706:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1707:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
1708:stm32f4xx_rcc.c ****   *              
1709:stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1710:stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1711:stm32f4xx_rcc.c ****   * @retval None
1712:stm32f4xx_rcc.c ****   */
1713:stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1714:stm32f4xx_rcc.c **** {
 1521              		.loc 1 1714 0
 1522              		.cfi_startproc
 1523              		@ args = 0, pretend = 0, frame = 0
 1524              		@ frame_needed = 0, uses_anonymous_args = 0
 1525              		@ link register save eliminated.
 1526              	.LVL140:
 1527 0000 044B     		ldr	r3, .L181	@ tmp155,
1715:stm32f4xx_rcc.c ****   /* Check the parameters */
1716:stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1717:stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1718:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1719:stm32f4xx_rcc.c ****   {
1720:stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1721:stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1528              		.loc 1 1721 0
 1529 0002 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2	@ MEM[(volatile uint8_t *)1073887245B],
1718:stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1530              		.loc 1 1718 0
 1531 0004 09B1     		cbz	r1, .L178	@ NewState,
 1532              		.loc 1 1721 0
 1533 0006 1043     		orrs	r0, r0, r2	@, D.6134, RCC_IT, MEM[(volatile uint8_t *)1073887245B]
 1534              	.LVL141:
 1535 0008 01E0     		b	.L180	@
 1536              	.LVL142:
 1537              	.L178:
1722:stm32f4xx_rcc.c ****   }
1723:stm32f4xx_rcc.c ****   else
1724:stm32f4xx_rcc.c ****   {
1725:stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1726:stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1538              		.loc 1 1726 0
 1539 000a 22EA0000 		bic	r0, r2, r0	@ D.6138, MEM[(volatile uint8_t *)1073887245B], RCC_IT
 1540              	.LVL143:
 1541              	.L180:
 1542 000e 1870     		strb	r0, [r3, #0]	@ D.6138,
 1543 0010 7047     		bx	lr	@
 1544              	.L182:
 1545 0012 00BF     		.align	2
 1546              	.L181:
 1547 0014 0D380240 		.word	1073887245
 1548              		.cfi_endproc
 1549              	.LFE150:
 1550              		.size	RCC_ITConfig, .-RCC_ITConfig
ARM GAS  /tmp/cc69dDoz.s 			page 59


 1551              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1552              		.align	1
 1553              		.global	RCC_GetFlagStatus
 1554              		.thumb
 1555              		.thumb_func
 1556              		.type	RCC_GetFlagStatus, %function
 1557              	RCC_GetFlagStatus:
 1558              	.LFB151:
1727:stm32f4xx_rcc.c ****   }
1728:stm32f4xx_rcc.c **** }
1729:stm32f4xx_rcc.c **** 
1730:stm32f4xx_rcc.c **** /**
1731:stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1732:stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1733:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1734:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1735:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1736:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1737:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1738:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1739:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1740:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1741:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1742:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1743:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1744:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1745:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1746:stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1747:stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1748:stm32f4xx_rcc.c ****   */
1749:stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1750:stm32f4xx_rcc.c **** {
 1559              		.loc 1 1750 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              		@ link register save eliminated.
 1564              	.LVL144:
1751:stm32f4xx_rcc.c ****   uint32_t tmp = 0;
1752:stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
1753:stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
1754:stm32f4xx_rcc.c **** 
1755:stm32f4xx_rcc.c ****   /* Check the parameters */
1756:stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1757:stm32f4xx_rcc.c **** 
1758:stm32f4xx_rcc.c ****   /* Get the RCC register index */
1759:stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1565              		.loc 1 1759 0
 1566 0000 4309     		lsrs	r3, r0, #5	@ tmp, RCC_FLAG,
 1567              	.LVL145:
1760:stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1568              		.loc 1 1760 0
 1569 0002 012B     		cmp	r3, #1	@ tmp,
 1570 0004 074A     		ldr	r2, .L187	@ tmp163,
 1571 0006 01D1     		bne	.L184	@,
1761:stm32f4xx_rcc.c ****   {
1762:stm32f4xx_rcc.c ****     statusreg = RCC->CR;
ARM GAS  /tmp/cc69dDoz.s 			page 60


 1572              		.loc 1 1762 0
 1573 0008 1368     		ldr	r3, [r2, #0]	@ statusreg, MEM[(struct RCC_TypeDef *)1073887232B].CR
 1574              	.LVL146:
 1575 000a 03E0     		b	.L185	@
 1576              	.LVL147:
 1577              	.L184:
1763:stm32f4xx_rcc.c ****   }
1764:stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1578              		.loc 1 1764 0
 1579 000c 022B     		cmp	r3, #2	@ tmp,
1765:stm32f4xx_rcc.c ****   {
1766:stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 1580              		.loc 1 1766 0
 1581 000e 0CBF     		ite	eq
 1582 0010 136F     		ldreq	r3, [r2, #112]	@ statusreg, MEM[(struct RCC_TypeDef *)1073887232B].BDCR
 1583              	.LVL148:
1767:stm32f4xx_rcc.c ****   }
1768:stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1769:stm32f4xx_rcc.c ****   {
1770:stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1584              		.loc 1 1770 0
 1585 0012 536F     		ldrne	r3, [r2, #116]	@ statusreg, MEM[(struct RCC_TypeDef *)1073887232B].CSR
 1586              	.LVL149:
 1587              	.L185:
1771:stm32f4xx_rcc.c ****   }
1772:stm32f4xx_rcc.c **** 
1773:stm32f4xx_rcc.c ****   /* Get the flag position */
1774:stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
1775:stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1588              		.loc 1 1775 0
 1589 0014 00F01F00 		and	r0, r0, #31	@ tmp159, RCC_FLAG,
 1590              	.LVL150:
 1591 0018 23FA00F1 		lsr	r1, r3, r0	@ tmp160, statusreg, tmp159
1776:stm32f4xx_rcc.c ****   {
1777:stm32f4xx_rcc.c ****     bitstatus = SET;
1778:stm32f4xx_rcc.c ****   }
1779:stm32f4xx_rcc.c ****   else
1780:stm32f4xx_rcc.c ****   {
1781:stm32f4xx_rcc.c ****     bitstatus = RESET;
1782:stm32f4xx_rcc.c ****   }
1783:stm32f4xx_rcc.c ****   /* Return the flag status */
1784:stm32f4xx_rcc.c ****   return bitstatus;
1785:stm32f4xx_rcc.c **** }
 1592              		.loc 1 1785 0
 1593 001c 01F00100 		and	r0, r1, #1	@, tmp160,
 1594 0020 7047     		bx	lr	@
 1595              	.L188:
 1596 0022 00BF     		.align	2
 1597              	.L187:
 1598 0024 00380240 		.word	1073887232
 1599              		.cfi_endproc
 1600              	.LFE151:
 1601              		.size	RCC_GetFlagStatus, .-RCC_GetFlagStatus
 1602              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1603              		.align	1
 1604              		.global	RCC_WaitForHSEStartUp
 1605              		.thumb
ARM GAS  /tmp/cc69dDoz.s 			page 61


 1606              		.thumb_func
 1607              		.type	RCC_WaitForHSEStartUp, %function
 1608              	RCC_WaitForHSEStartUp:
 1609              	.LFB112:
 280:stm32f4xx_rcc.c **** {
 1610              		.loc 1 280 0
 1611              		.cfi_startproc
 1612              		@ args = 0, pretend = 0, frame = 8
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614 0000 07B5     		push	{r0, r1, r2, lr}	@
 1615              	.LCFI2:
 1616              		.cfi_def_cfa_offset 16
 1617              		.cfi_offset 0, -16
 1618              		.cfi_offset 1, -12
 1619              		.cfi_offset 2, -8
 1620              		.cfi_offset 14, -4
 281:stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1621              		.loc 1 281 0
 1622 0002 0023     		movs	r3, #0	@ tmp142,
 1623 0004 0193     		str	r3, [sp, #4]	@ tmp142, startupcounter
 1624              	.LVL151:
 1625              	.L191:
 287:stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 1626              		.loc 1 287 0 discriminator 1
 1627 0006 3120     		movs	r0, #49	@,
 1628 0008 FFF7FEFF 		bl	RCC_GetFlagStatus	@
 1629              	.LVL152:
 288:stm32f4xx_rcc.c ****     startupcounter++;
 1630              		.loc 1 288 0 discriminator 1
 1631 000c 0199     		ldr	r1, [sp, #4]	@ startupcounter.2, startupcounter
 1632 000e 4A1C     		adds	r2, r1, #1	@ startupcounter.3, startupcounter.2,
 1633              	.LVL153:
 1634 0010 0192     		str	r2, [sp, #4]	@ startupcounter.3, startupcounter
 1635              	.LVL154:
 289:stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 1636              		.loc 1 289 0 discriminator 1
 1637 0012 019B     		ldr	r3, [sp, #4]	@ startupcounter.4, startupcounter
 1638 0014 B3F5A06F 		cmp	r3, #1280	@ startupcounter.4,
 1639 0018 01D0     		beq	.L190	@,
 1640 001a 0028     		cmp	r0, #0	@ tmp143
 1641 001c F3D0     		beq	.L191	@
 1642              	.L190:
 291:stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 1643              		.loc 1 291 0
 1644 001e 3120     		movs	r0, #49	@,
 1645              	.LVL155:
 1646 0020 FFF7FEFF 		bl	RCC_GetFlagStatus	@
 1647              	.LVL156:
 300:stm32f4xx_rcc.c **** }
 1648              		.loc 1 300 0
 1649 0024 0030     		adds	r0, r0, #0	@,,
 1650              	.LVL157:
 1651 0026 18BF     		it	ne
 1652 0028 0120     		movne	r0, #1	@,
 1653 002a 0EBD     		pop	{r1, r2, r3, pc}
 1654              		.cfi_endproc
 1655              	.LFE112:
ARM GAS  /tmp/cc69dDoz.s 			page 62


 1656              		.size	RCC_WaitForHSEStartUp, .-RCC_WaitForHSEStartUp
 1657              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1658              		.align	1
 1659              		.global	RCC_ClearFlag
 1660              		.thumb
 1661              		.thumb_func
 1662              		.type	RCC_ClearFlag, %function
 1663              	RCC_ClearFlag:
 1664              	.LFB152:
1786:stm32f4xx_rcc.c **** 
1787:stm32f4xx_rcc.c **** /**
1788:stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1789:stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1790:stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1791:stm32f4xx_rcc.c ****   * @param  None
1792:stm32f4xx_rcc.c ****   * @retval None
1793:stm32f4xx_rcc.c ****   */
1794:stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1795:stm32f4xx_rcc.c **** {
 1665              		.loc 1 1795 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
1796:stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1797:stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1670              		.loc 1 1797 0
 1671 0000 024B     		ldr	r3, .L200	@ tmp136,
 1672 0002 5A6F     		ldr	r2, [r3, #116]	@ D.6111, MEM[(struct RCC_TypeDef *)1073887232B].CSR
 1673 0004 42F08070 		orr	r0, r2, #16777216	@ D.6112, D.6111,
 1674 0008 5867     		str	r0, [r3, #116]	@ D.6112, MEM[(struct RCC_TypeDef *)1073887232B].CSR
 1675 000a 7047     		bx	lr	@
 1676              	.L201:
 1677              		.align	2
 1678              	.L200:
 1679 000c 00380240 		.word	1073887232
 1680              		.cfi_endproc
 1681              	.LFE152:
 1682              		.size	RCC_ClearFlag, .-RCC_ClearFlag
 1683              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1684              		.align	1
 1685              		.global	RCC_GetITStatus
 1686              		.thumb
 1687              		.thumb_func
 1688              		.type	RCC_GetITStatus, %function
 1689              	RCC_GetITStatus:
 1690              	.LFB153:
1798:stm32f4xx_rcc.c **** }
1799:stm32f4xx_rcc.c **** 
1800:stm32f4xx_rcc.c **** /**
1801:stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1802:stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1803:stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1804:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1805:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1806:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1807:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
ARM GAS  /tmp/cc69dDoz.s 			page 63


1808:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1809:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
1810:stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1811:stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1812:stm32f4xx_rcc.c ****   */
1813:stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1814:stm32f4xx_rcc.c **** {
 1691              		.loc 1 1814 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
 1696              	.LVL158:
1815:stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
1816:stm32f4xx_rcc.c **** 
1817:stm32f4xx_rcc.c ****   /* Check the parameters */
1818:stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1819:stm32f4xx_rcc.c **** 
1820:stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1821:stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1697              		.loc 1 1821 0
 1698 0000 034B     		ldr	r3, .L203	@ tmp141,
 1699 0002 D968     		ldr	r1, [r3, #12]	@ D.6102, MEM[(struct RCC_TypeDef *)1073887232B].CIR
 1700              	.LVL159:
 1701 0004 0842     		tst	r0, r1	@ RCC_IT, D.6102
1822:stm32f4xx_rcc.c ****   {
1823:stm32f4xx_rcc.c ****     bitstatus = SET;
1824:stm32f4xx_rcc.c ****   }
1825:stm32f4xx_rcc.c ****   else
1826:stm32f4xx_rcc.c ****   {
1827:stm32f4xx_rcc.c ****     bitstatus = RESET;
1828:stm32f4xx_rcc.c ****   }
1829:stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1830:stm32f4xx_rcc.c ****   return  bitstatus;
1831:stm32f4xx_rcc.c **** }
 1702              		.loc 1 1831 0
 1703 0006 0CBF     		ite	eq	@
 1704 0008 0020     		moveq	r0, #0	@,
 1705 000a 0120     		movne	r0, #1	@,
 1706              	.LVL160:
 1707 000c 7047     		bx	lr	@
 1708              	.L204:
 1709 000e 00BF     		.align	2
 1710              	.L203:
 1711 0010 00380240 		.word	1073887232
 1712              		.cfi_endproc
 1713              	.LFE153:
 1714              		.size	RCC_GetITStatus, .-RCC_GetITStatus
 1715              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1716              		.align	1
 1717              		.global	RCC_ClearITPendingBit
 1718              		.thumb
 1719              		.thumb_func
 1720              		.type	RCC_ClearITPendingBit, %function
 1721              	RCC_ClearITPendingBit:
 1722              	.LFB154:
1832:stm32f4xx_rcc.c **** 
ARM GAS  /tmp/cc69dDoz.s 			page 64


1833:stm32f4xx_rcc.c **** /**
1834:stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1835:stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1836:stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1837:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1838:stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1839:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1840:stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1841:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1842:stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1843:stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1844:stm32f4xx_rcc.c ****   * @retval None
1845:stm32f4xx_rcc.c ****   */
1846:stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1847:stm32f4xx_rcc.c **** {
 1723              		.loc 1 1847 0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 0
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              		@ link register save eliminated.
 1728              	.LVL161:
1848:stm32f4xx_rcc.c ****   /* Check the parameters */
1849:stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1850:stm32f4xx_rcc.c **** 
1851:stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1852:stm32f4xx_rcc.c ****      pending bits */
1853:stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1729              		.loc 1 1853 0
 1730 0000 014B     		ldr	r3, .L206	@ tmp135,
 1731 0002 1870     		strb	r0, [r3, #0]	@ RCC_IT, MEM[(volatile uint8_t *)1073887246B]
 1732 0004 7047     		bx	lr	@
 1733              	.L207:
 1734 0006 00BF     		.align	2
 1735              	.L206:
 1736 0008 0E380240 		.word	1073887246
 1737              		.cfi_endproc
 1738              	.LFE154:
 1739              		.size	RCC_ClearITPendingBit, .-RCC_ClearITPendingBit
 1740              		.section	.data.APBAHBPrescTable,"aw",%progbits
 1741              		.set	.LANCHOR0,. + 0
 1742              		.type	APBAHBPrescTable, %object
 1743              		.size	APBAHBPrescTable, 16
 1744              	APBAHBPrescTable:
 1745 0000 00       		.byte	0
 1746 0001 00       		.byte	0
 1747 0002 00       		.byte	0
 1748 0003 00       		.byte	0
 1749 0004 01       		.byte	1
 1750 0005 02       		.byte	2
 1751 0006 03       		.byte	3
 1752 0007 04       		.byte	4
 1753 0008 01       		.byte	1
 1754 0009 02       		.byte	2
 1755 000a 03       		.byte	3
 1756 000b 04       		.byte	4
 1757 000c 06       		.byte	6
 1758 000d 07       		.byte	7
ARM GAS  /tmp/cc69dDoz.s 			page 65


 1759 000e 08       		.byte	8
 1760 000f 09       		.byte	9
 1761              		.text
 1762              	.Letext0:
 1763              		.file 2 "/usr/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/include/stdint.h"
 1764              		.file 3 "stm32f4xx.h"
 1765              		.file 4 "stm32f4xx_rcc.h"
 1766              		.file 5 "cmsis/core_cm4.h"
 1767              		.section	.debug_info,"",%progbits
 1768              	.Ldebug_info0:
 1769 0000 8A0D0000 		.4byte	0xd8a
 1770 0004 0200     		.2byte	0x2
 1771 0006 00000000 		.4byte	.Ldebug_abbrev0
 1772 000a 04       		.byte	0x4
 1773 000b 01       		.uleb128 0x1
 1774 000c 34010000 		.4byte	.LASF141
 1775 0010 01       		.byte	0x1
 1776 0011 1B000000 		.4byte	.LASF142
 1777 0015 28040000 		.4byte	.LASF143
 1778 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1779 001d 00000000 		.4byte	0
 1780 0021 00000000 		.4byte	0
 1781 0025 00000000 		.4byte	.Ldebug_line0
 1782 0029 02       		.uleb128 0x2
 1783 002a 01       		.byte	0x1
 1784 002b 06       		.byte	0x6
 1785 002c 11010000 		.4byte	.LASF0
 1786 0030 03       		.uleb128 0x3
 1787 0031 A4070000 		.4byte	.LASF3
 1788 0035 02       		.byte	0x2
 1789 0036 2A       		.byte	0x2a
 1790 0037 3B000000 		.4byte	0x3b
 1791 003b 02       		.uleb128 0x2
 1792 003c 01       		.byte	0x1
 1793 003d 08       		.byte	0x8
 1794 003e 3E050000 		.4byte	.LASF1
 1795 0042 02       		.uleb128 0x2
 1796 0043 02       		.byte	0x2
 1797 0044 05       		.byte	0x5
 1798 0045 59050000 		.4byte	.LASF2
 1799 0049 03       		.uleb128 0x3
 1800 004a 20020000 		.4byte	.LASF4
 1801 004e 02       		.byte	0x2
 1802 004f 36       		.byte	0x36
 1803 0050 54000000 		.4byte	0x54
 1804 0054 02       		.uleb128 0x2
 1805 0055 02       		.byte	0x2
 1806 0056 07       		.byte	0x7
 1807 0057 70030000 		.4byte	.LASF5
 1808 005b 03       		.uleb128 0x3
 1809 005c 36050000 		.4byte	.LASF6
 1810 0060 02       		.byte	0x2
 1811 0061 4F       		.byte	0x4f
 1812 0062 66000000 		.4byte	0x66
 1813 0066 02       		.uleb128 0x2
 1814 0067 04       		.byte	0x4
 1815 0068 05       		.byte	0x5
ARM GAS  /tmp/cc69dDoz.s 			page 66


 1816 0069 E1070000 		.4byte	.LASF7
 1817 006d 03       		.uleb128 0x3
 1818 006e 0F060000 		.4byte	.LASF8
 1819 0072 02       		.byte	0x2
 1820 0073 50       		.byte	0x50
 1821 0074 78000000 		.4byte	0x78
 1822 0078 02       		.uleb128 0x2
 1823 0079 04       		.byte	0x4
 1824 007a 07       		.byte	0x7
 1825 007b 22030000 		.4byte	.LASF9
 1826 007f 02       		.uleb128 0x2
 1827 0080 08       		.byte	0x8
 1828 0081 05       		.byte	0x5
 1829 0082 01020000 		.4byte	.LASF10
 1830 0086 02       		.uleb128 0x2
 1831 0087 08       		.byte	0x8
 1832 0088 07       		.byte	0x7
 1833 0089 A6000000 		.4byte	.LASF11
 1834 008d 04       		.uleb128 0x4
 1835 008e 04       		.byte	0x4
 1836 008f 05       		.byte	0x5
 1837 0090 696E7400 		.ascii	"int\000"
 1838 0094 02       		.uleb128 0x2
 1839 0095 04       		.byte	0x4
 1840 0096 07       		.byte	0x7
 1841 0097 ED020000 		.4byte	.LASF12
 1842 009b 02       		.uleb128 0x2
 1843 009c 04       		.byte	0x4
 1844 009d 07       		.byte	0x7
 1845 009e FE030000 		.4byte	.LASF13
 1846 00a2 05       		.uleb128 0x5
 1847 00a3 6D000000 		.4byte	0x6d
 1848 00a7 06       		.uleb128 0x6
 1849 00a8 6D000000 		.4byte	0x6d
 1850 00ac B7000000 		.4byte	0xb7
 1851 00b0 07       		.uleb128 0x7
 1852 00b1 9B000000 		.4byte	0x9b
 1853 00b5 01       		.byte	0x1
 1854 00b6 00       		.byte	0
 1855 00b7 05       		.uleb128 0x5
 1856 00b8 5B000000 		.4byte	0x5b
 1857 00bc 08       		.uleb128 0x8
 1858 00bd 01       		.byte	0x1
 1859 00be 03       		.byte	0x3
 1860 00bf 1D01     		.2byte	0x11d
 1861 00c1 D2000000 		.4byte	0xd2
 1862 00c5 09       		.uleb128 0x9
 1863 00c6 10050000 		.4byte	.LASF14
 1864 00ca 00       		.sleb128 0
 1865 00cb 0A       		.uleb128 0xa
 1866 00cc 53455400 		.ascii	"SET\000"
 1867 00d0 01       		.sleb128 1
 1868 00d1 00       		.byte	0
 1869 00d2 0B       		.uleb128 0xb
 1870 00d3 35000000 		.4byte	.LASF15
 1871 00d7 03       		.byte	0x3
 1872 00d8 1D01     		.2byte	0x11d
ARM GAS  /tmp/cc69dDoz.s 			page 67


 1873 00da BC000000 		.4byte	0xbc
 1874 00de 0B       		.uleb128 0xb
 1875 00df D5020000 		.4byte	.LASF16
 1876 00e3 03       		.byte	0x3
 1877 00e4 1D01     		.2byte	0x11d
 1878 00e6 BC000000 		.4byte	0xbc
 1879 00ea 08       		.uleb128 0x8
 1880 00eb 01       		.byte	0x1
 1881 00ec 03       		.byte	0x3
 1882 00ed 1F01     		.2byte	0x11f
 1883 00ef 00010000 		.4byte	0x100
 1884 00f3 09       		.uleb128 0x9
 1885 00f4 FA020000 		.4byte	.LASF17
 1886 00f8 00       		.sleb128 0
 1887 00f9 09       		.uleb128 0x9
 1888 00fa A4010000 		.4byte	.LASF18
 1889 00fe 01       		.sleb128 1
 1890 00ff 00       		.byte	0
 1891 0100 0B       		.uleb128 0xb
 1892 0101 77040000 		.4byte	.LASF19
 1893 0105 03       		.byte	0x3
 1894 0106 1F01     		.2byte	0x11f
 1895 0108 EA000000 		.4byte	0xea
 1896 010c 08       		.uleb128 0x8
 1897 010d 01       		.byte	0x1
 1898 010e 03       		.byte	0x3
 1899 010f 2201     		.2byte	0x122
 1900 0111 22010000 		.4byte	0x122
 1901 0115 09       		.uleb128 0x9
 1902 0116 07040000 		.4byte	.LASF20
 1903 011a 00       		.sleb128 0
 1904 011b 09       		.uleb128 0x9
 1905 011c AC070000 		.4byte	.LASF21
 1906 0120 01       		.sleb128 1
 1907 0121 00       		.byte	0
 1908 0122 0B       		.uleb128 0xb
 1909 0123 78020000 		.4byte	.LASF22
 1910 0127 03       		.byte	0x3
 1911 0128 2201     		.2byte	0x122
 1912 012a 0C010000 		.4byte	0x10c
 1913 012e 0C       		.uleb128 0xc
 1914 012f 88       		.byte	0x88
 1915 0130 03       		.byte	0x3
 1916 0131 DD02     		.2byte	0x2dd
 1917 0133 FB020000 		.4byte	0x2fb
 1918 0137 0D       		.uleb128 0xd
 1919 0138 435200   		.ascii	"CR\000"
 1920 013b 03       		.byte	0x3
 1921 013c DF02     		.2byte	0x2df
 1922 013e A2000000 		.4byte	0xa2
 1923 0142 02       		.byte	0x2
 1924 0143 23       		.byte	0x23
 1925 0144 00       		.uleb128 0
 1926 0145 0E       		.uleb128 0xe
 1927 0146 5D020000 		.4byte	.LASF23
 1928 014a 03       		.byte	0x3
 1929 014b E002     		.2byte	0x2e0
ARM GAS  /tmp/cc69dDoz.s 			page 68


 1930 014d A2000000 		.4byte	0xa2
 1931 0151 02       		.byte	0x2
 1932 0152 23       		.byte	0x23
 1933 0153 04       		.uleb128 0x4
 1934 0154 0E       		.uleb128 0xe
 1935 0155 DC070000 		.4byte	.LASF24
 1936 0159 03       		.byte	0x3
 1937 015a E102     		.2byte	0x2e1
 1938 015c A2000000 		.4byte	0xa2
 1939 0160 02       		.byte	0x2
 1940 0161 23       		.byte	0x23
 1941 0162 08       		.uleb128 0x8
 1942 0163 0D       		.uleb128 0xd
 1943 0164 43495200 		.ascii	"CIR\000"
 1944 0168 03       		.byte	0x3
 1945 0169 E202     		.2byte	0x2e2
 1946 016b A2000000 		.4byte	0xa2
 1947 016f 02       		.byte	0x2
 1948 0170 23       		.byte	0x23
 1949 0171 0C       		.uleb128 0xc
 1950 0172 0E       		.uleb128 0xe
 1951 0173 1D010000 		.4byte	.LASF25
 1952 0177 03       		.byte	0x3
 1953 0178 E302     		.2byte	0x2e3
 1954 017a A2000000 		.4byte	0xa2
 1955 017e 02       		.byte	0x2
 1956 017f 23       		.byte	0x23
 1957 0180 10       		.uleb128 0x10
 1958 0181 0E       		.uleb128 0xe
 1959 0182 99060000 		.4byte	.LASF26
 1960 0186 03       		.byte	0x3
 1961 0187 E402     		.2byte	0x2e4
 1962 0189 A2000000 		.4byte	0xa2
 1963 018d 02       		.byte	0x2
 1964 018e 23       		.byte	0x23
 1965 018f 14       		.uleb128 0x14
 1966 0190 0E       		.uleb128 0xe
 1967 0191 A1050000 		.4byte	.LASF27
 1968 0195 03       		.byte	0x3
 1969 0196 E502     		.2byte	0x2e5
 1970 0198 A2000000 		.4byte	0xa2
 1971 019c 02       		.byte	0x2
 1972 019d 23       		.byte	0x23
 1973 019e 18       		.uleb128 0x18
 1974 019f 0E       		.uleb128 0xe
 1975 01a0 CA040000 		.4byte	.LASF28
 1976 01a4 03       		.byte	0x3
 1977 01a5 E602     		.2byte	0x2e6
 1978 01a7 6D000000 		.4byte	0x6d
 1979 01ab 02       		.byte	0x2
 1980 01ac 23       		.byte	0x23
 1981 01ad 1C       		.uleb128 0x1c
 1982 01ae 0E       		.uleb128 0xe
 1983 01af 60070000 		.4byte	.LASF29
 1984 01b3 03       		.byte	0x3
 1985 01b4 E702     		.2byte	0x2e7
 1986 01b6 A2000000 		.4byte	0xa2
ARM GAS  /tmp/cc69dDoz.s 			page 69


 1987 01ba 02       		.byte	0x2
 1988 01bb 23       		.byte	0x23
 1989 01bc 20       		.uleb128 0x20
 1990 01bd 0E       		.uleb128 0xe
 1991 01be AB010000 		.4byte	.LASF30
 1992 01c2 03       		.byte	0x3
 1993 01c3 E802     		.2byte	0x2e8
 1994 01c5 A2000000 		.4byte	0xa2
 1995 01c9 02       		.byte	0x2
 1996 01ca 23       		.byte	0x23
 1997 01cb 24       		.uleb128 0x24
 1998 01cc 0E       		.uleb128 0xe
 1999 01cd D4040000 		.4byte	.LASF31
 2000 01d1 03       		.byte	0x3
 2001 01d2 E902     		.2byte	0x2e9
 2002 01d4 A7000000 		.4byte	0xa7
 2003 01d8 02       		.byte	0x2
 2004 01d9 23       		.byte	0x23
 2005 01da 28       		.uleb128 0x28
 2006 01db 0E       		.uleb128 0xe
 2007 01dc D4070000 		.4byte	.LASF32
 2008 01e0 03       		.byte	0x3
 2009 01e1 EA02     		.2byte	0x2ea
 2010 01e3 A2000000 		.4byte	0xa2
 2011 01e7 02       		.byte	0x2
 2012 01e8 23       		.byte	0x23
 2013 01e9 30       		.uleb128 0x30
 2014 01ea 0E       		.uleb128 0xe
 2015 01eb CD060000 		.4byte	.LASF33
 2016 01ef 03       		.byte	0x3
 2017 01f0 EB02     		.2byte	0x2eb
 2018 01f2 A2000000 		.4byte	0xa2
 2019 01f6 02       		.byte	0x2
 2020 01f7 23       		.byte	0x23
 2021 01f8 34       		.uleb128 0x34
 2022 01f9 0E       		.uleb128 0xe
 2023 01fa AA050000 		.4byte	.LASF34
 2024 01fe 03       		.byte	0x3
 2025 01ff EC02     		.2byte	0x2ec
 2026 0201 A2000000 		.4byte	0xa2
 2027 0205 02       		.byte	0x2
 2028 0206 23       		.byte	0x23
 2029 0207 38       		.uleb128 0x38
 2030 0208 0E       		.uleb128 0xe
 2031 0209 DE040000 		.4byte	.LASF35
 2032 020d 03       		.byte	0x3
 2033 020e ED02     		.2byte	0x2ed
 2034 0210 6D000000 		.4byte	0x6d
 2035 0214 02       		.byte	0x2
 2036 0215 23       		.byte	0x23
 2037 0216 3C       		.uleb128 0x3c
 2038 0217 0E       		.uleb128 0xe
 2039 0218 C5060000 		.4byte	.LASF36
 2040 021c 03       		.byte	0x3
 2041 021d EE02     		.2byte	0x2ee
 2042 021f A2000000 		.4byte	0xa2
 2043 0223 02       		.byte	0x2
ARM GAS  /tmp/cc69dDoz.s 			page 70


 2044 0224 23       		.byte	0x23
 2045 0225 40       		.uleb128 0x40
 2046 0226 0E       		.uleb128 0xe
 2047 0227 99050000 		.4byte	.LASF37
 2048 022b 03       		.byte	0x3
 2049 022c EF02     		.2byte	0x2ef
 2050 022e A2000000 		.4byte	0xa2
 2051 0232 02       		.byte	0x2
 2052 0233 23       		.byte	0x23
 2053 0234 44       		.uleb128 0x44
 2054 0235 0E       		.uleb128 0xe
 2055 0236 E8040000 		.4byte	.LASF38
 2056 023a 03       		.byte	0x3
 2057 023b F002     		.2byte	0x2f0
 2058 023d A7000000 		.4byte	0xa7
 2059 0241 02       		.byte	0x2
 2060 0242 23       		.byte	0x23
 2061 0243 48       		.uleb128 0x48
 2062 0244 0E       		.uleb128 0xe
 2063 0245 D1000000 		.4byte	.LASF39
 2064 0249 03       		.byte	0x3
 2065 024a F102     		.2byte	0x2f1
 2066 024c A2000000 		.4byte	0xa2
 2067 0250 02       		.byte	0x2
 2068 0251 23       		.byte	0x23
 2069 0252 50       		.uleb128 0x50
 2070 0253 0E       		.uleb128 0xe
 2071 0254 6D040000 		.4byte	.LASF40
 2072 0258 03       		.byte	0x3
 2073 0259 F202     		.2byte	0x2f2
 2074 025b A2000000 		.4byte	0xa2
 2075 025f 02       		.byte	0x2
 2076 0260 23       		.byte	0x23
 2077 0261 54       		.uleb128 0x54
 2078 0262 0E       		.uleb128 0xe
 2079 0263 56070000 		.4byte	.LASF41
 2080 0267 03       		.byte	0x3
 2081 0268 F302     		.2byte	0x2f3
 2082 026a A2000000 		.4byte	0xa2
 2083 026e 02       		.byte	0x2
 2084 026f 23       		.byte	0x23
 2085 0270 58       		.uleb128 0x58
 2086 0271 0E       		.uleb128 0xe
 2087 0272 F2040000 		.4byte	.LASF42
 2088 0276 03       		.byte	0x3
 2089 0277 F402     		.2byte	0x2f4
 2090 0279 6D000000 		.4byte	0x6d
 2091 027d 02       		.byte	0x2
 2092 027e 23       		.byte	0x23
 2093 027f 5C       		.uleb128 0x5c
 2094 0280 0E       		.uleb128 0xe
 2095 0281 11000000 		.4byte	.LASF43
 2096 0285 03       		.byte	0x3
 2097 0286 F502     		.2byte	0x2f5
 2098 0288 A2000000 		.4byte	0xa2
 2099 028c 02       		.byte	0x2
 2100 028d 23       		.byte	0x23
ARM GAS  /tmp/cc69dDoz.s 			page 71


 2101 028e 60       		.uleb128 0x60
 2102 028f 0E       		.uleb128 0xe
 2103 0290 CB030000 		.4byte	.LASF44
 2104 0294 03       		.byte	0x3
 2105 0295 F602     		.2byte	0x2f6
 2106 0297 A2000000 		.4byte	0xa2
 2107 029b 02       		.byte	0x2
 2108 029c 23       		.byte	0x23
 2109 029d 64       		.uleb128 0x64
 2110 029e 0E       		.uleb128 0xe
 2111 029f FC040000 		.4byte	.LASF45
 2112 02a3 03       		.byte	0x3
 2113 02a4 F702     		.2byte	0x2f7
 2114 02a6 A7000000 		.4byte	0xa7
 2115 02aa 02       		.byte	0x2
 2116 02ab 23       		.byte	0x23
 2117 02ac 68       		.uleb128 0x68
 2118 02ad 0E       		.uleb128 0xe
 2119 02ae 7B070000 		.4byte	.LASF46
 2120 02b2 03       		.byte	0x3
 2121 02b3 F802     		.2byte	0x2f8
 2122 02b5 A2000000 		.4byte	0xa2
 2123 02b9 02       		.byte	0x2
 2124 02ba 23       		.byte	0x23
 2125 02bb 70       		.uleb128 0x70
 2126 02bc 0D       		.uleb128 0xd
 2127 02bd 43535200 		.ascii	"CSR\000"
 2128 02c1 03       		.byte	0x3
 2129 02c2 F902     		.2byte	0x2f9
 2130 02c4 A2000000 		.4byte	0xa2
 2131 02c8 02       		.byte	0x2
 2132 02c9 23       		.byte	0x23
 2133 02ca 74       		.uleb128 0x74
 2134 02cb 0E       		.uleb128 0xe
 2135 02cc 06050000 		.4byte	.LASF47
 2136 02d0 03       		.byte	0x3
 2137 02d1 FA02     		.2byte	0x2fa
 2138 02d3 A7000000 		.4byte	0xa7
 2139 02d7 02       		.byte	0x2
 2140 02d8 23       		.byte	0x23
 2141 02d9 78       		.uleb128 0x78
 2142 02da 0E       		.uleb128 0xe
 2143 02db 50070000 		.4byte	.LASF48
 2144 02df 03       		.byte	0x3
 2145 02e0 FB02     		.2byte	0x2fb
 2146 02e2 A2000000 		.4byte	0xa2
 2147 02e6 03       		.byte	0x3
 2148 02e7 23       		.byte	0x23
 2149 02e8 8001     		.uleb128 0x80
 2150 02ea 0E       		.uleb128 0xe
 2151 02eb 83030000 		.4byte	.LASF49
 2152 02ef 03       		.byte	0x3
 2153 02f0 FC02     		.2byte	0x2fc
 2154 02f2 A2000000 		.4byte	0xa2
 2155 02f6 03       		.byte	0x3
 2156 02f7 23       		.byte	0x23
 2157 02f8 8401     		.uleb128 0x84
ARM GAS  /tmp/cc69dDoz.s 			page 72


 2158 02fa 00       		.byte	0
 2159 02fb 0B       		.uleb128 0xb
 2160 02fc 4D030000 		.4byte	.LASF50
 2161 0300 03       		.byte	0x3
 2162 0301 FD02     		.2byte	0x2fd
 2163 0303 2E010000 		.4byte	0x12e
 2164 0307 0F       		.uleb128 0xf
 2165 0308 10       		.byte	0x10
 2166 0309 04       		.byte	0x4
 2167 030a 30       		.byte	0x30
 2168 030b 48030000 		.4byte	0x348
 2169 030f 10       		.uleb128 0x10
 2170 0310 40000000 		.4byte	.LASF51
 2171 0314 04       		.byte	0x4
 2172 0315 32       		.byte	0x32
 2173 0316 6D000000 		.4byte	0x6d
 2174 031a 02       		.byte	0x2
 2175 031b 23       		.byte	0x23
 2176 031c 00       		.uleb128 0
 2177 031d 10       		.uleb128 0x10
 2178 031e C6020000 		.4byte	.LASF52
 2179 0322 04       		.byte	0x4
 2180 0323 33       		.byte	0x33
 2181 0324 6D000000 		.4byte	0x6d
 2182 0328 02       		.byte	0x2
 2183 0329 23       		.byte	0x23
 2184 032a 04       		.uleb128 0x4
 2185 032b 10       		.uleb128 0x10
 2186 032c 18060000 		.4byte	.LASF53
 2187 0330 04       		.byte	0x4
 2188 0331 34       		.byte	0x34
 2189 0332 6D000000 		.4byte	0x6d
 2190 0336 02       		.byte	0x2
 2191 0337 23       		.byte	0x23
 2192 0338 08       		.uleb128 0x8
 2193 0339 10       		.uleb128 0x10
 2194 033a 7D010000 		.4byte	.LASF54
 2195 033e 04       		.byte	0x4
 2196 033f 35       		.byte	0x35
 2197 0340 6D000000 		.4byte	0x6d
 2198 0344 02       		.byte	0x2
 2199 0345 23       		.byte	0x23
 2200 0346 0C       		.uleb128 0xc
 2201 0347 00       		.byte	0
 2202 0348 03       		.uleb128 0x3
 2203 0349 C2070000 		.4byte	.LASF55
 2204 034d 04       		.byte	0x4
 2205 034e 36       		.byte	0x36
 2206 034f 07030000 		.4byte	0x307
 2207 0353 11       		.uleb128 0x11
 2208 0354 01       		.byte	0x1
 2209 0355 A2060000 		.4byte	.LASF136
 2210 0359 01       		.byte	0x1
 2211 035a CD       		.byte	0xcd
 2212 035b 01       		.byte	0x1
 2213 035c 00000000 		.4byte	.LFB110
 2214 0360 3C000000 		.4byte	.LFE110
ARM GAS  /tmp/cc69dDoz.s 			page 73


 2215 0364 02       		.byte	0x2
 2216 0365 7D       		.byte	0x7d
 2217 0366 00       		.sleb128 0
 2218 0367 01       		.byte	0x1
 2219 0368 12       		.uleb128 0x12
 2220 0369 01       		.byte	0x1
 2221 036a 28050000 		.4byte	.LASF56
 2222 036e 01       		.byte	0x1
 2223 036f FF       		.byte	0xff
 2224 0370 01       		.byte	0x1
 2225 0371 00000000 		.4byte	.LFB111
 2226 0375 10000000 		.4byte	.LFE111
 2227 0379 02       		.byte	0x2
 2228 037a 7D       		.byte	0x7d
 2229 037b 00       		.sleb128 0
 2230 037c 01       		.byte	0x1
 2231 037d 8F030000 		.4byte	0x38f
 2232 0381 13       		.uleb128 0x13
 2233 0382 07060000 		.4byte	.LASF58
 2234 0386 01       		.byte	0x1
 2235 0387 FF       		.byte	0xff
 2236 0388 30000000 		.4byte	0x30
 2237 038c 01       		.byte	0x1
 2238 038d 50       		.byte	0x50
 2239 038e 00       		.byte	0
 2240 038f 14       		.uleb128 0x14
 2241 0390 01       		.byte	0x1
 2242 0391 39060000 		.4byte	.LASF57
 2243 0395 01       		.byte	0x1
 2244 0396 3601     		.2byte	0x136
 2245 0398 01       		.byte	0x1
 2246 0399 00000000 		.4byte	.LFB113
 2247 039d 14000000 		.4byte	.LFE113
 2248 03a1 02       		.byte	0x2
 2249 03a2 7D       		.byte	0x7d
 2250 03a3 00       		.sleb128 0
 2251 03a4 01       		.byte	0x1
 2252 03a5 CA030000 		.4byte	0x3ca
 2253 03a9 15       		.uleb128 0x15
 2254 03aa 40020000 		.4byte	.LASF59
 2255 03ae 01       		.byte	0x1
 2256 03af 3601     		.2byte	0x136
 2257 03b1 30000000 		.4byte	0x30
 2258 03b5 00000000 		.4byte	.LLST0
 2259 03b9 16       		.uleb128 0x16
 2260 03ba 2D010000 		.4byte	.LASF80
 2261 03be 01       		.byte	0x1
 2262 03bf 3801     		.2byte	0x138
 2263 03c1 6D000000 		.4byte	0x6d
 2264 03c5 21000000 		.4byte	.LLST1
 2265 03c9 00       		.byte	0
 2266 03ca 14       		.uleb128 0x14
 2267 03cb 01       		.byte	0x1
 2268 03cc F2060000 		.4byte	.LASF60
 2269 03d0 01       		.byte	0x1
 2270 03d1 5A01     		.2byte	0x15a
 2271 03d3 01       		.byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 74


 2272 03d4 00000000 		.4byte	.LFB114
 2273 03d8 0C000000 		.4byte	.LFE114
 2274 03dc 02       		.byte	0x2
 2275 03dd 7D       		.byte	0x7d
 2276 03de 00       		.sleb128 0
 2277 03df 01       		.byte	0x1
 2278 03e0 F3030000 		.4byte	0x3f3
 2279 03e4 17       		.uleb128 0x17
 2280 03e5 54020000 		.4byte	.LASF61
 2281 03e9 01       		.byte	0x1
 2282 03ea 5A01     		.2byte	0x15a
 2283 03ec 00010000 		.4byte	0x100
 2284 03f0 01       		.byte	0x1
 2285 03f1 50       		.byte	0x50
 2286 03f2 00       		.byte	0
 2287 03f3 14       		.uleb128 0x14
 2288 03f4 01       		.byte	0x1
 2289 03f5 29020000 		.4byte	.LASF62
 2290 03f9 01       		.byte	0x1
 2291 03fa 7301     		.2byte	0x173
 2292 03fc 01       		.byte	0x1
 2293 03fd 00000000 		.4byte	.LFB115
 2294 0401 20000000 		.4byte	.LFE115
 2295 0405 02       		.byte	0x2
 2296 0406 7D       		.byte	0x7d
 2297 0407 00       		.sleb128 0
 2298 0408 01       		.byte	0x1
 2299 0409 1E040000 		.4byte	0x41e
 2300 040d 15       		.uleb128 0x15
 2301 040e 09000000 		.4byte	.LASF63
 2302 0412 01       		.byte	0x1
 2303 0413 7301     		.2byte	0x173
 2304 0415 30000000 		.4byte	0x30
 2305 0419 56000000 		.4byte	.LLST2
 2306 041d 00       		.byte	0
 2307 041e 14       		.uleb128 0x14
 2308 041f 01       		.byte	0x1
 2309 0420 69070000 		.4byte	.LASF64
 2310 0424 01       		.byte	0x1
 2311 0425 9B01     		.2byte	0x19b
 2312 0427 01       		.byte	0x1
 2313 0428 00000000 		.4byte	.LFB116
 2314 042c 0C000000 		.4byte	.LFE116
 2315 0430 02       		.byte	0x2
 2316 0431 7D       		.byte	0x7d
 2317 0432 00       		.sleb128 0
 2318 0433 01       		.byte	0x1
 2319 0434 47040000 		.4byte	0x447
 2320 0438 17       		.uleb128 0x17
 2321 0439 54020000 		.4byte	.LASF61
 2322 043d 01       		.byte	0x1
 2323 043e 9B01     		.2byte	0x19b
 2324 0440 00010000 		.4byte	0x100
 2325 0444 01       		.byte	0x1
 2326 0445 50       		.byte	0x50
 2327 0446 00       		.byte	0
 2328 0447 18       		.uleb128 0x18
ARM GAS  /tmp/cc69dDoz.s 			page 75


 2329 0448 01       		.byte	0x1
 2330 0449 B4070000 		.4byte	.LASF65
 2331 044d 01       		.byte	0x1
 2332 044e C601     		.2byte	0x1c6
 2333 0450 01       		.byte	0x1
 2334 0451 00000000 		.4byte	.LFB117
 2335 0455 20000000 		.4byte	.LFE117
 2336 0459 90000000 		.4byte	.LLST3
 2337 045d 01       		.byte	0x1
 2338 045e B2040000 		.4byte	0x4b2
 2339 0462 15       		.uleb128 0x15
 2340 0463 84020000 		.4byte	.LASF66
 2341 0467 01       		.byte	0x1
 2342 0468 C601     		.2byte	0x1c6
 2343 046a 6D000000 		.4byte	0x6d
 2344 046e B0000000 		.4byte	.LLST4
 2345 0472 15       		.uleb128 0x15
 2346 0473 BD000000 		.4byte	.LASF67
 2347 0477 01       		.byte	0x1
 2348 0478 C601     		.2byte	0x1c6
 2349 047a 6D000000 		.4byte	0x6d
 2350 047e D1000000 		.4byte	.LLST5
 2351 0482 15       		.uleb128 0x15
 2352 0483 81000000 		.4byte	.LASF68
 2353 0487 01       		.byte	0x1
 2354 0488 C601     		.2byte	0x1c6
 2355 048a 6D000000 		.4byte	0x6d
 2356 048e F2000000 		.4byte	.LLST6
 2357 0492 15       		.uleb128 0x15
 2358 0493 86000000 		.4byte	.LASF69
 2359 0497 01       		.byte	0x1
 2360 0498 C601     		.2byte	0x1c6
 2361 049a 6D000000 		.4byte	0x6d
 2362 049e 13010000 		.4byte	.LLST7
 2363 04a2 17       		.uleb128 0x17
 2364 04a3 8B000000 		.4byte	.LASF70
 2365 04a7 01       		.byte	0x1
 2366 04a8 C601     		.2byte	0x1c6
 2367 04aa 6D000000 		.4byte	0x6d
 2368 04ae 02       		.byte	0x2
 2369 04af 91       		.byte	0x91
 2370 04b0 00       		.sleb128 0
 2371 04b1 00       		.byte	0
 2372 04b2 14       		.uleb128 0x14
 2373 04b3 01       		.byte	0x1
 2374 04b4 77050000 		.4byte	.LASF71
 2375 04b8 01       		.byte	0x1
 2376 04b9 DD01     		.2byte	0x1dd
 2377 04bb 01       		.byte	0x1
 2378 04bc 00000000 		.4byte	.LFB118
 2379 04c0 0C000000 		.4byte	.LFE118
 2380 04c4 02       		.byte	0x2
 2381 04c5 7D       		.byte	0x7d
 2382 04c6 00       		.sleb128 0
 2383 04c7 01       		.byte	0x1
 2384 04c8 DB040000 		.4byte	0x4db
 2385 04cc 17       		.uleb128 0x17
ARM GAS  /tmp/cc69dDoz.s 			page 76


 2386 04cd 54020000 		.4byte	.LASF61
 2387 04d1 01       		.byte	0x1
 2388 04d2 DD01     		.2byte	0x1dd
 2389 04d4 00010000 		.4byte	0x100
 2390 04d8 01       		.byte	0x1
 2391 04d9 50       		.byte	0x50
 2392 04da 00       		.byte	0
 2393 04db 14       		.uleb128 0x14
 2394 04dc 01       		.byte	0x1
 2395 04dd AB030000 		.4byte	.LASF72
 2396 04e1 01       		.byte	0x1
 2397 04e2 F701     		.2byte	0x1f7
 2398 04e4 01       		.byte	0x1
 2399 04e5 00000000 		.4byte	.LFB119
 2400 04e9 14000000 		.4byte	.LFE119
 2401 04ed 02       		.byte	0x2
 2402 04ee 7D       		.byte	0x7d
 2403 04ef 00       		.sleb128 0
 2404 04f0 01       		.byte	0x1
 2405 04f1 16050000 		.4byte	0x516
 2406 04f5 15       		.uleb128 0x15
 2407 04f6 61060000 		.4byte	.LASF73
 2408 04fa 01       		.byte	0x1
 2409 04fb F701     		.2byte	0x1f7
 2410 04fd 6D000000 		.4byte	0x6d
 2411 0501 34010000 		.4byte	.LLST8
 2412 0505 15       		.uleb128 0x15
 2413 0506 AD060000 		.4byte	.LASF74
 2414 050a 01       		.byte	0x1
 2415 050b F701     		.2byte	0x1f7
 2416 050d 6D000000 		.4byte	0x6d
 2417 0511 55010000 		.4byte	.LLST9
 2418 0515 00       		.byte	0
 2419 0516 14       		.uleb128 0x14
 2420 0517 01       		.byte	0x1
 2421 0518 3F030000 		.4byte	.LASF75
 2422 051c 01       		.byte	0x1
 2423 051d 0602     		.2byte	0x206
 2424 051f 01       		.byte	0x1
 2425 0520 00000000 		.4byte	.LFB120
 2426 0524 0C000000 		.4byte	.LFE120
 2427 0528 02       		.byte	0x2
 2428 0529 7D       		.byte	0x7d
 2429 052a 00       		.sleb128 0
 2430 052b 01       		.byte	0x1
 2431 052c 3F050000 		.4byte	0x53f
 2432 0530 17       		.uleb128 0x17
 2433 0531 54020000 		.4byte	.LASF61
 2434 0535 01       		.byte	0x1
 2435 0536 0602     		.2byte	0x206
 2436 0538 00010000 		.4byte	0x100
 2437 053c 01       		.byte	0x1
 2438 053d 50       		.byte	0x50
 2439 053e 00       		.byte	0
 2440 053f 14       		.uleb128 0x14
 2441 0540 01       		.byte	0x1
 2442 0541 0D040000 		.4byte	.LASF76
ARM GAS  /tmp/cc69dDoz.s 			page 77


 2443 0545 01       		.byte	0x1
 2444 0546 1802     		.2byte	0x218
 2445 0548 01       		.byte	0x1
 2446 0549 00000000 		.4byte	.LFB121
 2447 054d 0C000000 		.4byte	.LFE121
 2448 0551 02       		.byte	0x2
 2449 0552 7D       		.byte	0x7d
 2450 0553 00       		.sleb128 0
 2451 0554 01       		.byte	0x1
 2452 0555 68050000 		.4byte	0x568
 2453 0559 17       		.uleb128 0x17
 2454 055a 54020000 		.4byte	.LASF61
 2455 055e 01       		.byte	0x1
 2456 055f 1802     		.2byte	0x218
 2457 0561 00010000 		.4byte	0x100
 2458 0565 01       		.byte	0x1
 2459 0566 50       		.byte	0x50
 2460 0567 00       		.byte	0
 2461 0568 14       		.uleb128 0x14
 2462 0569 01       		.byte	0x1
 2463 056a 13030000 		.4byte	.LASF77
 2464 056e 01       		.byte	0x1
 2465 056f 3102     		.2byte	0x231
 2466 0571 01       		.byte	0x1
 2467 0572 00000000 		.4byte	.LFB122
 2468 0576 14000000 		.4byte	.LFE122
 2469 057a 02       		.byte	0x2
 2470 057b 7D       		.byte	0x7d
 2471 057c 00       		.sleb128 0
 2472 057d 01       		.byte	0x1
 2473 057e B3050000 		.4byte	0x5b3
 2474 0582 15       		.uleb128 0x15
 2475 0583 5B000000 		.4byte	.LASF78
 2476 0587 01       		.byte	0x1
 2477 0588 3102     		.2byte	0x231
 2478 058a 6D000000 		.4byte	0x6d
 2479 058e 76010000 		.4byte	.LLST10
 2480 0592 15       		.uleb128 0x15
 2481 0593 87040000 		.4byte	.LASF79
 2482 0597 01       		.byte	0x1
 2483 0598 3102     		.2byte	0x231
 2484 059a 6D000000 		.4byte	0x6d
 2485 059e 97010000 		.4byte	.LLST11
 2486 05a2 16       		.uleb128 0x16
 2487 05a3 2D010000 		.4byte	.LASF80
 2488 05a7 01       		.byte	0x1
 2489 05a8 3302     		.2byte	0x233
 2490 05aa 6D000000 		.4byte	0x6d
 2491 05ae B8010000 		.4byte	.LLST12
 2492 05b2 00       		.byte	0
 2493 05b3 14       		.uleb128 0x14
 2494 05b4 01       		.byte	0x1
 2495 05b5 41070000 		.4byte	.LASF81
 2496 05b9 01       		.byte	0x1
 2497 05ba 5702     		.2byte	0x257
 2498 05bc 01       		.byte	0x1
 2499 05bd 00000000 		.4byte	.LFB123
ARM GAS  /tmp/cc69dDoz.s 			page 78


 2500 05c1 14000000 		.4byte	.LFE123
 2501 05c5 02       		.byte	0x2
 2502 05c6 7D       		.byte	0x7d
 2503 05c7 00       		.sleb128 0
 2504 05c8 01       		.byte	0x1
 2505 05c9 FE050000 		.4byte	0x5fe
 2506 05cd 15       		.uleb128 0x15
 2507 05ce AA040000 		.4byte	.LASF82
 2508 05d2 01       		.byte	0x1
 2509 05d3 5702     		.2byte	0x257
 2510 05d5 6D000000 		.4byte	0x6d
 2511 05d9 F5010000 		.4byte	.LLST13
 2512 05dd 15       		.uleb128 0x15
 2513 05de E4030000 		.4byte	.LASF83
 2514 05e2 01       		.byte	0x1
 2515 05e3 5702     		.2byte	0x257
 2516 05e5 6D000000 		.4byte	0x6d
 2517 05e9 16020000 		.4byte	.LLST14
 2518 05ed 16       		.uleb128 0x16
 2519 05ee 2D010000 		.4byte	.LASF80
 2520 05f2 01       		.byte	0x1
 2521 05f3 5902     		.2byte	0x259
 2522 05f5 6D000000 		.4byte	0x6d
 2523 05f9 37020000 		.4byte	.LLST15
 2524 05fd 00       		.byte	0
 2525 05fe 14       		.uleb128 0x14
 2526 05ff 01       		.byte	0x1
 2527 0600 0F020000 		.4byte	.LASF84
 2528 0604 01       		.byte	0x1
 2529 0605 C202     		.2byte	0x2c2
 2530 0607 01       		.byte	0x1
 2531 0608 00000000 		.4byte	.LFB124
 2532 060c 14000000 		.4byte	.LFE124
 2533 0610 02       		.byte	0x2
 2534 0611 7D       		.byte	0x7d
 2535 0612 00       		.sleb128 0
 2536 0613 01       		.byte	0x1
 2537 0614 39060000 		.4byte	0x639
 2538 0618 15       		.uleb128 0x15
 2539 0619 F6050000 		.4byte	.LASF85
 2540 061d 01       		.byte	0x1
 2541 061e C202     		.2byte	0x2c2
 2542 0620 6D000000 		.4byte	0x6d
 2543 0624 74020000 		.4byte	.LLST16
 2544 0628 16       		.uleb128 0x16
 2545 0629 2D010000 		.4byte	.LASF80
 2546 062d 01       		.byte	0x1
 2547 062e C402     		.2byte	0x2c4
 2548 0630 6D000000 		.4byte	0x6d
 2549 0634 95020000 		.4byte	.LLST17
 2550 0638 00       		.byte	0
 2551 0639 19       		.uleb128 0x19
 2552 063a 01       		.byte	0x1
 2553 063b 92020000 		.4byte	.LASF144
 2554 063f 01       		.byte	0x1
 2555 0640 DE02     		.2byte	0x2de
 2556 0642 01       		.byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 79


 2557 0643 30000000 		.4byte	0x30
 2558 0647 00000000 		.4byte	.LFB125
 2559 064b 10000000 		.4byte	.LFE125
 2560 064f 02       		.byte	0x2
 2561 0650 7D       		.byte	0x7d
 2562 0651 00       		.sleb128 0
 2563 0652 01       		.byte	0x1
 2564 0653 14       		.uleb128 0x14
 2565 0654 01       		.byte	0x1
 2566 0655 F2010000 		.4byte	.LASF86
 2567 0659 01       		.byte	0x1
 2568 065a F702     		.2byte	0x2f7
 2569 065c 01       		.byte	0x1
 2570 065d 00000000 		.4byte	.LFB126
 2571 0661 14000000 		.4byte	.LFE126
 2572 0665 02       		.byte	0x2
 2573 0666 7D       		.byte	0x7d
 2574 0667 00       		.sleb128 0
 2575 0668 01       		.byte	0x1
 2576 0669 8E060000 		.4byte	0x68e
 2577 066d 15       		.uleb128 0x15
 2578 066e 34030000 		.4byte	.LASF87
 2579 0672 01       		.byte	0x1
 2580 0673 F702     		.2byte	0x2f7
 2581 0675 6D000000 		.4byte	0x6d
 2582 0679 CA020000 		.4byte	.LLST18
 2583 067d 16       		.uleb128 0x16
 2584 067e 2D010000 		.4byte	.LASF80
 2585 0682 01       		.byte	0x1
 2586 0683 F902     		.2byte	0x2f9
 2587 0685 6D000000 		.4byte	0x6d
 2588 0689 EB020000 		.4byte	.LLST19
 2589 068d 00       		.byte	0
 2590 068e 14       		.uleb128 0x14
 2591 068f 01       		.byte	0x1
 2592 0690 B4010000 		.4byte	.LASF88
 2593 0694 01       		.byte	0x1
 2594 0695 1703     		.2byte	0x317
 2595 0697 01       		.byte	0x1
 2596 0698 00000000 		.4byte	.LFB127
 2597 069c 14000000 		.4byte	.LFE127
 2598 06a0 02       		.byte	0x2
 2599 06a1 7D       		.byte	0x7d
 2600 06a2 00       		.sleb128 0
 2601 06a3 01       		.byte	0x1
 2602 06a4 C9060000 		.4byte	0x6c9
 2603 06a8 15       		.uleb128 0x15
 2604 06a9 00000000 		.4byte	.LASF89
 2605 06ad 01       		.byte	0x1
 2606 06ae 1703     		.2byte	0x317
 2607 06b0 6D000000 		.4byte	0x6d
 2608 06b4 20030000 		.4byte	.LLST20
 2609 06b8 16       		.uleb128 0x16
 2610 06b9 2D010000 		.4byte	.LASF80
 2611 06bd 01       		.byte	0x1
 2612 06be 1903     		.2byte	0x319
 2613 06c0 6D000000 		.4byte	0x6d
ARM GAS  /tmp/cc69dDoz.s 			page 80


 2614 06c4 41030000 		.4byte	.LLST21
 2615 06c8 00       		.byte	0
 2616 06c9 14       		.uleb128 0x14
 2617 06ca 01       		.byte	0x1
 2618 06cb E6050000 		.4byte	.LASF90
 2619 06cf 01       		.byte	0x1
 2620 06d0 3603     		.2byte	0x336
 2621 06d2 01       		.byte	0x1
 2622 06d3 00000000 		.4byte	.LFB128
 2623 06d7 14000000 		.4byte	.LFE128
 2624 06db 02       		.byte	0x2
 2625 06dc 7D       		.byte	0x7d
 2626 06dd 00       		.sleb128 0
 2627 06de 01       		.byte	0x1
 2628 06df 04070000 		.4byte	0x704
 2629 06e3 15       		.uleb128 0x15
 2630 06e4 00000000 		.4byte	.LASF89
 2631 06e8 01       		.byte	0x1
 2632 06e9 3603     		.2byte	0x336
 2633 06eb 6D000000 		.4byte	0x6d
 2634 06ef 76030000 		.4byte	.LLST22
 2635 06f3 16       		.uleb128 0x16
 2636 06f4 2D010000 		.4byte	.LASF80
 2637 06f8 01       		.byte	0x1
 2638 06f9 3803     		.2byte	0x338
 2639 06fb 6D000000 		.4byte	0x6d
 2640 06ff 97030000 		.4byte	.LLST23
 2641 0703 00       		.byte	0
 2642 0704 18       		.uleb128 0x18
 2643 0705 01       		.byte	0x1
 2644 0706 69060000 		.4byte	.LASF91
 2645 070a 01       		.byte	0x1
 2646 070b 6A03     		.2byte	0x36a
 2647 070d 01       		.byte	0x1
 2648 070e 00000000 		.4byte	.LFB129
 2649 0712 8C000000 		.4byte	.LFE129
 2650 0716 CC030000 		.4byte	.LLST24
 2651 071a 01       		.byte	0x1
 2652 071b 8E070000 		.4byte	0x78e
 2653 071f 17       		.uleb128 0x17
 2654 0720 DB000000 		.4byte	.LASF92
 2655 0724 01       		.byte	0x1
 2656 0725 6A03     		.2byte	0x36a
 2657 0727 8E070000 		.4byte	0x78e
 2658 072b 01       		.byte	0x1
 2659 072c 50       		.byte	0x50
 2660 072d 1A       		.uleb128 0x1a
 2661 072e 746D7000 		.ascii	"tmp\000"
 2662 0732 01       		.byte	0x1
 2663 0733 6C03     		.2byte	0x36c
 2664 0735 6D000000 		.4byte	0x6d
 2665 0739 EC030000 		.4byte	.LLST25
 2666 073d 16       		.uleb128 0x16
 2667 073e 59030000 		.4byte	.LASF93
 2668 0742 01       		.byte	0x1
 2669 0743 6C03     		.2byte	0x36c
 2670 0745 6D000000 		.4byte	0x6d
ARM GAS  /tmp/cc69dDoz.s 			page 81


 2671 0749 6D040000 		.4byte	.LLST26
 2672 074d 16       		.uleb128 0x16
 2673 074e 92060000 		.4byte	.LASF94
 2674 0752 01       		.byte	0x1
 2675 0753 6C03     		.2byte	0x36c
 2676 0755 6D000000 		.4byte	0x6d
 2677 0759 B1040000 		.4byte	.LLST27
 2678 075d 16       		.uleb128 0x16
 2679 075e 56000000 		.4byte	.LASF95
 2680 0762 01       		.byte	0x1
 2681 0763 6C03     		.2byte	0x36c
 2682 0765 6D000000 		.4byte	0x6d
 2683 0769 D0040000 		.4byte	.LLST28
 2684 076d 16       		.uleb128 0x16
 2685 076e EA070000 		.4byte	.LASF96
 2686 0772 01       		.byte	0x1
 2687 0773 6C03     		.2byte	0x36c
 2688 0775 6D000000 		.4byte	0x6d
 2689 0779 FB040000 		.4byte	.LLST29
 2690 077d 16       		.uleb128 0x16
 2691 077e 51000000 		.4byte	.LASF97
 2692 0782 01       		.byte	0x1
 2693 0783 6C03     		.2byte	0x36c
 2694 0785 6D000000 		.4byte	0x6d
 2695 0789 22050000 		.4byte	.LLST30
 2696 078d 00       		.byte	0
 2697 078e 1B       		.uleb128 0x1b
 2698 078f 04       		.byte	0x4
 2699 0790 48030000 		.4byte	0x348
 2700 0794 14       		.uleb128 0x14
 2701 0795 01       		.byte	0x1
 2702 0796 02030000 		.4byte	.LASF98
 2703 079a 01       		.byte	0x1
 2704 079b E703     		.2byte	0x3e7
 2705 079d 01       		.byte	0x1
 2706 079e 00000000 		.4byte	.LFB130
 2707 07a2 30000000 		.4byte	.LFE130
 2708 07a6 02       		.byte	0x2
 2709 07a7 7D       		.byte	0x7d
 2710 07a8 00       		.sleb128 0
 2711 07a9 01       		.byte	0x1
 2712 07aa CF070000 		.4byte	0x7cf
 2713 07ae 15       		.uleb128 0x15
 2714 07af 5F030000 		.4byte	.LASF99
 2715 07b3 01       		.byte	0x1
 2716 07b4 E703     		.2byte	0x3e7
 2717 07b6 6D000000 		.4byte	0x6d
 2718 07ba 41050000 		.4byte	.LLST31
 2719 07be 16       		.uleb128 0x16
 2720 07bf 2D010000 		.4byte	.LASF80
 2721 07c3 01       		.byte	0x1
 2722 07c4 E903     		.2byte	0x3e9
 2723 07c6 6D000000 		.4byte	0x6d
 2724 07ca 62050000 		.4byte	.LLST32
 2725 07ce 00       		.byte	0
 2726 07cf 14       		.uleb128 0x14
 2727 07d0 01       		.byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 82


 2728 07d1 F0030000 		.4byte	.LASF100
 2729 07d5 01       		.byte	0x1
 2730 07d6 0704     		.2byte	0x407
 2731 07d8 01       		.byte	0x1
 2732 07d9 00000000 		.4byte	.LFB131
 2733 07dd 0C000000 		.4byte	.LFE131
 2734 07e1 02       		.byte	0x2
 2735 07e2 7D       		.byte	0x7d
 2736 07e3 00       		.sleb128 0
 2737 07e4 01       		.byte	0x1
 2738 07e5 F8070000 		.4byte	0x7f8
 2739 07e9 17       		.uleb128 0x17
 2740 07ea 54020000 		.4byte	.LASF61
 2741 07ee 01       		.byte	0x1
 2742 07ef 0704     		.2byte	0x407
 2743 07f1 00010000 		.4byte	0x100
 2744 07f5 01       		.byte	0x1
 2745 07f6 50       		.byte	0x50
 2746 07f7 00       		.byte	0
 2747 07f8 14       		.uleb128 0x14
 2748 07f9 01       		.byte	0x1
 2749 07fa 65020000 		.4byte	.LASF101
 2750 07fe 01       		.byte	0x1
 2751 07ff 1804     		.2byte	0x418
 2752 0801 01       		.byte	0x1
 2753 0802 00000000 		.4byte	.LFB132
 2754 0806 0C000000 		.4byte	.LFE132
 2755 080a 02       		.byte	0x2
 2756 080b 7D       		.byte	0x7d
 2757 080c 00       		.sleb128 0
 2758 080d 01       		.byte	0x1
 2759 080e 21080000 		.4byte	0x821
 2760 0812 17       		.uleb128 0x17
 2761 0813 54020000 		.4byte	.LASF61
 2762 0817 01       		.byte	0x1
 2763 0818 1804     		.2byte	0x418
 2764 081a 00010000 		.4byte	0x100
 2765 081e 01       		.byte	0x1
 2766 081f 50       		.byte	0x50
 2767 0820 00       		.byte	0
 2768 0821 14       		.uleb128 0x14
 2769 0822 01       		.byte	0x1
 2770 0823 30070000 		.4byte	.LASF102
 2771 0827 01       		.byte	0x1
 2772 0828 2904     		.2byte	0x429
 2773 082a 01       		.byte	0x1
 2774 082b 00000000 		.4byte	.LFB133
 2775 082f 0C000000 		.4byte	.LFE133
 2776 0833 02       		.byte	0x2
 2777 0834 7D       		.byte	0x7d
 2778 0835 00       		.sleb128 0
 2779 0836 01       		.byte	0x1
 2780 0837 4A080000 		.4byte	0x84a
 2781 083b 17       		.uleb128 0x17
 2782 083c B9040000 		.4byte	.LASF103
 2783 0840 01       		.byte	0x1
 2784 0841 2904     		.2byte	0x429
ARM GAS  /tmp/cc69dDoz.s 			page 83


 2785 0843 6D000000 		.4byte	0x6d
 2786 0847 01       		.byte	0x1
 2787 0848 50       		.byte	0x50
 2788 0849 00       		.byte	0
 2789 084a 14       		.uleb128 0x14
 2790 084b 01       		.byte	0x1
 2791 084c 1B070000 		.4byte	.LASF104
 2792 0850 01       		.byte	0x1
 2793 0851 4204     		.2byte	0x442
 2794 0853 01       		.byte	0x1
 2795 0854 00000000 		.4byte	.LFB134
 2796 0858 0C000000 		.4byte	.LFE134
 2797 085c 02       		.byte	0x2
 2798 085d 7D       		.byte	0x7d
 2799 085e 00       		.sleb128 0
 2800 085f 01       		.byte	0x1
 2801 0860 73080000 		.4byte	0x873
 2802 0864 17       		.uleb128 0x17
 2803 0865 63050000 		.4byte	.LASF105
 2804 0869 01       		.byte	0x1
 2805 086a 4204     		.2byte	0x442
 2806 086c 6D000000 		.4byte	0x6d
 2807 0870 01       		.byte	0x1
 2808 0871 50       		.byte	0x50
 2809 0872 00       		.byte	0
 2810 0873 14       		.uleb128 0x14
 2811 0874 01       		.byte	0x1
 2812 0875 82050000 		.4byte	.LASF106
 2813 0879 01       		.byte	0x1
 2814 087a 6A04     		.2byte	0x46a
 2815 087c 01       		.byte	0x1
 2816 087d 00000000 		.4byte	.LFB135
 2817 0881 18000000 		.4byte	.LFE135
 2818 0885 02       		.byte	0x2
 2819 0886 7D       		.byte	0x7d
 2820 0887 00       		.sleb128 0
 2821 0888 01       		.byte	0x1
 2822 0889 AC080000 		.4byte	0x8ac
 2823 088d 15       		.uleb128 0x15
 2824 088e C2000000 		.4byte	.LASF107
 2825 0892 01       		.byte	0x1
 2826 0893 6A04     		.2byte	0x46a
 2827 0895 6D000000 		.4byte	0x6d
 2828 0899 8C050000 		.4byte	.LLST33
 2829 089d 17       		.uleb128 0x17
 2830 089e 54020000 		.4byte	.LASF61
 2831 08a2 01       		.byte	0x1
 2832 08a3 6A04     		.2byte	0x46a
 2833 08a5 00010000 		.4byte	0x100
 2834 08a9 01       		.byte	0x1
 2835 08aa 51       		.byte	0x51
 2836 08ab 00       		.byte	0
 2837 08ac 14       		.uleb128 0x14
 2838 08ad 01       		.byte	0x1
 2839 08ae 8D010000 		.4byte	.LASF108
 2840 08b2 01       		.byte	0x1
 2841 08b3 8A04     		.2byte	0x48a
ARM GAS  /tmp/cc69dDoz.s 			page 84


 2842 08b5 01       		.byte	0x1
 2843 08b6 00000000 		.4byte	.LFB136
 2844 08ba 18000000 		.4byte	.LFE136
 2845 08be 02       		.byte	0x2
 2846 08bf 7D       		.byte	0x7d
 2847 08c0 00       		.sleb128 0
 2848 08c1 01       		.byte	0x1
 2849 08c2 E5080000 		.4byte	0x8e5
 2850 08c6 15       		.uleb128 0x15
 2851 08c7 BC030000 		.4byte	.LASF109
 2852 08cb 01       		.byte	0x1
 2853 08cc 8A04     		.2byte	0x48a
 2854 08ce 6D000000 		.4byte	0x6d
 2855 08d2 C6050000 		.4byte	.LLST34
 2856 08d6 17       		.uleb128 0x17
 2857 08d7 54020000 		.4byte	.LASF61
 2858 08db 01       		.byte	0x1
 2859 08dc 8A04     		.2byte	0x48a
 2860 08de 00010000 		.4byte	0x100
 2861 08e2 01       		.byte	0x1
 2862 08e3 51       		.byte	0x51
 2863 08e4 00       		.byte	0
 2864 08e5 14       		.uleb128 0x14
 2865 08e6 01       		.byte	0x1
 2866 08e7 11080000 		.4byte	.LASF110
 2867 08eb 01       		.byte	0x1
 2868 08ec A604     		.2byte	0x4a6
 2869 08ee 01       		.byte	0x1
 2870 08ef 00000000 		.4byte	.LFB137
 2871 08f3 18000000 		.4byte	.LFE137
 2872 08f7 02       		.byte	0x2
 2873 08f8 7D       		.byte	0x7d
 2874 08f9 00       		.sleb128 0
 2875 08fa 01       		.byte	0x1
 2876 08fb 1E090000 		.4byte	0x91e
 2877 08ff 15       		.uleb128 0x15
 2878 0900 D5030000 		.4byte	.LASF111
 2879 0904 01       		.byte	0x1
 2880 0905 A604     		.2byte	0x4a6
 2881 0907 6D000000 		.4byte	0x6d
 2882 090b 00060000 		.4byte	.LLST35
 2883 090f 17       		.uleb128 0x17
 2884 0910 54020000 		.4byte	.LASF61
 2885 0914 01       		.byte	0x1
 2886 0915 A604     		.2byte	0x4a6
 2887 0917 00010000 		.4byte	0x100
 2888 091b 01       		.byte	0x1
 2889 091c 51       		.byte	0x51
 2890 091d 00       		.byte	0
 2891 091e 14       		.uleb128 0x14
 2892 091f 01       		.byte	0x1
 2893 0920 80070000 		.4byte	.LASF112
 2894 0924 01       		.byte	0x1
 2895 0925 DA04     		.2byte	0x4da
 2896 0927 01       		.byte	0x1
 2897 0928 00000000 		.4byte	.LFB138
 2898 092c 18000000 		.4byte	.LFE138
ARM GAS  /tmp/cc69dDoz.s 			page 85


 2899 0930 02       		.byte	0x2
 2900 0931 7D       		.byte	0x7d
 2901 0932 00       		.sleb128 0
 2902 0933 01       		.byte	0x1
 2903 0934 57090000 		.4byte	0x957
 2904 0938 15       		.uleb128 0x15
 2905 0939 DE020000 		.4byte	.LASF113
 2906 093d 01       		.byte	0x1
 2907 093e DA04     		.2byte	0x4da
 2908 0940 6D000000 		.4byte	0x6d
 2909 0944 3A060000 		.4byte	.LLST36
 2910 0948 17       		.uleb128 0x17
 2911 0949 54020000 		.4byte	.LASF61
 2912 094d 01       		.byte	0x1
 2913 094e DA04     		.2byte	0x4da
 2914 0950 00010000 		.4byte	0x100
 2915 0954 01       		.byte	0x1
 2916 0955 51       		.byte	0x51
 2917 0956 00       		.byte	0
 2918 0957 14       		.uleb128 0x14
 2919 0958 01       		.byte	0x1
 2920 0959 7B060000 		.4byte	.LASF114
 2921 095d 01       		.byte	0x1
 2922 095e 0505     		.2byte	0x505
 2923 0960 01       		.byte	0x1
 2924 0961 00000000 		.4byte	.LFB139
 2925 0965 18000000 		.4byte	.LFE139
 2926 0969 02       		.byte	0x2
 2927 096a 7D       		.byte	0x7d
 2928 096b 00       		.sleb128 0
 2929 096c 01       		.byte	0x1
 2930 096d 90090000 		.4byte	0x990
 2931 0971 15       		.uleb128 0x15
 2932 0972 0C070000 		.4byte	.LASF115
 2933 0976 01       		.byte	0x1
 2934 0977 0505     		.2byte	0x505
 2935 0979 6D000000 		.4byte	0x6d
 2936 097d 74060000 		.4byte	.LLST37
 2937 0981 17       		.uleb128 0x17
 2938 0982 54020000 		.4byte	.LASF61
 2939 0986 01       		.byte	0x1
 2940 0987 0505     		.2byte	0x505
 2941 0989 00010000 		.4byte	0x100
 2942 098d 01       		.byte	0x1
 2943 098e 51       		.byte	0x51
 2944 098f 00       		.byte	0
 2945 0990 14       		.uleb128 0x14
 2946 0991 01       		.byte	0x1
 2947 0992 DB010000 		.4byte	.LASF116
 2948 0996 01       		.byte	0x1
 2949 0997 2C05     		.2byte	0x52c
 2950 0999 01       		.byte	0x1
 2951 099a 00000000 		.4byte	.LFB140
 2952 099e 18000000 		.4byte	.LFE140
 2953 09a2 02       		.byte	0x2
 2954 09a3 7D       		.byte	0x7d
 2955 09a4 00       		.sleb128 0
ARM GAS  /tmp/cc69dDoz.s 			page 86


 2956 09a5 01       		.byte	0x1
 2957 09a6 C9090000 		.4byte	0x9c9
 2958 09aa 15       		.uleb128 0x15
 2959 09ab C2000000 		.4byte	.LASF107
 2960 09af 01       		.byte	0x1
 2961 09b0 2C05     		.2byte	0x52c
 2962 09b2 6D000000 		.4byte	0x6d
 2963 09b6 AE060000 		.4byte	.LLST38
 2964 09ba 17       		.uleb128 0x17
 2965 09bb 54020000 		.4byte	.LASF61
 2966 09bf 01       		.byte	0x1
 2967 09c0 2C05     		.2byte	0x52c
 2968 09c2 00010000 		.4byte	0x100
 2969 09c6 01       		.byte	0x1
 2970 09c7 51       		.byte	0x51
 2971 09c8 00       		.byte	0
 2972 09c9 14       		.uleb128 0x14
 2973 09ca 01       		.byte	0x1
 2974 09cb B2050000 		.4byte	.LASF117
 2975 09cf 01       		.byte	0x1
 2976 09d0 4905     		.2byte	0x549
 2977 09d2 01       		.byte	0x1
 2978 09d3 00000000 		.4byte	.LFB141
 2979 09d7 18000000 		.4byte	.LFE141
 2980 09db 02       		.byte	0x2
 2981 09dc 7D       		.byte	0x7d
 2982 09dd 00       		.sleb128 0
 2983 09de 01       		.byte	0x1
 2984 09df 020A0000 		.4byte	0xa02
 2985 09e3 15       		.uleb128 0x15
 2986 09e4 BC030000 		.4byte	.LASF109
 2987 09e8 01       		.byte	0x1
 2988 09e9 4905     		.2byte	0x549
 2989 09eb 6D000000 		.4byte	0x6d
 2990 09ef E8060000 		.4byte	.LLST39
 2991 09f3 17       		.uleb128 0x17
 2992 09f4 54020000 		.4byte	.LASF61
 2993 09f8 01       		.byte	0x1
 2994 09f9 4905     		.2byte	0x549
 2995 09fb 00010000 		.4byte	0x100
 2996 09ff 01       		.byte	0x1
 2997 0a00 51       		.byte	0x51
 2998 0a01 00       		.byte	0
 2999 0a02 14       		.uleb128 0x14
 3000 0a03 01       		.byte	0x1
 3001 0a04 C4010000 		.4byte	.LASF118
 3002 0a08 01       		.byte	0x1
 3003 0a09 6205     		.2byte	0x562
 3004 0a0b 01       		.byte	0x1
 3005 0a0c 00000000 		.4byte	.LFB142
 3006 0a10 18000000 		.4byte	.LFE142
 3007 0a14 02       		.byte	0x2
 3008 0a15 7D       		.byte	0x7d
 3009 0a16 00       		.sleb128 0
 3010 0a17 01       		.byte	0x1
 3011 0a18 3B0A0000 		.4byte	0xa3b
 3012 0a1c 15       		.uleb128 0x15
ARM GAS  /tmp/cc69dDoz.s 			page 87


 3013 0a1d D5030000 		.4byte	.LASF111
 3014 0a21 01       		.byte	0x1
 3015 0a22 6205     		.2byte	0x562
 3016 0a24 6D000000 		.4byte	0x6d
 3017 0a28 22070000 		.4byte	.LLST40
 3018 0a2c 17       		.uleb128 0x17
 3019 0a2d 54020000 		.4byte	.LASF61
 3020 0a31 01       		.byte	0x1
 3021 0a32 6205     		.2byte	0x562
 3022 0a34 00010000 		.4byte	0x100
 3023 0a38 01       		.byte	0x1
 3024 0a39 51       		.byte	0x51
 3025 0a3a 00       		.byte	0
 3026 0a3b 14       		.uleb128 0x14
 3027 0a3c 01       		.byte	0x1
 3028 0a3d 6A000000 		.4byte	.LASF119
 3029 0a41 01       		.byte	0x1
 3030 0a42 9305     		.2byte	0x593
 3031 0a44 01       		.byte	0x1
 3032 0a45 00000000 		.4byte	.LFB143
 3033 0a49 18000000 		.4byte	.LFE143
 3034 0a4d 02       		.byte	0x2
 3035 0a4e 7D       		.byte	0x7d
 3036 0a4f 00       		.sleb128 0
 3037 0a50 01       		.byte	0x1
 3038 0a51 740A0000 		.4byte	0xa74
 3039 0a55 15       		.uleb128 0x15
 3040 0a56 DE020000 		.4byte	.LASF113
 3041 0a5a 01       		.byte	0x1
 3042 0a5b 9305     		.2byte	0x593
 3043 0a5d 6D000000 		.4byte	0x6d
 3044 0a61 5C070000 		.4byte	.LLST41
 3045 0a65 17       		.uleb128 0x17
 3046 0a66 54020000 		.4byte	.LASF61
 3047 0a6a 01       		.byte	0x1
 3048 0a6b 9305     		.2byte	0x593
 3049 0a6d 00010000 		.4byte	0x100
 3050 0a71 01       		.byte	0x1
 3051 0a72 51       		.byte	0x51
 3052 0a73 00       		.byte	0
 3053 0a74 14       		.uleb128 0x14
 3054 0a75 01       		.byte	0x1
 3055 0a76 93040000 		.4byte	.LASF120
 3056 0a7a 01       		.byte	0x1
 3057 0a7b BA05     		.2byte	0x5ba
 3058 0a7d 01       		.byte	0x1
 3059 0a7e 00000000 		.4byte	.LFB144
 3060 0a82 18000000 		.4byte	.LFE144
 3061 0a86 02       		.byte	0x2
 3062 0a87 7D       		.byte	0x7d
 3063 0a88 00       		.sleb128 0
 3064 0a89 01       		.byte	0x1
 3065 0a8a AD0A0000 		.4byte	0xaad
 3066 0a8e 15       		.uleb128 0x15
 3067 0a8f 0C070000 		.4byte	.LASF115
 3068 0a93 01       		.byte	0x1
 3069 0a94 BA05     		.2byte	0x5ba
ARM GAS  /tmp/cc69dDoz.s 			page 88


 3070 0a96 6D000000 		.4byte	0x6d
 3071 0a9a 96070000 		.4byte	.LLST42
 3072 0a9e 17       		.uleb128 0x17
 3073 0a9f 54020000 		.4byte	.LASF61
 3074 0aa3 01       		.byte	0x1
 3075 0aa4 BA05     		.2byte	0x5ba
 3076 0aa6 00010000 		.4byte	0x100
 3077 0aaa 01       		.byte	0x1
 3078 0aab 51       		.byte	0x51
 3079 0aac 00       		.byte	0
 3080 0aad 14       		.uleb128 0x14
 3081 0aae 01       		.byte	0x1
 3082 0aaf F4070000 		.4byte	.LASF121
 3083 0ab3 01       		.byte	0x1
 3084 0ab4 E805     		.2byte	0x5e8
 3085 0ab6 01       		.byte	0x1
 3086 0ab7 00000000 		.4byte	.LFB145
 3087 0abb 18000000 		.4byte	.LFE145
 3088 0abf 02       		.byte	0x2
 3089 0ac0 7D       		.byte	0x7d
 3090 0ac1 00       		.sleb128 0
 3091 0ac2 01       		.byte	0x1
 3092 0ac3 E60A0000 		.4byte	0xae6
 3093 0ac7 15       		.uleb128 0x15
 3094 0ac8 C2000000 		.4byte	.LASF107
 3095 0acc 01       		.byte	0x1
 3096 0acd E805     		.2byte	0x5e8
 3097 0acf 6D000000 		.4byte	0x6d
 3098 0ad3 D0070000 		.4byte	.LLST43
 3099 0ad7 17       		.uleb128 0x17
 3100 0ad8 54020000 		.4byte	.LASF61
 3101 0adc 01       		.byte	0x1
 3102 0add E805     		.2byte	0x5e8
 3103 0adf 00010000 		.4byte	0x100
 3104 0ae3 01       		.byte	0x1
 3105 0ae4 51       		.byte	0x51
 3106 0ae5 00       		.byte	0
 3107 0ae6 14       		.uleb128 0x14
 3108 0ae7 01       		.byte	0x1
 3109 0ae8 8E030000 		.4byte	.LASF122
 3110 0aec 01       		.byte	0x1
 3111 0aed 0806     		.2byte	0x608
 3112 0aef 01       		.byte	0x1
 3113 0af0 00000000 		.4byte	.LFB146
 3114 0af4 18000000 		.4byte	.LFE146
 3115 0af8 02       		.byte	0x2
 3116 0af9 7D       		.byte	0x7d
 3117 0afa 00       		.sleb128 0
 3118 0afb 01       		.byte	0x1
 3119 0afc 1F0B0000 		.4byte	0xb1f
 3120 0b00 15       		.uleb128 0x15
 3121 0b01 BC030000 		.4byte	.LASF109
 3122 0b05 01       		.byte	0x1
 3123 0b06 0806     		.2byte	0x608
 3124 0b08 6D000000 		.4byte	0x6d
 3125 0b0c 0A080000 		.4byte	.LLST44
 3126 0b10 17       		.uleb128 0x17
ARM GAS  /tmp/cc69dDoz.s 			page 89


 3127 0b11 54020000 		.4byte	.LASF61
 3128 0b15 01       		.byte	0x1
 3129 0b16 0806     		.2byte	0x608
 3130 0b18 00010000 		.4byte	0x100
 3131 0b1c 01       		.byte	0x1
 3132 0b1d 51       		.byte	0x51
 3133 0b1e 00       		.byte	0
 3134 0b1f 14       		.uleb128 0x14
 3135 0b20 01       		.byte	0x1
 3136 0b21 D5060000 		.4byte	.LASF123
 3137 0b25 01       		.byte	0x1
 3138 0b26 2406     		.2byte	0x624
 3139 0b28 01       		.byte	0x1
 3140 0b29 00000000 		.4byte	.LFB147
 3141 0b2d 18000000 		.4byte	.LFE147
 3142 0b31 02       		.byte	0x2
 3143 0b32 7D       		.byte	0x7d
 3144 0b33 00       		.sleb128 0
 3145 0b34 01       		.byte	0x1
 3146 0b35 580B0000 		.4byte	0xb58
 3147 0b39 15       		.uleb128 0x15
 3148 0b3a D5030000 		.4byte	.LASF111
 3149 0b3e 01       		.byte	0x1
 3150 0b3f 2406     		.2byte	0x624
 3151 0b41 6D000000 		.4byte	0x6d
 3152 0b45 44080000 		.4byte	.LLST45
 3153 0b49 17       		.uleb128 0x17
 3154 0b4a 54020000 		.4byte	.LASF61
 3155 0b4e 01       		.byte	0x1
 3156 0b4f 2406     		.2byte	0x624
 3157 0b51 00010000 		.4byte	0x100
 3158 0b55 01       		.byte	0x1
 3159 0b56 51       		.byte	0x51
 3160 0b57 00       		.byte	0
 3161 0b58 14       		.uleb128 0x14
 3162 0b59 01       		.byte	0x1
 3163 0b5a C9050000 		.4byte	.LASF124
 3164 0b5e 01       		.byte	0x1
 3165 0b5f 5806     		.2byte	0x658
 3166 0b61 01       		.byte	0x1
 3167 0b62 00000000 		.4byte	.LFB148
 3168 0b66 18000000 		.4byte	.LFE148
 3169 0b6a 02       		.byte	0x2
 3170 0b6b 7D       		.byte	0x7d
 3171 0b6c 00       		.sleb128 0
 3172 0b6d 01       		.byte	0x1
 3173 0b6e 910B0000 		.4byte	0xb91
 3174 0b72 15       		.uleb128 0x15
 3175 0b73 DE020000 		.4byte	.LASF113
 3176 0b77 01       		.byte	0x1
 3177 0b78 5806     		.2byte	0x658
 3178 0b7a 6D000000 		.4byte	0x6d
 3179 0b7e 7E080000 		.4byte	.LLST46
 3180 0b82 17       		.uleb128 0x17
 3181 0b83 54020000 		.4byte	.LASF61
 3182 0b87 01       		.byte	0x1
 3183 0b88 5806     		.2byte	0x658
ARM GAS  /tmp/cc69dDoz.s 			page 90


 3184 0b8a 00010000 		.4byte	0x100
 3185 0b8e 01       		.byte	0x1
 3186 0b8f 51       		.byte	0x51
 3187 0b90 00       		.byte	0
 3188 0b91 14       		.uleb128 0x14
 3189 0b92 01       		.byte	0x1
 3190 0b93 E6000000 		.4byte	.LASF125
 3191 0b97 01       		.byte	0x1
 3192 0b98 8306     		.2byte	0x683
 3193 0b9a 01       		.byte	0x1
 3194 0b9b 00000000 		.4byte	.LFB149
 3195 0b9f 18000000 		.4byte	.LFE149
 3196 0ba3 02       		.byte	0x2
 3197 0ba4 7D       		.byte	0x7d
 3198 0ba5 00       		.sleb128 0
 3199 0ba6 01       		.byte	0x1
 3200 0ba7 CA0B0000 		.4byte	0xbca
 3201 0bab 15       		.uleb128 0x15
 3202 0bac 0C070000 		.4byte	.LASF115
 3203 0bb0 01       		.byte	0x1
 3204 0bb1 8306     		.2byte	0x683
 3205 0bb3 6D000000 		.4byte	0x6d
 3206 0bb7 B8080000 		.4byte	.LLST47
 3207 0bbb 17       		.uleb128 0x17
 3208 0bbc 54020000 		.4byte	.LASF61
 3209 0bc0 01       		.byte	0x1
 3210 0bc1 8306     		.2byte	0x683
 3211 0bc3 00010000 		.4byte	0x100
 3212 0bc7 01       		.byte	0x1
 3213 0bc8 51       		.byte	0x51
 3214 0bc9 00       		.byte	0
 3215 0bca 14       		.uleb128 0x14
 3216 0bcb 01       		.byte	0x1
 3217 0bcc 97070000 		.4byte	.LASF126
 3218 0bd0 01       		.byte	0x1
 3219 0bd1 B106     		.2byte	0x6b1
 3220 0bd3 01       		.byte	0x1
 3221 0bd4 00000000 		.4byte	.LFB150
 3222 0bd8 18000000 		.4byte	.LFE150
 3223 0bdc 02       		.byte	0x2
 3224 0bdd 7D       		.byte	0x7d
 3225 0bde 00       		.sleb128 0
 3226 0bdf 01       		.byte	0x1
 3227 0be0 030C0000 		.4byte	0xc03
 3228 0be4 15       		.uleb128 0x15
 3229 0be5 26010000 		.4byte	.LASF127
 3230 0be9 01       		.byte	0x1
 3231 0bea B106     		.2byte	0x6b1
 3232 0bec 30000000 		.4byte	0x30
 3233 0bf0 F2080000 		.4byte	.LLST48
 3234 0bf4 17       		.uleb128 0x17
 3235 0bf5 54020000 		.4byte	.LASF61
 3236 0bf9 01       		.byte	0x1
 3237 0bfa B106     		.2byte	0x6b1
 3238 0bfc 00010000 		.4byte	0x100
 3239 0c00 01       		.byte	0x1
 3240 0c01 51       		.byte	0x51
ARM GAS  /tmp/cc69dDoz.s 			page 91


 3241 0c02 00       		.byte	0
 3242 0c03 1C       		.uleb128 0x1c
 3243 0c04 01       		.byte	0x1
 3244 0c05 16050000 		.4byte	.LASF131
 3245 0c09 01       		.byte	0x1
 3246 0c0a D506     		.2byte	0x6d5
 3247 0c0c 01       		.byte	0x1
 3248 0c0d D2000000 		.4byte	0xd2
 3249 0c11 00000000 		.4byte	.LFB151
 3250 0c15 28000000 		.4byte	.LFE151
 3251 0c19 02       		.byte	0x2
 3252 0c1a 7D       		.byte	0x7d
 3253 0c1b 00       		.sleb128 0
 3254 0c1c 01       		.byte	0x1
 3255 0c1d 620C0000 		.4byte	0xc62
 3256 0c21 15       		.uleb128 0x15
 3257 0c22 37020000 		.4byte	.LASF128
 3258 0c26 01       		.byte	0x1
 3259 0c27 D506     		.2byte	0x6d5
 3260 0c29 30000000 		.4byte	0x30
 3261 0c2d 2C090000 		.4byte	.LLST49
 3262 0c31 1A       		.uleb128 0x1a
 3263 0c32 746D7000 		.ascii	"tmp\000"
 3264 0c36 01       		.byte	0x1
 3265 0c37 D706     		.2byte	0x6d7
 3266 0c39 6D000000 		.4byte	0x6d
 3267 0c3d 4D090000 		.4byte	.LLST50
 3268 0c41 16       		.uleb128 0x16
 3269 0c42 2B000000 		.4byte	.LASF129
 3270 0c46 01       		.byte	0x1
 3271 0c47 D806     		.2byte	0x6d8
 3272 0c49 6D000000 		.4byte	0x6d
 3273 0c4d A7090000 		.4byte	.LLST51
 3274 0c51 16       		.uleb128 0x16
 3275 0c52 BC020000 		.4byte	.LASF130
 3276 0c56 01       		.byte	0x1
 3277 0c57 D906     		.2byte	0x6d9
 3278 0c59 D2000000 		.4byte	0xd2
 3279 0c5d DD090000 		.4byte	.LLST52
 3280 0c61 00       		.byte	0
 3281 0c62 1D       		.uleb128 0x1d
 3282 0c63 01       		.byte	0x1
 3283 0c64 A6020000 		.4byte	.LASF132
 3284 0c68 01       		.byte	0x1
 3285 0c69 1701     		.2byte	0x117
 3286 0c6b 01       		.byte	0x1
 3287 0c6c 22010000 		.4byte	0x122
 3288 0c70 00000000 		.4byte	.LFB112
 3289 0c74 2C000000 		.4byte	.LFE112
 3290 0c78 080A0000 		.4byte	.LLST53
 3291 0c7c 01       		.byte	0x1
 3292 0c7d D60C0000 		.4byte	0xcd6
 3293 0c81 16       		.uleb128 0x16
 3294 0c82 FD060000 		.4byte	.LASF133
 3295 0c86 01       		.byte	0x1
 3296 0c87 1901     		.2byte	0x119
 3297 0c89 A2000000 		.4byte	0xa2
ARM GAS  /tmp/cc69dDoz.s 			page 92


 3298 0c8d 280A0000 		.4byte	.LLST54
 3299 0c91 16       		.uleb128 0x16
 3300 0c92 74070000 		.4byte	.LASF134
 3301 0c96 01       		.byte	0x1
 3302 0c97 1A01     		.2byte	0x11a
 3303 0c99 22010000 		.4byte	0x122
 3304 0c9d 470A0000 		.4byte	.LLST55
 3305 0ca1 16       		.uleb128 0x16
 3306 0ca2 57060000 		.4byte	.LASF135
 3307 0ca6 01       		.byte	0x1
 3308 0ca7 1B01     		.2byte	0x11b
 3309 0ca9 D2000000 		.4byte	0xd2
 3310 0cad 6C0A0000 		.4byte	.LLST56
 3311 0cb1 1E       		.uleb128 0x1e
 3312 0cb2 0C000000 		.4byte	.LVL152
 3313 0cb6 030C0000 		.4byte	0xc03
 3314 0cba C50C0000 		.4byte	0xcc5
 3315 0cbe 1F       		.uleb128 0x1f
 3316 0cbf 01       		.byte	0x1
 3317 0cc0 50       		.byte	0x50
 3318 0cc1 02       		.byte	0x2
 3319 0cc2 08       		.byte	0x8
 3320 0cc3 31       		.byte	0x31
 3321 0cc4 00       		.byte	0
 3322 0cc5 20       		.uleb128 0x20
 3323 0cc6 24000000 		.4byte	.LVL156
 3324 0cca 030C0000 		.4byte	0xc03
 3325 0cce 1F       		.uleb128 0x1f
 3326 0ccf 01       		.byte	0x1
 3327 0cd0 50       		.byte	0x50
 3328 0cd1 02       		.byte	0x2
 3329 0cd2 08       		.byte	0x8
 3330 0cd3 31       		.byte	0x31
 3331 0cd4 00       		.byte	0
 3332 0cd5 00       		.byte	0
 3333 0cd6 21       		.uleb128 0x21
 3334 0cd7 01       		.byte	0x1
 3335 0cd8 03010000 		.4byte	.LASF137
 3336 0cdc 01       		.byte	0x1
 3337 0cdd 0207     		.2byte	0x702
 3338 0cdf 01       		.byte	0x1
 3339 0ce0 00000000 		.4byte	.LFB152
 3340 0ce4 10000000 		.4byte	.LFE152
 3341 0ce8 02       		.byte	0x2
 3342 0ce9 7D       		.byte	0x7d
 3343 0cea 00       		.sleb128 0
 3344 0ceb 01       		.byte	0x1
 3345 0cec 1C       		.uleb128 0x1c
 3346 0ced 01       		.byte	0x1
 3347 0cee B5060000 		.4byte	.LASF138
 3348 0cf2 01       		.byte	0x1
 3349 0cf3 1507     		.2byte	0x715
 3350 0cf5 01       		.byte	0x1
 3351 0cf6 DE000000 		.4byte	0xde
 3352 0cfa 00000000 		.4byte	.LFB153
 3353 0cfe 14000000 		.4byte	.LFE153
 3354 0d02 02       		.byte	0x2
ARM GAS  /tmp/cc69dDoz.s 			page 93


 3355 0d03 7D       		.byte	0x7d
 3356 0d04 00       		.sleb128 0
 3357 0d05 01       		.byte	0x1
 3358 0d06 2B0D0000 		.4byte	0xd2b
 3359 0d0a 15       		.uleb128 0x15
 3360 0d0b 26010000 		.4byte	.LASF127
 3361 0d0f 01       		.byte	0x1
 3362 0d10 1507     		.2byte	0x715
 3363 0d12 30000000 		.4byte	0x30
 3364 0d16 7F0A0000 		.4byte	.LLST57
 3365 0d1a 16       		.uleb128 0x16
 3366 0d1b BC020000 		.4byte	.LASF130
 3367 0d1f 01       		.byte	0x1
 3368 0d20 1707     		.2byte	0x717
 3369 0d22 DE000000 		.4byte	0xde
 3370 0d26 A00A0000 		.4byte	.LLST58
 3371 0d2a 00       		.byte	0
 3372 0d2b 14       		.uleb128 0x14
 3373 0d2c 01       		.byte	0x1
 3374 0d2d 90000000 		.4byte	.LASF139
 3375 0d31 01       		.byte	0x1
 3376 0d32 3607     		.2byte	0x736
 3377 0d34 01       		.byte	0x1
 3378 0d35 00000000 		.4byte	.LFB154
 3379 0d39 0C000000 		.4byte	.LFE154
 3380 0d3d 02       		.byte	0x2
 3381 0d3e 7D       		.byte	0x7d
 3382 0d3f 00       		.sleb128 0
 3383 0d40 01       		.byte	0x1
 3384 0d41 540D0000 		.4byte	0xd54
 3385 0d45 17       		.uleb128 0x17
 3386 0d46 26010000 		.4byte	.LASF127
 3387 0d4a 01       		.byte	0x1
 3388 0d4b 3607     		.2byte	0x736
 3389 0d4d 30000000 		.4byte	0x30
 3390 0d51 01       		.byte	0x1
 3391 0d52 50       		.byte	0x50
 3392 0d53 00       		.byte	0
 3393 0d54 06       		.uleb128 0x6
 3394 0d55 30000000 		.4byte	0x30
 3395 0d59 640D0000 		.4byte	0xd64
 3396 0d5d 07       		.uleb128 0x7
 3397 0d5e 9B000000 		.4byte	0x9b
 3398 0d62 0F       		.byte	0xf
 3399 0d63 00       		.byte	0
 3400 0d64 22       		.uleb128 0x22
 3401 0d65 28060000 		.4byte	.LASF140
 3402 0d69 01       		.byte	0x1
 3403 0d6a 89       		.byte	0x89
 3404 0d6b 750D0000 		.4byte	0xd75
 3405 0d6f 05       		.byte	0x5
 3406 0d70 03       		.byte	0x3
 3407 0d71 00000000 		.4byte	APBAHBPrescTable
 3408 0d75 23       		.uleb128 0x23
 3409 0d76 7A0D0000 		.4byte	0xd7a
 3410 0d7a 05       		.uleb128 0x5
 3411 0d7b 540D0000 		.4byte	0xd54
ARM GAS  /tmp/cc69dDoz.s 			page 94


 3412 0d7f 24       		.uleb128 0x24
 3413 0d80 4C050000 		.4byte	.LASF145
 3414 0d84 05       		.byte	0x5
 3415 0d85 9806     		.2byte	0x698
 3416 0d87 B7000000 		.4byte	0xb7
 3417 0d8b 01       		.byte	0x1
 3418 0d8c 01       		.byte	0x1
 3419 0d8d 00       		.byte	0
 3420              		.section	.debug_abbrev,"",%progbits
 3421              	.Ldebug_abbrev0:
 3422 0000 01       		.uleb128 0x1
 3423 0001 11       		.uleb128 0x11
 3424 0002 01       		.byte	0x1
 3425 0003 25       		.uleb128 0x25
 3426 0004 0E       		.uleb128 0xe
 3427 0005 13       		.uleb128 0x13
 3428 0006 0B       		.uleb128 0xb
 3429 0007 03       		.uleb128 0x3
 3430 0008 0E       		.uleb128 0xe
 3431 0009 1B       		.uleb128 0x1b
 3432 000a 0E       		.uleb128 0xe
 3433 000b 55       		.uleb128 0x55
 3434 000c 06       		.uleb128 0x6
 3435 000d 11       		.uleb128 0x11
 3436 000e 01       		.uleb128 0x1
 3437 000f 52       		.uleb128 0x52
 3438 0010 01       		.uleb128 0x1
 3439 0011 10       		.uleb128 0x10
 3440 0012 06       		.uleb128 0x6
 3441 0013 00       		.byte	0
 3442 0014 00       		.byte	0
 3443 0015 02       		.uleb128 0x2
 3444 0016 24       		.uleb128 0x24
 3445 0017 00       		.byte	0
 3446 0018 0B       		.uleb128 0xb
 3447 0019 0B       		.uleb128 0xb
 3448 001a 3E       		.uleb128 0x3e
 3449 001b 0B       		.uleb128 0xb
 3450 001c 03       		.uleb128 0x3
 3451 001d 0E       		.uleb128 0xe
 3452 001e 00       		.byte	0
 3453 001f 00       		.byte	0
 3454 0020 03       		.uleb128 0x3
 3455 0021 16       		.uleb128 0x16
 3456 0022 00       		.byte	0
 3457 0023 03       		.uleb128 0x3
 3458 0024 0E       		.uleb128 0xe
 3459 0025 3A       		.uleb128 0x3a
 3460 0026 0B       		.uleb128 0xb
 3461 0027 3B       		.uleb128 0x3b
 3462 0028 0B       		.uleb128 0xb
 3463 0029 49       		.uleb128 0x49
 3464 002a 13       		.uleb128 0x13
 3465 002b 00       		.byte	0
 3466 002c 00       		.byte	0
 3467 002d 04       		.uleb128 0x4
 3468 002e 24       		.uleb128 0x24
ARM GAS  /tmp/cc69dDoz.s 			page 95


 3469 002f 00       		.byte	0
 3470 0030 0B       		.uleb128 0xb
 3471 0031 0B       		.uleb128 0xb
 3472 0032 3E       		.uleb128 0x3e
 3473 0033 0B       		.uleb128 0xb
 3474 0034 03       		.uleb128 0x3
 3475 0035 08       		.uleb128 0x8
 3476 0036 00       		.byte	0
 3477 0037 00       		.byte	0
 3478 0038 05       		.uleb128 0x5
 3479 0039 35       		.uleb128 0x35
 3480 003a 00       		.byte	0
 3481 003b 49       		.uleb128 0x49
 3482 003c 13       		.uleb128 0x13
 3483 003d 00       		.byte	0
 3484 003e 00       		.byte	0
 3485 003f 06       		.uleb128 0x6
 3486 0040 01       		.uleb128 0x1
 3487 0041 01       		.byte	0x1
 3488 0042 49       		.uleb128 0x49
 3489 0043 13       		.uleb128 0x13
 3490 0044 01       		.uleb128 0x1
 3491 0045 13       		.uleb128 0x13
 3492 0046 00       		.byte	0
 3493 0047 00       		.byte	0
 3494 0048 07       		.uleb128 0x7
 3495 0049 21       		.uleb128 0x21
 3496 004a 00       		.byte	0
 3497 004b 49       		.uleb128 0x49
 3498 004c 13       		.uleb128 0x13
 3499 004d 2F       		.uleb128 0x2f
 3500 004e 0B       		.uleb128 0xb
 3501 004f 00       		.byte	0
 3502 0050 00       		.byte	0
 3503 0051 08       		.uleb128 0x8
 3504 0052 04       		.uleb128 0x4
 3505 0053 01       		.byte	0x1
 3506 0054 0B       		.uleb128 0xb
 3507 0055 0B       		.uleb128 0xb
 3508 0056 3A       		.uleb128 0x3a
 3509 0057 0B       		.uleb128 0xb
 3510 0058 3B       		.uleb128 0x3b
 3511 0059 05       		.uleb128 0x5
 3512 005a 01       		.uleb128 0x1
 3513 005b 13       		.uleb128 0x13
 3514 005c 00       		.byte	0
 3515 005d 00       		.byte	0
 3516 005e 09       		.uleb128 0x9
 3517 005f 28       		.uleb128 0x28
 3518 0060 00       		.byte	0
 3519 0061 03       		.uleb128 0x3
 3520 0062 0E       		.uleb128 0xe
 3521 0063 1C       		.uleb128 0x1c
 3522 0064 0D       		.uleb128 0xd
 3523 0065 00       		.byte	0
 3524 0066 00       		.byte	0
 3525 0067 0A       		.uleb128 0xa
ARM GAS  /tmp/cc69dDoz.s 			page 96


 3526 0068 28       		.uleb128 0x28
 3527 0069 00       		.byte	0
 3528 006a 03       		.uleb128 0x3
 3529 006b 08       		.uleb128 0x8
 3530 006c 1C       		.uleb128 0x1c
 3531 006d 0D       		.uleb128 0xd
 3532 006e 00       		.byte	0
 3533 006f 00       		.byte	0
 3534 0070 0B       		.uleb128 0xb
 3535 0071 16       		.uleb128 0x16
 3536 0072 00       		.byte	0
 3537 0073 03       		.uleb128 0x3
 3538 0074 0E       		.uleb128 0xe
 3539 0075 3A       		.uleb128 0x3a
 3540 0076 0B       		.uleb128 0xb
 3541 0077 3B       		.uleb128 0x3b
 3542 0078 05       		.uleb128 0x5
 3543 0079 49       		.uleb128 0x49
 3544 007a 13       		.uleb128 0x13
 3545 007b 00       		.byte	0
 3546 007c 00       		.byte	0
 3547 007d 0C       		.uleb128 0xc
 3548 007e 13       		.uleb128 0x13
 3549 007f 01       		.byte	0x1
 3550 0080 0B       		.uleb128 0xb
 3551 0081 0B       		.uleb128 0xb
 3552 0082 3A       		.uleb128 0x3a
 3553 0083 0B       		.uleb128 0xb
 3554 0084 3B       		.uleb128 0x3b
 3555 0085 05       		.uleb128 0x5
 3556 0086 01       		.uleb128 0x1
 3557 0087 13       		.uleb128 0x13
 3558 0088 00       		.byte	0
 3559 0089 00       		.byte	0
 3560 008a 0D       		.uleb128 0xd
 3561 008b 0D       		.uleb128 0xd
 3562 008c 00       		.byte	0
 3563 008d 03       		.uleb128 0x3
 3564 008e 08       		.uleb128 0x8
 3565 008f 3A       		.uleb128 0x3a
 3566 0090 0B       		.uleb128 0xb
 3567 0091 3B       		.uleb128 0x3b
 3568 0092 05       		.uleb128 0x5
 3569 0093 49       		.uleb128 0x49
 3570 0094 13       		.uleb128 0x13
 3571 0095 38       		.uleb128 0x38
 3572 0096 0A       		.uleb128 0xa
 3573 0097 00       		.byte	0
 3574 0098 00       		.byte	0
 3575 0099 0E       		.uleb128 0xe
 3576 009a 0D       		.uleb128 0xd
 3577 009b 00       		.byte	0
 3578 009c 03       		.uleb128 0x3
 3579 009d 0E       		.uleb128 0xe
 3580 009e 3A       		.uleb128 0x3a
 3581 009f 0B       		.uleb128 0xb
 3582 00a0 3B       		.uleb128 0x3b
ARM GAS  /tmp/cc69dDoz.s 			page 97


 3583 00a1 05       		.uleb128 0x5
 3584 00a2 49       		.uleb128 0x49
 3585 00a3 13       		.uleb128 0x13
 3586 00a4 38       		.uleb128 0x38
 3587 00a5 0A       		.uleb128 0xa
 3588 00a6 00       		.byte	0
 3589 00a7 00       		.byte	0
 3590 00a8 0F       		.uleb128 0xf
 3591 00a9 13       		.uleb128 0x13
 3592 00aa 01       		.byte	0x1
 3593 00ab 0B       		.uleb128 0xb
 3594 00ac 0B       		.uleb128 0xb
 3595 00ad 3A       		.uleb128 0x3a
 3596 00ae 0B       		.uleb128 0xb
 3597 00af 3B       		.uleb128 0x3b
 3598 00b0 0B       		.uleb128 0xb
 3599 00b1 01       		.uleb128 0x1
 3600 00b2 13       		.uleb128 0x13
 3601 00b3 00       		.byte	0
 3602 00b4 00       		.byte	0
 3603 00b5 10       		.uleb128 0x10
 3604 00b6 0D       		.uleb128 0xd
 3605 00b7 00       		.byte	0
 3606 00b8 03       		.uleb128 0x3
 3607 00b9 0E       		.uleb128 0xe
 3608 00ba 3A       		.uleb128 0x3a
 3609 00bb 0B       		.uleb128 0xb
 3610 00bc 3B       		.uleb128 0x3b
 3611 00bd 0B       		.uleb128 0xb
 3612 00be 49       		.uleb128 0x49
 3613 00bf 13       		.uleb128 0x13
 3614 00c0 38       		.uleb128 0x38
 3615 00c1 0A       		.uleb128 0xa
 3616 00c2 00       		.byte	0
 3617 00c3 00       		.byte	0
 3618 00c4 11       		.uleb128 0x11
 3619 00c5 2E       		.uleb128 0x2e
 3620 00c6 00       		.byte	0
 3621 00c7 3F       		.uleb128 0x3f
 3622 00c8 0C       		.uleb128 0xc
 3623 00c9 03       		.uleb128 0x3
 3624 00ca 0E       		.uleb128 0xe
 3625 00cb 3A       		.uleb128 0x3a
 3626 00cc 0B       		.uleb128 0xb
 3627 00cd 3B       		.uleb128 0x3b
 3628 00ce 0B       		.uleb128 0xb
 3629 00cf 27       		.uleb128 0x27
 3630 00d0 0C       		.uleb128 0xc
 3631 00d1 11       		.uleb128 0x11
 3632 00d2 01       		.uleb128 0x1
 3633 00d3 12       		.uleb128 0x12
 3634 00d4 01       		.uleb128 0x1
 3635 00d5 40       		.uleb128 0x40
 3636 00d6 0A       		.uleb128 0xa
 3637 00d7 9742     		.uleb128 0x2117
 3638 00d9 0C       		.uleb128 0xc
 3639 00da 00       		.byte	0
ARM GAS  /tmp/cc69dDoz.s 			page 98


 3640 00db 00       		.byte	0
 3641 00dc 12       		.uleb128 0x12
 3642 00dd 2E       		.uleb128 0x2e
 3643 00de 01       		.byte	0x1
 3644 00df 3F       		.uleb128 0x3f
 3645 00e0 0C       		.uleb128 0xc
 3646 00e1 03       		.uleb128 0x3
 3647 00e2 0E       		.uleb128 0xe
 3648 00e3 3A       		.uleb128 0x3a
 3649 00e4 0B       		.uleb128 0xb
 3650 00e5 3B       		.uleb128 0x3b
 3651 00e6 0B       		.uleb128 0xb
 3652 00e7 27       		.uleb128 0x27
 3653 00e8 0C       		.uleb128 0xc
 3654 00e9 11       		.uleb128 0x11
 3655 00ea 01       		.uleb128 0x1
 3656 00eb 12       		.uleb128 0x12
 3657 00ec 01       		.uleb128 0x1
 3658 00ed 40       		.uleb128 0x40
 3659 00ee 0A       		.uleb128 0xa
 3660 00ef 9742     		.uleb128 0x2117
 3661 00f1 0C       		.uleb128 0xc
 3662 00f2 01       		.uleb128 0x1
 3663 00f3 13       		.uleb128 0x13
 3664 00f4 00       		.byte	0
 3665 00f5 00       		.byte	0
 3666 00f6 13       		.uleb128 0x13
 3667 00f7 05       		.uleb128 0x5
 3668 00f8 00       		.byte	0
 3669 00f9 03       		.uleb128 0x3
 3670 00fa 0E       		.uleb128 0xe
 3671 00fb 3A       		.uleb128 0x3a
 3672 00fc 0B       		.uleb128 0xb
 3673 00fd 3B       		.uleb128 0x3b
 3674 00fe 0B       		.uleb128 0xb
 3675 00ff 49       		.uleb128 0x49
 3676 0100 13       		.uleb128 0x13
 3677 0101 02       		.uleb128 0x2
 3678 0102 0A       		.uleb128 0xa
 3679 0103 00       		.byte	0
 3680 0104 00       		.byte	0
 3681 0105 14       		.uleb128 0x14
 3682 0106 2E       		.uleb128 0x2e
 3683 0107 01       		.byte	0x1
 3684 0108 3F       		.uleb128 0x3f
 3685 0109 0C       		.uleb128 0xc
 3686 010a 03       		.uleb128 0x3
 3687 010b 0E       		.uleb128 0xe
 3688 010c 3A       		.uleb128 0x3a
 3689 010d 0B       		.uleb128 0xb
 3690 010e 3B       		.uleb128 0x3b
 3691 010f 05       		.uleb128 0x5
 3692 0110 27       		.uleb128 0x27
 3693 0111 0C       		.uleb128 0xc
 3694 0112 11       		.uleb128 0x11
 3695 0113 01       		.uleb128 0x1
 3696 0114 12       		.uleb128 0x12
ARM GAS  /tmp/cc69dDoz.s 			page 99


 3697 0115 01       		.uleb128 0x1
 3698 0116 40       		.uleb128 0x40
 3699 0117 0A       		.uleb128 0xa
 3700 0118 9742     		.uleb128 0x2117
 3701 011a 0C       		.uleb128 0xc
 3702 011b 01       		.uleb128 0x1
 3703 011c 13       		.uleb128 0x13
 3704 011d 00       		.byte	0
 3705 011e 00       		.byte	0
 3706 011f 15       		.uleb128 0x15
 3707 0120 05       		.uleb128 0x5
 3708 0121 00       		.byte	0
 3709 0122 03       		.uleb128 0x3
 3710 0123 0E       		.uleb128 0xe
 3711 0124 3A       		.uleb128 0x3a
 3712 0125 0B       		.uleb128 0xb
 3713 0126 3B       		.uleb128 0x3b
 3714 0127 05       		.uleb128 0x5
 3715 0128 49       		.uleb128 0x49
 3716 0129 13       		.uleb128 0x13
 3717 012a 02       		.uleb128 0x2
 3718 012b 06       		.uleb128 0x6
 3719 012c 00       		.byte	0
 3720 012d 00       		.byte	0
 3721 012e 16       		.uleb128 0x16
 3722 012f 34       		.uleb128 0x34
 3723 0130 00       		.byte	0
 3724 0131 03       		.uleb128 0x3
 3725 0132 0E       		.uleb128 0xe
 3726 0133 3A       		.uleb128 0x3a
 3727 0134 0B       		.uleb128 0xb
 3728 0135 3B       		.uleb128 0x3b
 3729 0136 05       		.uleb128 0x5
 3730 0137 49       		.uleb128 0x49
 3731 0138 13       		.uleb128 0x13
 3732 0139 02       		.uleb128 0x2
 3733 013a 06       		.uleb128 0x6
 3734 013b 00       		.byte	0
 3735 013c 00       		.byte	0
 3736 013d 17       		.uleb128 0x17
 3737 013e 05       		.uleb128 0x5
 3738 013f 00       		.byte	0
 3739 0140 03       		.uleb128 0x3
 3740 0141 0E       		.uleb128 0xe
 3741 0142 3A       		.uleb128 0x3a
 3742 0143 0B       		.uleb128 0xb
 3743 0144 3B       		.uleb128 0x3b
 3744 0145 05       		.uleb128 0x5
 3745 0146 49       		.uleb128 0x49
 3746 0147 13       		.uleb128 0x13
 3747 0148 02       		.uleb128 0x2
 3748 0149 0A       		.uleb128 0xa
 3749 014a 00       		.byte	0
 3750 014b 00       		.byte	0
 3751 014c 18       		.uleb128 0x18
 3752 014d 2E       		.uleb128 0x2e
 3753 014e 01       		.byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 100


 3754 014f 3F       		.uleb128 0x3f
 3755 0150 0C       		.uleb128 0xc
 3756 0151 03       		.uleb128 0x3
 3757 0152 0E       		.uleb128 0xe
 3758 0153 3A       		.uleb128 0x3a
 3759 0154 0B       		.uleb128 0xb
 3760 0155 3B       		.uleb128 0x3b
 3761 0156 05       		.uleb128 0x5
 3762 0157 27       		.uleb128 0x27
 3763 0158 0C       		.uleb128 0xc
 3764 0159 11       		.uleb128 0x11
 3765 015a 01       		.uleb128 0x1
 3766 015b 12       		.uleb128 0x12
 3767 015c 01       		.uleb128 0x1
 3768 015d 40       		.uleb128 0x40
 3769 015e 06       		.uleb128 0x6
 3770 015f 9742     		.uleb128 0x2117
 3771 0161 0C       		.uleb128 0xc
 3772 0162 01       		.uleb128 0x1
 3773 0163 13       		.uleb128 0x13
 3774 0164 00       		.byte	0
 3775 0165 00       		.byte	0
 3776 0166 19       		.uleb128 0x19
 3777 0167 2E       		.uleb128 0x2e
 3778 0168 00       		.byte	0
 3779 0169 3F       		.uleb128 0x3f
 3780 016a 0C       		.uleb128 0xc
 3781 016b 03       		.uleb128 0x3
 3782 016c 0E       		.uleb128 0xe
 3783 016d 3A       		.uleb128 0x3a
 3784 016e 0B       		.uleb128 0xb
 3785 016f 3B       		.uleb128 0x3b
 3786 0170 05       		.uleb128 0x5
 3787 0171 27       		.uleb128 0x27
 3788 0172 0C       		.uleb128 0xc
 3789 0173 49       		.uleb128 0x49
 3790 0174 13       		.uleb128 0x13
 3791 0175 11       		.uleb128 0x11
 3792 0176 01       		.uleb128 0x1
 3793 0177 12       		.uleb128 0x12
 3794 0178 01       		.uleb128 0x1
 3795 0179 40       		.uleb128 0x40
 3796 017a 0A       		.uleb128 0xa
 3797 017b 9742     		.uleb128 0x2117
 3798 017d 0C       		.uleb128 0xc
 3799 017e 00       		.byte	0
 3800 017f 00       		.byte	0
 3801 0180 1A       		.uleb128 0x1a
 3802 0181 34       		.uleb128 0x34
 3803 0182 00       		.byte	0
 3804 0183 03       		.uleb128 0x3
 3805 0184 08       		.uleb128 0x8
 3806 0185 3A       		.uleb128 0x3a
 3807 0186 0B       		.uleb128 0xb
 3808 0187 3B       		.uleb128 0x3b
 3809 0188 05       		.uleb128 0x5
 3810 0189 49       		.uleb128 0x49
ARM GAS  /tmp/cc69dDoz.s 			page 101


 3811 018a 13       		.uleb128 0x13
 3812 018b 02       		.uleb128 0x2
 3813 018c 06       		.uleb128 0x6
 3814 018d 00       		.byte	0
 3815 018e 00       		.byte	0
 3816 018f 1B       		.uleb128 0x1b
 3817 0190 0F       		.uleb128 0xf
 3818 0191 00       		.byte	0
 3819 0192 0B       		.uleb128 0xb
 3820 0193 0B       		.uleb128 0xb
 3821 0194 49       		.uleb128 0x49
 3822 0195 13       		.uleb128 0x13
 3823 0196 00       		.byte	0
 3824 0197 00       		.byte	0
 3825 0198 1C       		.uleb128 0x1c
 3826 0199 2E       		.uleb128 0x2e
 3827 019a 01       		.byte	0x1
 3828 019b 3F       		.uleb128 0x3f
 3829 019c 0C       		.uleb128 0xc
 3830 019d 03       		.uleb128 0x3
 3831 019e 0E       		.uleb128 0xe
 3832 019f 3A       		.uleb128 0x3a
 3833 01a0 0B       		.uleb128 0xb
 3834 01a1 3B       		.uleb128 0x3b
 3835 01a2 05       		.uleb128 0x5
 3836 01a3 27       		.uleb128 0x27
 3837 01a4 0C       		.uleb128 0xc
 3838 01a5 49       		.uleb128 0x49
 3839 01a6 13       		.uleb128 0x13
 3840 01a7 11       		.uleb128 0x11
 3841 01a8 01       		.uleb128 0x1
 3842 01a9 12       		.uleb128 0x12
 3843 01aa 01       		.uleb128 0x1
 3844 01ab 40       		.uleb128 0x40
 3845 01ac 0A       		.uleb128 0xa
 3846 01ad 9742     		.uleb128 0x2117
 3847 01af 0C       		.uleb128 0xc
 3848 01b0 01       		.uleb128 0x1
 3849 01b1 13       		.uleb128 0x13
 3850 01b2 00       		.byte	0
 3851 01b3 00       		.byte	0
 3852 01b4 1D       		.uleb128 0x1d
 3853 01b5 2E       		.uleb128 0x2e
 3854 01b6 01       		.byte	0x1
 3855 01b7 3F       		.uleb128 0x3f
 3856 01b8 0C       		.uleb128 0xc
 3857 01b9 03       		.uleb128 0x3
 3858 01ba 0E       		.uleb128 0xe
 3859 01bb 3A       		.uleb128 0x3a
 3860 01bc 0B       		.uleb128 0xb
 3861 01bd 3B       		.uleb128 0x3b
 3862 01be 05       		.uleb128 0x5
 3863 01bf 27       		.uleb128 0x27
 3864 01c0 0C       		.uleb128 0xc
 3865 01c1 49       		.uleb128 0x49
 3866 01c2 13       		.uleb128 0x13
 3867 01c3 11       		.uleb128 0x11
ARM GAS  /tmp/cc69dDoz.s 			page 102


 3868 01c4 01       		.uleb128 0x1
 3869 01c5 12       		.uleb128 0x12
 3870 01c6 01       		.uleb128 0x1
 3871 01c7 40       		.uleb128 0x40
 3872 01c8 06       		.uleb128 0x6
 3873 01c9 9742     		.uleb128 0x2117
 3874 01cb 0C       		.uleb128 0xc
 3875 01cc 01       		.uleb128 0x1
 3876 01cd 13       		.uleb128 0x13
 3877 01ce 00       		.byte	0
 3878 01cf 00       		.byte	0
 3879 01d0 1E       		.uleb128 0x1e
 3880 01d1 898201   		.uleb128 0x4109
 3881 01d4 01       		.byte	0x1
 3882 01d5 11       		.uleb128 0x11
 3883 01d6 01       		.uleb128 0x1
 3884 01d7 31       		.uleb128 0x31
 3885 01d8 13       		.uleb128 0x13
 3886 01d9 01       		.uleb128 0x1
 3887 01da 13       		.uleb128 0x13
 3888 01db 00       		.byte	0
 3889 01dc 00       		.byte	0
 3890 01dd 1F       		.uleb128 0x1f
 3891 01de 8A8201   		.uleb128 0x410a
 3892 01e1 00       		.byte	0
 3893 01e2 02       		.uleb128 0x2
 3894 01e3 0A       		.uleb128 0xa
 3895 01e4 9142     		.uleb128 0x2111
 3896 01e6 0A       		.uleb128 0xa
 3897 01e7 00       		.byte	0
 3898 01e8 00       		.byte	0
 3899 01e9 20       		.uleb128 0x20
 3900 01ea 898201   		.uleb128 0x4109
 3901 01ed 01       		.byte	0x1
 3902 01ee 11       		.uleb128 0x11
 3903 01ef 01       		.uleb128 0x1
 3904 01f0 31       		.uleb128 0x31
 3905 01f1 13       		.uleb128 0x13
 3906 01f2 00       		.byte	0
 3907 01f3 00       		.byte	0
 3908 01f4 21       		.uleb128 0x21
 3909 01f5 2E       		.uleb128 0x2e
 3910 01f6 00       		.byte	0
 3911 01f7 3F       		.uleb128 0x3f
 3912 01f8 0C       		.uleb128 0xc
 3913 01f9 03       		.uleb128 0x3
 3914 01fa 0E       		.uleb128 0xe
 3915 01fb 3A       		.uleb128 0x3a
 3916 01fc 0B       		.uleb128 0xb
 3917 01fd 3B       		.uleb128 0x3b
 3918 01fe 05       		.uleb128 0x5
 3919 01ff 27       		.uleb128 0x27
 3920 0200 0C       		.uleb128 0xc
 3921 0201 11       		.uleb128 0x11
 3922 0202 01       		.uleb128 0x1
 3923 0203 12       		.uleb128 0x12
 3924 0204 01       		.uleb128 0x1
ARM GAS  /tmp/cc69dDoz.s 			page 103


 3925 0205 40       		.uleb128 0x40
 3926 0206 0A       		.uleb128 0xa
 3927 0207 9742     		.uleb128 0x2117
 3928 0209 0C       		.uleb128 0xc
 3929 020a 00       		.byte	0
 3930 020b 00       		.byte	0
 3931 020c 22       		.uleb128 0x22
 3932 020d 34       		.uleb128 0x34
 3933 020e 00       		.byte	0
 3934 020f 03       		.uleb128 0x3
 3935 0210 0E       		.uleb128 0xe
 3936 0211 3A       		.uleb128 0x3a
 3937 0212 0B       		.uleb128 0xb
 3938 0213 3B       		.uleb128 0x3b
 3939 0214 0B       		.uleb128 0xb
 3940 0215 49       		.uleb128 0x49
 3941 0216 13       		.uleb128 0x13
 3942 0217 02       		.uleb128 0x2
 3943 0218 0A       		.uleb128 0xa
 3944 0219 00       		.byte	0
 3945 021a 00       		.byte	0
 3946 021b 23       		.uleb128 0x23
 3947 021c 26       		.uleb128 0x26
 3948 021d 00       		.byte	0
 3949 021e 49       		.uleb128 0x49
 3950 021f 13       		.uleb128 0x13
 3951 0220 00       		.byte	0
 3952 0221 00       		.byte	0
 3953 0222 24       		.uleb128 0x24
 3954 0223 34       		.uleb128 0x34
 3955 0224 00       		.byte	0
 3956 0225 03       		.uleb128 0x3
 3957 0226 0E       		.uleb128 0xe
 3958 0227 3A       		.uleb128 0x3a
 3959 0228 0B       		.uleb128 0xb
 3960 0229 3B       		.uleb128 0x3b
 3961 022a 05       		.uleb128 0x5
 3962 022b 49       		.uleb128 0x49
 3963 022c 13       		.uleb128 0x13
 3964 022d 3F       		.uleb128 0x3f
 3965 022e 0C       		.uleb128 0xc
 3966 022f 3C       		.uleb128 0x3c
 3967 0230 0C       		.uleb128 0xc
 3968 0231 00       		.byte	0
 3969 0232 00       		.byte	0
 3970 0233 00       		.byte	0
 3971              		.section	.debug_loc,"",%progbits
 3972              	.Ldebug_loc0:
 3973              	.LLST0:
 3974 0000 00000000 		.4byte	.LVL1
 3975 0004 0C000000 		.4byte	.LVL4
 3976 0008 0100     		.2byte	0x1
 3977 000a 50       		.byte	0x50
 3978 000b 0C000000 		.4byte	.LVL4
 3979 000f 14000000 		.4byte	.LFE113
 3980 0013 0400     		.2byte	0x4
 3981 0015 F3       		.byte	0xf3
ARM GAS  /tmp/cc69dDoz.s 			page 104


 3982 0016 01       		.uleb128 0x1
 3983 0017 50       		.byte	0x50
 3984 0018 9F       		.byte	0x9f
 3985 0019 00000000 		.4byte	0
 3986 001d 00000000 		.4byte	0
 3987              	.LLST1:
 3988 0021 00000000 		.4byte	.LVL1
 3989 0025 04000000 		.4byte	.LVL2
 3990 0029 0200     		.2byte	0x2
 3991 002b 30       		.byte	0x30
 3992 002c 9F       		.byte	0x9f
 3993 002d 04000000 		.4byte	.LVL2
 3994 0031 08000000 		.4byte	.LVL3
 3995 0035 0100     		.2byte	0x1
 3996 0037 52       		.byte	0x52
 3997 0038 08000000 		.4byte	.LVL3
 3998 003c 0C000000 		.4byte	.LVL4
 3999 0040 0100     		.2byte	0x1
 4000 0042 51       		.byte	0x51
 4001 0043 0C000000 		.4byte	.LVL4
 4002 0047 14000000 		.4byte	.LFE113
 4003 004b 0100     		.2byte	0x1
 4004 004d 50       		.byte	0x50
 4005 004e 00000000 		.4byte	0
 4006 0052 00000000 		.4byte	0
 4007              	.LLST2:
 4008 0056 00000000 		.4byte	.LVL6
 4009 005a 12000000 		.4byte	.LVL7
 4010 005e 0100     		.2byte	0x1
 4011 0060 50       		.byte	0x50
 4012 0061 12000000 		.4byte	.LVL7
 4013 0065 16000000 		.4byte	.LVL8
 4014 0069 0400     		.2byte	0x4
 4015 006b F3       		.byte	0xf3
 4016 006c 01       		.uleb128 0x1
 4017 006d 50       		.byte	0x50
 4018 006e 9F       		.byte	0x9f
 4019 006f 16000000 		.4byte	.LVL8
 4020 0073 1A000000 		.4byte	.LVL9
 4021 0077 0100     		.2byte	0x1
 4022 0079 50       		.byte	0x50
 4023 007a 1A000000 		.4byte	.LVL9
 4024 007e 20000000 		.4byte	.LFE115
 4025 0082 0400     		.2byte	0x4
 4026 0084 F3       		.byte	0xf3
 4027 0085 01       		.uleb128 0x1
 4028 0086 50       		.byte	0x50
 4029 0087 9F       		.byte	0x9f
 4030 0088 00000000 		.4byte	0
 4031 008c 00000000 		.4byte	0
 4032              	.LLST3:
 4033 0090 00000000 		.4byte	.LFB117
 4034 0094 02000000 		.4byte	.LCFI0
 4035 0098 0200     		.2byte	0x2
 4036 009a 7D       		.byte	0x7d
 4037 009b 00       		.sleb128 0
 4038 009c 02000000 		.4byte	.LCFI0
ARM GAS  /tmp/cc69dDoz.s 			page 105


 4039 00a0 20000000 		.4byte	.LFE117
 4040 00a4 0200     		.2byte	0x2
 4041 00a6 7D       		.byte	0x7d
 4042 00a7 08       		.sleb128 8
 4043 00a8 00000000 		.4byte	0
 4044 00ac 00000000 		.4byte	0
 4045              	.LLST4:
 4046 00b0 00000000 		.4byte	.LVL11
 4047 00b4 10000000 		.4byte	.LVL15
 4048 00b8 0100     		.2byte	0x1
 4049 00ba 50       		.byte	0x50
 4050 00bb 10000000 		.4byte	.LVL15
 4051 00bf 20000000 		.4byte	.LFE117
 4052 00c3 0400     		.2byte	0x4
 4053 00c5 F3       		.byte	0xf3
 4054 00c6 01       		.uleb128 0x1
 4055 00c7 50       		.byte	0x50
 4056 00c8 9F       		.byte	0x9f
 4057 00c9 00000000 		.4byte	0
 4058 00cd 00000000 		.4byte	0
 4059              	.LLST5:
 4060 00d1 00000000 		.4byte	.LVL11
 4061 00d5 04000000 		.4byte	.LVL12
 4062 00d9 0100     		.2byte	0x1
 4063 00db 51       		.byte	0x51
 4064 00dc 04000000 		.4byte	.LVL12
 4065 00e0 20000000 		.4byte	.LFE117
 4066 00e4 0400     		.2byte	0x4
 4067 00e6 F3       		.byte	0xf3
 4068 00e7 01       		.uleb128 0x1
 4069 00e8 51       		.byte	0x51
 4070 00e9 9F       		.byte	0x9f
 4071 00ea 00000000 		.4byte	0
 4072 00ee 00000000 		.4byte	0
 4073              	.LLST6:
 4074 00f2 00000000 		.4byte	.LVL11
 4075 00f6 0A000000 		.4byte	.LVL13
 4076 00fa 0100     		.2byte	0x1
 4077 00fc 52       		.byte	0x52
 4078 00fd 0A000000 		.4byte	.LVL13
 4079 0101 20000000 		.4byte	.LFE117
 4080 0105 0400     		.2byte	0x4
 4081 0107 F3       		.byte	0xf3
 4082 0108 01       		.uleb128 0x1
 4083 0109 52       		.byte	0x52
 4084 010a 9F       		.byte	0x9f
 4085 010b 00000000 		.4byte	0
 4086 010f 00000000 		.4byte	0
 4087              	.LLST7:
 4088 0113 00000000 		.4byte	.LVL11
 4089 0117 0C000000 		.4byte	.LVL14
 4090 011b 0100     		.2byte	0x1
 4091 011d 53       		.byte	0x53
 4092 011e 0C000000 		.4byte	.LVL14
 4093 0122 20000000 		.4byte	.LFE117
 4094 0126 0400     		.2byte	0x4
 4095 0128 F3       		.byte	0xf3
ARM GAS  /tmp/cc69dDoz.s 			page 106


 4096 0129 01       		.uleb128 0x1
 4097 012a 53       		.byte	0x53
 4098 012b 9F       		.byte	0x9f
 4099 012c 00000000 		.4byte	0
 4100 0130 00000000 		.4byte	0
 4101              	.LLST8:
 4102 0134 00000000 		.4byte	.LVL17
 4103 0138 02000000 		.4byte	.LVL18
 4104 013c 0100     		.2byte	0x1
 4105 013e 50       		.byte	0x50
 4106 013f 02000000 		.4byte	.LVL18
 4107 0143 14000000 		.4byte	.LFE119
 4108 0147 0400     		.2byte	0x4
 4109 0149 F3       		.byte	0xf3
 4110 014a 01       		.uleb128 0x1
 4111 014b 50       		.byte	0x50
 4112 014c 9F       		.byte	0x9f
 4113 014d 00000000 		.4byte	0
 4114 0151 00000000 		.4byte	0
 4115              	.LLST9:
 4116 0155 00000000 		.4byte	.LVL17
 4117 0159 08000000 		.4byte	.LVL19
 4118 015d 0100     		.2byte	0x1
 4119 015f 51       		.byte	0x51
 4120 0160 08000000 		.4byte	.LVL19
 4121 0164 14000000 		.4byte	.LFE119
 4122 0168 0400     		.2byte	0x4
 4123 016a F3       		.byte	0xf3
 4124 016b 01       		.uleb128 0x1
 4125 016c 51       		.byte	0x51
 4126 016d 9F       		.byte	0x9f
 4127 016e 00000000 		.4byte	0
 4128 0172 00000000 		.4byte	0
 4129              	.LLST10:
 4130 0176 00000000 		.4byte	.LVL22
 4131 017a 0A000000 		.4byte	.LVL25
 4132 017e 0100     		.2byte	0x1
 4133 0180 50       		.byte	0x50
 4134 0181 0A000000 		.4byte	.LVL25
 4135 0185 14000000 		.4byte	.LFE122
 4136 0189 0400     		.2byte	0x4
 4137 018b F3       		.byte	0xf3
 4138 018c 01       		.uleb128 0x1
 4139 018d 50       		.byte	0x50
 4140 018e 9F       		.byte	0x9f
 4141 018f 00000000 		.4byte	0
 4142 0193 00000000 		.4byte	0
 4143              	.LLST11:
 4144 0197 00000000 		.4byte	.LVL22
 4145 019b 0C000000 		.4byte	.LVL26
 4146 019f 0100     		.2byte	0x1
 4147 01a1 51       		.byte	0x51
 4148 01a2 0C000000 		.4byte	.LVL26
 4149 01a6 14000000 		.4byte	.LFE122
 4150 01aa 0400     		.2byte	0x4
 4151 01ac F3       		.byte	0xf3
 4152 01ad 01       		.uleb128 0x1
ARM GAS  /tmp/cc69dDoz.s 			page 107


 4153 01ae 51       		.byte	0x51
 4154 01af 9F       		.byte	0x9f
 4155 01b0 00000000 		.4byte	0
 4156 01b4 00000000 		.4byte	0
 4157              	.LLST12:
 4158 01b8 00000000 		.4byte	.LVL22
 4159 01bc 04000000 		.4byte	.LVL23
 4160 01c0 0200     		.2byte	0x2
 4161 01c2 30       		.byte	0x30
 4162 01c3 9F       		.byte	0x9f
 4163 01c4 04000000 		.4byte	.LVL23
 4164 01c8 08000000 		.4byte	.LVL24
 4165 01cc 0900     		.2byte	0x9
 4166 01ce 72       		.byte	0x72
 4167 01cf 00       		.sleb128 0
 4168 01d0 11       		.byte	0x11
 4169 01d1 FFFFFF44 		.sleb128 -123731969
 4170 01d5 1A       		.byte	0x1a
 4171 01d6 9F       		.byte	0x9f
 4172 01d7 08000000 		.4byte	.LVL24
 4173 01db 0C000000 		.4byte	.LVL26
 4174 01df 0100     		.2byte	0x1
 4175 01e1 52       		.byte	0x52
 4176 01e2 0C000000 		.4byte	.LVL26
 4177 01e6 14000000 		.4byte	.LFE122
 4178 01ea 0100     		.2byte	0x1
 4179 01ec 51       		.byte	0x51
 4180 01ed 00000000 		.4byte	0
 4181 01f1 00000000 		.4byte	0
 4182              	.LLST13:
 4183 01f5 00000000 		.4byte	.LVL27
 4184 01f9 0A000000 		.4byte	.LVL30
 4185 01fd 0100     		.2byte	0x1
 4186 01ff 50       		.byte	0x50
 4187 0200 0A000000 		.4byte	.LVL30
 4188 0204 14000000 		.4byte	.LFE123
 4189 0208 0400     		.2byte	0x4
 4190 020a F3       		.byte	0xf3
 4191 020b 01       		.uleb128 0x1
 4192 020c 50       		.byte	0x50
 4193 020d 9F       		.byte	0x9f
 4194 020e 00000000 		.4byte	0
 4195 0212 00000000 		.4byte	0
 4196              	.LLST14:
 4197 0216 00000000 		.4byte	.LVL27
 4198 021a 0C000000 		.4byte	.LVL31
 4199 021e 0100     		.2byte	0x1
 4200 0220 51       		.byte	0x51
 4201 0221 0C000000 		.4byte	.LVL31
 4202 0225 14000000 		.4byte	.LFE123
 4203 0229 0400     		.2byte	0x4
 4204 022b F3       		.byte	0xf3
 4205 022c 01       		.uleb128 0x1
 4206 022d 51       		.byte	0x51
 4207 022e 9F       		.byte	0x9f
 4208 022f 00000000 		.4byte	0
 4209 0233 00000000 		.4byte	0
ARM GAS  /tmp/cc69dDoz.s 			page 108


 4210              	.LLST15:
 4211 0237 00000000 		.4byte	.LVL27
 4212 023b 04000000 		.4byte	.LVL28
 4213 023f 0200     		.2byte	0x2
 4214 0241 30       		.byte	0x30
 4215 0242 9F       		.byte	0x9f
 4216 0243 04000000 		.4byte	.LVL28
 4217 0247 08000000 		.4byte	.LVL29
 4218 024b 0900     		.2byte	0x9
 4219 024d 72       		.byte	0x72
 4220 024e 00       		.sleb128 0
 4221 024f 0C       		.byte	0xc
 4222 0250 FFFFFF07 		.4byte	0x7ffffff
 4223 0254 1A       		.byte	0x1a
 4224 0255 9F       		.byte	0x9f
 4225 0256 08000000 		.4byte	.LVL29
 4226 025a 0C000000 		.4byte	.LVL31
 4227 025e 0100     		.2byte	0x1
 4228 0260 52       		.byte	0x52
 4229 0261 0C000000 		.4byte	.LVL31
 4230 0265 14000000 		.4byte	.LFE123
 4231 0269 0100     		.2byte	0x1
 4232 026b 51       		.byte	0x51
 4233 026c 00000000 		.4byte	0
 4234 0270 00000000 		.4byte	0
 4235              	.LLST16:
 4236 0274 00000000 		.4byte	.LVL32
 4237 0278 0A000000 		.4byte	.LVL35
 4238 027c 0100     		.2byte	0x1
 4239 027e 50       		.byte	0x50
 4240 027f 0A000000 		.4byte	.LVL35
 4241 0283 14000000 		.4byte	.LFE124
 4242 0287 0400     		.2byte	0x4
 4243 0289 F3       		.byte	0xf3
 4244 028a 01       		.uleb128 0x1
 4245 028b 50       		.byte	0x50
 4246 028c 9F       		.byte	0x9f
 4247 028d 00000000 		.4byte	0
 4248 0291 00000000 		.4byte	0
 4249              	.LLST17:
 4250 0295 00000000 		.4byte	.LVL32
 4251 0299 04000000 		.4byte	.LVL33
 4252 029d 0200     		.2byte	0x2
 4253 029f 30       		.byte	0x30
 4254 02a0 9F       		.byte	0x9f
 4255 02a1 04000000 		.4byte	.LVL33
 4256 02a5 08000000 		.4byte	.LVL34
 4257 02a9 0100     		.2byte	0x1
 4258 02ab 52       		.byte	0x52
 4259 02ac 08000000 		.4byte	.LVL34
 4260 02b0 0A000000 		.4byte	.LVL35
 4261 02b4 0100     		.2byte	0x1
 4262 02b6 51       		.byte	0x51
 4263 02b7 0A000000 		.4byte	.LVL35
 4264 02bb 14000000 		.4byte	.LFE124
 4265 02bf 0100     		.2byte	0x1
 4266 02c1 50       		.byte	0x50
ARM GAS  /tmp/cc69dDoz.s 			page 109


 4267 02c2 00000000 		.4byte	0
 4268 02c6 00000000 		.4byte	0
 4269              	.LLST18:
 4270 02ca 00000000 		.4byte	.LVL36
 4271 02ce 0A000000 		.4byte	.LVL39
 4272 02d2 0100     		.2byte	0x1
 4273 02d4 50       		.byte	0x50
 4274 02d5 0A000000 		.4byte	.LVL39
 4275 02d9 14000000 		.4byte	.LFE126
 4276 02dd 0400     		.2byte	0x4
 4277 02df F3       		.byte	0xf3
 4278 02e0 01       		.uleb128 0x1
 4279 02e1 50       		.byte	0x50
 4280 02e2 9F       		.byte	0x9f
 4281 02e3 00000000 		.4byte	0
 4282 02e7 00000000 		.4byte	0
 4283              	.LLST19:
 4284 02eb 00000000 		.4byte	.LVL36
 4285 02ef 04000000 		.4byte	.LVL37
 4286 02f3 0200     		.2byte	0x2
 4287 02f5 30       		.byte	0x30
 4288 02f6 9F       		.byte	0x9f
 4289 02f7 04000000 		.4byte	.LVL37
 4290 02fb 08000000 		.4byte	.LVL38
 4291 02ff 0100     		.2byte	0x1
 4292 0301 52       		.byte	0x52
 4293 0302 08000000 		.4byte	.LVL38
 4294 0306 0A000000 		.4byte	.LVL39
 4295 030a 0100     		.2byte	0x1
 4296 030c 51       		.byte	0x51
 4297 030d 0A000000 		.4byte	.LVL39
 4298 0311 14000000 		.4byte	.LFE126
 4299 0315 0100     		.2byte	0x1
 4300 0317 50       		.byte	0x50
 4301 0318 00000000 		.4byte	0
 4302 031c 00000000 		.4byte	0
 4303              	.LLST20:
 4304 0320 00000000 		.4byte	.LVL40
 4305 0324 0A000000 		.4byte	.LVL43
 4306 0328 0100     		.2byte	0x1
 4307 032a 50       		.byte	0x50
 4308 032b 0A000000 		.4byte	.LVL43
 4309 032f 14000000 		.4byte	.LFE127
 4310 0333 0400     		.2byte	0x4
 4311 0335 F3       		.byte	0xf3
 4312 0336 01       		.uleb128 0x1
 4313 0337 50       		.byte	0x50
 4314 0338 9F       		.byte	0x9f
 4315 0339 00000000 		.4byte	0
 4316 033d 00000000 		.4byte	0
 4317              	.LLST21:
 4318 0341 00000000 		.4byte	.LVL40
 4319 0345 04000000 		.4byte	.LVL41
 4320 0349 0200     		.2byte	0x2
 4321 034b 30       		.byte	0x30
 4322 034c 9F       		.byte	0x9f
 4323 034d 04000000 		.4byte	.LVL41
ARM GAS  /tmp/cc69dDoz.s 			page 110


 4324 0351 08000000 		.4byte	.LVL42
 4325 0355 0100     		.2byte	0x1
 4326 0357 52       		.byte	0x52
 4327 0358 08000000 		.4byte	.LVL42
 4328 035c 0A000000 		.4byte	.LVL43
 4329 0360 0100     		.2byte	0x1
 4330 0362 51       		.byte	0x51
 4331 0363 0A000000 		.4byte	.LVL43
 4332 0367 14000000 		.4byte	.LFE127
 4333 036b 0100     		.2byte	0x1
 4334 036d 50       		.byte	0x50
 4335 036e 00000000 		.4byte	0
 4336 0372 00000000 		.4byte	0
 4337              	.LLST22:
 4338 0376 00000000 		.4byte	.LVL44
 4339 037a 0C000000 		.4byte	.LVL47
 4340 037e 0100     		.2byte	0x1
 4341 0380 50       		.byte	0x50
 4342 0381 0C000000 		.4byte	.LVL47
 4343 0385 14000000 		.4byte	.LFE128
 4344 0389 0400     		.2byte	0x4
 4345 038b F3       		.byte	0xf3
 4346 038c 01       		.uleb128 0x1
 4347 038d 50       		.byte	0x50
 4348 038e 9F       		.byte	0x9f
 4349 038f 00000000 		.4byte	0
 4350 0393 00000000 		.4byte	0
 4351              	.LLST23:
 4352 0397 00000000 		.4byte	.LVL44
 4353 039b 04000000 		.4byte	.LVL45
 4354 039f 0200     		.2byte	0x2
 4355 03a1 30       		.byte	0x30
 4356 03a2 9F       		.byte	0x9f
 4357 03a3 04000000 		.4byte	.LVL45
 4358 03a7 08000000 		.4byte	.LVL46
 4359 03ab 0100     		.2byte	0x1
 4360 03ad 52       		.byte	0x52
 4361 03ae 08000000 		.4byte	.LVL46
 4362 03b2 0C000000 		.4byte	.LVL47
 4363 03b6 0100     		.2byte	0x1
 4364 03b8 51       		.byte	0x51
 4365 03b9 0C000000 		.4byte	.LVL47
 4366 03bd 14000000 		.4byte	.LFE128
 4367 03c1 0100     		.2byte	0x1
 4368 03c3 50       		.byte	0x50
 4369 03c4 00000000 		.4byte	0
 4370 03c8 00000000 		.4byte	0
 4371              	.LLST24:
 4372 03cc 00000000 		.4byte	.LFB129
 4373 03d0 0C000000 		.4byte	.LCFI1
 4374 03d4 0200     		.2byte	0x2
 4375 03d6 7D       		.byte	0x7d
 4376 03d7 00       		.sleb128 0
 4377 03d8 0C000000 		.4byte	.LCFI1
 4378 03dc 8C000000 		.4byte	.LFE129
 4379 03e0 0200     		.2byte	0x2
 4380 03e2 7D       		.byte	0x7d
ARM GAS  /tmp/cc69dDoz.s 			page 111


 4381 03e3 08       		.sleb128 8
 4382 03e4 00000000 		.4byte	0
 4383 03e8 00000000 		.4byte	0
 4384              	.LLST25:
 4385 03ec 00000000 		.4byte	.LVL48
 4386 03f0 04000000 		.4byte	.LVL49
 4387 03f4 0200     		.2byte	0x2
 4388 03f6 30       		.byte	0x30
 4389 03f7 9F       		.byte	0x9f
 4390 03f8 04000000 		.4byte	.LVL49
 4391 03fc 08000000 		.4byte	.LVL50
 4392 0400 0500     		.2byte	0x5
 4393 0402 72       		.byte	0x72
 4394 0403 00       		.sleb128 0
 4395 0404 3C       		.byte	0x3c
 4396 0405 1A       		.byte	0x1a
 4397 0406 9F       		.byte	0x9f
 4398 0407 08000000 		.4byte	.LVL50
 4399 040b 20000000 		.4byte	.LVL52
 4400 040f 0100     		.2byte	0x1
 4401 0411 51       		.byte	0x51
 4402 0412 4E000000 		.4byte	.LVL59
 4403 0416 54000000 		.4byte	.LVL60
 4404 041a 0600     		.2byte	0x6
 4405 041c 74       		.byte	0x74
 4406 041d 00       		.sleb128 0
 4407 041e 08       		.byte	0x8
 4408 041f F0       		.byte	0xf0
 4409 0420 1A       		.byte	0x1a
 4410 0421 9F       		.byte	0x9f
 4411 0422 54000000 		.4byte	.LVL60
 4412 0426 58000000 		.4byte	.LVL62
 4413 042a 0100     		.2byte	0x1
 4414 042c 53       		.byte	0x53
 4415 042d 60000000 		.4byte	.LVL63
 4416 0431 64000000 		.4byte	.LVL64
 4417 0435 0700     		.2byte	0x7
 4418 0437 74       		.byte	0x74
 4419 0438 00       		.sleb128 0
 4420 0439 0A       		.byte	0xa
 4421 043a 001C     		.2byte	0x1c00
 4422 043c 1A       		.byte	0x1a
 4423 043d 9F       		.byte	0x9f
 4424 043e 64000000 		.4byte	.LVL64
 4425 0442 66000000 		.4byte	.LVL65
 4426 0446 0100     		.2byte	0x1
 4427 0448 54       		.byte	0x54
 4428 0449 6E000000 		.4byte	.LVL67
 4429 044d 72000000 		.4byte	.LVL68
 4430 0451 0700     		.2byte	0x7
 4431 0453 71       		.byte	0x71
 4432 0454 00       		.sleb128 0
 4433 0455 0A       		.byte	0xa
 4434 0456 00E0     		.2byte	0xe000
 4435 0458 1A       		.byte	0x1a
 4436 0459 9F       		.byte	0x9f
 4437 045a 72000000 		.4byte	.LVL68
ARM GAS  /tmp/cc69dDoz.s 			page 112


 4438 045e 8C000000 		.4byte	.LFE129
 4439 0462 0100     		.2byte	0x1
 4440 0464 51       		.byte	0x51
 4441 0465 00000000 		.4byte	0
 4442 0469 00000000 		.4byte	0
 4443              	.LLST26:
 4444 046d 00000000 		.4byte	.LVL48
 4445 0471 56000000 		.4byte	.LVL61
 4446 0475 0200     		.2byte	0x2
 4447 0477 30       		.byte	0x30
 4448 0478 9F       		.byte	0x9f
 4449 0479 56000000 		.4byte	.LVL61
 4450 047d 60000000 		.4byte	.LVL63
 4451 0481 0600     		.2byte	0x6
 4452 0483 74       		.byte	0x74
 4453 0484 00       		.sleb128 0
 4454 0485 08       		.byte	0x8
 4455 0486 FF       		.byte	0xff
 4456 0487 1A       		.byte	0x1a
 4457 0488 9F       		.byte	0x9f
 4458 0489 66000000 		.4byte	.LVL65
 4459 048d 6A000000 		.4byte	.LVL66
 4460 0491 0600     		.2byte	0x6
 4461 0493 74       		.byte	0x74
 4462 0494 00       		.sleb128 0
 4463 0495 08       		.byte	0x8
 4464 0496 FF       		.byte	0xff
 4465 0497 1A       		.byte	0x1a
 4466 0498 9F       		.byte	0x9f
 4467 0499 74000000 		.4byte	.LVL69
 4468 049d 8C000000 		.4byte	.LFE129
 4469 04a1 0600     		.2byte	0x6
 4470 04a3 72       		.byte	0x72
 4471 04a4 00       		.sleb128 0
 4472 04a5 08       		.byte	0x8
 4473 04a6 FF       		.byte	0xff
 4474 04a7 1A       		.byte	0x1a
 4475 04a8 9F       		.byte	0x9f
 4476 04a9 00000000 		.4byte	0
 4477 04ad 00000000 		.4byte	0
 4478              	.LLST27:
 4479 04b1 00000000 		.4byte	.LVL48
 4480 04b5 3C000000 		.4byte	.LVL56
 4481 04b9 0200     		.2byte	0x2
 4482 04bb 30       		.byte	0x30
 4483 04bc 9F       		.byte	0x9f
 4484 04bd 3C000000 		.4byte	.LVL56
 4485 04c1 48000000 		.4byte	.LVL58
 4486 04c5 0100     		.2byte	0x1
 4487 04c7 53       		.byte	0x53
 4488 04c8 00000000 		.4byte	0
 4489 04cc 00000000 		.4byte	0
 4490              	.LLST28:
 4491 04d0 00000000 		.4byte	.LVL48
 4492 04d4 3C000000 		.4byte	.LVL56
 4493 04d8 0200     		.2byte	0x2
 4494 04da 32       		.byte	0x32
ARM GAS  /tmp/cc69dDoz.s 			page 113


 4495 04db 9F       		.byte	0x9f
 4496 04dc 3C000000 		.4byte	.LVL56
 4497 04e0 44000000 		.4byte	.LVL57
 4498 04e4 0D00     		.2byte	0xd
 4499 04e6 71       		.byte	0x71
 4500 04e7 00       		.sleb128 0
 4501 04e8 48       		.byte	0x48
 4502 04e9 3D       		.byte	0x3d
 4503 04ea 24       		.byte	0x24
 4504 04eb 1A       		.byte	0x1a
 4505 04ec 40       		.byte	0x40
 4506 04ed 25       		.byte	0x25
 4507 04ee 23       		.byte	0x23
 4508 04ef 01       		.uleb128 0x1
 4509 04f0 31       		.byte	0x31
 4510 04f1 24       		.byte	0x24
 4511 04f2 9F       		.byte	0x9f
 4512 04f3 00000000 		.4byte	0
 4513 04f7 00000000 		.4byte	0
 4514              	.LLST29:
 4515 04fb 00000000 		.4byte	.LVL48
 4516 04ff 1C000000 		.4byte	.LVL51
 4517 0503 0200     		.2byte	0x2
 4518 0505 30       		.byte	0x30
 4519 0506 9F       		.byte	0x9f
 4520 0507 1C000000 		.4byte	.LVL51
 4521 050b 38000000 		.4byte	.LVL55
 4522 050f 0900     		.2byte	0x9
 4523 0511 74       		.byte	0x74
 4524 0512 00       		.sleb128 0
 4525 0513 40       		.byte	0x40
 4526 0514 42       		.byte	0x42
 4527 0515 24       		.byte	0x24
 4528 0516 1A       		.byte	0x1a
 4529 0517 46       		.byte	0x46
 4530 0518 25       		.byte	0x25
 4531 0519 9F       		.byte	0x9f
 4532 051a 00000000 		.4byte	0
 4533 051e 00000000 		.4byte	0
 4534              	.LLST30:
 4535 0522 00000000 		.4byte	.LVL48
 4536 0526 2E000000 		.4byte	.LVL53
 4537 052a 0200     		.2byte	0x2
 4538 052c 32       		.byte	0x32
 4539 052d 9F       		.byte	0x9f
 4540 052e 2E000000 		.4byte	.LVL53
 4541 0532 34000000 		.4byte	.LVL54
 4542 0536 0100     		.2byte	0x1
 4543 0538 52       		.byte	0x52
 4544 0539 00000000 		.4byte	0
 4545 053d 00000000 		.4byte	0
 4546              	.LLST31:
 4547 0541 00000000 		.4byte	.LVL70
 4548 0545 22000000 		.4byte	.LVL75
 4549 0549 0100     		.2byte	0x1
 4550 054b 50       		.byte	0x50
 4551 054c 22000000 		.4byte	.LVL75
ARM GAS  /tmp/cc69dDoz.s 			page 114


 4552 0550 30000000 		.4byte	.LFE130
 4553 0554 0400     		.2byte	0x4
 4554 0556 F3       		.byte	0xf3
 4555 0557 01       		.uleb128 0x1
 4556 0558 50       		.byte	0x50
 4557 0559 9F       		.byte	0x9f
 4558 055a 00000000 		.4byte	0
 4559 055e 00000000 		.4byte	0
 4560              	.LLST32:
 4561 0562 00000000 		.4byte	.LVL70
 4562 0566 0E000000 		.4byte	.LVL71
 4563 056a 0200     		.2byte	0x2
 4564 056c 30       		.byte	0x30
 4565 056d 9F       		.byte	0x9f
 4566 056e 0E000000 		.4byte	.LVL71
 4567 0572 1C000000 		.4byte	.LVL73
 4568 0576 0100     		.2byte	0x1
 4569 0578 51       		.byte	0x51
 4570 0579 1C000000 		.4byte	.LVL73
 4571 057d 1E000000 		.4byte	.LVL74
 4572 0581 0100     		.2byte	0x1
 4573 0583 52       		.byte	0x52
 4574 0584 00000000 		.4byte	0
 4575 0588 00000000 		.4byte	0
 4576              	.LLST33:
 4577 058c 00000000 		.4byte	.LVL80
 4578 0590 08000000 		.4byte	.LVL81
 4579 0594 0100     		.2byte	0x1
 4580 0596 50       		.byte	0x50
 4581 0597 08000000 		.4byte	.LVL81
 4582 059b 0A000000 		.4byte	.LVL82
 4583 059f 0400     		.2byte	0x4
 4584 05a1 F3       		.byte	0xf3
 4585 05a2 01       		.uleb128 0x1
 4586 05a3 50       		.byte	0x50
 4587 05a4 9F       		.byte	0x9f
 4588 05a5 0A000000 		.4byte	.LVL82
 4589 05a9 0E000000 		.4byte	.LVL83
 4590 05ad 0100     		.2byte	0x1
 4591 05af 50       		.byte	0x50
 4592 05b0 0E000000 		.4byte	.LVL83
 4593 05b4 18000000 		.4byte	.LFE135
 4594 05b8 0400     		.2byte	0x4
 4595 05ba F3       		.byte	0xf3
 4596 05bb 01       		.uleb128 0x1
 4597 05bc 50       		.byte	0x50
 4598 05bd 9F       		.byte	0x9f
 4599 05be 00000000 		.4byte	0
 4600 05c2 00000000 		.4byte	0
 4601              	.LLST34:
 4602 05c6 00000000 		.4byte	.LVL84
 4603 05ca 08000000 		.4byte	.LVL85
 4604 05ce 0100     		.2byte	0x1
 4605 05d0 50       		.byte	0x50
 4606 05d1 08000000 		.4byte	.LVL85
 4607 05d5 0A000000 		.4byte	.LVL86
 4608 05d9 0400     		.2byte	0x4
ARM GAS  /tmp/cc69dDoz.s 			page 115


 4609 05db F3       		.byte	0xf3
 4610 05dc 01       		.uleb128 0x1
 4611 05dd 50       		.byte	0x50
 4612 05de 9F       		.byte	0x9f
 4613 05df 0A000000 		.4byte	.LVL86
 4614 05e3 0E000000 		.4byte	.LVL87
 4615 05e7 0100     		.2byte	0x1
 4616 05e9 50       		.byte	0x50
 4617 05ea 0E000000 		.4byte	.LVL87
 4618 05ee 18000000 		.4byte	.LFE136
 4619 05f2 0400     		.2byte	0x4
 4620 05f4 F3       		.byte	0xf3
 4621 05f5 01       		.uleb128 0x1
 4622 05f6 50       		.byte	0x50
 4623 05f7 9F       		.byte	0x9f
 4624 05f8 00000000 		.4byte	0
 4625 05fc 00000000 		.4byte	0
 4626              	.LLST35:
 4627 0600 00000000 		.4byte	.LVL88
 4628 0604 08000000 		.4byte	.LVL89
 4629 0608 0100     		.2byte	0x1
 4630 060a 50       		.byte	0x50
 4631 060b 08000000 		.4byte	.LVL89
 4632 060f 0A000000 		.4byte	.LVL90
 4633 0613 0400     		.2byte	0x4
 4634 0615 F3       		.byte	0xf3
 4635 0616 01       		.uleb128 0x1
 4636 0617 50       		.byte	0x50
 4637 0618 9F       		.byte	0x9f
 4638 0619 0A000000 		.4byte	.LVL90
 4639 061d 0E000000 		.4byte	.LVL91
 4640 0621 0100     		.2byte	0x1
 4641 0623 50       		.byte	0x50
 4642 0624 0E000000 		.4byte	.LVL91
 4643 0628 18000000 		.4byte	.LFE137
 4644 062c 0400     		.2byte	0x4
 4645 062e F3       		.byte	0xf3
 4646 062f 01       		.uleb128 0x1
 4647 0630 50       		.byte	0x50
 4648 0631 9F       		.byte	0x9f
 4649 0632 00000000 		.4byte	0
 4650 0636 00000000 		.4byte	0
 4651              	.LLST36:
 4652 063a 00000000 		.4byte	.LVL92
 4653 063e 08000000 		.4byte	.LVL93
 4654 0642 0100     		.2byte	0x1
 4655 0644 50       		.byte	0x50
 4656 0645 08000000 		.4byte	.LVL93
 4657 0649 0A000000 		.4byte	.LVL94
 4658 064d 0400     		.2byte	0x4
 4659 064f F3       		.byte	0xf3
 4660 0650 01       		.uleb128 0x1
 4661 0651 50       		.byte	0x50
 4662 0652 9F       		.byte	0x9f
 4663 0653 0A000000 		.4byte	.LVL94
 4664 0657 0E000000 		.4byte	.LVL95
 4665 065b 0100     		.2byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 116


 4666 065d 50       		.byte	0x50
 4667 065e 0E000000 		.4byte	.LVL95
 4668 0662 18000000 		.4byte	.LFE138
 4669 0666 0400     		.2byte	0x4
 4670 0668 F3       		.byte	0xf3
 4671 0669 01       		.uleb128 0x1
 4672 066a 50       		.byte	0x50
 4673 066b 9F       		.byte	0x9f
 4674 066c 00000000 		.4byte	0
 4675 0670 00000000 		.4byte	0
 4676              	.LLST37:
 4677 0674 00000000 		.4byte	.LVL96
 4678 0678 08000000 		.4byte	.LVL97
 4679 067c 0100     		.2byte	0x1
 4680 067e 50       		.byte	0x50
 4681 067f 08000000 		.4byte	.LVL97
 4682 0683 0A000000 		.4byte	.LVL98
 4683 0687 0400     		.2byte	0x4
 4684 0689 F3       		.byte	0xf3
 4685 068a 01       		.uleb128 0x1
 4686 068b 50       		.byte	0x50
 4687 068c 9F       		.byte	0x9f
 4688 068d 0A000000 		.4byte	.LVL98
 4689 0691 0E000000 		.4byte	.LVL99
 4690 0695 0100     		.2byte	0x1
 4691 0697 50       		.byte	0x50
 4692 0698 0E000000 		.4byte	.LVL99
 4693 069c 18000000 		.4byte	.LFE139
 4694 06a0 0400     		.2byte	0x4
 4695 06a2 F3       		.byte	0xf3
 4696 06a3 01       		.uleb128 0x1
 4697 06a4 50       		.byte	0x50
 4698 06a5 9F       		.byte	0x9f
 4699 06a6 00000000 		.4byte	0
 4700 06aa 00000000 		.4byte	0
 4701              	.LLST38:
 4702 06ae 00000000 		.4byte	.LVL100
 4703 06b2 08000000 		.4byte	.LVL101
 4704 06b6 0100     		.2byte	0x1
 4705 06b8 50       		.byte	0x50
 4706 06b9 08000000 		.4byte	.LVL101
 4707 06bd 0A000000 		.4byte	.LVL102
 4708 06c1 0400     		.2byte	0x4
 4709 06c3 F3       		.byte	0xf3
 4710 06c4 01       		.uleb128 0x1
 4711 06c5 50       		.byte	0x50
 4712 06c6 9F       		.byte	0x9f
 4713 06c7 0A000000 		.4byte	.LVL102
 4714 06cb 0E000000 		.4byte	.LVL103
 4715 06cf 0100     		.2byte	0x1
 4716 06d1 50       		.byte	0x50
 4717 06d2 0E000000 		.4byte	.LVL103
 4718 06d6 18000000 		.4byte	.LFE140
 4719 06da 0400     		.2byte	0x4
 4720 06dc F3       		.byte	0xf3
 4721 06dd 01       		.uleb128 0x1
 4722 06de 50       		.byte	0x50
ARM GAS  /tmp/cc69dDoz.s 			page 117


 4723 06df 9F       		.byte	0x9f
 4724 06e0 00000000 		.4byte	0
 4725 06e4 00000000 		.4byte	0
 4726              	.LLST39:
 4727 06e8 00000000 		.4byte	.LVL104
 4728 06ec 08000000 		.4byte	.LVL105
 4729 06f0 0100     		.2byte	0x1
 4730 06f2 50       		.byte	0x50
 4731 06f3 08000000 		.4byte	.LVL105
 4732 06f7 0A000000 		.4byte	.LVL106
 4733 06fb 0400     		.2byte	0x4
 4734 06fd F3       		.byte	0xf3
 4735 06fe 01       		.uleb128 0x1
 4736 06ff 50       		.byte	0x50
 4737 0700 9F       		.byte	0x9f
 4738 0701 0A000000 		.4byte	.LVL106
 4739 0705 0E000000 		.4byte	.LVL107
 4740 0709 0100     		.2byte	0x1
 4741 070b 50       		.byte	0x50
 4742 070c 0E000000 		.4byte	.LVL107
 4743 0710 18000000 		.4byte	.LFE141
 4744 0714 0400     		.2byte	0x4
 4745 0716 F3       		.byte	0xf3
 4746 0717 01       		.uleb128 0x1
 4747 0718 50       		.byte	0x50
 4748 0719 9F       		.byte	0x9f
 4749 071a 00000000 		.4byte	0
 4750 071e 00000000 		.4byte	0
 4751              	.LLST40:
 4752 0722 00000000 		.4byte	.LVL108
 4753 0726 08000000 		.4byte	.LVL109
 4754 072a 0100     		.2byte	0x1
 4755 072c 50       		.byte	0x50
 4756 072d 08000000 		.4byte	.LVL109
 4757 0731 0A000000 		.4byte	.LVL110
 4758 0735 0400     		.2byte	0x4
 4759 0737 F3       		.byte	0xf3
 4760 0738 01       		.uleb128 0x1
 4761 0739 50       		.byte	0x50
 4762 073a 9F       		.byte	0x9f
 4763 073b 0A000000 		.4byte	.LVL110
 4764 073f 0E000000 		.4byte	.LVL111
 4765 0743 0100     		.2byte	0x1
 4766 0745 50       		.byte	0x50
 4767 0746 0E000000 		.4byte	.LVL111
 4768 074a 18000000 		.4byte	.LFE142
 4769 074e 0400     		.2byte	0x4
 4770 0750 F3       		.byte	0xf3
 4771 0751 01       		.uleb128 0x1
 4772 0752 50       		.byte	0x50
 4773 0753 9F       		.byte	0x9f
 4774 0754 00000000 		.4byte	0
 4775 0758 00000000 		.4byte	0
 4776              	.LLST41:
 4777 075c 00000000 		.4byte	.LVL112
 4778 0760 08000000 		.4byte	.LVL113
 4779 0764 0100     		.2byte	0x1
ARM GAS  /tmp/cc69dDoz.s 			page 118


 4780 0766 50       		.byte	0x50
 4781 0767 08000000 		.4byte	.LVL113
 4782 076b 0A000000 		.4byte	.LVL114
 4783 076f 0400     		.2byte	0x4
 4784 0771 F3       		.byte	0xf3
 4785 0772 01       		.uleb128 0x1
 4786 0773 50       		.byte	0x50
 4787 0774 9F       		.byte	0x9f
 4788 0775 0A000000 		.4byte	.LVL114
 4789 0779 0E000000 		.4byte	.LVL115
 4790 077d 0100     		.2byte	0x1
 4791 077f 50       		.byte	0x50
 4792 0780 0E000000 		.4byte	.LVL115
 4793 0784 18000000 		.4byte	.LFE143
 4794 0788 0400     		.2byte	0x4
 4795 078a F3       		.byte	0xf3
 4796 078b 01       		.uleb128 0x1
 4797 078c 50       		.byte	0x50
 4798 078d 9F       		.byte	0x9f
 4799 078e 00000000 		.4byte	0
 4800 0792 00000000 		.4byte	0
 4801              	.LLST42:
 4802 0796 00000000 		.4byte	.LVL116
 4803 079a 08000000 		.4byte	.LVL117
 4804 079e 0100     		.2byte	0x1
 4805 07a0 50       		.byte	0x50
 4806 07a1 08000000 		.4byte	.LVL117
 4807 07a5 0A000000 		.4byte	.LVL118
 4808 07a9 0400     		.2byte	0x4
 4809 07ab F3       		.byte	0xf3
 4810 07ac 01       		.uleb128 0x1
 4811 07ad 50       		.byte	0x50
 4812 07ae 9F       		.byte	0x9f
 4813 07af 0A000000 		.4byte	.LVL118
 4814 07b3 0E000000 		.4byte	.LVL119
 4815 07b7 0100     		.2byte	0x1
 4816 07b9 50       		.byte	0x50
 4817 07ba 0E000000 		.4byte	.LVL119
 4818 07be 18000000 		.4byte	.LFE144
 4819 07c2 0400     		.2byte	0x4
 4820 07c4 F3       		.byte	0xf3
 4821 07c5 01       		.uleb128 0x1
 4822 07c6 50       		.byte	0x50
 4823 07c7 9F       		.byte	0x9f
 4824 07c8 00000000 		.4byte	0
 4825 07cc 00000000 		.4byte	0
 4826              	.LLST43:
 4827 07d0 00000000 		.4byte	.LVL120
 4828 07d4 08000000 		.4byte	.LVL121
 4829 07d8 0100     		.2byte	0x1
 4830 07da 50       		.byte	0x50
 4831 07db 08000000 		.4byte	.LVL121
 4832 07df 0A000000 		.4byte	.LVL122
 4833 07e3 0400     		.2byte	0x4
 4834 07e5 F3       		.byte	0xf3
 4835 07e6 01       		.uleb128 0x1
 4836 07e7 50       		.byte	0x50
ARM GAS  /tmp/cc69dDoz.s 			page 119


 4837 07e8 9F       		.byte	0x9f
 4838 07e9 0A000000 		.4byte	.LVL122
 4839 07ed 0E000000 		.4byte	.LVL123
 4840 07f1 0100     		.2byte	0x1
 4841 07f3 50       		.byte	0x50
 4842 07f4 0E000000 		.4byte	.LVL123
 4843 07f8 18000000 		.4byte	.LFE145
 4844 07fc 0400     		.2byte	0x4
 4845 07fe F3       		.byte	0xf3
 4846 07ff 01       		.uleb128 0x1
 4847 0800 50       		.byte	0x50
 4848 0801 9F       		.byte	0x9f
 4849 0802 00000000 		.4byte	0
 4850 0806 00000000 		.4byte	0
 4851              	.LLST44:
 4852 080a 00000000 		.4byte	.LVL124
 4853 080e 08000000 		.4byte	.LVL125
 4854 0812 0100     		.2byte	0x1
 4855 0814 50       		.byte	0x50
 4856 0815 08000000 		.4byte	.LVL125
 4857 0819 0A000000 		.4byte	.LVL126
 4858 081d 0400     		.2byte	0x4
 4859 081f F3       		.byte	0xf3
 4860 0820 01       		.uleb128 0x1
 4861 0821 50       		.byte	0x50
 4862 0822 9F       		.byte	0x9f
 4863 0823 0A000000 		.4byte	.LVL126
 4864 0827 0E000000 		.4byte	.LVL127
 4865 082b 0100     		.2byte	0x1
 4866 082d 50       		.byte	0x50
 4867 082e 0E000000 		.4byte	.LVL127
 4868 0832 18000000 		.4byte	.LFE146
 4869 0836 0400     		.2byte	0x4
 4870 0838 F3       		.byte	0xf3
 4871 0839 01       		.uleb128 0x1
 4872 083a 50       		.byte	0x50
 4873 083b 9F       		.byte	0x9f
 4874 083c 00000000 		.4byte	0
 4875 0840 00000000 		.4byte	0
 4876              	.LLST45:
 4877 0844 00000000 		.4byte	.LVL128
 4878 0848 08000000 		.4byte	.LVL129
 4879 084c 0100     		.2byte	0x1
 4880 084e 50       		.byte	0x50
 4881 084f 08000000 		.4byte	.LVL129
 4882 0853 0A000000 		.4byte	.LVL130
 4883 0857 0400     		.2byte	0x4
 4884 0859 F3       		.byte	0xf3
 4885 085a 01       		.uleb128 0x1
 4886 085b 50       		.byte	0x50
 4887 085c 9F       		.byte	0x9f
 4888 085d 0A000000 		.4byte	.LVL130
 4889 0861 0E000000 		.4byte	.LVL131
 4890 0865 0100     		.2byte	0x1
 4891 0867 50       		.byte	0x50
 4892 0868 0E000000 		.4byte	.LVL131
 4893 086c 18000000 		.4byte	.LFE147
ARM GAS  /tmp/cc69dDoz.s 			page 120


 4894 0870 0400     		.2byte	0x4
 4895 0872 F3       		.byte	0xf3
 4896 0873 01       		.uleb128 0x1
 4897 0874 50       		.byte	0x50
 4898 0875 9F       		.byte	0x9f
 4899 0876 00000000 		.4byte	0
 4900 087a 00000000 		.4byte	0
 4901              	.LLST46:
 4902 087e 00000000 		.4byte	.LVL132
 4903 0882 08000000 		.4byte	.LVL133
 4904 0886 0100     		.2byte	0x1
 4905 0888 50       		.byte	0x50
 4906 0889 08000000 		.4byte	.LVL133
 4907 088d 0A000000 		.4byte	.LVL134
 4908 0891 0400     		.2byte	0x4
 4909 0893 F3       		.byte	0xf3
 4910 0894 01       		.uleb128 0x1
 4911 0895 50       		.byte	0x50
 4912 0896 9F       		.byte	0x9f
 4913 0897 0A000000 		.4byte	.LVL134
 4914 089b 0E000000 		.4byte	.LVL135
 4915 089f 0100     		.2byte	0x1
 4916 08a1 50       		.byte	0x50
 4917 08a2 0E000000 		.4byte	.LVL135
 4918 08a6 18000000 		.4byte	.LFE148
 4919 08aa 0400     		.2byte	0x4
 4920 08ac F3       		.byte	0xf3
 4921 08ad 01       		.uleb128 0x1
 4922 08ae 50       		.byte	0x50
 4923 08af 9F       		.byte	0x9f
 4924 08b0 00000000 		.4byte	0
 4925 08b4 00000000 		.4byte	0
 4926              	.LLST47:
 4927 08b8 00000000 		.4byte	.LVL136
 4928 08bc 08000000 		.4byte	.LVL137
 4929 08c0 0100     		.2byte	0x1
 4930 08c2 50       		.byte	0x50
 4931 08c3 08000000 		.4byte	.LVL137
 4932 08c7 0A000000 		.4byte	.LVL138
 4933 08cb 0400     		.2byte	0x4
 4934 08cd F3       		.byte	0xf3
 4935 08ce 01       		.uleb128 0x1
 4936 08cf 50       		.byte	0x50
 4937 08d0 9F       		.byte	0x9f
 4938 08d1 0A000000 		.4byte	.LVL138
 4939 08d5 0E000000 		.4byte	.LVL139
 4940 08d9 0100     		.2byte	0x1
 4941 08db 50       		.byte	0x50
 4942 08dc 0E000000 		.4byte	.LVL139
 4943 08e0 18000000 		.4byte	.LFE149
 4944 08e4 0400     		.2byte	0x4
 4945 08e6 F3       		.byte	0xf3
 4946 08e7 01       		.uleb128 0x1
 4947 08e8 50       		.byte	0x50
 4948 08e9 9F       		.byte	0x9f
 4949 08ea 00000000 		.4byte	0
 4950 08ee 00000000 		.4byte	0
ARM GAS  /tmp/cc69dDoz.s 			page 121


 4951              	.LLST48:
 4952 08f2 00000000 		.4byte	.LVL140
 4953 08f6 08000000 		.4byte	.LVL141
 4954 08fa 0100     		.2byte	0x1
 4955 08fc 50       		.byte	0x50
 4956 08fd 08000000 		.4byte	.LVL141
 4957 0901 0A000000 		.4byte	.LVL142
 4958 0905 0400     		.2byte	0x4
 4959 0907 F3       		.byte	0xf3
 4960 0908 01       		.uleb128 0x1
 4961 0909 50       		.byte	0x50
 4962 090a 9F       		.byte	0x9f
 4963 090b 0A000000 		.4byte	.LVL142
 4964 090f 0E000000 		.4byte	.LVL143
 4965 0913 0100     		.2byte	0x1
 4966 0915 50       		.byte	0x50
 4967 0916 0E000000 		.4byte	.LVL143
 4968 091a 18000000 		.4byte	.LFE150
 4969 091e 0400     		.2byte	0x4
 4970 0920 F3       		.byte	0xf3
 4971 0921 01       		.uleb128 0x1
 4972 0922 50       		.byte	0x50
 4973 0923 9F       		.byte	0x9f
 4974 0924 00000000 		.4byte	0
 4975 0928 00000000 		.4byte	0
 4976              	.LLST49:
 4977 092c 00000000 		.4byte	.LVL144
 4978 0930 18000000 		.4byte	.LVL150
 4979 0934 0100     		.2byte	0x1
 4980 0936 50       		.byte	0x50
 4981 0937 18000000 		.4byte	.LVL150
 4982 093b 28000000 		.4byte	.LFE151
 4983 093f 0400     		.2byte	0x4
 4984 0941 F3       		.byte	0xf3
 4985 0942 01       		.uleb128 0x1
 4986 0943 50       		.byte	0x50
 4987 0944 9F       		.byte	0x9f
 4988 0945 00000000 		.4byte	0
 4989 0949 00000000 		.4byte	0
 4990              	.LLST50:
 4991 094d 00000000 		.4byte	.LVL144
 4992 0951 02000000 		.4byte	.LVL145
 4993 0955 0200     		.2byte	0x2
 4994 0957 30       		.byte	0x30
 4995 0958 9F       		.byte	0x9f
 4996 0959 02000000 		.4byte	.LVL145
 4997 095d 0A000000 		.4byte	.LVL146
 4998 0961 0100     		.2byte	0x1
 4999 0963 53       		.byte	0x53
 5000 0964 0A000000 		.4byte	.LVL146
 5001 0968 0C000000 		.4byte	.LVL147
 5002 096c 0500     		.2byte	0x5
 5003 096e 70       		.byte	0x70
 5004 096f 00       		.sleb128 0
 5005 0970 35       		.byte	0x35
 5006 0971 25       		.byte	0x25
 5007 0972 9F       		.byte	0x9f
ARM GAS  /tmp/cc69dDoz.s 			page 122


 5008 0973 0C000000 		.4byte	.LVL147
 5009 0977 12000000 		.4byte	.LVL148
 5010 097b 0100     		.2byte	0x1
 5011 097d 53       		.byte	0x53
 5012 097e 12000000 		.4byte	.LVL148
 5013 0982 14000000 		.4byte	.LVL149
 5014 0986 0500     		.2byte	0x5
 5015 0988 70       		.byte	0x70
 5016 0989 00       		.sleb128 0
 5017 098a 35       		.byte	0x35
 5018 098b 25       		.byte	0x25
 5019 098c 9F       		.byte	0x9f
 5020 098d 14000000 		.4byte	.LVL149
 5021 0991 18000000 		.4byte	.LVL150
 5022 0995 0800     		.2byte	0x8
 5023 0997 70       		.byte	0x70
 5024 0998 00       		.sleb128 0
 5025 0999 4F       		.byte	0x4f
 5026 099a 1A       		.byte	0x1a
 5027 099b 08       		.byte	0x8
 5028 099c FF       		.byte	0xff
 5029 099d 1A       		.byte	0x1a
 5030 099e 9F       		.byte	0x9f
 5031 099f 00000000 		.4byte	0
 5032 09a3 00000000 		.4byte	0
 5033              	.LLST51:
 5034 09a7 00000000 		.4byte	.LVL144
 5035 09ab 0A000000 		.4byte	.LVL146
 5036 09af 0200     		.2byte	0x2
 5037 09b1 30       		.byte	0x30
 5038 09b2 9F       		.byte	0x9f
 5039 09b3 0A000000 		.4byte	.LVL146
 5040 09b7 0C000000 		.4byte	.LVL147
 5041 09bb 0100     		.2byte	0x1
 5042 09bd 53       		.byte	0x53
 5043 09be 0C000000 		.4byte	.LVL147
 5044 09c2 12000000 		.4byte	.LVL148
 5045 09c6 0200     		.2byte	0x2
 5046 09c8 30       		.byte	0x30
 5047 09c9 9F       		.byte	0x9f
 5048 09ca 12000000 		.4byte	.LVL148
 5049 09ce 28000000 		.4byte	.LFE151
 5050 09d2 0100     		.2byte	0x1
 5051 09d4 53       		.byte	0x53
 5052 09d5 00000000 		.4byte	0
 5053 09d9 00000000 		.4byte	0
 5054              	.LLST52:
 5055 09dd 00000000 		.4byte	.LVL144
 5056 09e1 14000000 		.4byte	.LVL149
 5057 09e5 0200     		.2byte	0x2
 5058 09e7 30       		.byte	0x30
 5059 09e8 9F       		.byte	0x9f
 5060 09e9 14000000 		.4byte	.LVL149
 5061 09ed 18000000 		.4byte	.LVL150
 5062 09f1 0D00     		.2byte	0xd
 5063 09f3 73       		.byte	0x73
 5064 09f4 00       		.sleb128 0
ARM GAS  /tmp/cc69dDoz.s 			page 123


 5065 09f5 70       		.byte	0x70
 5066 09f6 00       		.sleb128 0
 5067 09f7 4F       		.byte	0x4f
 5068 09f8 1A       		.byte	0x1a
 5069 09f9 08       		.byte	0x8
 5070 09fa FF       		.byte	0xff
 5071 09fb 1A       		.byte	0x1a
 5072 09fc 25       		.byte	0x25
 5073 09fd 31       		.byte	0x31
 5074 09fe 1A       		.byte	0x1a
 5075 09ff 9F       		.byte	0x9f
 5076 0a00 00000000 		.4byte	0
 5077 0a04 00000000 		.4byte	0
 5078              	.LLST53:
 5079 0a08 00000000 		.4byte	.LFB112
 5080 0a0c 02000000 		.4byte	.LCFI2
 5081 0a10 0200     		.2byte	0x2
 5082 0a12 7D       		.byte	0x7d
 5083 0a13 00       		.sleb128 0
 5084 0a14 02000000 		.4byte	.LCFI2
 5085 0a18 2C000000 		.4byte	.LFE112
 5086 0a1c 0200     		.2byte	0x2
 5087 0a1e 7D       		.byte	0x7d
 5088 0a1f 10       		.sleb128 16
 5089 0a20 00000000 		.4byte	0
 5090 0a24 00000000 		.4byte	0
 5091              	.LLST54:
 5092 0a28 06000000 		.4byte	.LVL151
 5093 0a2c 10000000 		.4byte	.LVL153
 5094 0a30 0200     		.2byte	0x2
 5095 0a32 91       		.byte	0x91
 5096 0a33 74       		.sleb128 -12
 5097 0a34 12000000 		.4byte	.LVL154
 5098 0a38 2C000000 		.4byte	.LFE112
 5099 0a3c 0100     		.2byte	0x1
 5100 0a3e 52       		.byte	0x52
 5101 0a3f 00000000 		.4byte	0
 5102 0a43 00000000 		.4byte	0
 5103              	.LLST55:
 5104 0a47 06000000 		.4byte	.LVL151
 5105 0a4b 24000000 		.4byte	.LVL156
 5106 0a4f 0200     		.2byte	0x2
 5107 0a51 30       		.byte	0x30
 5108 0a52 9F       		.byte	0x9f
 5109 0a53 24000000 		.4byte	.LVL156
 5110 0a57 26000000 		.4byte	.LVL157
 5111 0a5b 0700     		.2byte	0x7
 5112 0a5d 70       		.byte	0x70
 5113 0a5e 00       		.sleb128 0
 5114 0a5f 48       		.byte	0x48
 5115 0a60 24       		.byte	0x24
 5116 0a61 30       		.byte	0x30
 5117 0a62 2E       		.byte	0x2e
 5118 0a63 9F       		.byte	0x9f
 5119 0a64 00000000 		.4byte	0
 5120 0a68 00000000 		.4byte	0
 5121              	.LLST56:
ARM GAS  /tmp/cc69dDoz.s 			page 124


 5122 0a6c 0C000000 		.4byte	.LVL152
 5123 0a70 20000000 		.4byte	.LVL155
 5124 0a74 0100     		.2byte	0x1
 5125 0a76 50       		.byte	0x50
 5126 0a77 00000000 		.4byte	0
 5127 0a7b 00000000 		.4byte	0
 5128              	.LLST57:
 5129 0a7f 00000000 		.4byte	.LVL158
 5130 0a83 0C000000 		.4byte	.LVL160
 5131 0a87 0100     		.2byte	0x1
 5132 0a89 50       		.byte	0x50
 5133 0a8a 0C000000 		.4byte	.LVL160
 5134 0a8e 14000000 		.4byte	.LFE153
 5135 0a92 0400     		.2byte	0x4
 5136 0a94 F3       		.byte	0xf3
 5137 0a95 01       		.uleb128 0x1
 5138 0a96 50       		.byte	0x50
 5139 0a97 9F       		.byte	0x9f
 5140 0a98 00000000 		.4byte	0
 5141 0a9c 00000000 		.4byte	0
 5142              	.LLST58:
 5143 0aa0 00000000 		.4byte	.LVL158
 5144 0aa4 04000000 		.4byte	.LVL159
 5145 0aa8 0200     		.2byte	0x2
 5146 0aaa 30       		.byte	0x30
 5147 0aab 9F       		.byte	0x9f
 5148 0aac 04000000 		.4byte	.LVL159
 5149 0ab0 0C000000 		.4byte	.LVL160
 5150 0ab4 0B00     		.2byte	0xb
 5151 0ab6 70       		.byte	0x70
 5152 0ab7 00       		.sleb128 0
 5153 0ab8 08       		.byte	0x8
 5154 0ab9 FF       		.byte	0xff
 5155 0aba 1A       		.byte	0x1a
 5156 0abb 71       		.byte	0x71
 5157 0abc 00       		.sleb128 0
 5158 0abd 1A       		.byte	0x1a
 5159 0abe 30       		.byte	0x30
 5160 0abf 2E       		.byte	0x2e
 5161 0ac0 9F       		.byte	0x9f
 5162 0ac1 0C000000 		.4byte	.LVL160
 5163 0ac5 14000000 		.4byte	.LFE153
 5164 0ac9 0C00     		.2byte	0xc
 5165 0acb F3       		.byte	0xf3
 5166 0acc 01       		.uleb128 0x1
 5167 0acd 50       		.byte	0x50
 5168 0ace 08       		.byte	0x8
 5169 0acf FF       		.byte	0xff
 5170 0ad0 1A       		.byte	0x1a
 5171 0ad1 71       		.byte	0x71
 5172 0ad2 00       		.sleb128 0
 5173 0ad3 1A       		.byte	0x1a
 5174 0ad4 30       		.byte	0x30
 5175 0ad5 2E       		.byte	0x2e
 5176 0ad6 9F       		.byte	0x9f
 5177 0ad7 00000000 		.4byte	0
 5178 0adb 00000000 		.4byte	0
ARM GAS  /tmp/cc69dDoz.s 			page 125


 5179              		.section	.debug_aranges,"",%progbits
 5180 0000 7C010000 		.4byte	0x17c
 5181 0004 0200     		.2byte	0x2
 5182 0006 00000000 		.4byte	.Ldebug_info0
 5183 000a 04       		.byte	0x4
 5184 000b 00       		.byte	0
 5185 000c 0000     		.2byte	0
 5186 000e 0000     		.2byte	0
 5187 0010 00000000 		.4byte	.LFB110
 5188 0014 3C000000 		.4byte	.LFE110-.LFB110
 5189 0018 00000000 		.4byte	.LFB111
 5190 001c 10000000 		.4byte	.LFE111-.LFB111
 5191 0020 00000000 		.4byte	.LFB113
 5192 0024 14000000 		.4byte	.LFE113-.LFB113
 5193 0028 00000000 		.4byte	.LFB114
 5194 002c 0C000000 		.4byte	.LFE114-.LFB114
 5195 0030 00000000 		.4byte	.LFB115
 5196 0034 20000000 		.4byte	.LFE115-.LFB115
 5197 0038 00000000 		.4byte	.LFB116
 5198 003c 0C000000 		.4byte	.LFE116-.LFB116
 5199 0040 00000000 		.4byte	.LFB117
 5200 0044 20000000 		.4byte	.LFE117-.LFB117
 5201 0048 00000000 		.4byte	.LFB118
 5202 004c 0C000000 		.4byte	.LFE118-.LFB118
 5203 0050 00000000 		.4byte	.LFB119
 5204 0054 14000000 		.4byte	.LFE119-.LFB119
 5205 0058 00000000 		.4byte	.LFB120
 5206 005c 0C000000 		.4byte	.LFE120-.LFB120
 5207 0060 00000000 		.4byte	.LFB121
 5208 0064 0C000000 		.4byte	.LFE121-.LFB121
 5209 0068 00000000 		.4byte	.LFB122
 5210 006c 14000000 		.4byte	.LFE122-.LFB122
 5211 0070 00000000 		.4byte	.LFB123
 5212 0074 14000000 		.4byte	.LFE123-.LFB123
 5213 0078 00000000 		.4byte	.LFB124
 5214 007c 14000000 		.4byte	.LFE124-.LFB124
 5215 0080 00000000 		.4byte	.LFB125
 5216 0084 10000000 		.4byte	.LFE125-.LFB125
 5217 0088 00000000 		.4byte	.LFB126
 5218 008c 14000000 		.4byte	.LFE126-.LFB126
 5219 0090 00000000 		.4byte	.LFB127
 5220 0094 14000000 		.4byte	.LFE127-.LFB127
 5221 0098 00000000 		.4byte	.LFB128
 5222 009c 14000000 		.4byte	.LFE128-.LFB128
 5223 00a0 00000000 		.4byte	.LFB129
 5224 00a4 8C000000 		.4byte	.LFE129-.LFB129
 5225 00a8 00000000 		.4byte	.LFB130
 5226 00ac 30000000 		.4byte	.LFE130-.LFB130
 5227 00b0 00000000 		.4byte	.LFB131
 5228 00b4 0C000000 		.4byte	.LFE131-.LFB131
 5229 00b8 00000000 		.4byte	.LFB132
 5230 00bc 0C000000 		.4byte	.LFE132-.LFB132
 5231 00c0 00000000 		.4byte	.LFB133
 5232 00c4 0C000000 		.4byte	.LFE133-.LFB133
 5233 00c8 00000000 		.4byte	.LFB134
 5234 00cc 0C000000 		.4byte	.LFE134-.LFB134
 5235 00d0 00000000 		.4byte	.LFB135
ARM GAS  /tmp/cc69dDoz.s 			page 126


 5236 00d4 18000000 		.4byte	.LFE135-.LFB135
 5237 00d8 00000000 		.4byte	.LFB136
 5238 00dc 18000000 		.4byte	.LFE136-.LFB136
 5239 00e0 00000000 		.4byte	.LFB137
 5240 00e4 18000000 		.4byte	.LFE137-.LFB137
 5241 00e8 00000000 		.4byte	.LFB138
 5242 00ec 18000000 		.4byte	.LFE138-.LFB138
 5243 00f0 00000000 		.4byte	.LFB139
 5244 00f4 18000000 		.4byte	.LFE139-.LFB139
 5245 00f8 00000000 		.4byte	.LFB140
 5246 00fc 18000000 		.4byte	.LFE140-.LFB140
 5247 0100 00000000 		.4byte	.LFB141
 5248 0104 18000000 		.4byte	.LFE141-.LFB141
 5249 0108 00000000 		.4byte	.LFB142
 5250 010c 18000000 		.4byte	.LFE142-.LFB142
 5251 0110 00000000 		.4byte	.LFB143
 5252 0114 18000000 		.4byte	.LFE143-.LFB143
 5253 0118 00000000 		.4byte	.LFB144
 5254 011c 18000000 		.4byte	.LFE144-.LFB144
 5255 0120 00000000 		.4byte	.LFB145
 5256 0124 18000000 		.4byte	.LFE145-.LFB145
 5257 0128 00000000 		.4byte	.LFB146
 5258 012c 18000000 		.4byte	.LFE146-.LFB146
 5259 0130 00000000 		.4byte	.LFB147
 5260 0134 18000000 		.4byte	.LFE147-.LFB147
 5261 0138 00000000 		.4byte	.LFB148
 5262 013c 18000000 		.4byte	.LFE148-.LFB148
 5263 0140 00000000 		.4byte	.LFB149
 5264 0144 18000000 		.4byte	.LFE149-.LFB149
 5265 0148 00000000 		.4byte	.LFB150
 5266 014c 18000000 		.4byte	.LFE150-.LFB150
 5267 0150 00000000 		.4byte	.LFB151
 5268 0154 28000000 		.4byte	.LFE151-.LFB151
 5269 0158 00000000 		.4byte	.LFB112
 5270 015c 2C000000 		.4byte	.LFE112-.LFB112
 5271 0160 00000000 		.4byte	.LFB152
 5272 0164 10000000 		.4byte	.LFE152-.LFB152
 5273 0168 00000000 		.4byte	.LFB153
 5274 016c 14000000 		.4byte	.LFE153-.LFB153
 5275 0170 00000000 		.4byte	.LFB154
 5276 0174 0C000000 		.4byte	.LFE154-.LFB154
 5277 0178 00000000 		.4byte	0
 5278 017c 00000000 		.4byte	0
 5279              		.section	.debug_ranges,"",%progbits
 5280              	.Ldebug_ranges0:
 5281 0000 00000000 		.4byte	.LFB110
 5282 0004 3C000000 		.4byte	.LFE110
 5283 0008 00000000 		.4byte	.LFB111
 5284 000c 10000000 		.4byte	.LFE111
 5285 0010 00000000 		.4byte	.LFB113
 5286 0014 14000000 		.4byte	.LFE113
 5287 0018 00000000 		.4byte	.LFB114
 5288 001c 0C000000 		.4byte	.LFE114
 5289 0020 00000000 		.4byte	.LFB115
 5290 0024 20000000 		.4byte	.LFE115
 5291 0028 00000000 		.4byte	.LFB116
 5292 002c 0C000000 		.4byte	.LFE116
ARM GAS  /tmp/cc69dDoz.s 			page 127


 5293 0030 00000000 		.4byte	.LFB117
 5294 0034 20000000 		.4byte	.LFE117
 5295 0038 00000000 		.4byte	.LFB118
 5296 003c 0C000000 		.4byte	.LFE118
 5297 0040 00000000 		.4byte	.LFB119
 5298 0044 14000000 		.4byte	.LFE119
 5299 0048 00000000 		.4byte	.LFB120
 5300 004c 0C000000 		.4byte	.LFE120
 5301 0050 00000000 		.4byte	.LFB121
 5302 0054 0C000000 		.4byte	.LFE121
 5303 0058 00000000 		.4byte	.LFB122
 5304 005c 14000000 		.4byte	.LFE122
 5305 0060 00000000 		.4byte	.LFB123
 5306 0064 14000000 		.4byte	.LFE123
 5307 0068 00000000 		.4byte	.LFB124
 5308 006c 14000000 		.4byte	.LFE124
 5309 0070 00000000 		.4byte	.LFB125
 5310 0074 10000000 		.4byte	.LFE125
 5311 0078 00000000 		.4byte	.LFB126
 5312 007c 14000000 		.4byte	.LFE126
 5313 0080 00000000 		.4byte	.LFB127
 5314 0084 14000000 		.4byte	.LFE127
 5315 0088 00000000 		.4byte	.LFB128
 5316 008c 14000000 		.4byte	.LFE128
 5317 0090 00000000 		.4byte	.LFB129
 5318 0094 8C000000 		.4byte	.LFE129
 5319 0098 00000000 		.4byte	.LFB130
 5320 009c 30000000 		.4byte	.LFE130
 5321 00a0 00000000 		.4byte	.LFB131
 5322 00a4 0C000000 		.4byte	.LFE131
 5323 00a8 00000000 		.4byte	.LFB132
 5324 00ac 0C000000 		.4byte	.LFE132
 5325 00b0 00000000 		.4byte	.LFB133
 5326 00b4 0C000000 		.4byte	.LFE133
 5327 00b8 00000000 		.4byte	.LFB134
 5328 00bc 0C000000 		.4byte	.LFE134
 5329 00c0 00000000 		.4byte	.LFB135
 5330 00c4 18000000 		.4byte	.LFE135
 5331 00c8 00000000 		.4byte	.LFB136
 5332 00cc 18000000 		.4byte	.LFE136
 5333 00d0 00000000 		.4byte	.LFB137
 5334 00d4 18000000 		.4byte	.LFE137
 5335 00d8 00000000 		.4byte	.LFB138
 5336 00dc 18000000 		.4byte	.LFE138
 5337 00e0 00000000 		.4byte	.LFB139
 5338 00e4 18000000 		.4byte	.LFE139
 5339 00e8 00000000 		.4byte	.LFB140
 5340 00ec 18000000 		.4byte	.LFE140
 5341 00f0 00000000 		.4byte	.LFB141
 5342 00f4 18000000 		.4byte	.LFE141
 5343 00f8 00000000 		.4byte	.LFB142
 5344 00fc 18000000 		.4byte	.LFE142
 5345 0100 00000000 		.4byte	.LFB143
 5346 0104 18000000 		.4byte	.LFE143
 5347 0108 00000000 		.4byte	.LFB144
 5348 010c 18000000 		.4byte	.LFE144
 5349 0110 00000000 		.4byte	.LFB145
ARM GAS  /tmp/cc69dDoz.s 			page 128


 5350 0114 18000000 		.4byte	.LFE145
 5351 0118 00000000 		.4byte	.LFB146
 5352 011c 18000000 		.4byte	.LFE146
 5353 0120 00000000 		.4byte	.LFB147
 5354 0124 18000000 		.4byte	.LFE147
 5355 0128 00000000 		.4byte	.LFB148
 5356 012c 18000000 		.4byte	.LFE148
 5357 0130 00000000 		.4byte	.LFB149
 5358 0134 18000000 		.4byte	.LFE149
 5359 0138 00000000 		.4byte	.LFB150
 5360 013c 18000000 		.4byte	.LFE150
 5361 0140 00000000 		.4byte	.LFB151
 5362 0144 28000000 		.4byte	.LFE151
 5363 0148 00000000 		.4byte	.LFB112
 5364 014c 2C000000 		.4byte	.LFE112
 5365 0150 00000000 		.4byte	.LFB152
 5366 0154 10000000 		.4byte	.LFE152
 5367 0158 00000000 		.4byte	.LFB153
 5368 015c 14000000 		.4byte	.LFE153
 5369 0160 00000000 		.4byte	.LFB154
 5370 0164 0C000000 		.4byte	.LFE154
 5371 0168 00000000 		.4byte	0
 5372 016c 00000000 		.4byte	0
 5373              		.section	.debug_line,"",%progbits
 5374              	.Ldebug_line0:
 5375 0000 66040000 		.section	.debug_str,"MS",%progbits,1
 5375      0200B200 
 5375      00000201 
 5375      FB0E0D00 
 5375      01010101 
 5376              	.LASF89:
 5377 0000 5243435F 		.ascii	"RCC_HCLK\000"
 5377      48434C4B 
 5377      00
 5378              	.LASF63:
 5379 0009 5243435F 		.ascii	"RCC_LSE\000"
 5379      4C534500 
 5380              	.LASF43:
 5381 0011 41504231 		.ascii	"APB1LPENR\000"
 5381      4C50454E 
 5381      5200
 5382              	.LASF142:
 5383 001b 73746D33 		.ascii	"stm32f4xx_rcc.c\000"
 5383      32663478 
 5383      785F7263 
 5383      632E6300 
 5384              	.LASF129:
 5385 002b 73746174 		.ascii	"statusreg\000"
 5385      75737265 
 5385      6700
 5386              	.LASF15:
 5387 0035 466C6167 		.ascii	"FlagStatus\000"
 5387      53746174 
 5387      757300
 5388              	.LASF51:
 5389 0040 53595343 		.ascii	"SYSCLK_Frequency\000"
 5389      4C4B5F46 
ARM GAS  /tmp/cc69dDoz.s 			page 129


 5389      72657175 
 5389      656E6379 
 5389      00
 5390              	.LASF97:
 5391 0051 706C6C6D 		.ascii	"pllm\000"
 5391      00
 5392              	.LASF95:
 5393 0056 706C6C70 		.ascii	"pllp\000"
 5393      00
 5394              	.LASF78:
 5395 005b 5243435F 		.ascii	"RCC_MCO1Source\000"
 5395      4D434F31 
 5395      536F7572 
 5395      636500
 5396              	.LASF119:
 5397 006a 5243435F 		.ascii	"RCC_APB1PeriphResetCmd\000"
 5397      41504231 
 5397      50657269 
 5397      70685265 
 5397      73657443 
 5398              	.LASF68:
 5399 0081 504C4C4E 		.ascii	"PLLN\000"
 5399      00
 5400              	.LASF69:
 5401 0086 504C4C50 		.ascii	"PLLP\000"
 5401      00
 5402              	.LASF70:
 5403 008b 504C4C51 		.ascii	"PLLQ\000"
 5403      00
 5404              	.LASF139:
 5405 0090 5243435F 		.ascii	"RCC_ClearITPendingBit\000"
 5405      436C6561 
 5405      72495450 
 5405      656E6469 
 5405      6E674269 
 5406              	.LASF11:
 5407 00a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 5407      206C6F6E 
 5407      6720756E 
 5407      7369676E 
 5407      65642069 
 5408              	.LASF67:
 5409 00bd 504C4C4D 		.ascii	"PLLM\000"
 5409      00
 5410              	.LASF107:
 5411 00c2 5243435F 		.ascii	"RCC_AHB1Periph\000"
 5411      41484231 
 5411      50657269 
 5411      706800
 5412              	.LASF39:
 5413 00d1 41484231 		.ascii	"AHB1LPENR\000"
 5413      4C50454E 
 5413      5200
 5414              	.LASF92:
 5415 00db 5243435F 		.ascii	"RCC_Clocks\000"
 5415      436C6F63 
 5415      6B7300
ARM GAS  /tmp/cc69dDoz.s 			page 130


 5416              	.LASF125:
 5417 00e6 5243435F 		.ascii	"RCC_APB2PeriphClockLPModeCmd\000"
 5417      41504232 
 5417      50657269 
 5417      7068436C 
 5417      6F636B4C 
 5418              	.LASF137:
 5419 0103 5243435F 		.ascii	"RCC_ClearFlag\000"
 5419      436C6561 
 5419      72466C61 
 5419      6700
 5420              	.LASF0:
 5421 0111 7369676E 		.ascii	"signed char\000"
 5421      65642063 
 5421      68617200 
 5422              	.LASF25:
 5423 011d 41484231 		.ascii	"AHB1RSTR\000"
 5423      52535452 
 5423      00
 5424              	.LASF127:
 5425 0126 5243435F 		.ascii	"RCC_IT\000"
 5425      495400
 5426              	.LASF80:
 5427 012d 746D7072 		.ascii	"tmpreg\000"
 5427      656700
 5428              	.LASF141:
 5429 0134 474E5520 		.ascii	"GNU C 4.7.4 20130913 (release) [ARM/embedded-4_7-br"
 5429      4320342E 
 5429      372E3420 
 5429      32303133 
 5429      30393133 
 5430 0167 616E6368 		.ascii	"anch revision 202601]\000"
 5430      20726576 
 5430      6973696F 
 5430      6E203230 
 5430      32363031 
 5431              	.LASF54:
 5432 017d 50434C4B 		.ascii	"PCLK2_Frequency\000"
 5432      325F4672 
 5432      65717565 
 5432      6E637900 
 5433              	.LASF108:
 5434 018d 5243435F 		.ascii	"RCC_AHB2PeriphClockCmd\000"
 5434      41484232 
 5434      50657269 
 5434      7068436C 
 5434      6F636B43 
 5435              	.LASF18:
 5436 01a4 454E4142 		.ascii	"ENABLE\000"
 5436      4C4500
 5437              	.LASF30:
 5438 01ab 41504232 		.ascii	"APB2RSTR\000"
 5438      52535452 
 5438      00
 5439              	.LASF88:
 5440 01b4 5243435F 		.ascii	"RCC_PCLK1Config\000"
 5440      50434C4B 
ARM GAS  /tmp/cc69dDoz.s 			page 131


 5440      31436F6E 
 5440      66696700 
 5441              	.LASF118:
 5442 01c4 5243435F 		.ascii	"RCC_AHB3PeriphResetCmd\000"
 5442      41484233 
 5442      50657269 
 5442      70685265 
 5442      73657443 
 5443              	.LASF116:
 5444 01db 5243435F 		.ascii	"RCC_AHB1PeriphResetCmd\000"
 5444      41484231 
 5444      50657269 
 5444      70685265 
 5444      73657443 
 5445              	.LASF86:
 5446 01f2 5243435F 		.ascii	"RCC_HCLKConfig\000"
 5446      48434C4B 
 5446      436F6E66 
 5446      696700
 5447              	.LASF10:
 5448 0201 6C6F6E67 		.ascii	"long long int\000"
 5448      206C6F6E 
 5448      6720696E 
 5448      7400
 5449              	.LASF84:
 5450 020f 5243435F 		.ascii	"RCC_SYSCLKConfig\000"
 5450      53595343 
 5450      4C4B436F 
 5450      6E666967 
 5450      00
 5451              	.LASF4:
 5452 0220 75696E74 		.ascii	"uint16_t\000"
 5452      31365F74 
 5452      00
 5453              	.LASF62:
 5454 0229 5243435F 		.ascii	"RCC_LSEConfig\000"
 5454      4C534543 
 5454      6F6E6669 
 5454      6700
 5455              	.LASF128:
 5456 0237 5243435F 		.ascii	"RCC_FLAG\000"
 5456      464C4147 
 5456      00
 5457              	.LASF59:
 5458 0240 48534943 		.ascii	"HSICalibrationValue\000"
 5458      616C6962 
 5458      72617469 
 5458      6F6E5661 
 5458      6C756500 
 5459              	.LASF61:
 5460 0254 4E657753 		.ascii	"NewState\000"
 5460      74617465 
 5460      00
 5461              	.LASF23:
 5462 025d 504C4C43 		.ascii	"PLLCFGR\000"
 5462      46475200 
 5463              	.LASF101:
ARM GAS  /tmp/cc69dDoz.s 			page 132


 5464 0265 5243435F 		.ascii	"RCC_BackupResetCmd\000"
 5464      4261636B 
 5464      75705265 
 5464      73657443 
 5464      6D6400
 5465              	.LASF22:
 5466 0278 4572726F 		.ascii	"ErrorStatus\000"
 5466      72537461 
 5466      74757300 
 5467              	.LASF66:
 5468 0284 5243435F 		.ascii	"RCC_PLLSource\000"
 5468      504C4C53 
 5468      6F757263 
 5468      6500
 5469              	.LASF144:
 5470 0292 5243435F 		.ascii	"RCC_GetSYSCLKSource\000"
 5470      47657453 
 5470      5953434C 
 5470      4B536F75 
 5470      72636500 
 5471              	.LASF132:
 5472 02a6 5243435F 		.ascii	"RCC_WaitForHSEStartUp\000"
 5472      57616974 
 5472      466F7248 
 5472      53455374 
 5472      61727455 
 5473              	.LASF130:
 5474 02bc 62697473 		.ascii	"bitstatus\000"
 5474      74617475 
 5474      7300
 5475              	.LASF52:
 5476 02c6 48434C4B 		.ascii	"HCLK_Frequency\000"
 5476      5F467265 
 5476      7175656E 
 5476      637900
 5477              	.LASF16:
 5478 02d5 49545374 		.ascii	"ITStatus\000"
 5478      61747573 
 5478      00
 5479              	.LASF113:
 5480 02de 5243435F 		.ascii	"RCC_APB1Periph\000"
 5480      41504231 
 5480      50657269 
 5480      706800
 5481              	.LASF12:
 5482 02ed 756E7369 		.ascii	"unsigned int\000"
 5482      676E6564 
 5482      20696E74 
 5482      00
 5483              	.LASF17:
 5484 02fa 44495341 		.ascii	"DISABLE\000"
 5484      424C4500 
 5485              	.LASF98:
 5486 0302 5243435F 		.ascii	"RCC_RTCCLKConfig\000"
 5486      52544343 
 5486      4C4B436F 
 5486      6E666967 
ARM GAS  /tmp/cc69dDoz.s 			page 133


 5486      00
 5487              	.LASF77:
 5488 0313 5243435F 		.ascii	"RCC_MCO1Config\000"
 5488      4D434F31 
 5488      436F6E66 
 5488      696700
 5489              	.LASF9:
 5490 0322 6C6F6E67 		.ascii	"long unsigned int\000"
 5490      20756E73 
 5490      69676E65 
 5490      6420696E 
 5490      7400
 5491              	.LASF87:
 5492 0334 5243435F 		.ascii	"RCC_SYSCLK\000"
 5492      53595343 
 5492      4C4B00
 5493              	.LASF75:
 5494 033f 5243435F 		.ascii	"RCC_PLLI2SCmd\000"
 5494      504C4C49 
 5494      3253436D 
 5494      6400
 5495              	.LASF50:
 5496 034d 5243435F 		.ascii	"RCC_TypeDef\000"
 5496      54797065 
 5496      44656600 
 5497              	.LASF93:
 5498 0359 70726573 		.ascii	"presc\000"
 5498      6300
 5499              	.LASF99:
 5500 035f 5243435F 		.ascii	"RCC_RTCCLKSource\000"
 5500      52544343 
 5500      4C4B536F 
 5500      75726365 
 5500      00
 5501              	.LASF5:
 5502 0370 73686F72 		.ascii	"short unsigned int\000"
 5502      7420756E 
 5502      7369676E 
 5502      65642069 
 5502      6E7400
 5503              	.LASF49:
 5504 0383 504C4C49 		.ascii	"PLLI2SCFGR\000"
 5504      32534346 
 5504      475200
 5505              	.LASF122:
 5506 038e 5243435F 		.ascii	"RCC_AHB2PeriphClockLPModeCmd\000"
 5506      41484232 
 5506      50657269 
 5506      7068436C 
 5506      6F636B4C 
 5507              	.LASF72:
 5508 03ab 5243435F 		.ascii	"RCC_PLLI2SConfig\000"
 5508      504C4C49 
 5508      3253436F 
 5508      6E666967 
 5508      00
 5509              	.LASF109:
ARM GAS  /tmp/cc69dDoz.s 			page 134


 5510 03bc 5243435F 		.ascii	"RCC_AHB2Periph\000"
 5510      41484232 
 5510      50657269 
 5510      706800
 5511              	.LASF44:
 5512 03cb 41504232 		.ascii	"APB2LPENR\000"
 5512      4C50454E 
 5512      5200
 5513              	.LASF111:
 5514 03d5 5243435F 		.ascii	"RCC_AHB3Periph\000"
 5514      41484233 
 5514      50657269 
 5514      706800
 5515              	.LASF83:
 5516 03e4 5243435F 		.ascii	"RCC_MCO2Div\000"
 5516      4D434F32 
 5516      44697600 
 5517              	.LASF100:
 5518 03f0 5243435F 		.ascii	"RCC_RTCCLKCmd\000"
 5518      52544343 
 5518      4C4B436D 
 5518      6400
 5519              	.LASF13:
 5520 03fe 73697A65 		.ascii	"sizetype\000"
 5520      74797065 
 5520      00
 5521              	.LASF20:
 5522 0407 4552524F 		.ascii	"ERROR\000"
 5522      5200
 5523              	.LASF76:
 5524 040d 5243435F 		.ascii	"RCC_ClockSecuritySystemCmd\000"
 5524      436C6F63 
 5524      6B536563 
 5524      75726974 
 5524      79537973 
 5525              	.LASF143:
 5526 0428 2F686F6D 		.ascii	"/home/xavier/Documents/Xav/dev/stm32code/bitbox/boo"
 5526      652F7861 
 5526      76696572 
 5526      2F446F63 
 5526      756D656E 
 5527 045b 746C6F61 		.ascii	"tloader/FATFS-DBG\000"
 5527      6465722F 
 5527      46415446 
 5527      532D4442 
 5527      4700
 5528              	.LASF40:
 5529 046d 41484232 		.ascii	"AHB2LPENR\000"
 5529      4C50454E 
 5529      5200
 5530              	.LASF19:
 5531 0477 46756E63 		.ascii	"FunctionalState\000"
 5531      74696F6E 
 5531      616C5374 
 5531      61746500 
 5532              	.LASF79:
 5533 0487 5243435F 		.ascii	"RCC_MCO1Div\000"
ARM GAS  /tmp/cc69dDoz.s 			page 135


 5533      4D434F31 
 5533      44697600 
 5534              	.LASF120:
 5535 0493 5243435F 		.ascii	"RCC_APB2PeriphResetCmd\000"
 5535      41504232 
 5535      50657269 
 5535      70685265 
 5535      73657443 
 5536              	.LASF82:
 5537 04aa 5243435F 		.ascii	"RCC_MCO2Source\000"
 5537      4D434F32 
 5537      536F7572 
 5537      636500
 5538              	.LASF103:
 5539 04b9 5243435F 		.ascii	"RCC_I2SCLKSource\000"
 5539      49325343 
 5539      4C4B536F 
 5539      75726365 
 5539      00
 5540              	.LASF28:
 5541 04ca 52455345 		.ascii	"RESERVED0\000"
 5541      52564544 
 5541      3000
 5542              	.LASF31:
 5543 04d4 52455345 		.ascii	"RESERVED1\000"
 5543      52564544 
 5543      3100
 5544              	.LASF35:
 5545 04de 52455345 		.ascii	"RESERVED2\000"
 5545      52564544 
 5545      3200
 5546              	.LASF38:
 5547 04e8 52455345 		.ascii	"RESERVED3\000"
 5547      52564544 
 5547      3300
 5548              	.LASF42:
 5549 04f2 52455345 		.ascii	"RESERVED4\000"
 5549      52564544 
 5549      3400
 5550              	.LASF45:
 5551 04fc 52455345 		.ascii	"RESERVED5\000"
 5551      52564544 
 5551      3500
 5552              	.LASF47:
 5553 0506 52455345 		.ascii	"RESERVED6\000"
 5553      52564544 
 5553      3600
 5554              	.LASF14:
 5555 0510 52455345 		.ascii	"RESET\000"
 5555      5400
 5556              	.LASF131:
 5557 0516 5243435F 		.ascii	"RCC_GetFlagStatus\000"
 5557      47657446 
 5557      6C616753 
 5557      74617475 
 5557      7300
 5558              	.LASF56:
ARM GAS  /tmp/cc69dDoz.s 			page 136


 5559 0528 5243435F 		.ascii	"RCC_HSEConfig\000"
 5559      48534543 
 5559      6F6E6669 
 5559      6700
 5560              	.LASF6:
 5561 0536 696E7433 		.ascii	"int32_t\000"
 5561      325F7400 
 5562              	.LASF1:
 5563 053e 756E7369 		.ascii	"unsigned char\000"
 5563      676E6564 
 5563      20636861 
 5563      7200
 5564              	.LASF145:
 5565 054c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5565      52784275 
 5565      66666572 
 5565      00
 5566              	.LASF2:
 5567 0559 73686F72 		.ascii	"short int\000"
 5567      7420696E 
 5567      7400
 5568              	.LASF105:
 5569 0563 5243435F 		.ascii	"RCC_TIMCLKPrescaler\000"
 5569      54494D43 
 5569      4C4B5072 
 5569      65736361 
 5569      6C657200 
 5570              	.LASF71:
 5571 0577 5243435F 		.ascii	"RCC_PLLCmd\000"
 5571      504C4C43 
 5571      6D6400
 5572              	.LASF106:
 5573 0582 5243435F 		.ascii	"RCC_AHB1PeriphClockCmd\000"
 5573      41484231 
 5573      50657269 
 5573      7068436C 
 5573      6F636B43 
 5574              	.LASF37:
 5575 0599 41504232 		.ascii	"APB2ENR\000"
 5575      454E5200 
 5576              	.LASF27:
 5577 05a1 41484233 		.ascii	"AHB3RSTR\000"
 5577      52535452 
 5577      00
 5578              	.LASF34:
 5579 05aa 41484233 		.ascii	"AHB3ENR\000"
 5579      454E5200 
 5580              	.LASF117:
 5581 05b2 5243435F 		.ascii	"RCC_AHB2PeriphResetCmd\000"
 5581      41484232 
 5581      50657269 
 5581      70685265 
 5581      73657443 
 5582              	.LASF124:
 5583 05c9 5243435F 		.ascii	"RCC_APB1PeriphClockLPModeCmd\000"
 5583      41504231 
 5583      50657269 
ARM GAS  /tmp/cc69dDoz.s 			page 137


 5583      7068436C 
 5583      6F636B4C 
 5584              	.LASF90:
 5585 05e6 5243435F 		.ascii	"RCC_PCLK2Config\000"
 5585      50434C4B 
 5585      32436F6E 
 5585      66696700 
 5586              	.LASF85:
 5587 05f6 5243435F 		.ascii	"RCC_SYSCLKSource\000"
 5587      53595343 
 5587      4C4B536F 
 5587      75726365 
 5587      00
 5588              	.LASF58:
 5589 0607 5243435F 		.ascii	"RCC_HSE\000"
 5589      48534500 
 5590              	.LASF8:
 5591 060f 75696E74 		.ascii	"uint32_t\000"
 5591      33325F74 
 5591      00
 5592              	.LASF53:
 5593 0618 50434C4B 		.ascii	"PCLK1_Frequency\000"
 5593      315F4672 
 5593      65717565 
 5593      6E637900 
 5594              	.LASF140:
 5595 0628 41504241 		.ascii	"APBAHBPrescTable\000"
 5595      48425072 
 5595      65736354 
 5595      61626C65 
 5595      00
 5596              	.LASF57:
 5597 0639 5243435F 		.ascii	"RCC_AdjustHSICalibrationValue\000"
 5597      41646A75 
 5597      73744853 
 5597      4943616C 
 5597      69627261 
 5598              	.LASF135:
 5599 0657 68736573 		.ascii	"hsestatus\000"
 5599      74617475 
 5599      7300
 5600              	.LASF73:
 5601 0661 504C4C49 		.ascii	"PLLI2SN\000"
 5601      32534E00 
 5602              	.LASF91:
 5603 0669 5243435F 		.ascii	"RCC_GetClocksFreq\000"
 5603      47657443 
 5603      6C6F636B 
 5603      73467265 
 5603      7100
 5604              	.LASF114:
 5605 067b 5243435F 		.ascii	"RCC_APB2PeriphClockCmd\000"
 5605      41504232 
 5605      50657269 
 5605      7068436C 
 5605      6F636B43 
 5606              	.LASF94:
ARM GAS  /tmp/cc69dDoz.s 			page 138


 5607 0692 706C6C76 		.ascii	"pllvco\000"
 5607      636F00
 5608              	.LASF26:
 5609 0699 41484232 		.ascii	"AHB2RSTR\000"
 5609      52535452 
 5609      00
 5610              	.LASF136:
 5611 06a2 5243435F 		.ascii	"RCC_DeInit\000"
 5611      4465496E 
 5611      697400
 5612              	.LASF74:
 5613 06ad 504C4C49 		.ascii	"PLLI2SR\000"
 5613      32535200 
 5614              	.LASF138:
 5615 06b5 5243435F 		.ascii	"RCC_GetITStatus\000"
 5615      47657449 
 5615      54537461 
 5615      74757300 
 5616              	.LASF36:
 5617 06c5 41504231 		.ascii	"APB1ENR\000"
 5617      454E5200 
 5618              	.LASF33:
 5619 06cd 41484232 		.ascii	"AHB2ENR\000"
 5619      454E5200 
 5620              	.LASF123:
 5621 06d5 5243435F 		.ascii	"RCC_AHB3PeriphClockLPModeCmd\000"
 5621      41484233 
 5621      50657269 
 5621      7068436C 
 5621      6F636B4C 
 5622              	.LASF60:
 5623 06f2 5243435F 		.ascii	"RCC_HSICmd\000"
 5623      48534943 
 5623      6D6400
 5624              	.LASF133:
 5625 06fd 73746172 		.ascii	"startupcounter\000"
 5625      74757063 
 5625      6F756E74 
 5625      657200
 5626              	.LASF115:
 5627 070c 5243435F 		.ascii	"RCC_APB2Periph\000"
 5627      41504232 
 5627      50657269 
 5627      706800
 5628              	.LASF104:
 5629 071b 5243435F 		.ascii	"RCC_TIMCLKPresConfig\000"
 5629      54494D43 
 5629      4C4B5072 
 5629      6573436F 
 5629      6E666967 
 5630              	.LASF102:
 5631 0730 5243435F 		.ascii	"RCC_I2SCLKConfig\000"
 5631      49325343 
 5631      4C4B436F 
 5631      6E666967 
 5631      00
 5632              	.LASF81:
ARM GAS  /tmp/cc69dDoz.s 			page 139


 5633 0741 5243435F 		.ascii	"RCC_MCO2Config\000"
 5633      4D434F32 
 5633      436F6E66 
 5633      696700
 5634              	.LASF48:
 5635 0750 53534347 		.ascii	"SSCGR\000"
 5635      5200
 5636              	.LASF41:
 5637 0756 41484233 		.ascii	"AHB3LPENR\000"
 5637      4C50454E 
 5637      5200
 5638              	.LASF29:
 5639 0760 41504231 		.ascii	"APB1RSTR\000"
 5639      52535452 
 5639      00
 5640              	.LASF64:
 5641 0769 5243435F 		.ascii	"RCC_LSICmd\000"
 5641      4C534943 
 5641      6D6400
 5642              	.LASF134:
 5643 0774 73746174 		.ascii	"status\000"
 5643      757300
 5644              	.LASF46:
 5645 077b 42444352 		.ascii	"BDCR\000"
 5645      00
 5646              	.LASF112:
 5647 0780 5243435F 		.ascii	"RCC_APB1PeriphClockCmd\000"
 5647      41504231 
 5647      50657269 
 5647      7068436C 
 5647      6F636B43 
 5648              	.LASF126:
 5649 0797 5243435F 		.ascii	"RCC_ITConfig\000"
 5649      4954436F 
 5649      6E666967 
 5649      00
 5650              	.LASF3:
 5651 07a4 75696E74 		.ascii	"uint8_t\000"
 5651      385F7400 
 5652              	.LASF21:
 5653 07ac 53554343 		.ascii	"SUCCESS\000"
 5653      45535300 
 5654              	.LASF65:
 5655 07b4 5243435F 		.ascii	"RCC_PLLConfig\000"
 5655      504C4C43 
 5655      6F6E6669 
 5655      6700
 5656              	.LASF55:
 5657 07c2 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 5657      436C6F63 
 5657      6B735479 
 5657      70654465 
 5657      6600
 5658              	.LASF32:
 5659 07d4 41484231 		.ascii	"AHB1ENR\000"
 5659      454E5200 
 5660              	.LASF24:
ARM GAS  /tmp/cc69dDoz.s 			page 140


 5661 07dc 43464752 		.ascii	"CFGR\000"
 5661      00
 5662              	.LASF7:
 5663 07e1 6C6F6E67 		.ascii	"long int\000"
 5663      20696E74 
 5663      00
 5664              	.LASF96:
 5665 07ea 706C6C73 		.ascii	"pllsource\000"
 5665      6F757263 
 5665      6500
 5666              	.LASF121:
 5667 07f4 5243435F 		.ascii	"RCC_AHB1PeriphClockLPModeCmd\000"
 5667      41484231 
 5667      50657269 
 5667      7068436C 
 5667      6F636B4C 
 5668              	.LASF110:
 5669 0811 5243435F 		.ascii	"RCC_AHB3PeriphClockCmd\000"
 5669      41484233 
 5669      50657269 
 5669      7068436C 
 5669      6F636B43 
 5670              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.4 20130913 (release) [ARM/embedded-4_7-br
ARM GAS  /tmp/cc69dDoz.s 			page 141


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/cc69dDoz.s:69     .text.RCC_DeInit:0000000000000000 $t
     /tmp/cc69dDoz.s:74     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/cc69dDoz.s:115    .text.RCC_DeInit:0000000000000030 $d
     /tmp/cc69dDoz.s:122    .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:127    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/cc69dDoz.s:145    .text.RCC_HSEConfig:000000000000000c $d
     /tmp/cc69dDoz.s:150    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/cc69dDoz.s:155    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/cc69dDoz.s:179    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/cc69dDoz.s:184    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/cc69dDoz.s:189    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/cc69dDoz.s:204    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/cc69dDoz.s:209    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:214    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/cc69dDoz.s:253    .text.RCC_LSEConfig:000000000000001c $d
     /tmp/cc69dDoz.s:258    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/cc69dDoz.s:263    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/cc69dDoz.s:278    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/cc69dDoz.s:283    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:288    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/cc69dDoz.s:318    .text.RCC_PLLConfig:000000000000001c $d
     /tmp/cc69dDoz.s:323    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:328    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/cc69dDoz.s:343    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/cc69dDoz.s:348    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:353    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/cc69dDoz.s:372    .text.RCC_PLLI2SConfig:0000000000000010 $d
     /tmp/cc69dDoz.s:377    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:382    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/cc69dDoz.s:397    .text.RCC_PLLI2SCmd:0000000000000008 $d
     /tmp/cc69dDoz.s:402    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:407    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/cc69dDoz.s:422    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/cc69dDoz.s:427    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/cc69dDoz.s:432    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/cc69dDoz.s:458    .text.RCC_MCO1Config:0000000000000010 $d
     /tmp/cc69dDoz.s:463    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/cc69dDoz.s:468    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/cc69dDoz.s:494    .text.RCC_MCO2Config:0000000000000010 $d
     /tmp/cc69dDoz.s:499    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:504    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/cc69dDoz.s:528    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/cc69dDoz.s:533    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/cc69dDoz.s:538    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/cc69dDoz.s:554    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/cc69dDoz.s:559    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:564    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/cc69dDoz.s:588    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/cc69dDoz.s:593    .text.RCC_PCLK1Config:0000000000000000 $t
     /tmp/cc69dDoz.s:598    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/cc69dDoz.s:622    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/cc69dDoz.s:627    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/cc69dDoz.s:632    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/cc69dDoz.s:656    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/cc69dDoz.s:661    .text.RCC_GetClocksFreq:0000000000000000 $t
ARM GAS  /tmp/cc69dDoz.s 			page 142


     /tmp/cc69dDoz.s:666    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/cc69dDoz.s:787    .text.RCC_GetClocksFreq:000000000000007c $d
     /tmp/cc69dDoz.s:795    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:800    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/cc69dDoz.s:839    .text.RCC_RTCCLKConfig:000000000000002c $d
     /tmp/cc69dDoz.s:844    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:849    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/cc69dDoz.s:864    .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/cc69dDoz.s:869    .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:874    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/cc69dDoz.s:889    .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/cc69dDoz.s:894    .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:899    .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/cc69dDoz.s:914    .text.RCC_I2SCLKConfig:0000000000000008 $d
     /tmp/cc69dDoz.s:919    .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:924    .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/cc69dDoz.s:939    .text.RCC_TIMCLKPresConfig:0000000000000008 $d
     /tmp/cc69dDoz.s:944    .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:949    .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/cc69dDoz.s:977    .text.RCC_AHB1PeriphClockCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:982    .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:987    .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/cc69dDoz.s:1015   .text.RCC_AHB2PeriphClockCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1020   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1025   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/cc69dDoz.s:1053   .text.RCC_AHB3PeriphClockCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1058   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1063   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/cc69dDoz.s:1091   .text.RCC_APB1PeriphClockCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1096   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1101   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/cc69dDoz.s:1129   .text.RCC_APB2PeriphClockCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1134   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1139   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/cc69dDoz.s:1167   .text.RCC_AHB1PeriphResetCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1172   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1177   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/cc69dDoz.s:1205   .text.RCC_AHB2PeriphResetCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1210   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1215   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/cc69dDoz.s:1243   .text.RCC_AHB3PeriphResetCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1248   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1253   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/cc69dDoz.s:1281   .text.RCC_APB1PeriphResetCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1286   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1291   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/cc69dDoz.s:1319   .text.RCC_APB2PeriphResetCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1324   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1329   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/cc69dDoz.s:1357   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1362   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1367   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/cc69dDoz.s:1395   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1400   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1405   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/cc69dDoz.s:1433   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1438   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
ARM GAS  /tmp/cc69dDoz.s 			page 143


     /tmp/cc69dDoz.s:1443   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/cc69dDoz.s:1471   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1476   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/cc69dDoz.s:1481   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/cc69dDoz.s:1509   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000014 $d
     /tmp/cc69dDoz.s:1514   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/cc69dDoz.s:1519   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/cc69dDoz.s:1547   .text.RCC_ITConfig:0000000000000014 $d
     /tmp/cc69dDoz.s:1552   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/cc69dDoz.s:1557   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/cc69dDoz.s:1598   .text.RCC_GetFlagStatus:0000000000000024 $d
     /tmp/cc69dDoz.s:1603   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/cc69dDoz.s:1608   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/cc69dDoz.s:1658   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/cc69dDoz.s:1663   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/cc69dDoz.s:1679   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/cc69dDoz.s:1684   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/cc69dDoz.s:1689   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/cc69dDoz.s:1711   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/cc69dDoz.s:1716   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/cc69dDoz.s:1721   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/cc69dDoz.s:1736   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/cc69dDoz.s:1744   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
