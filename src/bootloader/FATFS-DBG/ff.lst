ARM GAS  /tmp/ccKU0f2P.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3	@ Tag_ABI_HardFP_use
   4              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   7              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   8              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   9              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
  10              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
  11              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  12              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  13              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  14              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  15              		.file	"ff.c"
  16              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.7.4 20130913 (release) [ARM/embedded-4_7-
  17              	@	compiled by GNU C version 4.7.3, GMP version 5.0.5, MPFR version 3.1.1-p2, MPC version 0.9
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed:  -I . -I ../ -I cmsis/ -imultilib armv7e-m/fpu
  20              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/4.7.4/
  21              	@ -isysroot /usr/bin/../arm-none-eabi -MD ff.d -MF .dep/ff.o.d -MP -MQ ff.o
  22              	@ -D__USES_INITFINI__ -D __FPU_USED=1 -D __arm__ -D __ASSEMBLY__
  23              	@ -D USE_STDPERIPH_DRIVER -D STM32F4XX -D HSE_VALUE=8000000
  24              	@ -D __FPU_PRESENT=1 -D __FPU_USED=1 -D STM32F405VG -D USE_USB_OTG_FS
  25              	@ -D RUN_FROM_FLASH=1 ff.c -mthumb -mcpu=cortex-m4 -mfloat-abi=hard
  26              	@ -mfpu=fpv4-sp-d16 -mthumb -auxbase-strip ff.o -gdwarf-2 -Os -Wall
  27              	@ -Wstrict-prototypes -std=gnu99 -falign-functions=16 -fno-inline
  28              	@ -fomit-frame-pointer -fverbose-asm -ffunction-sections -fdata-sections
  29              	@ options enabled:  -fauto-inc-dec -fbranch-count-reg -fcaller-saves
  30              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  31              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdebug-types-section
  32              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize -fdwarf2-cfi-asm
  33              	@ -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  34              	@ -fforward-propagate -ffunction-cse -ffunction-sections -fgcse -fgcse-lm
  35              	@ -fgnu-runtime -fguess-branch-probability -fident -fif-conversion
  36              	@ -fif-conversion2 -findirect-inlining -finline-atomics -finline-functions
  37              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  38              	@ -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
  39              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  40              	@ -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
  41              	@ -fmerge-debug-strings -fomit-frame-pointer -foptimize-register-move
  42              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  43              	@ -fprefetch-loop-arrays -freg-struct-return -fregmove -frename-registers
  44              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  45              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  46              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  47              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  48              	@ -fsched-stalled-insns-dep -fschedule-insns2 -fsection-anchors
  49              	@ -fshow-column -fshrink-wrap -fsigned-zeros -fsplit-ivs-in-unroller
  50              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  51              	@ -fstrict-volatile-bitfields -fthread-jumps -ftoplevel-reorder
  52              	@ -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp
  53              	@ -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-cselim -ftree-dce
  54              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  55              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  56              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
  57              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
ARM GAS  /tmp/ccKU0f2P.s 			page 2


  58              	@ -ftree-slp-vectorize -ftree-sra -ftree-switch-conversion
  59              	@ -ftree-tail-merge -ftree-ter -ftree-vect-loop-version -ftree-vrp
  60              	@ -funit-at-a-time -funroll-loops -fvar-tracking -fvar-tracking-assignments
  61              	@ -fverbose-asm -fweb -fzero-initialized-in-bss -mlittle-endian
  62              	@ -msched-prolog -mthumb -munaligned-access -mvectorize-with-neon-quad
  63              	
  64              		.text
  65              	.Ltext0:
  66              		.cfi_sections	.debug_frame
  67              		.section	.text.mem_cpy,"ax",%progbits
  68              		.align	1
  69              		.thumb
  70              		.thumb_func
  71              		.type	mem_cpy, %function
  72              	mem_cpy:
  73              	.LFB0:
  74              		.file 1 "ff.c"
   1:ff.c          **** /*----------------------------------------------------------------------------/
   2:ff.c          **** /  FatFs - FAT file system module  R0.09                  (C)ChaN, 2011
   3:ff.c          **** /-----------------------------------------------------------------------------/
   4:ff.c          **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:ff.c          **** / This is a free software that opened for education, research and commercial
   6:ff.c          **** / developments under license policy of following terms.
   7:ff.c          **** /
   8:ff.c          **** /  Copyright (C) 2011, ChaN, all right reserved.
   9:ff.c          **** /
  10:ff.c          **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:ff.c          **** / * No restriction on use. You can use, modify and redistribute it for
  12:ff.c          **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:ff.c          **** / * Redistributions of source code must retain the above copyright notice.
  14:ff.c          **** /
  15:ff.c          **** /-----------------------------------------------------------------------------/
  16:ff.c          **** / Feb 26,'06 R0.00  Prototype.
  17:ff.c          **** /
  18:ff.c          **** / Apr 29,'06 R0.01  First stable version.
  19:ff.c          **** /
  20:ff.c          **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:ff.c          **** /                   Removed unbuffered mode.
  22:ff.c          **** /                   Fixed a problem on small (<32M) partition.
  23:ff.c          **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:ff.c          **** /
  25:ff.c          **** / Sep 22,'06 R0.03  Added f_rename().
  26:ff.c          **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:ff.c          **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:ff.c          **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:ff.c          **** /
  30:ff.c          **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:ff.c          **** /                   Changed some interfaces for multiple drive system.
  32:ff.c          **** /                   Changed f_mountdrv() to f_mount().
  33:ff.c          **** /                   Added f_mkfs().
  34:ff.c          **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:ff.c          **** /                   Added a capability of extending file size to f_lseek().
  36:ff.c          **** /                   Added minimization level 3.
  37:ff.c          **** /                   Fixed an endian sensitive code in f_mkfs().
  38:ff.c          **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:ff.c          **** /                   Added FSInfo support.
  40:ff.c          **** /                   Fixed DBCS name can result FR_INVALID_NAME.
ARM GAS  /tmp/ccKU0f2P.s 			page 3


  41:ff.c          **** /                   Fixed short seek (<= csize) collapses the file object.
  42:ff.c          **** /
  43:ff.c          **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:ff.c          **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:ff.c          **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:ff.c          **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:ff.c          **** /                   Fixed off by one error at FAT sub-type determination.
  48:ff.c          **** /                   Fixed btr in f_read() can be mistruncated.
  49:ff.c          **** /                   Fixed cached sector is not flushed when create and close without write.
  50:ff.c          **** /
  51:ff.c          **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:ff.c          **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:ff.c          **** /
  54:ff.c          **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:ff.c          **** /                   Added long file name feature.
  56:ff.c          **** /                   Added multiple code page feature.
  57:ff.c          **** /                   Added re-entrancy for multitask operation.
  58:ff.c          **** /                   Added auto cluster size selection to f_mkfs().
  59:ff.c          **** /                   Added rewind option to f_readdir().
  60:ff.c          **** /                   Changed result code of critical errors.
  61:ff.c          **** /                   Renamed string functions to avoid name collision.
  62:ff.c          **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:ff.c          **** /                   Added multiple sector size feature.
  64:ff.c          **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:ff.c          **** /                   Fixed wrong cache control in f_lseek().
  66:ff.c          **** /                   Added relative path feature.
  67:ff.c          **** /                   Added f_chdir() and f_chdrive().
  68:ff.c          **** /                   Added proper case conversion to extended char.
  69:ff.c          **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:ff.c          **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:ff.c          **** /                   Fixed name matching error on the 13 char boundary.
  72:ff.c          **** /                   Added a configuration option, _LFN_UNICODE.
  73:ff.c          **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:ff.c          **** /
  75:ff.c          **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:ff.c          **** /                   Added file lock feature. (_FS_SHARE)
  77:ff.c          **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:ff.c          **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:ff.c          **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:ff.c          **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:ff.c          **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:ff.c          **** /                   Added sector erase feature. (_USE_ERASE)
  83:ff.c          **** /                   Moved file lock semaphore table from fs object to the bss.
  84:ff.c          **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:ff.c          **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:ff.c          **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:ff.c          **** /                   f_lseek() reports required table size on creating CLMP.
  88:ff.c          **** /                   Extended format syntax of f_printf function.
  89:ff.c          **** /                   Ignores duplicated directory separators in given path names.
  90:ff.c          **** /
  91:ff.c          **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
  92:ff.c          **** /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
  93:ff.c          **** /---------------------------------------------------------------------------*/
  94:ff.c          **** 
  95:ff.c          **** #include "ff.h"			/* FatFs configurations and declarations */
  96:ff.c          **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  97:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 4


  98:ff.c          **** 
  99:ff.c          **** /*--------------------------------------------------------------------------
 100:ff.c          **** 
 101:ff.c          ****    Module Private Definitions
 102:ff.c          **** 
 103:ff.c          **** ---------------------------------------------------------------------------*/
 104:ff.c          **** 
 105:ff.c          **** #if _FATFS != 6502	/* Revision ID */
 106:ff.c          **** #error Wrong include file (ff.h).
 107:ff.c          **** #endif
 108:ff.c          **** 
 109:ff.c          **** 
 110:ff.c          **** /* Definitions on sector size */
 111:ff.c          **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 112:ff.c          **** #error Wrong sector size.
 113:ff.c          **** #endif
 114:ff.c          **** #if _MAX_SS != 512
 115:ff.c          **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 116:ff.c          **** #else
 117:ff.c          **** #define	SS(fs)	512U			/* Fixed sector size */
 118:ff.c          **** #endif
 119:ff.c          **** 
 120:ff.c          **** 
 121:ff.c          **** /* Reentrancy related */
 122:ff.c          **** #if _FS_REENTRANT
 123:ff.c          **** #if _USE_LFN == 1
 124:ff.c          **** #error Static LFN work area must not be used in re-entrant configuration.
 125:ff.c          **** #endif
 126:ff.c          **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 127:ff.c          **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 128:ff.c          **** #else
 129:ff.c          **** #define	ENTER_FF(fs)
 130:ff.c          **** #define LEAVE_FF(fs, res)	return res
 131:ff.c          **** #endif
 132:ff.c          **** 
 133:ff.c          **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 134:ff.c          **** 
 135:ff.c          **** 
 136:ff.c          **** /* File shareing feature */
 137:ff.c          **** #if _FS_SHARE
 138:ff.c          **** #if _FS_READONLY
 139:ff.c          **** #error _FS_SHARE must be 0 on read-only cfg.
 140:ff.c          **** #endif
 141:ff.c          **** typedef struct {
 142:ff.c          **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 143:ff.c          **** 	DWORD clu;				/* File ID 2, directory */
 144:ff.c          **** 	WORD idx;				/* File ID 3, directory index */
 145:ff.c          **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 146:ff.c          **** } FILESEM;
 147:ff.c          **** #endif
 148:ff.c          **** 
 149:ff.c          **** 
 150:ff.c          **** /* Misc definitions */
 151:ff.c          **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 152:ff.c          **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 153:ff.c          **** 
 154:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 5


 155:ff.c          **** /* DBCS code ranges and SBCS extend char conversion table */
 156:ff.c          **** 
 157:ff.c          **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 158:ff.c          **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 159:ff.c          **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 160:ff.c          **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 161:ff.c          **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 162:ff.c          **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 163:ff.c          **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 164:ff.c          **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 165:ff.c          **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 166:ff.c          **** 
 167:ff.c          **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 168:ff.c          **** #define _DF1S	0x81
 169:ff.c          **** #define _DF1E	0xFE
 170:ff.c          **** #define _DS1S	0x40
 171:ff.c          **** #define _DS1E	0x7E
 172:ff.c          **** #define _DS2S	0x80
 173:ff.c          **** #define _DS2E	0xFE
 174:ff.c          **** 
 175:ff.c          **** #elif _CODE_PAGE == 949	/* Korean */
 176:ff.c          **** #define _DF1S	0x81
 177:ff.c          **** #define _DF1E	0xFE
 178:ff.c          **** #define _DS1S	0x41
 179:ff.c          **** #define _DS1E	0x5A
 180:ff.c          **** #define _DS2S	0x61
 181:ff.c          **** #define _DS2E	0x7A
 182:ff.c          **** #define _DS3S	0x81
 183:ff.c          **** #define _DS3E	0xFE
 184:ff.c          **** 
 185:ff.c          **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 186:ff.c          **** #define _DF1S	0x81
 187:ff.c          **** #define _DF1E	0xFE
 188:ff.c          **** #define _DS1S	0x40
 189:ff.c          **** #define _DS1E	0x7E
 190:ff.c          **** #define _DS2S	0xA1
 191:ff.c          **** #define _DS2E	0xFE
 192:ff.c          **** 
 193:ff.c          **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 194:ff.c          **** #define _DF1S	0
 195:ff.c          **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 196:ff.c          **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 197:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 198:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 199:ff.c          **** 
 200:ff.c          **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 201:ff.c          **** #define _DF1S	0
 202:ff.c          **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 203:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 204:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 205:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 206:ff.c          **** 
 207:ff.c          **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 208:ff.c          **** #define _DF1S	0
 209:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 210:ff.c          **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 211:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
ARM GAS  /tmp/ccKU0f2P.s 			page 6


 212:ff.c          **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 213:ff.c          **** 
 214:ff.c          **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 215:ff.c          **** #define _DF1S	0
 216:ff.c          **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 217:ff.c          **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 218:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 219:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 220:ff.c          **** 
 221:ff.c          **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 222:ff.c          **** #define _DF1S	0
 223:ff.c          **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 224:ff.c          **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 225:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 226:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 227:ff.c          **** 
 228:ff.c          **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 229:ff.c          **** #define _DF1S	0
 230:ff.c          **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 231:ff.c          **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 232:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 233:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 234:ff.c          **** 
 235:ff.c          **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 236:ff.c          **** #define _DF1S	0
 237:ff.c          **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 238:ff.c          **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 239:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 240:ff.c          **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 241:ff.c          **** 
 242:ff.c          **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 243:ff.c          **** #define _DF1S	0
 244:ff.c          **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 245:ff.c          **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 246:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 247:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 248:ff.c          **** 
 249:ff.c          **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 250:ff.c          **** #define _DF1S	0
 251:ff.c          **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 252:ff.c          **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 253:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 254:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 255:ff.c          **** 
 256:ff.c          **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 257:ff.c          **** #define _DF1S	0
 258:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 259:ff.c          **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 260:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 261:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 262:ff.c          **** 
 263:ff.c          **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 264:ff.c          **** #define _DF1S	0
 265:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 266:ff.c          **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 267:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 268:ff.c          **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
ARM GAS  /tmp/ccKU0f2P.s 			page 7


 269:ff.c          **** 
 270:ff.c          **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 271:ff.c          **** #define _DF1S	0
 272:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 273:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 274:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 275:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 276:ff.c          **** 
 277:ff.c          **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 278:ff.c          **** #define _DF1S	0
 279:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 280:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 281:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 282:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 283:ff.c          **** 
 284:ff.c          **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 285:ff.c          **** #define _DF1S	0
 286:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 287:ff.c          **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 288:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 290:ff.c          **** 
 291:ff.c          **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 292:ff.c          **** #define _DF1S	0
 293:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 294:ff.c          **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 295:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 297:ff.c          **** 
 298:ff.c          **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 299:ff.c          **** #define _DF1S	0
 300:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 301:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 302:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 303:ff.c          **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 304:ff.c          **** 
 305:ff.c          **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 306:ff.c          **** #define _DF1S	0
 307:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 308:ff.c          **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 309:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 310:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 311:ff.c          **** 
 312:ff.c          **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 313:ff.c          **** #define _DF1S	0
 314:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 315:ff.c          **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 316:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 317:ff.c          **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 318:ff.c          **** 
 319:ff.c          **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 320:ff.c          **** #define _DF1S	0
 321:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 322:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 323:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 324:ff.c          **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 325:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 8


 326:ff.c          **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 327:ff.c          **** #define _DF1S	0
 328:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 329:ff.c          **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 330:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 331:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 332:ff.c          **** 
 333:ff.c          **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 334:ff.c          **** #define _DF1S	0
 335:ff.c          **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 336:ff.c          **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 337:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 338:ff.c          **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 339:ff.c          **** 
 340:ff.c          **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 341:ff.c          **** #if _USE_LFN
 342:ff.c          **** #error Cannot use LFN feature without valid code page.
 343:ff.c          **** #endif
 344:ff.c          **** #define _DF1S	0
 345:ff.c          **** 
 346:ff.c          **** #else
 347:ff.c          **** #error Unknown code page
 348:ff.c          **** 
 349:ff.c          **** #endif
 350:ff.c          **** 
 351:ff.c          **** 
 352:ff.c          **** /* Character code support macros */
 353:ff.c          **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 354:ff.c          **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 355:ff.c          **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 356:ff.c          **** 
 357:ff.c          **** #if _DF1S		/* Code page is DBCS */
 358:ff.c          **** 
 359:ff.c          **** #ifdef _DF2S	/* Two 1st byte areas */
 360:ff.c          **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 361:ff.c          **** #else			/* One 1st byte area */
 362:ff.c          **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 363:ff.c          **** #endif
 364:ff.c          **** 
 365:ff.c          **** #ifdef _DS3S	/* Three 2nd byte areas */
 366:ff.c          **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 367:ff.c          **** #else			/* Two 2nd byte areas */
 368:ff.c          **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 369:ff.c          **** #endif
 370:ff.c          **** 
 371:ff.c          **** #else			/* Code page is SBCS */
 372:ff.c          **** 
 373:ff.c          **** #define IsDBCS1(c)	0
 374:ff.c          **** #define IsDBCS2(c)	0
 375:ff.c          **** 
 376:ff.c          **** #endif /* _DF1S */
 377:ff.c          **** 
 378:ff.c          **** 
 379:ff.c          **** /* Name status flags */
 380:ff.c          **** #define NS			11		/* Index of name status byte in fn[] */
 381:ff.c          **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 382:ff.c          **** #define NS_LFN		0x02	/* Force to create LFN entry */
ARM GAS  /tmp/ccKU0f2P.s 			page 9


 383:ff.c          **** #define NS_LAST		0x04	/* Last segment */
 384:ff.c          **** #define NS_BODY		0x08	/* Lower case flag (body) */
 385:ff.c          **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 386:ff.c          **** #define NS_DOT		0x20	/* Dot entry */
 387:ff.c          **** 
 388:ff.c          **** 
 389:ff.c          **** /* FAT sub-type boundaries */
 390:ff.c          **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 391:ff.c          **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 392:ff.c          **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 393:ff.c          **** 
 394:ff.c          **** 
 395:ff.c          **** /* FatFs refers the members in the FAT structures as byte array instead of
 396:ff.c          **** / structure member because the structure is not binary compatible between
 397:ff.c          **** / different platforms */
 398:ff.c          **** 
 399:ff.c          **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 400:ff.c          **** #define BS_OEMName			3	/* OEM name (8) */
 401:ff.c          **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 402:ff.c          **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 403:ff.c          **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 404:ff.c          **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 405:ff.c          **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 406:ff.c          **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 407:ff.c          **** #define BPB_Media			21	/* Media descriptor (1) */
 408:ff.c          **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 409:ff.c          **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 410:ff.c          **** #define BPB_NumHeads		26	/* Number of heads (2) */
 411:ff.c          **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 412:ff.c          **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 413:ff.c          **** #define BS_DrvNum			36	/* Physical drive number (2) */
 414:ff.c          **** #define BS_BootSig			38	/* Extended boot signature (1) */
 415:ff.c          **** #define BS_VolID			39	/* Volume serial number (4) */
 416:ff.c          **** #define BS_VolLab			43	/* Volume label (8) */
 417:ff.c          **** #define BS_FilSysType		54	/* File system type (1) */
 418:ff.c          **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 419:ff.c          **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 420:ff.c          **** #define BPB_FSVer			42	/* File system version (2) */
 421:ff.c          **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 422:ff.c          **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 423:ff.c          **** #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
 424:ff.c          **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 425:ff.c          **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 426:ff.c          **** #define BS_VolID32			67	/* Volume serial number (4) */
 427:ff.c          **** #define BS_VolLab32			71	/* Volume label (8) */
 428:ff.c          **** #define BS_FilSysType32		82	/* File system type (1) */
 429:ff.c          **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 430:ff.c          **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 431:ff.c          **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 432:ff.c          **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
 433:ff.c          **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 434:ff.c          **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 435:ff.c          **** #define BS_55AA				510	/* Boot sector signature (2) */
 436:ff.c          **** 
 437:ff.c          **** #define	DIR_Name			0	/* Short file name (11) */
 438:ff.c          **** #define	DIR_Attr			11	/* Attribute (1) */
 439:ff.c          **** #define	DIR_NTres			12	/* NT flag (1) */
ARM GAS  /tmp/ccKU0f2P.s 			page 10


 440:ff.c          **** #define	DIR_CrtTime			14	/* Created time (2) */
 441:ff.c          **** #define	DIR_CrtDate			16	/* Created date (2) */
 442:ff.c          **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 443:ff.c          **** #define	DIR_WrtTime			22	/* Modified time (2) */
 444:ff.c          **** #define	DIR_WrtDate			24	/* Modified date (2) */
 445:ff.c          **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 446:ff.c          **** #define	DIR_FileSize		28	/* File size (4) */
 447:ff.c          **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 448:ff.c          **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 449:ff.c          **** #define	LDIR_Type			12	/* LFN type (1) */
 450:ff.c          **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 451:ff.c          **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 452:ff.c          **** #define	SZ_DIR				32		/* Size of a directory entry */
 453:ff.c          **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 454:ff.c          **** #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
 455:ff.c          **** #define	NDDE				0x05	/* Replacement of a character collides with DDE */
 456:ff.c          **** 
 457:ff.c          **** 
 458:ff.c          **** /*------------------------------------------------------------*/
 459:ff.c          **** /* Module private work area                                   */
 460:ff.c          **** /*------------------------------------------------------------*/
 461:ff.c          **** /* Note that uninitialized variables with static duration are
 462:ff.c          **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 463:ff.c          **** /  routine is out of ANSI-C standard.
 464:ff.c          **** */
 465:ff.c          **** 
 466:ff.c          **** #if _VOLUMES
 467:ff.c          **** static
 468:ff.c          **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 469:ff.c          **** #else
 470:ff.c          **** #error Number of volumes must not be 0.
 471:ff.c          **** #endif
 472:ff.c          **** 
 473:ff.c          **** static
 474:ff.c          **** WORD Fsid;				/* File system mount ID */
 475:ff.c          **** 
 476:ff.c          **** #if _FS_RPATH
 477:ff.c          **** static
 478:ff.c          **** BYTE CurrVol;			/* Current drive */
 479:ff.c          **** #endif
 480:ff.c          **** 
 481:ff.c          **** #if _FS_SHARE
 482:ff.c          **** static
 483:ff.c          **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 484:ff.c          **** #endif
 485:ff.c          **** 
 486:ff.c          **** #if _USE_LFN == 0			/* No LFN feature */
 487:ff.c          **** #define	DEF_NAMEBUF			BYTE sfn[12]
 488:ff.c          **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 489:ff.c          **** #define	FREE_BUF()
 490:ff.c          **** 
 491:ff.c          **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 492:ff.c          **** static WCHAR LfnBuf[_MAX_LFN+1];
 493:ff.c          **** #define	DEF_NAMEBUF			BYTE sfn[12]
 494:ff.c          **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 495:ff.c          **** #define	FREE_BUF()
 496:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 11


 497:ff.c          **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 498:ff.c          **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 499:ff.c          **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 500:ff.c          **** #define	FREE_BUF()
 501:ff.c          **** 
 502:ff.c          **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 503:ff.c          **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 504:ff.c          **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 505:ff.c          **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 506:ff.c          **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 507:ff.c          **** #define	FREE_BUF()			ff_memfree(lfn)
 508:ff.c          **** 
 509:ff.c          **** #else
 510:ff.c          **** #error Wrong LFN configuration.
 511:ff.c          **** #endif
 512:ff.c          **** 
 513:ff.c          **** 
 514:ff.c          **** 
 515:ff.c          **** 
 516:ff.c          **** /*--------------------------------------------------------------------------
 517:ff.c          **** 
 518:ff.c          ****    Module Private Functions
 519:ff.c          **** 
 520:ff.c          **** ---------------------------------------------------------------------------*/
 521:ff.c          **** 
 522:ff.c          **** 
 523:ff.c          **** /*-----------------------------------------------------------------------*/
 524:ff.c          **** /* String functions                                                      */
 525:ff.c          **** /*-----------------------------------------------------------------------*/
 526:ff.c          **** 
 527:ff.c          **** /* Copy memory to memory */
 528:ff.c          **** static
 529:ff.c          **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  75              		.loc 1 529 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL0:
  80 0000 10B5     		push	{r4, lr}	@
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 4, -8
  84              		.cfi_offset 14, -4
 530:ff.c          **** 	BYTE *d = (BYTE*)dst;
 531:ff.c          **** 	const BYTE *s = (const BYTE*)src;
 532:ff.c          **** 
 533:ff.c          **** #if _WORD_ACCESS == 1
 534:ff.c          **** 	while (cnt >= sizeof(int)) {
 535:ff.c          **** 		*(int*)d = *(int*)s;
 536:ff.c          **** 		d += sizeof(int); s += sizeof(int);
 537:ff.c          **** 		cnt -= sizeof(int);
 538:ff.c          **** 	}
 539:ff.c          **** #endif
 540:ff.c          **** 	while (cnt--)
  85              		.loc 1 540 0
  86 0002 0023     		movs	r3, #0	@ ivtmp.47,
  87              	.LVL1:
ARM GAS  /tmp/ccKU0f2P.s 			page 12


  88              	.L2:
  89              		.loc 1 540 0 is_stmt 0 discriminator 1
  90 0004 9342     		cmp	r3, r2	@ ivtmp.47, cnt
  91 0006 03D0     		beq	.L5	@,
  92              	.L3:
 541:ff.c          **** 		*d++ = *s++;
  93              		.loc 1 541 0 is_stmt 1
  94 0008 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2	@ D.5648, MEM[base: src_6(D), index: ivtmp.47_17, offset: 0B]
  95 000a C454     		strb	r4, [r0, r3]	@ D.5648, MEM[base: dst_4(D), index: ivtmp.47_17, offset: 0B]
  96 000c 0133     		adds	r3, r3, #1	@ ivtmp.47, ivtmp.47,
  97 000e F9E7     		b	.L2	@
  98              	.L5:
 542:ff.c          **** }
  99              		.loc 1 542 0
 100 0010 10BD     		pop	{r4, pc}	@
 101              		.cfi_endproc
 102              	.LFE0:
 103              		.size	mem_cpy, .-mem_cpy
 104              		.section	.text.mem_set,"ax",%progbits
 105              		.align	1
 106              		.thumb
 107              		.thumb_func
 108              		.type	mem_set, %function
 109              	mem_set:
 110              	.LFB1:
 543:ff.c          **** 
 544:ff.c          **** /* Fill memory */
 545:ff.c          **** static
 546:ff.c          **** void mem_set (void* dst, int val, UINT cnt) {
 111              		.loc 1 546 0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		@ link register save eliminated.
 116              	.LVL2:
 117              		.loc 1 546 0
 118 0000 8218     		adds	r2, r0, r2	@ D.6223, dst, cnt
 119              	.LVL3:
 120              	.L7:
 547:ff.c          **** 	BYTE *d = (BYTE*)dst;
 548:ff.c          **** 
 549:ff.c          **** 	while (cnt--)
 121              		.loc 1 549 0 discriminator 1
 122 0002 9042     		cmp	r0, r2	@ d, D.6223
 123 0004 02D0     		beq	.L9	@,
 124              	.L8:
 550:ff.c          **** 		*d++ = (BYTE)val;
 125              		.loc 1 550 0
 126 0006 00F8011B 		strb	r1, [r0], #1	@ val, MEM[base: d_2, offset: 0B]
 127              	.LVL4:
 128 000a FAE7     		b	.L7	@
 129              	.L9:
 551:ff.c          **** }
 130              		.loc 1 551 0
 131 000c 7047     		bx	lr	@
 132              		.cfi_endproc
 133              	.LFE1:
ARM GAS  /tmp/ccKU0f2P.s 			page 13


 134              		.size	mem_set, .-mem_set
 135              		.section	.text.get_fileinfo,"ax",%progbits
 136              		.align	1
 137              		.thumb
 138              		.thumb_func
 139              		.type	get_fileinfo, %function
 140              	get_fileinfo:
 141              	.LFB17:
 552:ff.c          **** 
 553:ff.c          **** /* Compare memory to memory */
 554:ff.c          **** static
 555:ff.c          **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 556:ff.c          **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 557:ff.c          **** 	int r = 0;
 558:ff.c          **** 
 559:ff.c          **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 560:ff.c          **** 	return r;
 561:ff.c          **** }
 562:ff.c          **** 
 563:ff.c          **** /* Check if chr is contained in the string */
 564:ff.c          **** static
 565:ff.c          **** int chk_chr (const char* str, int chr) {
 566:ff.c          **** 	while (*str && *str != chr) str++;
 567:ff.c          **** 	return *str;
 568:ff.c          **** }
 569:ff.c          **** 
 570:ff.c          **** 
 571:ff.c          **** 
 572:ff.c          **** /*-----------------------------------------------------------------------*/
 573:ff.c          **** /* Request/Release grant to access the volume                            */
 574:ff.c          **** /*-----------------------------------------------------------------------*/
 575:ff.c          **** #if _FS_REENTRANT
 576:ff.c          **** 
 577:ff.c          **** static
 578:ff.c          **** int lock_fs (
 579:ff.c          **** 	FATFS *fs		/* File system object */
 580:ff.c          **** )
 581:ff.c          **** {
 582:ff.c          **** 	return ff_req_grant(fs->sobj);
 583:ff.c          **** }
 584:ff.c          **** 
 585:ff.c          **** 
 586:ff.c          **** static
 587:ff.c          **** void unlock_fs (
 588:ff.c          **** 	FATFS *fs,		/* File system object */
 589:ff.c          **** 	FRESULT res		/* Result code to be returned */
 590:ff.c          **** )
 591:ff.c          **** {
 592:ff.c          **** 	if (res != FR_NOT_ENABLED &&
 593:ff.c          **** 		res != FR_INVALID_DRIVE &&
 594:ff.c          **** 		res != FR_INVALID_OBJECT &&
 595:ff.c          **** 		res != FR_TIMEOUT) {
 596:ff.c          **** 		ff_rel_grant(fs->sobj);
 597:ff.c          **** 	}
 598:ff.c          **** }
 599:ff.c          **** #endif
 600:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 14


 601:ff.c          **** 
 602:ff.c          **** 
 603:ff.c          **** /*-----------------------------------------------------------------------*/
 604:ff.c          **** /* File shareing control functions                                       */
 605:ff.c          **** /*-----------------------------------------------------------------------*/
 606:ff.c          **** #if _FS_SHARE
 607:ff.c          **** 
 608:ff.c          **** static
 609:ff.c          **** FRESULT chk_lock (	/* Check if the file can be accessed */
 610:ff.c          **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 611:ff.c          **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 612:ff.c          **** )
 613:ff.c          **** {
 614:ff.c          **** 	UINT i, be;
 615:ff.c          **** 
 616:ff.c          **** 	/* Search file semaphore table */
 617:ff.c          **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 618:ff.c          **** 		if (Files[i].fs) {	/* Existing entry */
 619:ff.c          **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 620:ff.c          **** 				Files[i].clu == dj->sclust &&
 621:ff.c          **** 				Files[i].idx == dj->index) break;
 622:ff.c          **** 		} else {			/* Blank entry */
 623:ff.c          **** 			be++;
 624:ff.c          **** 		}
 625:ff.c          **** 	}
 626:ff.c          **** 	if (i == _FS_SHARE)	/* The file is not opened */
 627:ff.c          **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 628:ff.c          **** 
 629:ff.c          **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 630:ff.c          **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 631:ff.c          **** }
 632:ff.c          **** 
 633:ff.c          **** 
 634:ff.c          **** static
 635:ff.c          **** int enq_lock (void)	/* Check if an entry is available for a new file */
 636:ff.c          **** {
 637:ff.c          **** 	UINT i;
 638:ff.c          **** 
 639:ff.c          **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 640:ff.c          **** 	return (i == _FS_SHARE) ? 0 : 1;
 641:ff.c          **** }
 642:ff.c          **** 
 643:ff.c          **** 
 644:ff.c          **** static
 645:ff.c          **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 646:ff.c          **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 647:ff.c          **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 648:ff.c          **** )
 649:ff.c          **** {
 650:ff.c          **** 	UINT i;
 651:ff.c          **** 
 652:ff.c          **** 
 653:ff.c          **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 654:ff.c          **** 		if (Files[i].fs == dj->fs &&
 655:ff.c          **** 			Files[i].clu == dj->sclust &&
 656:ff.c          **** 			Files[i].idx == dj->index) break;
 657:ff.c          **** 	}
ARM GAS  /tmp/ccKU0f2P.s 			page 15


 658:ff.c          **** 
 659:ff.c          **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 660:ff.c          **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 661:ff.c          **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 662:ff.c          **** 		Files[i].fs = dj->fs;
 663:ff.c          **** 		Files[i].clu = dj->sclust;
 664:ff.c          **** 		Files[i].idx = dj->index;
 665:ff.c          **** 		Files[i].ctr = 0;
 666:ff.c          **** 	}
 667:ff.c          **** 
 668:ff.c          **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 669:ff.c          **** 
 670:ff.c          **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 671:ff.c          **** 
 672:ff.c          **** 	return i + 1;
 673:ff.c          **** }
 674:ff.c          **** 
 675:ff.c          **** 
 676:ff.c          **** static
 677:ff.c          **** FRESULT dec_lock (	/* Decrement file open counter */
 678:ff.c          **** 	UINT i			/* Semaphore index */
 679:ff.c          **** )
 680:ff.c          **** {
 681:ff.c          **** 	WORD n;
 682:ff.c          **** 	FRESULT res;
 683:ff.c          **** 
 684:ff.c          **** 
 685:ff.c          **** 	if (--i < _FS_SHARE) {
 686:ff.c          **** 		n = Files[i].ctr;
 687:ff.c          **** 		if (n == 0x100) n = 0;
 688:ff.c          **** 		if (n) n--;
 689:ff.c          **** 		Files[i].ctr = n;
 690:ff.c          **** 		if (!n) Files[i].fs = 0;
 691:ff.c          **** 		res = FR_OK;
 692:ff.c          **** 	} else {
 693:ff.c          **** 		res = FR_INT_ERR;
 694:ff.c          **** 	}
 695:ff.c          **** 	return res;
 696:ff.c          **** }
 697:ff.c          **** 
 698:ff.c          **** 
 699:ff.c          **** static
 700:ff.c          **** void clear_lock (	/* Clear lock entries of the volume */
 701:ff.c          **** 	FATFS *fs
 702:ff.c          **** )
 703:ff.c          **** {
 704:ff.c          **** 	UINT i;
 705:ff.c          **** 
 706:ff.c          **** 	for (i = 0; i < _FS_SHARE; i++) {
 707:ff.c          **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 708:ff.c          **** 	}
 709:ff.c          **** }
 710:ff.c          **** #endif
 711:ff.c          **** 
 712:ff.c          **** 
 713:ff.c          **** 
 714:ff.c          **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/ccKU0f2P.s 			page 16


 715:ff.c          **** /* Change window offset                                                  */
 716:ff.c          **** /*-----------------------------------------------------------------------*/
 717:ff.c          **** 
 718:ff.c          **** static
 719:ff.c          **** FRESULT move_window (
 720:ff.c          **** 	FATFS *fs,		/* File system object */
 721:ff.c          **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 722:ff.c          **** )					/* Move to zero only writes back dirty window */
 723:ff.c          **** {
 724:ff.c          **** 	DWORD wsect;
 725:ff.c          **** 
 726:ff.c          **** 
 727:ff.c          **** 	wsect = fs->winsect;
 728:ff.c          **** 	if (wsect != sector) {	/* Changed current window */
 729:ff.c          **** #if !_FS_READONLY
 730:ff.c          **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 731:ff.c          **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 732:ff.c          **** 				return FR_DISK_ERR;
 733:ff.c          **** 			fs->wflag = 0;
 734:ff.c          **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 735:ff.c          **** 				BYTE nf;
 736:ff.c          **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 737:ff.c          **** 					wsect += fs->fsize;
 738:ff.c          **** 					disk_write(fs->drv, fs->win, wsect, 1);
 739:ff.c          **** 				}
 740:ff.c          **** 			}
 741:ff.c          **** 		}
 742:ff.c          **** #endif
 743:ff.c          **** 		if (sector) {
 744:ff.c          **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 745:ff.c          **** 				return FR_DISK_ERR;
 746:ff.c          **** 			fs->winsect = sector;
 747:ff.c          **** 		}
 748:ff.c          **** 	}
 749:ff.c          **** 
 750:ff.c          **** 	return FR_OK;
 751:ff.c          **** }
 752:ff.c          **** 
 753:ff.c          **** 
 754:ff.c          **** 
 755:ff.c          **** 
 756:ff.c          **** /*-----------------------------------------------------------------------*/
 757:ff.c          **** /* Clean-up cached data                                                  */
 758:ff.c          **** /*-----------------------------------------------------------------------*/
 759:ff.c          **** #if !_FS_READONLY
 760:ff.c          **** static
 761:ff.c          **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 762:ff.c          **** 	FATFS *fs	/* File system object */
 763:ff.c          **** )
 764:ff.c          **** {
 765:ff.c          **** 	FRESULT res;
 766:ff.c          **** 
 767:ff.c          **** 
 768:ff.c          **** 	res = move_window(fs, 0);
 769:ff.c          **** 	if (res == FR_OK) {
 770:ff.c          **** 		/* Update FSInfo sector if needed */
 771:ff.c          **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
ARM GAS  /tmp/ccKU0f2P.s 			page 17


 772:ff.c          **** 			fs->winsect = 0;
 773:ff.c          **** 			/* Create FSInfo structure */
 774:ff.c          **** 			mem_set(fs->win, 0, 512);
 775:ff.c          **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 776:ff.c          **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 777:ff.c          **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 779:ff.c          **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 780:ff.c          **** 			/* Write it into the FSInfo sector */
 781:ff.c          **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 782:ff.c          **** 			fs->fsi_flag = 0;
 783:ff.c          **** 		}
 784:ff.c          **** 		/* Make sure that no pending write process in the physical drive */
 785:ff.c          **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 786:ff.c          **** 			res = FR_DISK_ERR;
 787:ff.c          **** 	}
 788:ff.c          **** 
 789:ff.c          **** 	return res;
 790:ff.c          **** }
 791:ff.c          **** #endif
 792:ff.c          **** 
 793:ff.c          **** 
 794:ff.c          **** 
 795:ff.c          **** 
 796:ff.c          **** /*-----------------------------------------------------------------------*/
 797:ff.c          **** /* Get sector# from cluster#                                             */
 798:ff.c          **** /*-----------------------------------------------------------------------*/
 799:ff.c          **** 
 800:ff.c          **** 
 801:ff.c          **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 802:ff.c          **** 	FATFS *fs,		/* File system object */
 803:ff.c          **** 	DWORD clst		/* Cluster# to be converted */
 804:ff.c          **** )
 805:ff.c          **** {
 806:ff.c          **** 	clst -= 2;
 807:ff.c          **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 808:ff.c          **** 	return clst * fs->csize + fs->database;
 809:ff.c          **** }
 810:ff.c          **** 
 811:ff.c          **** 
 812:ff.c          **** 
 813:ff.c          **** 
 814:ff.c          **** /*-----------------------------------------------------------------------*/
 815:ff.c          **** /* FAT access - Read value of a FAT entry                                */
 816:ff.c          **** /*-----------------------------------------------------------------------*/
 817:ff.c          **** 
 818:ff.c          **** 
 819:ff.c          **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 820:ff.c          **** 	FATFS *fs,	/* File system object */
 821:ff.c          **** 	DWORD clst	/* Cluster# to get the link information */
 822:ff.c          **** )
 823:ff.c          **** {
 824:ff.c          **** 	UINT wc, bc;
 825:ff.c          **** 	BYTE *p;
 826:ff.c          **** 
 827:ff.c          **** 
 828:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
ARM GAS  /tmp/ccKU0f2P.s 			page 18


 829:ff.c          **** 		return 1;
 830:ff.c          **** 
 831:ff.c          **** 	switch (fs->fs_type) {
 832:ff.c          **** 	case FS_FAT12 :
 833:ff.c          **** 		bc = (UINT)clst; bc += bc / 2;
 834:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 835:ff.c          **** 		wc = fs->win[bc % SS(fs)]; bc++;
 836:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 837:ff.c          **** 		wc |= fs->win[bc % SS(fs)] << 8;
 838:ff.c          **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 839:ff.c          **** 
 840:ff.c          **** 	case FS_FAT16 :
 841:ff.c          **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 842:ff.c          **** 		p = &fs->win[clst * 2 % SS(fs)];
 843:ff.c          **** 		return LD_WORD(p);
 844:ff.c          **** 
 845:ff.c          **** 	case FS_FAT32 :
 846:ff.c          **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 847:ff.c          **** 		p = &fs->win[clst * 4 % SS(fs)];
 848:ff.c          **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 849:ff.c          **** 	}
 850:ff.c          **** 
 851:ff.c          **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 852:ff.c          **** }
 853:ff.c          **** 
 854:ff.c          **** 
 855:ff.c          **** 
 856:ff.c          **** 
 857:ff.c          **** /*-----------------------------------------------------------------------*/
 858:ff.c          **** /* FAT access - Change value of a FAT entry                              */
 859:ff.c          **** /*-----------------------------------------------------------------------*/
 860:ff.c          **** #if !_FS_READONLY
 861:ff.c          **** 
 862:ff.c          **** FRESULT put_fat (
 863:ff.c          **** 	FATFS *fs,	/* File system object */
 864:ff.c          **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 865:ff.c          **** 	DWORD val	/* New value to mark the cluster */
 866:ff.c          **** )
 867:ff.c          **** {
 868:ff.c          **** 	UINT bc;
 869:ff.c          **** 	BYTE *p;
 870:ff.c          **** 	FRESULT res;
 871:ff.c          **** 
 872:ff.c          **** 
 873:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 874:ff.c          **** 		res = FR_INT_ERR;
 875:ff.c          **** 
 876:ff.c          **** 	} else {
 877:ff.c          **** 		switch (fs->fs_type) {
 878:ff.c          **** 		case FS_FAT12 :
 879:ff.c          **** 			bc = clst; bc += bc / 2;
 880:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 881:ff.c          **** 			if (res != FR_OK) break;
 882:ff.c          **** 			p = &fs->win[bc % SS(fs)];
 883:ff.c          **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 884:ff.c          **** 			bc++;
 885:ff.c          **** 			fs->wflag = 1;
ARM GAS  /tmp/ccKU0f2P.s 			page 19


 886:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 887:ff.c          **** 			if (res != FR_OK) break;
 888:ff.c          **** 			p = &fs->win[bc % SS(fs)];
 889:ff.c          **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 890:ff.c          **** 			break;
 891:ff.c          **** 
 892:ff.c          **** 		case FS_FAT16 :
 893:ff.c          **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 894:ff.c          **** 			if (res != FR_OK) break;
 895:ff.c          **** 			p = &fs->win[clst * 2 % SS(fs)];
 896:ff.c          **** 			ST_WORD(p, (WORD)val);
 897:ff.c          **** 			break;
 898:ff.c          **** 
 899:ff.c          **** 		case FS_FAT32 :
 900:ff.c          **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 901:ff.c          **** 			if (res != FR_OK) break;
 902:ff.c          **** 			p = &fs->win[clst * 4 % SS(fs)];
 903:ff.c          **** 			val |= LD_DWORD(p) & 0xF0000000;
 904:ff.c          **** 			ST_DWORD(p, val);
 905:ff.c          **** 			break;
 906:ff.c          **** 
 907:ff.c          **** 		default :
 908:ff.c          **** 			res = FR_INT_ERR;
 909:ff.c          **** 		}
 910:ff.c          **** 		fs->wflag = 1;
 911:ff.c          **** 	}
 912:ff.c          **** 
 913:ff.c          **** 	return res;
 914:ff.c          **** }
 915:ff.c          **** #endif /* !_FS_READONLY */
 916:ff.c          **** 
 917:ff.c          **** 
 918:ff.c          **** 
 919:ff.c          **** 
 920:ff.c          **** /*-----------------------------------------------------------------------*/
 921:ff.c          **** /* FAT handling - Remove a cluster chain                                 */
 922:ff.c          **** /*-----------------------------------------------------------------------*/
 923:ff.c          **** #if !_FS_READONLY
 924:ff.c          **** static
 925:ff.c          **** FRESULT remove_chain (
 926:ff.c          **** 	FATFS *fs,			/* File system object */
 927:ff.c          **** 	DWORD clst			/* Cluster# to remove a chain from */
 928:ff.c          **** )
 929:ff.c          **** {
 930:ff.c          **** 	FRESULT res;
 931:ff.c          **** 	DWORD nxt;
 932:ff.c          **** #if _USE_ERASE
 933:ff.c          **** 	DWORD scl = clst, ecl = clst, resion[2];
 934:ff.c          **** #endif
 935:ff.c          **** 
 936:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 937:ff.c          **** 		res = FR_INT_ERR;
 938:ff.c          **** 
 939:ff.c          **** 	} else {
 940:ff.c          **** 		res = FR_OK;
 941:ff.c          **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 942:ff.c          **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
ARM GAS  /tmp/ccKU0f2P.s 			page 20


 943:ff.c          **** 			if (nxt == 0) break;				/* Empty cluster? */
 944:ff.c          **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 945:ff.c          **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 946:ff.c          **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 947:ff.c          **** 			if (res != FR_OK) break;
 948:ff.c          **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 949:ff.c          **** 				fs->free_clust++;
 950:ff.c          **** 				fs->fsi_flag = 1;
 951:ff.c          **** 			}
 952:ff.c          **** #if _USE_ERASE
 953:ff.c          **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 954:ff.c          **** 				ecl = nxt;
 955:ff.c          **** 			} else {				/* End of contiguous clusters */ 
 956:ff.c          **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 957:ff.c          **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 958:ff.c          **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 959:ff.c          **** 				scl = ecl = nxt;
 960:ff.c          **** 			}
 961:ff.c          **** #endif
 962:ff.c          **** 			clst = nxt;	/* Next cluster */
 963:ff.c          **** 		}
 964:ff.c          **** 	}
 965:ff.c          **** 
 966:ff.c          **** 	return res;
 967:ff.c          **** }
 968:ff.c          **** #endif
 969:ff.c          **** 
 970:ff.c          **** 
 971:ff.c          **** 
 972:ff.c          **** 
 973:ff.c          **** /*-----------------------------------------------------------------------*/
 974:ff.c          **** /* FAT handling - Stretch or Create a cluster chain                      */
 975:ff.c          **** /*-----------------------------------------------------------------------*/
 976:ff.c          **** #if !_FS_READONLY
 977:ff.c          **** static
 978:ff.c          **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 979:ff.c          **** 	FATFS *fs,			/* File system object */
 980:ff.c          **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 981:ff.c          **** )
 982:ff.c          **** {
 983:ff.c          **** 	DWORD cs, ncl, scl;
 984:ff.c          **** 	FRESULT res;
 985:ff.c          **** 
 986:ff.c          **** 
 987:ff.c          **** 	if (clst == 0) {		/* Create a new chain */
 988:ff.c          **** 		scl = fs->last_clust;			/* Get suggested start point */
 989:ff.c          **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 990:ff.c          **** 	}
 991:ff.c          **** 	else {					/* Stretch the current chain */
 992:ff.c          **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 993:ff.c          **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 994:ff.c          **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 995:ff.c          **** 		scl = clst;
 996:ff.c          **** 	}
 997:ff.c          **** 
 998:ff.c          **** 	ncl = scl;				/* Start cluster */
 999:ff.c          **** 	for (;;) {
ARM GAS  /tmp/ccKU0f2P.s 			page 21


1000:ff.c          **** 		ncl++;							/* Next cluster */
1001:ff.c          **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
1002:ff.c          **** 			ncl = 2;
1003:ff.c          **** 			if (ncl > scl) return 0;	/* No free cluster */
1004:ff.c          **** 		}
1005:ff.c          **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1006:ff.c          **** 		if (cs == 0) break;				/* Found a free cluster */
1007:ff.c          **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1008:ff.c          **** 			return cs;
1009:ff.c          **** 		if (ncl == scl) return 0;		/* No free cluster */
1010:ff.c          **** 	}
1011:ff.c          **** 
1012:ff.c          **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1013:ff.c          **** 	if (res == FR_OK && clst != 0) {
1014:ff.c          **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1015:ff.c          **** 	}
1016:ff.c          **** 	if (res == FR_OK) {
1017:ff.c          **** 		fs->last_clust = ncl;			/* Update FSINFO */
1018:ff.c          **** 		if (fs->free_clust != 0xFFFFFFFF) {
1019:ff.c          **** 			fs->free_clust--;
1020:ff.c          **** 			fs->fsi_flag = 1;
1021:ff.c          **** 		}
1022:ff.c          **** 	} else {
1023:ff.c          **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1024:ff.c          **** 	}
1025:ff.c          **** 
1026:ff.c          **** 	return ncl;		/* Return new cluster number or error code */
1027:ff.c          **** }
1028:ff.c          **** #endif /* !_FS_READONLY */
1029:ff.c          **** 
1030:ff.c          **** 
1031:ff.c          **** 
1032:ff.c          **** /*-----------------------------------------------------------------------*/
1033:ff.c          **** /* FAT handling - Convert offset into cluster with link map table        */
1034:ff.c          **** /*-----------------------------------------------------------------------*/
1035:ff.c          **** 
1036:ff.c          **** #if _USE_FASTSEEK
1037:ff.c          **** static
1038:ff.c          **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1039:ff.c          **** 	FIL* fp,		/* Pointer to the file object */
1040:ff.c          **** 	DWORD ofs		/* File offset to be converted to cluster# */
1041:ff.c          **** )
1042:ff.c          **** {
1043:ff.c          **** 	DWORD cl, ncl, *tbl;
1044:ff.c          **** 
1045:ff.c          **** 
1046:ff.c          **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1047:ff.c          **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1048:ff.c          **** 	for (;;) {
1049:ff.c          **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1050:ff.c          **** 		if (!ncl) return 0;		/* End of table? (error) */
1051:ff.c          **** 		if (cl < ncl) break;	/* In this fragment? */
1052:ff.c          **** 		cl -= ncl; tbl++;		/* Next fragment */
1053:ff.c          **** 	}
1054:ff.c          **** 	return cl + *tbl;	/* Return the cluster number */
1055:ff.c          **** }
1056:ff.c          **** #endif	/* _USE_FASTSEEK */
ARM GAS  /tmp/ccKU0f2P.s 			page 22


1057:ff.c          **** 
1058:ff.c          **** 
1059:ff.c          **** 
1060:ff.c          **** /*-----------------------------------------------------------------------*/
1061:ff.c          **** /* Directory handling - Set directory index                              */
1062:ff.c          **** /*-----------------------------------------------------------------------*/
1063:ff.c          **** 
1064:ff.c          **** static
1065:ff.c          **** FRESULT dir_sdi (
1066:ff.c          **** 	DIR *dj,		/* Pointer to directory object */
1067:ff.c          **** 	WORD idx		/* Directory index number */
1068:ff.c          **** )
1069:ff.c          **** {
1070:ff.c          **** 	DWORD clst;
1071:ff.c          **** 	WORD ic;
1072:ff.c          **** 
1073:ff.c          **** 
1074:ff.c          **** 	dj->index = idx;
1075:ff.c          **** 	clst = dj->sclust;
1076:ff.c          **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1077:ff.c          **** 		return FR_INT_ERR;
1078:ff.c          **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1079:ff.c          **** 		clst = dj->fs->dirbase;
1080:ff.c          **** 
1081:ff.c          **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1082:ff.c          **** 		dj->clust = clst;
1083:ff.c          **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1084:ff.c          **** 			return FR_INT_ERR;
1085:ff.c          **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1086:ff.c          **** 	}
1087:ff.c          **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1088:ff.c          **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1089:ff.c          **** 		while (idx >= ic) {	/* Follow cluster chain */
1090:ff.c          **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1091:ff.c          **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1092:ff.c          **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1093:ff.c          **** 				return FR_INT_ERR;
1094:ff.c          **** 			idx -= ic;
1095:ff.c          **** 		}
1096:ff.c          **** 		dj->clust = clst;
1097:ff.c          **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1098:ff.c          **** 	}
1099:ff.c          **** 
1100:ff.c          **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1101:ff.c          **** 
1102:ff.c          **** 	return FR_OK;	/* Seek succeeded */
1103:ff.c          **** }
1104:ff.c          **** 
1105:ff.c          **** 
1106:ff.c          **** 
1107:ff.c          **** 
1108:ff.c          **** /*-----------------------------------------------------------------------*/
1109:ff.c          **** /* Directory handling - Move directory index next                        */
1110:ff.c          **** /*-----------------------------------------------------------------------*/
1111:ff.c          **** 
1112:ff.c          **** static
1113:ff.c          **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
ARM GAS  /tmp/ccKU0f2P.s 			page 23


1114:ff.c          **** 	DIR *dj,		/* Pointer to directory object */
1115:ff.c          **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1116:ff.c          **** )
1117:ff.c          **** {
1118:ff.c          **** 	DWORD clst;
1119:ff.c          **** 	WORD i;
1120:ff.c          **** 
1121:ff.c          **** 
1122:ff.c          **** 	stretch = stretch;		/* To suppress warning on read-only cfg. */
1123:ff.c          **** 	i = dj->index + 1;
1124:ff.c          **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1125:ff.c          **** 		return FR_NO_FILE;
1126:ff.c          **** 
1127:ff.c          **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1128:ff.c          **** 		dj->sect++;					/* Next sector */
1129:ff.c          **** 
1130:ff.c          **** 		if (dj->clust == 0) {	/* Static table */
1131:ff.c          **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1132:ff.c          **** 				return FR_NO_FILE;
1133:ff.c          **** 		}
1134:ff.c          **** 		else {					/* Dynamic table */
1135:ff.c          **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1136:ff.c          **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1137:ff.c          **** 				if (clst <= 1) return FR_INT_ERR;
1138:ff.c          **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1139:ff.c          **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1140:ff.c          **** #if !_FS_READONLY
1141:ff.c          **** 					BYTE c;
1142:ff.c          **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1143:ff.c          **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1144:ff.c          **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1145:ff.c          **** 					if (clst == 1) return FR_INT_ERR;
1146:ff.c          **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1147:ff.c          **** 					/* Clean-up stretched table */
1148:ff.c          **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1149:ff.c          **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1150:ff.c          **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1151:ff.c          **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1152:ff.c          **** 						dj->fs->wflag = 1;
1153:ff.c          **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1154:ff.c          **** 						dj->fs->winsect++;
1155:ff.c          **** 					}
1156:ff.c          **** 					dj->fs->winsect -= c;						/* Rewind window address */
1157:ff.c          **** #else
1158:ff.c          **** 					return FR_NO_FILE;			/* Report EOT */
1159:ff.c          **** #endif
1160:ff.c          **** 				}
1161:ff.c          **** 				dj->clust = clst;				/* Initialize data for new cluster */
1162:ff.c          **** 				dj->sect = clust2sect(dj->fs, clst);
1163:ff.c          **** 			}
1164:ff.c          **** 		}
1165:ff.c          **** 	}
1166:ff.c          **** 
1167:ff.c          **** 	dj->index = i;
1168:ff.c          **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1169:ff.c          **** 
1170:ff.c          **** 	return FR_OK;
ARM GAS  /tmp/ccKU0f2P.s 			page 24


1171:ff.c          **** }
1172:ff.c          **** 
1173:ff.c          **** 
1174:ff.c          **** 
1175:ff.c          **** 
1176:ff.c          **** /*-----------------------------------------------------------------------*/
1177:ff.c          **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1178:ff.c          **** /*-----------------------------------------------------------------------*/
1179:ff.c          **** #if _USE_LFN
1180:ff.c          **** static
1181:ff.c          **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1182:ff.c          **** 
1183:ff.c          **** 
1184:ff.c          **** static
1185:ff.c          **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1186:ff.c          **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1187:ff.c          **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1188:ff.c          **** )
1189:ff.c          **** {
1190:ff.c          **** 	UINT i, s;
1191:ff.c          **** 	WCHAR wc, uc;
1192:ff.c          **** 
1193:ff.c          **** 
1194:ff.c          **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1195:ff.c          **** 	s = 0; wc = 1;
1196:ff.c          **** 	do {
1197:ff.c          **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1198:ff.c          **** 		if (wc) {	/* Last char has not been processed */
1199:ff.c          **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1200:ff.c          **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1201:ff.c          **** 				return 0;				/* Not matched */
1202:ff.c          **** 		} else {
1203:ff.c          **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1204:ff.c          **** 		}
1205:ff.c          **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1206:ff.c          **** 
1207:ff.c          **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1208:ff.c          **** 		return 0;
1209:ff.c          **** 
1210:ff.c          **** 	return 1;						/* The part of LFN matched */
1211:ff.c          **** }
1212:ff.c          **** 
1213:ff.c          **** 
1214:ff.c          **** 
1215:ff.c          **** static
1216:ff.c          **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1217:ff.c          **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1218:ff.c          **** 	BYTE *dir			/* Pointer to the directory entry */
1219:ff.c          **** )
1220:ff.c          **** {
1221:ff.c          **** 	UINT i, s;
1222:ff.c          **** 	WCHAR wc, uc;
1223:ff.c          **** 
1224:ff.c          **** 
1225:ff.c          **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1226:ff.c          **** 
1227:ff.c          **** 	s = 0; wc = 1;
ARM GAS  /tmp/ccKU0f2P.s 			page 25


1228:ff.c          **** 	do {
1229:ff.c          **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1230:ff.c          **** 		if (wc) {	/* Last char has not been processed */
1231:ff.c          **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1232:ff.c          **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1233:ff.c          **** 		} else {
1234:ff.c          **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1235:ff.c          **** 		}
1236:ff.c          **** 	} while (++s < 13);						/* Read all character in the entry */
1237:ff.c          **** 
1238:ff.c          **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1239:ff.c          **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1240:ff.c          **** 		lfnbuf[i] = 0;
1241:ff.c          **** 	}
1242:ff.c          **** 
1243:ff.c          **** 	return 1;
1244:ff.c          **** }
1245:ff.c          **** 
1246:ff.c          **** 
1247:ff.c          **** #if !_FS_READONLY
1248:ff.c          **** static
1249:ff.c          **** void fit_lfn (
1250:ff.c          **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1251:ff.c          **** 	BYTE *dir,				/* Pointer to the directory entry */
1252:ff.c          **** 	BYTE ord,				/* LFN order (1-20) */
1253:ff.c          **** 	BYTE sum				/* SFN sum */
1254:ff.c          **** )
1255:ff.c          **** {
1256:ff.c          **** 	UINT i, s;
1257:ff.c          **** 	WCHAR wc;
1258:ff.c          **** 
1259:ff.c          **** 
1260:ff.c          **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1261:ff.c          **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1262:ff.c          **** 	dir[LDIR_Type] = 0;
1263:ff.c          **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1264:ff.c          **** 
1265:ff.c          **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1266:ff.c          **** 	s = wc = 0;
1267:ff.c          **** 	do {
1268:ff.c          **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1269:ff.c          **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1270:ff.c          **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1271:ff.c          **** 	} while (++s < 13);
1272:ff.c          **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1273:ff.c          **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1274:ff.c          **** }
1275:ff.c          **** 
1276:ff.c          **** #endif
1277:ff.c          **** #endif
1278:ff.c          **** 
1279:ff.c          **** 
1280:ff.c          **** 
1281:ff.c          **** /*-----------------------------------------------------------------------*/
1282:ff.c          **** /* Create numbered name                                                  */
1283:ff.c          **** /*-----------------------------------------------------------------------*/
1284:ff.c          **** #if _USE_LFN
ARM GAS  /tmp/ccKU0f2P.s 			page 26


1285:ff.c          **** void gen_numname (
1286:ff.c          **** 	BYTE *dst,			/* Pointer to generated SFN */
1287:ff.c          **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1288:ff.c          **** 	const WCHAR *lfn,	/* Pointer to LFN */
1289:ff.c          **** 	WORD seq			/* Sequence number */
1290:ff.c          **** )
1291:ff.c          **** {
1292:ff.c          **** 	BYTE ns[8], c;
1293:ff.c          **** 	UINT i, j;
1294:ff.c          **** 
1295:ff.c          **** 
1296:ff.c          **** 	mem_cpy(dst, src, 11);
1297:ff.c          **** 
1298:ff.c          **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1299:ff.c          **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1300:ff.c          **** 	}
1301:ff.c          **** 
1302:ff.c          **** 	/* itoa (hexdecimal) */
1303:ff.c          **** 	i = 7;
1304:ff.c          **** 	do {
1305:ff.c          **** 		c = (seq % 16) + '0';
1306:ff.c          **** 		if (c > '9') c += 7;
1307:ff.c          **** 		ns[i--] = c;
1308:ff.c          **** 		seq /= 16;
1309:ff.c          **** 	} while (seq);
1310:ff.c          **** 	ns[i] = '~';
1311:ff.c          **** 
1312:ff.c          **** 	/* Append the number */
1313:ff.c          **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1314:ff.c          **** 		if (IsDBCS1(dst[j])) {
1315:ff.c          **** 			if (j == i - 1) break;
1316:ff.c          **** 			j++;
1317:ff.c          **** 		}
1318:ff.c          **** 	}
1319:ff.c          **** 	do {
1320:ff.c          **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1321:ff.c          **** 	} while (j < 8);
1322:ff.c          **** }
1323:ff.c          **** #endif
1324:ff.c          **** 
1325:ff.c          **** 
1326:ff.c          **** 
1327:ff.c          **** 
1328:ff.c          **** /*-----------------------------------------------------------------------*/
1329:ff.c          **** /* Calculate sum of an SFN                                               */
1330:ff.c          **** /*-----------------------------------------------------------------------*/
1331:ff.c          **** #if _USE_LFN
1332:ff.c          **** static
1333:ff.c          **** BYTE sum_sfn (
1334:ff.c          **** 	const BYTE *dir		/* Ptr to directory entry */
1335:ff.c          **** )
1336:ff.c          **** {
1337:ff.c          **** 	BYTE sum = 0;
1338:ff.c          **** 	UINT n = 11;
1339:ff.c          **** 
1340:ff.c          **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1341:ff.c          **** 	return sum;
ARM GAS  /tmp/ccKU0f2P.s 			page 27


1342:ff.c          **** }
1343:ff.c          **** #endif
1344:ff.c          **** 
1345:ff.c          **** 
1346:ff.c          **** 
1347:ff.c          **** 
1348:ff.c          **** /*-----------------------------------------------------------------------*/
1349:ff.c          **** /* Directory handling - Find an object in the directory                  */
1350:ff.c          **** /*-----------------------------------------------------------------------*/
1351:ff.c          **** 
1352:ff.c          **** static
1353:ff.c          **** FRESULT dir_find (
1354:ff.c          **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1355:ff.c          **** )
1356:ff.c          **** {
1357:ff.c          **** 	FRESULT res;
1358:ff.c          **** 	BYTE c, *dir;
1359:ff.c          **** #if _USE_LFN
1360:ff.c          **** 	BYTE a, ord, sum;
1361:ff.c          **** #endif
1362:ff.c          **** 
1363:ff.c          **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1364:ff.c          **** 	if (res != FR_OK) return res;
1365:ff.c          **** 
1366:ff.c          **** #if _USE_LFN
1367:ff.c          **** 	ord = sum = 0xFF;
1368:ff.c          **** #endif
1369:ff.c          **** 	do {
1370:ff.c          **** 		res = move_window(dj->fs, dj->sect);
1371:ff.c          **** 		if (res != FR_OK) break;
1372:ff.c          **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1373:ff.c          **** 		c = dir[DIR_Name];
1374:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1375:ff.c          **** #if _USE_LFN	/* LFN configuration */
1376:ff.c          **** 		a = dir[DIR_Attr] & AM_MASK;
1377:ff.c          **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1378:ff.c          **** 			ord = 0xFF;
1379:ff.c          **** 		} else {
1380:ff.c          **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1381:ff.c          **** 				if (dj->lfn) {
1382:ff.c          **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1383:ff.c          **** 						sum = dir[LDIR_Chksum];
1384:ff.c          **** 						c &= ~LLE; ord = c;	/* LFN start order */
1385:ff.c          **** 						dj->lfn_idx = dj->index;
1386:ff.c          **** 					}
1387:ff.c          **** 					/* Check validity of the LFN entry and compare it with given name */
1388:ff.c          **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1389:ff.c          **** 				}
1390:ff.c          **** 			} else {					/* An SFN entry is found */
1391:ff.c          **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1392:ff.c          **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1393:ff.c          **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1394:ff.c          **** 			}
1395:ff.c          **** 		}
1396:ff.c          **** #else		/* Non LFN configuration */
1397:ff.c          **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1398:ff.c          **** 			break;
ARM GAS  /tmp/ccKU0f2P.s 			page 28


1399:ff.c          **** #endif
1400:ff.c          **** 		res = dir_next(dj, 0);		/* Next entry */
1401:ff.c          **** 	} while (res == FR_OK);
1402:ff.c          **** 
1403:ff.c          **** 	return res;
1404:ff.c          **** }
1405:ff.c          **** 
1406:ff.c          **** 
1407:ff.c          **** 
1408:ff.c          **** 
1409:ff.c          **** /*-----------------------------------------------------------------------*/
1410:ff.c          **** /* Read an object from the directory                                     */
1411:ff.c          **** /*-----------------------------------------------------------------------*/
1412:ff.c          **** #if _FS_MINIMIZE <= 1
1413:ff.c          **** static
1414:ff.c          **** FRESULT dir_read (
1415:ff.c          **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1416:ff.c          **** )
1417:ff.c          **** {
1418:ff.c          **** 	FRESULT res;
1419:ff.c          **** 	BYTE c, *dir;
1420:ff.c          **** #if _USE_LFN
1421:ff.c          **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1422:ff.c          **** #endif
1423:ff.c          **** 
1424:ff.c          **** 	res = FR_NO_FILE;
1425:ff.c          **** 	while (dj->sect) {
1426:ff.c          **** 		res = move_window(dj->fs, dj->sect);
1427:ff.c          **** 		if (res != FR_OK) break;
1428:ff.c          **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1429:ff.c          **** 		c = dir[DIR_Name];
1430:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1431:ff.c          **** #if _USE_LFN	/* LFN configuration */
1432:ff.c          **** 		a = dir[DIR_Attr] & AM_MASK;
1433:ff.c          **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1434:ff.c          **** 			ord = 0xFF;
1435:ff.c          **** 		} else {
1436:ff.c          **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1437:ff.c          **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1438:ff.c          **** 					sum = dir[LDIR_Chksum];
1439:ff.c          **** 					c &= ~LLE; ord = c;
1440:ff.c          **** 					dj->lfn_idx = dj->index;
1441:ff.c          **** 				}
1442:ff.c          **** 				/* Check LFN validity and capture it */
1443:ff.c          **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1444:ff.c          **** 			} else {					/* An SFN entry is found */
1445:ff.c          **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1446:ff.c          **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1447:ff.c          **** 				break;
1448:ff.c          **** 			}
1449:ff.c          **** 		}
1450:ff.c          **** #else		/* Non LFN configuration */
1451:ff.c          **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1452:ff.c          **** 			break;
1453:ff.c          **** #endif
1454:ff.c          **** 		res = dir_next(dj, 0);				/* Next entry */
1455:ff.c          **** 		if (res != FR_OK) break;
ARM GAS  /tmp/ccKU0f2P.s 			page 29


1456:ff.c          **** 	}
1457:ff.c          **** 
1458:ff.c          **** 	if (res != FR_OK) dj->sect = 0;
1459:ff.c          **** 
1460:ff.c          **** 	return res;
1461:ff.c          **** }
1462:ff.c          **** #endif
1463:ff.c          **** 
1464:ff.c          **** 
1465:ff.c          **** 
1466:ff.c          **** /*-----------------------------------------------------------------------*/
1467:ff.c          **** /* Register an object to the directory                                   */
1468:ff.c          **** /*-----------------------------------------------------------------------*/
1469:ff.c          **** #if !_FS_READONLY
1470:ff.c          **** static
1471:ff.c          **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1472:ff.c          **** 	DIR *dj				/* Target directory with object name to be created */
1473:ff.c          **** )
1474:ff.c          **** {
1475:ff.c          **** 	FRESULT res;
1476:ff.c          **** 	BYTE c, *dir;
1477:ff.c          **** #if _USE_LFN	/* LFN configuration */
1478:ff.c          **** 	WORD n, ne, is;
1479:ff.c          **** 	BYTE sn[12], *fn, sum;
1480:ff.c          **** 	WCHAR *lfn;
1481:ff.c          **** 
1482:ff.c          **** 
1483:ff.c          **** 	fn = dj->fn; lfn = dj->lfn;
1484:ff.c          **** 	mem_cpy(sn, fn, 12);
1485:ff.c          **** 
1486:ff.c          **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1487:ff.c          **** 		return FR_INVALID_NAME;
1488:ff.c          **** 
1489:ff.c          **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1490:ff.c          **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1491:ff.c          **** 		for (n = 1; n < 100; n++) {
1492:ff.c          **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1493:ff.c          **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1494:ff.c          **** 			if (res != FR_OK) break;
1495:ff.c          **** 		}
1496:ff.c          **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1497:ff.c          **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1498:ff.c          **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1499:ff.c          **** 	}
1500:ff.c          **** 
1501:ff.c          **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1502:ff.c          **** 		for (ne = 0; lfn[ne]; ne++) ;
1503:ff.c          **** 		ne = (ne + 25) / 13;
1504:ff.c          **** 	} else {						/* Otherwise reserve only an SFN entry. */
1505:ff.c          **** 		ne = 1;
1506:ff.c          **** 	}
1507:ff.c          **** 
1508:ff.c          **** 	/* Reserve contiguous entries */
1509:ff.c          **** 	res = dir_sdi(dj, 0);
1510:ff.c          **** 	if (res != FR_OK) return res;
1511:ff.c          **** 	n = is = 0;
1512:ff.c          **** 	do {
ARM GAS  /tmp/ccKU0f2P.s 			page 30


1513:ff.c          **** 		res = move_window(dj->fs, dj->sect);
1514:ff.c          **** 		if (res != FR_OK) break;
1515:ff.c          **** 		c = *dj->dir;				/* Check the entry status */
1516:ff.c          **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1517:ff.c          **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1518:ff.c          **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1519:ff.c          **** 		} else {
1520:ff.c          **** 			n = 0;					/* Not a blank entry. Restart to search */
1521:ff.c          **** 		}
1522:ff.c          **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1523:ff.c          **** 	} while (res == FR_OK);
1524:ff.c          **** 
1525:ff.c          **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1526:ff.c          **** 		res = dir_sdi(dj, is);
1527:ff.c          **** 		if (res == FR_OK) {
1528:ff.c          **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1529:ff.c          **** 			ne--;
1530:ff.c          **** 			do {					/* Store LFN entries in bottom first */
1531:ff.c          **** 				res = move_window(dj->fs, dj->sect);
1532:ff.c          **** 				if (res != FR_OK) break;
1533:ff.c          **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1534:ff.c          **** 				dj->fs->wflag = 1;
1535:ff.c          **** 				res = dir_next(dj, 0);	/* Next entry */
1536:ff.c          **** 			} while (res == FR_OK && --ne);
1537:ff.c          **** 		}
1538:ff.c          **** 	}
1539:ff.c          **** 
1540:ff.c          **** #else	/* Non LFN configuration */
1541:ff.c          **** 	res = dir_sdi(dj, 0);
1542:ff.c          **** 	if (res == FR_OK) {
1543:ff.c          **** 		do {	/* Find a blank entry for the SFN */
1544:ff.c          **** 			res = move_window(dj->fs, dj->sect);
1545:ff.c          **** 			if (res != FR_OK) break;
1546:ff.c          **** 			c = *dj->dir;
1547:ff.c          **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1548:ff.c          **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1549:ff.c          **** 		} while (res == FR_OK);
1550:ff.c          **** 	}
1551:ff.c          **** #endif
1552:ff.c          **** 
1553:ff.c          **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1554:ff.c          **** 		res = move_window(dj->fs, dj->sect);
1555:ff.c          **** 		if (res == FR_OK) {
1556:ff.c          **** 			dir = dj->dir;
1557:ff.c          **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1558:ff.c          **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1559:ff.c          **** #if _USE_LFN
1560:ff.c          **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1561:ff.c          **** #endif
1562:ff.c          **** 			dj->fs->wflag = 1;
1563:ff.c          **** 		}
1564:ff.c          **** 	}
1565:ff.c          **** 
1566:ff.c          **** 	return res;
1567:ff.c          **** }
1568:ff.c          **** #endif /* !_FS_READONLY */
1569:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 31


1570:ff.c          **** 
1571:ff.c          **** 
1572:ff.c          **** 
1573:ff.c          **** /*-----------------------------------------------------------------------*/
1574:ff.c          **** /* Remove an object from the directory                                   */
1575:ff.c          **** /*-----------------------------------------------------------------------*/
1576:ff.c          **** #if !_FS_READONLY && !_FS_MINIMIZE
1577:ff.c          **** static
1578:ff.c          **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1579:ff.c          **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1580:ff.c          **** )
1581:ff.c          **** {
1582:ff.c          **** 	FRESULT res;
1583:ff.c          **** #if _USE_LFN	/* LFN configuration */
1584:ff.c          **** 	WORD i;
1585:ff.c          **** 
1586:ff.c          **** 	i = dj->index;	/* SFN index */
1587:ff.c          **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1588:ff.c          **** 	if (res == FR_OK) {
1589:ff.c          **** 		do {
1590:ff.c          **** 			res = move_window(dj->fs, dj->sect);
1591:ff.c          **** 			if (res != FR_OK) break;
1592:ff.c          **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1593:ff.c          **** 			dj->fs->wflag = 1;
1594:ff.c          **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1595:ff.c          **** 			res = dir_next(dj, 0);		/* Next entry */
1596:ff.c          **** 		} while (res == FR_OK);
1597:ff.c          **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1598:ff.c          **** 	}
1599:ff.c          **** 
1600:ff.c          **** #else			/* Non LFN configuration */
1601:ff.c          **** 	res = dir_sdi(dj, dj->index);
1602:ff.c          **** 	if (res == FR_OK) {
1603:ff.c          **** 		res = move_window(dj->fs, dj->sect);
1604:ff.c          **** 		if (res == FR_OK) {
1605:ff.c          **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1606:ff.c          **** 			dj->fs->wflag = 1;
1607:ff.c          **** 		}
1608:ff.c          **** 	}
1609:ff.c          **** #endif
1610:ff.c          **** 
1611:ff.c          **** 	return res;
1612:ff.c          **** }
1613:ff.c          **** #endif /* !_FS_READONLY */
1614:ff.c          **** 
1615:ff.c          **** 
1616:ff.c          **** 
1617:ff.c          **** 
1618:ff.c          **** /*-----------------------------------------------------------------------*/
1619:ff.c          **** /* Pick a segment and create the object name in directory form           */
1620:ff.c          **** /*-----------------------------------------------------------------------*/
1621:ff.c          **** 
1622:ff.c          **** static
1623:ff.c          **** FRESULT create_name (
1624:ff.c          **** 	DIR *dj,			/* Pointer to the directory object */
1625:ff.c          **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1626:ff.c          **** )
ARM GAS  /tmp/ccKU0f2P.s 			page 32


1627:ff.c          **** {
1628:ff.c          **** #ifdef _EXCVT
1629:ff.c          **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1630:ff.c          **** #endif
1631:ff.c          **** 
1632:ff.c          **** #if _USE_LFN	/* LFN configuration */
1633:ff.c          **** 	BYTE b, cf;
1634:ff.c          **** 	WCHAR w, *lfn;
1635:ff.c          **** 	UINT i, ni, si, di;
1636:ff.c          **** 	const TCHAR *p;
1637:ff.c          **** 
1638:ff.c          **** 	/* Create LFN in Unicode */
1639:ff.c          **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1640:ff.c          **** 	lfn = dj->lfn;
1641:ff.c          **** 	si = di = 0;
1642:ff.c          **** 	for (;;) {
1643:ff.c          **** 		w = p[si++];					/* Get a character */
1644:ff.c          **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1645:ff.c          **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1646:ff.c          **** 			return FR_INVALID_NAME;
1647:ff.c          **** #if !_LFN_UNICODE
1648:ff.c          **** 		w &= 0xFF;
1649:ff.c          **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1650:ff.c          **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1651:ff.c          **** 			if (!IsDBCS2(b))
1652:ff.c          **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1653:ff.c          **** 			w = (w << 8) + b;			/* Create a DBC */
1654:ff.c          **** 		}
1655:ff.c          **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1656:ff.c          **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1657:ff.c          **** #endif
1658:ff.c          **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1659:ff.c          **** 			return FR_INVALID_NAME;
1660:ff.c          **** 		lfn[di++] = w;					/* Store the Unicode char */
1661:ff.c          **** 	}
1662:ff.c          **** 	*path = &p[si];						/* Return pointer to the next segment */
1663:ff.c          **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1664:ff.c          **** #if _FS_RPATH
1665:ff.c          **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1666:ff.c          **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1667:ff.c          **** 		lfn[di] = 0;
1668:ff.c          **** 		for (i = 0; i < 11; i++)
1669:ff.c          **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1670:ff.c          **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1671:ff.c          **** 		return FR_OK;
1672:ff.c          **** 	}
1673:ff.c          **** #endif
1674:ff.c          **** 	while (di) {						/* Strip trailing spaces and dots */
1675:ff.c          **** 		w = lfn[di-1];
1676:ff.c          **** 		if (w != ' ' && w != '.') break;
1677:ff.c          **** 		di--;
1678:ff.c          **** 	}
1679:ff.c          **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1680:ff.c          **** 
1681:ff.c          **** 	lfn[di] = 0;						/* LFN is created */
1682:ff.c          **** 
1683:ff.c          **** 	/* Create SFN in directory form */
ARM GAS  /tmp/ccKU0f2P.s 			page 33


1684:ff.c          **** 	mem_set(dj->fn, ' ', 11);
1685:ff.c          **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1686:ff.c          **** 	if (si) cf |= NS_LOSS | NS_LFN;
1687:ff.c          **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1688:ff.c          **** 
1689:ff.c          **** 	b = i = 0; ni = 8;
1690:ff.c          **** 	for (;;) {
1691:ff.c          **** 		w = lfn[si++];					/* Get an LFN char */
1692:ff.c          **** 		if (!w) break;					/* Break on end of the LFN */
1693:ff.c          **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1694:ff.c          **** 			cf |= NS_LOSS | NS_LFN; continue;
1695:ff.c          **** 		}
1696:ff.c          **** 
1697:ff.c          **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1698:ff.c          **** 			if (ni == 11) {				/* Long extension */
1699:ff.c          **** 				cf |= NS_LOSS | NS_LFN; break;
1700:ff.c          **** 			}
1701:ff.c          **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1702:ff.c          **** 			if (si > di) break;			/* No extension */
1703:ff.c          **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1704:ff.c          **** 			b <<= 2; continue;
1705:ff.c          **** 		}
1706:ff.c          **** 
1707:ff.c          **** 		if (w >= 0x80) {				/* Non ASCII char */
1708:ff.c          **** #ifdef _EXCVT
1709:ff.c          **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1710:ff.c          **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1711:ff.c          **** #else
1712:ff.c          **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1713:ff.c          **** #endif
1714:ff.c          **** 			cf |= NS_LFN;				/* Force create LFN entry */
1715:ff.c          **** 		}
1716:ff.c          **** 
1717:ff.c          **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1718:ff.c          **** 			if (i >= ni - 1) {
1719:ff.c          **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1720:ff.c          **** 			}
1721:ff.c          **** 			dj->fn[i++] = (BYTE)(w >> 8);
1722:ff.c          **** 		} else {						/* Single byte char */
1723:ff.c          **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1724:ff.c          **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1725:ff.c          **** 			} else {
1726:ff.c          **** 				if (IsUpper(w)) {		/* ASCII large capital */
1727:ff.c          **** 					b |= 2;
1728:ff.c          **** 				} else {
1729:ff.c          **** 					if (IsLower(w)) {	/* ASCII small capital */
1730:ff.c          **** 						b |= 1; w -= 0x20;
1731:ff.c          **** 					}
1732:ff.c          **** 				}
1733:ff.c          **** 			}
1734:ff.c          **** 		}
1735:ff.c          **** 		dj->fn[i++] = (BYTE)w;
1736:ff.c          **** 	}
1737:ff.c          **** 
1738:ff.c          **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1739:ff.c          **** 
1740:ff.c          **** 	if (ni == 8) b <<= 2;
ARM GAS  /tmp/ccKU0f2P.s 			page 34


1741:ff.c          **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1742:ff.c          **** 		cf |= NS_LFN;
1743:ff.c          **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1744:ff.c          **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1745:ff.c          **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1746:ff.c          **** 	}
1747:ff.c          **** 
1748:ff.c          **** 	dj->fn[NS] = cf;	/* SFN is created */
1749:ff.c          **** 
1750:ff.c          **** 	return FR_OK;
1751:ff.c          **** 
1752:ff.c          **** 
1753:ff.c          **** #else	/* Non-LFN configuration */
1754:ff.c          **** 	BYTE b, c, d, *sfn;
1755:ff.c          **** 	UINT ni, si, i;
1756:ff.c          **** 	const char *p;
1757:ff.c          **** 
1758:ff.c          **** 	/* Create file name in directory form */
1759:ff.c          **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1760:ff.c          **** 	sfn = dj->fn;
1761:ff.c          **** 	mem_set(sfn, ' ', 11);
1762:ff.c          **** 	si = i = b = 0; ni = 8;
1763:ff.c          **** #if _FS_RPATH
1764:ff.c          **** 	if (p[si] == '.') { /* Is this a dot entry? */
1765:ff.c          **** 		for (;;) {
1766:ff.c          **** 			c = (BYTE)p[si++];
1767:ff.c          **** 			if (c != '.' || si >= 3) break;
1768:ff.c          **** 			sfn[i++] = c;
1769:ff.c          **** 		}
1770:ff.c          **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1771:ff.c          **** 		*path = &p[si];									/* Return pointer to the next segment */
1772:ff.c          **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1773:ff.c          **** 		return FR_OK;
1774:ff.c          **** 	}
1775:ff.c          **** #endif
1776:ff.c          **** 	for (;;) {
1777:ff.c          **** 		c = (BYTE)p[si++];
1778:ff.c          **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1779:ff.c          **** 		if (c == '.' || i >= ni) {
1780:ff.c          **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1781:ff.c          **** 			i = 8; ni = 11;
1782:ff.c          **** 			b <<= 2; continue;
1783:ff.c          **** 		}
1784:ff.c          **** 		if (c >= 0x80) {				/* Extended char? */
1785:ff.c          **** 			b |= 3;						/* Eliminate NT flag */
1786:ff.c          **** #ifdef _EXCVT
1787:ff.c          **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
1788:ff.c          **** #else
1789:ff.c          **** #if !_DF1S	/* ASCII only cfg */
1790:ff.c          **** 			return FR_INVALID_NAME;
1791:ff.c          **** #endif
1792:ff.c          **** #endif
1793:ff.c          **** 		}
1794:ff.c          **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1795:ff.c          **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1796:ff.c          **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1797:ff.c          **** 				return FR_INVALID_NAME;
ARM GAS  /tmp/ccKU0f2P.s 			page 35


1798:ff.c          **** 			sfn[i++] = c;
1799:ff.c          **** 			sfn[i++] = d;
1800:ff.c          **** 		} else {						/* Single byte code */
1801:ff.c          **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1802:ff.c          **** 				return FR_INVALID_NAME;
1803:ff.c          **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1804:ff.c          **** 				b |= 2;
1805:ff.c          **** 			} else {
1806:ff.c          **** 				if (IsLower(c)) {		/* ASCII small capital? */
1807:ff.c          **** 					b |= 1; c -= 0x20;
1808:ff.c          **** 				}
1809:ff.c          **** 			}
1810:ff.c          **** 			sfn[i++] = c;
1811:ff.c          **** 		}
1812:ff.c          **** 	}
1813:ff.c          **** 	*path = &p[si];						/* Return pointer to the next segment */
1814:ff.c          **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1815:ff.c          **** 
1816:ff.c          **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1817:ff.c          **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1818:ff.c          **** 
1819:ff.c          **** 	if (ni == 8) b <<= 2;
1820:ff.c          **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1821:ff.c          **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1822:ff.c          **** 
1823:ff.c          **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1824:ff.c          **** 
1825:ff.c          **** 	return FR_OK;
1826:ff.c          **** #endif
1827:ff.c          **** }
1828:ff.c          **** 
1829:ff.c          **** 
1830:ff.c          **** 
1831:ff.c          **** 
1832:ff.c          **** /*-----------------------------------------------------------------------*/
1833:ff.c          **** /* Get file information from directory entry                             */
1834:ff.c          **** /*-----------------------------------------------------------------------*/
1835:ff.c          **** #if _FS_MINIMIZE <= 1
1836:ff.c          **** static
1837:ff.c          **** void get_fileinfo (		/* No return code */
1838:ff.c          **** 	DIR *dj,			/* Pointer to the directory object */
1839:ff.c          **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1840:ff.c          **** )
1841:ff.c          **** {
 142              		.loc 1 1841 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              	.LVL5:
1842:ff.c          **** 	UINT i;
1843:ff.c          **** 	BYTE nt, *dir;
1844:ff.c          **** 	TCHAR *p, c;
1845:ff.c          **** 
1846:ff.c          **** 
1847:ff.c          **** 	p = fno->fname;
1848:ff.c          **** 	if (dj->sect) {
 147              		.loc 1 1848 0
ARM GAS  /tmp/ccKU0f2P.s 			page 36


 148 0000 0369     		ldr	r3, [r0, #16]	@ dj_10(D)->sect, dj_10(D)->sect
1841:ff.c          **** {
 149              		.loc 1 1841 0
 150 0002 30B5     		push	{r4, r5, lr}	@
 151              	.LCFI1:
 152              		.cfi_def_cfa_offset 12
 153              		.cfi_offset 4, -12
 154              		.cfi_offset 5, -8
 155              		.cfi_offset 14, -4
1847:ff.c          **** 	p = fno->fname;
 156              		.loc 1 1847 0
 157 0004 01F10902 		add	r2, r1, #9	@ p, fno,
 158              	.LVL6:
 159              		.loc 1 1848 0
 160 0008 002B     		cmp	r3, #0	@ dj_10(D)->sect
 161 000a 37D0     		beq	.L11	@
1849:ff.c          **** 		dir = dj->dir;
 162              		.loc 1 1849 0
 163 000c 4369     		ldr	r3, [r0, #20]	@ dir, dj_10(D)->dir
 164              	.LVL7:
1850:ff.c          **** 		nt = dir[DIR_NTres];		/* NT flag */
1851:ff.c          **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 165              		.loc 1 1851 0
 166 000e 0024     		movs	r4, #0	@ i,
 167 0010 1046     		mov	r0, r2	@ ivtmp.130, p
 168              	.LVL8:
 169              	.L14:
1852:ff.c          **** 			c = dir[i];
 170              		.loc 1 1852 0
 171 0012 1D5D     		ldrb	r5, [r3, r4]	@ zero_extendqisi2	@ c, MEM[base: dir_12, index: i_84, offset: 0B]
 172              	.LVL9:
1853:ff.c          **** 			if (c == ' ') break;
 173              		.loc 1 1853 0
 174 0014 202D     		cmp	r5, #32	@ c,
 175 0016 0246     		mov	r2, r0	@ p, ivtmp.130
 176 0018 08D0     		beq	.L12	@,
1854:ff.c          **** 			if (c == NDDE) c = (TCHAR)DDE;
 177              		.loc 1 1854 0
 178 001a 052D     		cmp	r5, #5	@ c,
 179 001c 08BF     		it	eq	@
 180 001e E525     		moveq	r5, #229	@, c,
1855:ff.c          **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1856:ff.c          **** #if _LFN_UNICODE
1857:ff.c          **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1858:ff.c          **** 				c = (c << 8) | dir[++i];
1859:ff.c          **** 			c = ff_convert(c, 1);
1860:ff.c          **** 			if (!c) c = '?';
1861:ff.c          **** #endif
1862:ff.c          **** 			*p++ = c;
 181              		.loc 1 1862 0
 182 0020 00F8015B 		strb	r5, [r0], #1	@ c, MEM[base: p_90, offset: 0B]
 183              	.LVL10:
1851:ff.c          **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 184              		.loc 1 1851 0
 185 0024 0134     		adds	r4, r4, #1	@ i, i,
 186              	.LVL11:
 187 0026 082C     		cmp	r4, #8	@ i,
ARM GAS  /tmp/ccKU0f2P.s 			page 37


 188              		.loc 1 1862 0
 189 0028 0246     		mov	r2, r0	@ p, ivtmp.130
 190              	.LVL12:
1851:ff.c          **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 191              		.loc 1 1851 0
 192 002a F2D1     		bne	.L14	@,
 193              	.LVL13:
 194              	.L12:
1863:ff.c          **** 		}
1864:ff.c          **** 		if (dir[8] != ' ') {		/* Copy name extension */
 195              		.loc 1 1864 0
 196 002c 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 8B], MEM[(BYTE *)dir_12 + 8B]
 197 002e 202C     		cmp	r4, #32	@ MEM[(BYTE *)dir_12 + 8B],
 198 0030 0DD0     		beq	.L15	@,
1865:ff.c          **** 			*p++ = '.';
 199              		.loc 1 1865 0
 200 0032 2E22     		movs	r2, #46	@ tmp186,
 201 0034 00F8012B 		strb	r2, [r0], #1	@ tmp186, *p_81
 202              	.LVL14:
1866:ff.c          **** 			for (i = 8; i < 11; i++) {
 203              		.loc 1 1866 0
 204 0038 0824     		movs	r4, #8	@ i,
 205              	.LVL15:
 206              	.L16:
1867:ff.c          **** 				c = dir[i];
 207              		.loc 1 1867 0
 208 003a 1D5D     		ldrb	r5, [r3, r4]	@ zero_extendqisi2	@ c, MEM[base: dir_12, index: i_89, offset: 0B]
 209              	.LVL16:
1868:ff.c          **** 				if (c == ' ') break;
 210              		.loc 1 1868 0
 211 003c 202D     		cmp	r5, #32	@ c,
 212 003e 0246     		mov	r2, r0	@ p, ivtmp.112
 213 0040 05D0     		beq	.L15	@,
1869:ff.c          **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1870:ff.c          **** #if _LFN_UNICODE
1871:ff.c          **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1872:ff.c          **** 					c = (c << 8) | dir[++i];
1873:ff.c          **** 				c = ff_convert(c, 1);
1874:ff.c          **** 				if (!c) c = '?';
1875:ff.c          **** #endif
1876:ff.c          **** 				*p++ = c;
 214              		.loc 1 1876 0
 215 0042 00F8015B 		strb	r5, [r0], #1	@ c, MEM[base: p_91, offset: 0B]
1866:ff.c          **** 			for (i = 8; i < 11; i++) {
 216              		.loc 1 1866 0
 217 0046 0134     		adds	r4, r4, #1	@ i, i,
 218              	.LVL17:
 219 0048 0B2C     		cmp	r4, #11	@ i,
 220              		.loc 1 1876 0
 221 004a 0246     		mov	r2, r0	@ p, ivtmp.112
 222              	.LVL18:
1866:ff.c          **** 			for (i = 8; i < 11; i++) {
 223              		.loc 1 1866 0
 224 004c F5D1     		bne	.L16	@,
 225              	.LVL19:
 226              	.L15:
1877:ff.c          **** 			}
ARM GAS  /tmp/ccKU0f2P.s 			page 38


1878:ff.c          **** 		}
1879:ff.c          **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 227              		.loc 1 1879 0
 228 004e D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2	@ D.4684, MEM[(BYTE *)dir_12 + 11B]
 229 0050 0872     		strb	r0, [r1, #8]	@ D.4684, fno_8(D)->fattrib
1880:ff.c          **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 230              		.loc 1 1880 0
 231 0052 987F     		ldrb	r0, [r3, #30]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 30B], MEM[(BYTE *)dir_12 + 30B]
 232 0054 DC7F     		ldrb	r4, [r3, #31]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 31B], MEM[(BYTE *)dir_12 + 31B]
 233 0056 0004     		lsls	r0, r0, #16	@ tmp193, MEM[(BYTE *)dir_12 + 30B],
 234 0058 40EA0460 		orr	r0, r0, r4, lsl #24	@, tmp194, tmp193, MEM[(BYTE *)dir_12 + 31B],
 235 005c 1C7F     		ldrb	r4, [r3, #28]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 28B], MEM[(BYTE *)dir_12 + 28B]
 236 005e 2043     		orrs	r0, r0, r4	@, tmp196, tmp194, MEM[(BYTE *)dir_12 + 28B]
 237 0060 5C7F     		ldrb	r4, [r3, #29]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 29B], MEM[(BYTE *)dir_12 + 29B]
 238 0062 40EA0420 		orr	r0, r0, r4, lsl #8	@, tmp199, tmp196, MEM[(BYTE *)dir_12 + 29B],
 239 0066 0860     		str	r0, [r1, #0]	@ tmp199, fno_8(D)->fsize
1881:ff.c          **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 240              		.loc 1 1881 0
 241 0068 5C7E     		ldrb	r4, [r3, #25]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 25B], MEM[(BYTE *)dir_12 + 25B]
 242 006a 187E     		ldrb	r0, [r3, #24]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 24B], MEM[(BYTE *)dir_12 + 24B]
 243 006c 40EA0420 		orr	r0, r0, r4, lsl #8	@, tmp205, MEM[(BYTE *)dir_12 + 24B], MEM[(BYTE *)dir_12 + 25B],
 244 0070 8880     		strh	r0, [r1, #4]	@ movhi	@ tmp205, fno_8(D)->fdate
1882:ff.c          **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 245              		.loc 1 1882 0
 246 0072 D87D     		ldrb	r0, [r3, #23]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 23B], MEM[(BYTE *)dir_12 + 23B]
 247 0074 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_12 + 22B], MEM[(BYTE *)dir_12 + 22B]
 248              	.LVL20:
 249 0076 43EA0020 		orr	r0, r3, r0, lsl #8	@, tmp212, MEM[(BYTE *)dir_12 + 22B], MEM[(BYTE *)dir_12 + 23B],
 250 007a C880     		strh	r0, [r1, #6]	@ movhi	@ tmp212, fno_8(D)->ftime
 251              	.LVL21:
 252              	.L11:
1883:ff.c          **** 	}
1884:ff.c          **** 	*p = 0;		/* Terminate SFN str by a \0 */
 253              		.loc 1 1884 0
 254 007c 0021     		movs	r1, #0	@ tmp214,
 255              	.LVL22:
 256 007e 1170     		strb	r1, [r2, #0]	@ tmp214, *p_6
 257 0080 30BD     		pop	{r4, r5, pc}	@
 258              		.cfi_endproc
 259              	.LFE17:
 260              		.size	get_fileinfo, .-get_fileinfo
 261              		.section	.text.validate,"ax",%progbits
 262              		.align	1
 263              		.thumb
 264              		.thumb_func
 265              		.type	validate, %function
 266              	validate:
 267              	.LFB21:
1885:ff.c          **** 
1886:ff.c          **** #if _USE_LFN
1887:ff.c          **** 	if (fno->lfname && fno->lfsize) {
1888:ff.c          **** 		TCHAR *tp = fno->lfname;
1889:ff.c          **** 		WCHAR w, *lfn;
1890:ff.c          **** 
1891:ff.c          **** 		i = 0;
1892:ff.c          **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1893:ff.c          **** 			lfn = dj->lfn;
ARM GAS  /tmp/ccKU0f2P.s 			page 39


1894:ff.c          **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1895:ff.c          **** #if !_LFN_UNICODE
1896:ff.c          **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1897:ff.c          **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1898:ff.c          **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1899:ff.c          **** 					tp[i++] = (TCHAR)(w >> 8);
1900:ff.c          **** #endif
1901:ff.c          **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1902:ff.c          **** 				tp[i++] = (TCHAR)w;
1903:ff.c          **** 			}
1904:ff.c          **** 		}
1905:ff.c          **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1906:ff.c          **** 	}
1907:ff.c          **** #endif
1908:ff.c          **** }
1909:ff.c          **** #endif /* _FS_MINIMIZE <= 1 */
1910:ff.c          **** 
1911:ff.c          **** 
1912:ff.c          **** 
1913:ff.c          **** 
1914:ff.c          **** /*-----------------------------------------------------------------------*/
1915:ff.c          **** /* Follow a file path                                                    */
1916:ff.c          **** /*-----------------------------------------------------------------------*/
1917:ff.c          **** 
1918:ff.c          **** static
1919:ff.c          **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1920:ff.c          **** 	DIR *dj,			/* Directory object to return last directory and found object */
1921:ff.c          **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1922:ff.c          **** )
1923:ff.c          **** {
1924:ff.c          **** 	FRESULT res;
1925:ff.c          **** 	BYTE *dir, ns;
1926:ff.c          **** 
1927:ff.c          **** 
1928:ff.c          **** #if _FS_RPATH
1929:ff.c          **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1930:ff.c          **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1931:ff.c          **** 	} else {							/* No heading separator */
1932:ff.c          **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1933:ff.c          **** 	}
1934:ff.c          **** #else
1935:ff.c          **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1936:ff.c          **** 		path++;
1937:ff.c          **** 	dj->sclust = 0;						/* Start from the root dir */
1938:ff.c          **** #endif
1939:ff.c          **** 
1940:ff.c          **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1941:ff.c          **** 		res = dir_sdi(dj, 0);
1942:ff.c          **** 		dj->dir = 0;
1943:ff.c          **** 
1944:ff.c          **** 	} else {							/* Follow path */
1945:ff.c          **** 		for (;;) {
1946:ff.c          **** 			res = create_name(dj, &path);	/* Get a segment */
1947:ff.c          **** 			if (res != FR_OK) break;
1948:ff.c          **** 			res = dir_find(dj);				/* Find it */
1949:ff.c          **** 			ns = *(dj->fn+NS);
1950:ff.c          **** 			if (res != FR_OK) {				/* Failed to find the object */
ARM GAS  /tmp/ccKU0f2P.s 			page 40


1951:ff.c          **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1952:ff.c          **** 				/* Object not found */
1953:ff.c          **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1954:ff.c          **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1955:ff.c          **** 					res = FR_OK;
1956:ff.c          **** 					if (!(ns & NS_LAST)) continue;
1957:ff.c          **** 				} else {							/* Could not find the object */
1958:ff.c          **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1959:ff.c          **** 				}
1960:ff.c          **** 				break;
1961:ff.c          **** 			}
1962:ff.c          **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1963:ff.c          **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1964:ff.c          **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1965:ff.c          **** 				res = FR_NO_PATH; break;
1966:ff.c          **** 			}
1967:ff.c          **** 			dj->sclust = LD_CLUST(dir);
1968:ff.c          **** 		}
1969:ff.c          **** 	}
1970:ff.c          **** 
1971:ff.c          **** 	return res;
1972:ff.c          **** }
1973:ff.c          **** 
1974:ff.c          **** 
1975:ff.c          **** 
1976:ff.c          **** 
1977:ff.c          **** /*-----------------------------------------------------------------------*/
1978:ff.c          **** /* Load a sector and check if it is an FAT Volume Boot Record            */
1979:ff.c          **** /*-----------------------------------------------------------------------*/
1980:ff.c          **** 
1981:ff.c          **** static
1982:ff.c          **** BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
1983:ff.c          **** 	FATFS *fs,	/* File system object */
1984:ff.c          **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1985:ff.c          **** )
1986:ff.c          **** {
1987:ff.c          **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
1988:ff.c          **** 		return 3;
1989:ff.c          **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
1990:ff.c          **** 		return 2;
1991:ff.c          **** 
1992:ff.c          **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
1993:ff.c          **** 		return 0;
1994:ff.c          **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
1995:ff.c          **** 		return 0;
1996:ff.c          **** 
1997:ff.c          **** 	return 1;
1998:ff.c          **** }
1999:ff.c          **** 
2000:ff.c          **** 
2001:ff.c          **** 
2002:ff.c          **** 
2003:ff.c          **** /*-----------------------------------------------------------------------*/
2004:ff.c          **** /* Check if the file system object is valid or not                       */
2005:ff.c          **** /*-----------------------------------------------------------------------*/
2006:ff.c          **** 
2007:ff.c          **** static
ARM GAS  /tmp/ccKU0f2P.s 			page 41


2008:ff.c          **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2009:ff.c          **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2010:ff.c          **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2011:ff.c          **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
2012:ff.c          **** )
2013:ff.c          **** {
2014:ff.c          **** 	BYTE fmt, b, pi, *tbl;
2015:ff.c          **** 	UINT vol;
2016:ff.c          **** 	DSTATUS stat;
2017:ff.c          **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2018:ff.c          **** 	WORD nrsv;
2019:ff.c          **** 	const TCHAR *p = *path;
2020:ff.c          **** 	FATFS *fs;
2021:ff.c          **** 
2022:ff.c          **** 	/* Get logical drive number from the path name */
2023:ff.c          **** 	vol = p[0] - '0';					/* Is there a drive number? */
2024:ff.c          **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
2025:ff.c          **** 		p += 2; *path = p;				/* Return pointer to the path name */
2026:ff.c          **** 	} else {							/* No drive number is given */
2027:ff.c          **** #if _FS_RPATH
2028:ff.c          **** 		vol = CurrVol;					/* Use current drive */
2029:ff.c          **** #else
2030:ff.c          **** 		vol = 0;						/* Use drive 0 */
2031:ff.c          **** #endif
2032:ff.c          **** 	}
2033:ff.c          **** 
2034:ff.c          **** 	/* Check if the file system object is valid or not */
2035:ff.c          **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
2036:ff.c          **** 		return FR_INVALID_DRIVE;
2037:ff.c          **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
2038:ff.c          **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2039:ff.c          **** 
2040:ff.c          **** 	ENTER_FF(fs);						/* Lock file system */
2041:ff.c          **** 
2042:ff.c          **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
2043:ff.c          **** 		stat = disk_status(fs->drv);
2044:ff.c          **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
2045:ff.c          **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
2046:ff.c          **** 				return FR_WRITE_PROTECTED;
2047:ff.c          **** 			return FR_OK;				/* The file system object is valid */
2048:ff.c          **** 		}
2049:ff.c          **** 	}
2050:ff.c          **** 
2051:ff.c          **** 	/* The file system object is not valid. */
2052:ff.c          **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2053:ff.c          **** 
2054:ff.c          **** 	fs->fs_type = 0;					/* Clear the file system object */
2055:ff.c          **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
2056:ff.c          **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
2057:ff.c          **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
2058:ff.c          **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
2059:ff.c          **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
2060:ff.c          **** 		return FR_WRITE_PROTECTED;
2061:ff.c          **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2062:ff.c          **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2063:ff.c          **** 		return FR_DISK_ERR;
2064:ff.c          **** #endif
ARM GAS  /tmp/ccKU0f2P.s 			page 42


2065:ff.c          **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
2066:ff.c          **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
2067:ff.c          **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
2068:ff.c          **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
2069:ff.c          **** 		/* Check the partition listed in the partition table */
2070:ff.c          **** 		pi = LD2PT(vol);
2071:ff.c          **** 		if (pi) pi--;
2072:ff.c          **** 		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
2073:ff.c          **** 		if (tbl[4]) {						/* Is the partition existing? */
2074:ff.c          **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
2075:ff.c          **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
2076:ff.c          **** 		}
2077:ff.c          **** 	}
2078:ff.c          **** 	if (fmt == 3) return FR_DISK_ERR;
2079:ff.c          **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
2080:ff.c          **** 
2081:ff.c          **** 	/* An FAT volume is found. Following code initializes the file system object */
2082:ff.c          **** 
2083:ff.c          **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
2084:ff.c          **** 		return FR_NO_FILESYSTEM;
2085:ff.c          **** 
2086:ff.c          **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
2087:ff.c          **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
2088:ff.c          **** 	fs->fsize = fasize;
2089:ff.c          **** 
2090:ff.c          **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
2091:ff.c          **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
2092:ff.c          **** 	fasize *= b;										/* Number of sectors for FAT area */
2093:ff.c          **** 
2094:ff.c          **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
2095:ff.c          **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2096:ff.c          **** 
2097:ff.c          **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
2098:ff.c          **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
2099:ff.c          **** 
2100:ff.c          **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
2101:ff.c          **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
2102:ff.c          **** 
2103:ff.c          **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
2104:ff.c          **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
2105:ff.c          **** 
2106:ff.c          **** 	/* Determine the FAT sub type */
2107:ff.c          **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
2108:ff.c          **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2109:ff.c          **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
2110:ff.c          **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
2111:ff.c          **** 	fmt = FS_FAT12;
2112:ff.c          **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
2113:ff.c          **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2114:ff.c          **** 
2115:ff.c          **** 	/* Boundaries and Limits */
2116:ff.c          **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
2117:ff.c          **** 	fs->database = bsect + sysect;						/* Data start sector */
2118:ff.c          **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
2119:ff.c          **** 	if (fmt == FS_FAT32) {
2120:ff.c          **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
2121:ff.c          **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
ARM GAS  /tmp/ccKU0f2P.s 			page 43


2122:ff.c          **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
2123:ff.c          **** 	} else {
2124:ff.c          **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
2125:ff.c          **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2126:ff.c          **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2127:ff.c          **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2128:ff.c          **** 	}
2129:ff.c          **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
2130:ff.c          **** 		return FR_NO_FILESYSTEM;
2131:ff.c          **** 
2132:ff.c          **** #if !_FS_READONLY
2133:ff.c          **** 	/* Initialize cluster allocation information */
2134:ff.c          **** 	fs->free_clust = 0xFFFFFFFF;
2135:ff.c          **** 	fs->last_clust = 0;
2136:ff.c          **** 
2137:ff.c          **** 	/* Get fsinfo if available */
2138:ff.c          **** 	if (fmt == FS_FAT32) {
2139:ff.c          **** 	 	fs->fsi_flag = 0;
2140:ff.c          **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
2141:ff.c          **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
2142:ff.c          **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
2143:ff.c          **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
2144:ff.c          **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
2145:ff.c          **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
2146:ff.c          **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
2147:ff.c          **** 		}
2148:ff.c          **** 	}
2149:ff.c          **** #endif
2150:ff.c          **** 	fs->fs_type = fmt;		/* FAT sub-type */
2151:ff.c          **** 	fs->id = ++Fsid;		/* File system mount ID */
2152:ff.c          **** 	fs->winsect = 0;		/* Invalidate sector cache */
2153:ff.c          **** 	fs->wflag = 0;
2154:ff.c          **** #if _FS_RPATH
2155:ff.c          **** 	fs->cdir = 0;			/* Current directory (root dir) */
2156:ff.c          **** #endif
2157:ff.c          **** #if _FS_SHARE				/* Clear file lock semaphores */
2158:ff.c          **** 	clear_lock(fs);
2159:ff.c          **** #endif
2160:ff.c          **** 
2161:ff.c          **** 	return FR_OK;
2162:ff.c          **** }
2163:ff.c          **** 
2164:ff.c          **** 
2165:ff.c          **** 
2166:ff.c          **** 
2167:ff.c          **** /*-----------------------------------------------------------------------*/
2168:ff.c          **** /* Check if the file/dir object is valid or not                          */
2169:ff.c          **** /*-----------------------------------------------------------------------*/
2170:ff.c          **** 
2171:ff.c          **** static
2172:ff.c          **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2173:ff.c          **** 	FATFS *fs,		/* Pointer to the file system object */
2174:ff.c          **** 	WORD id			/* Member id of the target object to be checked */
2175:ff.c          **** )
2176:ff.c          **** {
 268              		.loc 1 2176 0
 269              		.cfi_startproc
ARM GAS  /tmp/ccKU0f2P.s 			page 44


 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL23:
 273 0000 08B5     		push	{r3, lr}	@
 274              	.LCFI2:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 3, -8
 277              		.cfi_offset 14, -4
2177:ff.c          **** 	if (!fs || !fs->fs_type || fs->id != id)
 278              		.loc 1 2177 0
 279 0002 68B1     		cbz	r0, .L36	@ fs,
 280              		.loc 1 2177 0 is_stmt 0 discriminator 1
 281 0004 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2	@ fs_2(D)->fs_type, fs_2(D)->fs_type
 282 0006 5BB1     		cbz	r3, .L36	@ fs_2(D)->fs_type,
 283 0008 C288     		ldrh	r2, [r0, #6]	@ fs_2(D)->id, fs_2(D)->id
 284 000a 8A42     		cmp	r2, r1	@ fs_2(D)->id, id
 285 000c 08D1     		bne	.L36	@,
2178:ff.c          **** 		return FR_INVALID_OBJECT;
2179:ff.c          **** 
2180:ff.c          **** 	ENTER_FF(fs);		/* Lock file system */
2181:ff.c          **** 
2182:ff.c          **** 	if (disk_status(fs->drv) & STA_NOINIT)
 286              		.loc 1 2182 0 is_stmt 1
 287 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2	@, fs_2(D)->drv
 288              	.LVL24:
 289 0010 FFF7FEFF 		bl	disk_status	@
 290              	.LVL25:
 291 0014 10F0010F 		tst	r0, #1	@,
2183:ff.c          **** 		return FR_NOT_READY;
 292              		.loc 1 2183 0
 293 0018 0CBF     		ite	eq	@
 294 001a 0020     		moveq	r0, #0	@, D.4584,
 295 001c 0320     		movne	r0, #3	@, D.4584,
 296 001e 08BD     		pop	{r3, pc}	@
 297              	.LVL26:
 298              	.L36:
2178:ff.c          **** 		return FR_INVALID_OBJECT;
 299              		.loc 1 2178 0
 300 0020 0920     		movs	r0, #9	@ D.4584,
 301              	.LVL27:
2184:ff.c          **** 
2185:ff.c          **** 	return FR_OK;
2186:ff.c          **** }
 302              		.loc 1 2186 0
 303 0022 08BD     		pop	{r3, pc}	@
 304              		.cfi_endproc
 305              	.LFE21:
 306              		.size	validate, .-validate
 307              		.section	.text.move_window,"ax",%progbits
 308              		.align	1
 309              		.thumb
 310              		.thumb_func
 311              		.type	move_window, %function
 312              	move_window:
 313              	.LFB4:
 723:ff.c          **** {
 314              		.loc 1 723 0
ARM GAS  /tmp/ccKU0f2P.s 			page 45


 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              	.LVL28:
 319 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 320              	.LCFI3:
 321              		.cfi_def_cfa_offset 24
 322              		.cfi_offset 4, -24
 323              		.cfi_offset 5, -20
 324              		.cfi_offset 6, -16
 325              		.cfi_offset 7, -12
 326              		.cfi_offset 8, -8
 327              		.cfi_offset 14, -4
 727:ff.c          **** 	wsect = fs->winsect;
 328              		.loc 1 727 0
 329 0004 C56A     		ldr	r5, [r0, #44]	@ wsect, fs_4(D)->winsect
 330              	.LVL29:
 728:ff.c          **** 	if (wsect != sector) {	/* Changed current window */
 331              		.loc 1 728 0
 332 0006 8D42     		cmp	r5, r1	@ wsect, sector
 723:ff.c          **** {
 333              		.loc 1 723 0
 334 0008 0446     		mov	r4, r0	@ fs, fs
 335 000a 0E46     		mov	r6, r1	@ sector, sector
 728:ff.c          **** 	if (wsect != sector) {	/* Changed current window */
 336              		.loc 1 728 0
 337 000c 02D1     		bne	.L39	@,
 338              	.LVL30:
 339              	.L43:
 750:ff.c          **** 	return FR_OK;
 340              		.loc 1 750 0
 341 000e 0020     		movs	r0, #0	@ D.4656,
 342 0010 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 343              	.LVL31:
 344              	.L39:
 730:ff.c          **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 345              		.loc 1 730 0
 346 0014 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2	@ fs_4(D)->wflag, fs_4(D)->wflag
 347 0016 13B9     		cbnz	r3, .L41	@ fs_4(D)->wflag,
 348              	.LVL32:
 349              	.L45:
 743:ff.c          **** 		if (sector) {
 350              		.loc 1 743 0
 351 0018 002E     		cmp	r6, #0	@ sector
 352 001a F8D0     		beq	.L43	@
 353 001c 1FE0     		b	.L49	@
 354              	.LVL33:
 355              	.L41:
 731:ff.c          **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 356              		.loc 1 731 0
 357 001e 00F13008 		add	r8, r0, #48	@ D.4652, fs,
 358 0022 4146     		mov	r1, r8	@, D.4652
 359              	.LVL34:
 360 0024 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2	@, fs_4(D)->drv
 361              	.LVL35:
 362 0026 2A46     		mov	r2, r5	@, wsect
 363 0028 0123     		movs	r3, #1	@,
ARM GAS  /tmp/ccKU0f2P.s 			page 46


 364 002a FFF7FEFF 		bl	disk_write	@
 365              	.LVL36:
 366 002e 10B1     		cbz	r0, .L44	@ tmp161,
 367              	.L48:
 732:ff.c          **** 				return FR_DISK_ERR;
 368              		.loc 1 732 0
 369 0030 0120     		movs	r0, #1	@ D.4656,
 370 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 371              	.L44:
 733:ff.c          **** 			fs->wflag = 0;
 372              		.loc 1 733 0
 373 0036 2071     		strb	r0, [r4, #4]	@ tmp161, fs_4(D)->wflag
 734:ff.c          **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 374              		.loc 1 734 0
 375 0038 E269     		ldr	r2, [r4, #28]	@ fs_4(D)->fsize, fs_4(D)->fsize
 376 003a 206A     		ldr	r0, [r4, #32]	@ fs_4(D)->fatbase, fs_4(D)->fatbase
 377 003c 1118     		adds	r1, r2, r0	@ tmp164, fs_4(D)->fsize, fs_4(D)->fatbase
 378 003e 8D42     		cmp	r5, r1	@ wsect, tmp164
 379 0040 EAD2     		bcs	.L45	@,
 380              	.LBB2:
 736:ff.c          **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 381              		.loc 1 736 0
 382 0042 E778     		ldrb	r7, [r4, #3]	@ zero_extendqisi2	@ nf, fs_4(D)->n_fats
 383              	.LVL37:
 384              	.L46:
 736:ff.c          **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 385              		.loc 1 736 0 is_stmt 0 discriminator 1
 386 0044 012F     		cmp	r7, #1	@ nf,
 387 0046 E7D9     		bls	.L45	@,
 388              	.L47:
 737:ff.c          **** 					wsect += fs->fsize;
 389              		.loc 1 737 0 is_stmt 1 discriminator 2
 390 0048 E369     		ldr	r3, [r4, #28]	@ fs_4(D)->fsize, fs_4(D)->fsize
 738:ff.c          **** 					disk_write(fs->drv, fs->win, wsect, 1);
 391              		.loc 1 738 0 discriminator 2
 392 004a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_4(D)->drv
 737:ff.c          **** 					wsect += fs->fsize;
 393              		.loc 1 737 0 discriminator 2
 394 004c ED18     		adds	r5, r5, r3	@ wsect, wsect, fs_4(D)->fsize
 395              	.LVL38:
 738:ff.c          **** 					disk_write(fs->drv, fs->win, wsect, 1);
 396              		.loc 1 738 0 discriminator 2
 397 004e 4146     		mov	r1, r8	@, D.4652
 398 0050 2A46     		mov	r2, r5	@, wsect
 399 0052 0123     		movs	r3, #1	@,
 736:ff.c          **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 400              		.loc 1 736 0 discriminator 2
 401 0054 013F     		subs	r7, r7, #1	@ tmp169, nf,
 402              	.LVL39:
 738:ff.c          **** 					disk_write(fs->drv, fs->win, wsect, 1);
 403              		.loc 1 738 0 discriminator 2
 404 0056 FFF7FEFF 		bl	disk_write	@
 405              	.LVL40:
 736:ff.c          **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 406              		.loc 1 736 0 discriminator 2
 407 005a FFB2     		uxtb	r7, r7	@ nf, tmp169
 408              	.LVL41:
ARM GAS  /tmp/ccKU0f2P.s 			page 47


 409 005c F2E7     		b	.L46	@
 410              	.LVL42:
 411              	.L49:
 412              	.LBE2:
 744:ff.c          **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 413              		.loc 1 744 0
 414 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_4(D)->drv
 415 0060 04F13001 		add	r1, r4, #48	@, fs,
 416 0064 3246     		mov	r2, r6	@, sector
 417 0066 0123     		movs	r3, #1	@,
 418 0068 FFF7FEFF 		bl	disk_read	@
 419              	.LVL43:
 420 006c 0028     		cmp	r0, #0	@ tmp172
 421 006e DFD1     		bne	.L48	@
 746:ff.c          **** 			fs->winsect = sector;
 422              		.loc 1 746 0
 423 0070 E662     		str	r6, [r4, #44]	@ sector, fs_4(D)->winsect
 751:ff.c          **** }
 424              		.loc 1 751 0
 425 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 426              		.cfi_endproc
 427              	.LFE4:
 428              		.size	move_window, .-move_window
 429              		.section	.text.check_fs,"ax",%progbits
 430              		.align	1
 431              		.thumb
 432              		.thumb_func
 433              		.type	check_fs, %function
 434              	check_fs:
 435              	.LFB19:
1986:ff.c          **** {
 436              		.loc 1 1986 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              	.LVL44:
 441 0000 10B5     		push	{r4, lr}	@
 442              	.LCFI4:
 443              		.cfi_def_cfa_offset 8
 444              		.cfi_offset 4, -8
 445              		.cfi_offset 14, -4
1986:ff.c          **** {
 446              		.loc 1 1986 0
 447 0002 0446     		mov	r4, r0	@ fs, fs
 448 0004 0A46     		mov	r2, r1	@ sect, sect
1987:ff.c          **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 449              		.loc 1 1987 0
 450 0006 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2	@, fs_2(D)->drv
 451              	.LVL45:
 452 0008 04F13001 		add	r1, r4, #48	@, fs,
 453              	.LVL46:
 454 000c 0123     		movs	r3, #1	@,
 455 000e FFF7FEFF 		bl	disk_read	@
 456              	.LVL47:
 457 0012 80BB     		cbnz	r0, .L52	@ tmp183,
1989:ff.c          **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 458              		.loc 1 1989 0
ARM GAS  /tmp/ccKU0f2P.s 			page 48


 459 0014 94F82F22 		ldrb	r2, [r4, #559]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 460 0018 94F82E32 		ldrb	r3, [r4, #558]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 461 001c 43EA0221 		orr	r1, r3, r2, lsl #8	@, tmp189, fs_2(D)->win, fs_2(D)->win,
 462 0020 174B     		ldr	r3, .L55	@ tmp193,
 463 0022 0AB2     		sxth	r2, r1	@ tmp192, tmp189
 464 0024 9A42     		cmp	r2, r3	@ tmp192, tmp193
 465 0026 28D1     		bne	.L53	@,
1992:ff.c          **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 466              		.loc 1 1992 0
 467 0028 94F86820 		ldrb	r2, [r4, #104]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 468 002c 94F86910 		ldrb	r1, [r4, #105]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 469 0030 1304     		lsls	r3, r2, #16	@ tmp197, fs_2(D)->win,
 470 0032 94F86620 		ldrb	r2, [r4, #102]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 471 0036 43EA0161 		orr	r1, r3, r1, lsl #24	@, tmp198, tmp197, fs_2(D)->win,
 472 003a 94F86730 		ldrb	r3, [r4, #103]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 473 003e 1143     		orrs	r1, r1, r2	@, tmp200, tmp198, fs_2(D)->win
 474 0040 41EA0321 		orr	r1, r1, r3, lsl #8	@, tmp203, tmp200, fs_2(D)->win,
 475 0044 0F4B     		ldr	r3, .L55+4	@ tmp205,
 476 0046 21F07F42 		bic	r2, r1, #-16777216	@ tmp204, tmp203,
 477 004a 9A42     		cmp	r2, r3	@ tmp204, tmp205
 478 004c 16D0     		beq	.L51	@,
1994:ff.c          **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 479              		.loc 1 1994 0
 480 004e 94F88400 		ldrb	r0, [r4, #132]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 481 0052 94F88510 		ldrb	r1, [r4, #133]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 482 0056 0204     		lsls	r2, r0, #16	@ tmp209, fs_2(D)->win,
 483 0058 94F88200 		ldrb	r0, [r4, #130]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 484 005c 42EA0161 		orr	r1, r2, r1, lsl #24	@, tmp210, tmp209, fs_2(D)->win,
 485 0060 94F88320 		ldrb	r2, [r4, #131]	@ zero_extendqisi2	@ fs_2(D)->win, fs_2(D)->win
 486 0064 0143     		orrs	r1, r1, r0	@, tmp212, tmp210, fs_2(D)->win
 487 0066 41EA0221 		orr	r1, r1, r2, lsl #8	@, tmp215, tmp212, fs_2(D)->win,
 488 006a 21F07F40 		bic	r0, r1, #-16777216	@ tmp216, tmp215,
1988:ff.c          **** 		return 3;
 489              		.loc 1 1988 0
 490 006e C01A     		subs	r0, r0, r3	@ D.5183, tmp216, tmp205
 491 0070 18BF     		it	ne
 492 0072 0120     		movne	r0, #1	@ D.5183,
 493 0074 10BD     		pop	{r4, pc}	@
 494              	.L52:
 495 0076 0320     		movs	r0, #3	@ D.5183,
 496 0078 10BD     		pop	{r4, pc}	@
 497              	.L53:
1990:ff.c          **** 		return 2;
 498              		.loc 1 1990 0
 499 007a 0220     		movs	r0, #2	@ D.5183,
 500              	.L51:
1998:ff.c          **** }
 501              		.loc 1 1998 0
 502 007c 10BD     		pop	{r4, pc}	@
 503              	.L56:
 504 007e 00BF     		.align	2
 505              	.L55:
 506 0080 55AAFFFF 		.word	-21931
 507 0084 46415400 		.word	5521734
 508              		.cfi_endproc
 509              	.LFE19:
 510              		.size	check_fs, .-check_fs
ARM GAS  /tmp/ccKU0f2P.s 			page 49


 511              		.section	.text.chk_mounted,"ax",%progbits
 512              		.align	1
 513              		.thumb
 514              		.thumb_func
 515              		.type	chk_mounted, %function
 516              	chk_mounted:
 517              	.LFB20:
2013:ff.c          **** {
 518              		.loc 1 2013 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              	.LVL48:
 523 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 524              	.LCFI5:
 525              		.cfi_def_cfa_offset 24
 526              		.cfi_offset 4, -24
 527              		.cfi_offset 5, -20
 528              		.cfi_offset 6, -16
 529              		.cfi_offset 7, -12
 530              		.cfi_offset 8, -8
 531              		.cfi_offset 14, -4
2019:ff.c          **** 	const TCHAR *p = *path;
 532              		.loc 1 2019 0
 533 0004 0368     		ldr	r3, [r0, #0]	@ p, *path_12(D)
 534              	.LVL49:
2013:ff.c          **** {
 535              		.loc 1 2013 0
 536 0006 1546     		mov	r5, r2	@ chk_wp, chk_wp
2023:ff.c          **** 	vol = p[0] - '0';					/* Is there a drive number? */
 537              		.loc 1 2023 0
 538 0008 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2	@ *p_13, *p_13
 539              	.LVL50:
 540 000a 303A     		subs	r2, r2, #48	@ vol, *p_13,
 541              	.LVL51:
2024:ff.c          **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 542              		.loc 1 2024 0
 543 000c 092A     		cmp	r2, #9	@ vol,
 544 000e 04D9     		bls	.L58	@,
 545              	.L61:
2037:ff.c          **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 546              		.loc 1 2037 0
 547 0010 B848     		ldr	r0, .L107	@ tmp370,
 548              	.LVL52:
 549 0012 0468     		ldr	r4, [r0, #0]	@ fs, FatFs
 550              	.LVL53:
 551 0014 0C60     		str	r4, [r1, #0]	@ fs, *rfs_24(D)
2038:ff.c          **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 552              		.loc 1 2038 0
 553 0016 54B9     		cbnz	r4, .L105	@ fs,
 554 0018 5CE1     		b	.L106	@
 555              	.LVL54:
 556              	.L58:
2024:ff.c          **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 557              		.loc 1 2024 0 discriminator 1
 558 001a 5C78     		ldrb	r4, [r3, #1]	@ zero_extendqisi2	@ MEM[(const TCHAR *)p_13 + 1B], MEM[(const TCHAR *)p_13 + 1B
 559 001c 3A2C     		cmp	r4, #58	@ MEM[(const TCHAR *)p_13 + 1B],
ARM GAS  /tmp/ccKU0f2P.s 			page 50


 560 001e F7D1     		bne	.L61	@,
 561              	.LVL55:
2025:ff.c          **** 		p += 2; *path = p;				/* Return pointer to the path name */
 562              		.loc 1 2025 0
 563 0020 0233     		adds	r3, r3, #2	@ tmp372, p,
 564              	.LVL56:
 565 0022 0360     		str	r3, [r0, #0]	@ tmp372, *path_12(D)
2035:ff.c          **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 566              		.loc 1 2035 0
 567 0024 002A     		cmp	r2, #0	@ vol
 568 0026 F3D0     		beq	.L61	@
 569              	.L78:
2036:ff.c          **** 		return FR_INVALID_DRIVE;
 570              		.loc 1 2036 0
 571 0028 0B20     		movs	r0, #11	@ D.4884,
 572              	.LVL57:
 573 002a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 574              	.LVL58:
 575              	.L105:
2042:ff.c          **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
 576              		.loc 1 2042 0
 577 002e 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2	@ fs_23->fs_type, fs_23->fs_type
 578              	.LVL59:
 579 0030 81B1     		cbz	r1, .L62	@ fs_23->fs_type,
2043:ff.c          **** 		stat = disk_status(fs->drv);
 580              		.loc 1 2043 0
 581 0032 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_23->drv
 582 0034 FFF7FEFF 		bl	disk_status	@
 583              	.LVL60:
2044:ff.c          **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 584              		.loc 1 2044 0
 585 0038 C107     		lsls	r1, r0, #31	@, tmp375,
 586 003a 0BD4     		bmi	.L62	@,
2045:ff.c          **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 587              		.loc 1 2045 0
 588 003c 002D     		cmp	r5, #0	@ chk_wp
 589 003e 00F04C81 		beq	.L79	@
2045:ff.c          **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 590              		.loc 1 2045 0 is_stmt 0 discriminator 1
 591 0042 00F00401 		and	r1, r0, #4	@ tmp380, tmp375,
 592 0046 C8B2     		uxtb	r0, r1	@ tmp381, tmp380
 593              	.LVL61:
2046:ff.c          **** 				return FR_WRITE_PROTECTED;
 594              		.loc 1 2046 0 is_stmt 1 discriminator 1
 595 0048 0028     		cmp	r0, #0	@ tmp381,
 596 004a 14BF     		ite	ne	@
 597 004c 0A20     		movne	r0, #10	@, D.4884,
 598 004e 0020     		moveq	r0, #0	@, D.4884,
 599 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 600              	.L62:
2054:ff.c          **** 	fs->fs_type = 0;					/* Clear the file system object */
 601              		.loc 1 2054 0
 602 0054 0020     		movs	r0, #0	@ tmp382,
 603 0056 2070     		strb	r0, [r4, #0]	@ tmp382, fs_23->fs_type
2055:ff.c          **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 604              		.loc 1 2055 0
 605 0058 6070     		strb	r0, [r4, #1]	@ tmp382, fs_23->drv
ARM GAS  /tmp/ccKU0f2P.s 			page 51


2056:ff.c          **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 606              		.loc 1 2056 0
 607 005a FFF7FEFF 		bl	disk_initialize	@
 608              	.LVL62:
2057:ff.c          **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 609              		.loc 1 2057 0
 610 005e C207     		lsls	r2, r0, #31	@, tmp386,
 611 0060 00F13E81 		bmi	.L81	@,
2059:ff.c          **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 612              		.loc 1 2059 0
 613 0064 2DB1     		cbz	r5, .L63	@ chk_wp,
2059:ff.c          **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 614              		.loc 1 2059 0 is_stmt 0 discriminator 1
 615 0066 00F00402 		and	r2, r0, #4	@ tmp391, tmp386,
 616 006a D3B2     		uxtb	r3, r2	@ tmp392, tmp391
 617 006c 002B     		cmp	r3, #0	@ tmp392
 618 006e 40F03A81 		bne	.L82	@
 619              	.L63:
 620              	.LVL63:
2066:ff.c          **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 621              		.loc 1 2066 0 is_stmt 1
 622 0072 0021     		movs	r1, #0	@,
 623 0074 2046     		mov	r0, r4	@, fs
 624              	.LVL64:
 625 0076 FFF7FEFF 		bl	check_fs	@
 626              	.LVL65:
2068:ff.c          **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 627              		.loc 1 2068 0
 628 007a 0128     		cmp	r0, #1	@ fmt,
 629 007c 18D1     		bne	.L83	@,
 630              	.LVL66:
2073:ff.c          **** 		if (tbl[4]) {						/* Is the partition existing? */
 631              		.loc 1 2073 0
 632 007e 94F8F201 		ldrb	r0, [r4, #498]	@ zero_extendqisi2	@ MEM[(BYTE *)fs_23 + 498B], MEM[(BYTE *)fs_23 + 498B]
 633              	.LVL67:
 634 0082 10B9     		cbnz	r0, .L65	@ MEM[(BYTE *)fs_23 + 498B],
 635              	.LVL68:
 636              	.L66:
2079:ff.c          **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 637              		.loc 1 2079 0
 638 0084 0D20     		movs	r0, #13	@ D.4884,
 639 0086 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 640              	.LVL69:
 641              	.L65:
2074:ff.c          **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 642              		.loc 1 2074 0
 643 008a 94F8F861 		ldrb	r6, [r4, #504]	@ zero_extendqisi2	@ MEM[(BYTE *)fs_23 + 504B], MEM[(BYTE *)fs_23 + 504B]
 644 008e 94F8F911 		ldrb	r1, [r4, #505]	@ zero_extendqisi2	@ MEM[(BYTE *)fs_23 + 505B], MEM[(BYTE *)fs_23 + 505B]
 645 0092 94F8F631 		ldrb	r3, [r4, #502]	@ zero_extendqisi2	@ MEM[(BYTE *)fs_23 + 502B], MEM[(BYTE *)fs_23 + 502B]
 646 0096 3204     		lsls	r2, r6, #16	@ tmp398, MEM[(BYTE *)fs_23 + 504B],
 647 0098 42EA0160 		orr	r0, r2, r1, lsl #24	@, tmp399, tmp398, MEM[(BYTE *)fs_23 + 505B],
 648 009c 94F8F711 		ldrb	r1, [r4, #503]	@ zero_extendqisi2	@ MEM[(BYTE *)fs_23 + 503B], MEM[(BYTE *)fs_23 + 503B]
 649 00a0 1843     		orrs	r0, r0, r3	@, tmp401, tmp399, MEM[(BYTE *)fs_23 + 502B]
 650 00a2 40EA0126 		orr	r6, r0, r1, lsl #8	@, bsect, tmp401, MEM[(BYTE *)fs_23 + 503B],
 651              	.LVL70:
2075:ff.c          **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 652              		.loc 1 2075 0
ARM GAS  /tmp/ccKU0f2P.s 			page 52


 653 00a6 3146     		mov	r1, r6	@, bsect
 654 00a8 2046     		mov	r0, r4	@, fs
 655 00aa FFF7FEFF 		bl	check_fs	@
 656              	.LVL71:
 657 00ae 00E0     		b	.L64	@
 658              	.LVL72:
 659              	.L83:
2066:ff.c          **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 660              		.loc 1 2066 0
 661 00b0 0026     		movs	r6, #0	@ bsect,
 662              	.LVL73:
 663              	.L64:
2078:ff.c          **** 	if (fmt == 3) return FR_DISK_ERR;
 664              		.loc 1 2078 0
 665 00b2 0328     		cmp	r0, #3	@ fmt,
 666 00b4 00F01A81 		beq	.L84	@,
2079:ff.c          **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 667              		.loc 1 2079 0
 668 00b8 0028     		cmp	r0, #0	@ fmt
 669 00ba E3D1     		bne	.L66	@
2083:ff.c          **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
 670              		.loc 1 2083 0
 671 00bc 94F83C20 		ldrb	r2, [r4, #60]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 672 00c0 94F83B00 		ldrb	r0, [r4, #59]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 673              	.LVL74:
 674 00c4 40EA0223 		orr	r3, r0, r2, lsl #8	@, tmp410, fs_23->win, fs_23->win,
 675 00c8 B3F5007F 		cmp	r3, #512	@ tmp410,
 676 00cc DAD1     		bne	.L66	@,
2086:ff.c          **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 677              		.loc 1 2086 0
 678 00ce 94F84750 		ldrb	r5, [r4, #71]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 679 00d2 94F84610 		ldrb	r1, [r4, #70]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 680              	.LVL75:
2087:ff.c          **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 681              		.loc 1 2087 0
 682 00d6 51EA0521 		orrs	r1, r1, r5, lsl #8	@, fasize, fs_23->win, fs_23->win,
 683              	.LVL76:
 684 00da 0DD1     		bne	.L67	@,
2087:ff.c          **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 685              		.loc 1 2087 0 is_stmt 0 discriminator 1
 686 00dc 94F85600 		ldrb	r0, [r4, #86]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 687 00e0 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 688 00e4 94F85410 		ldrb	r1, [r4, #84]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 689              	.LVL77:
 690 00e8 0304     		lsls	r3, r0, #16	@ tmp421, fs_23->win,
 691 00ea 43EA0265 		orr	r5, r3, r2, lsl #24	@, tmp422, tmp421, fs_23->win,
 692              	.LVL78:
 693 00ee 94F85520 		ldrb	r2, [r4, #85]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 694 00f2 0D43     		orrs	r5, r5, r1	@, tmp424, tmp422, fs_23->win
 695 00f4 45EA0221 		orr	r1, r5, r2, lsl #8	@, fasize, tmp424, fs_23->win,
 696              	.LVL79:
 697              	.L67:
2090:ff.c          **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 698              		.loc 1 2090 0 is_stmt 1
 699 00f8 94F84050 		ldrb	r5, [r4, #64]	@ zero_extendqisi2	@ b, fs_23->win
 700              	.LVL80:
2088:ff.c          **** 	fs->fsize = fasize;
ARM GAS  /tmp/ccKU0f2P.s 			page 53


 701              		.loc 1 2088 0
 702 00fc E161     		str	r1, [r4, #28]	@ fasize, fs_23->fsize
2091:ff.c          **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 703              		.loc 1 2091 0
 704 00fe 681E     		subs	r0, r5, #1	@ tmp429, b,
 705 0100 0128     		cmp	r0, #1	@ tmp429,
2090:ff.c          **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 706              		.loc 1 2090 0
 707 0102 E570     		strb	r5, [r4, #3]	@ b, fs_23->n_fats
2091:ff.c          **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 708              		.loc 1 2091 0
 709 0104 BED8     		bhi	.L66	@,
 710              	.LVL81:
2094:ff.c          **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 711              		.loc 1 2094 0
 712 0106 94F83D20 		ldrb	r2, [r4, #61]	@ zero_extendqisi2	@ b, fs_23->win
 713              	.LVL82:
 714 010a A270     		strb	r2, [r4, #2]	@ b, fs_23->csize
2095:ff.c          **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 715              		.loc 1 2095 0
 716 010c 002A     		cmp	r2, #0	@ b
 717 010e B9D0     		beq	.L66	@
2095:ff.c          **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 718              		.loc 1 2095 0 is_stmt 0 discriminator 2
 719 0110 531E     		subs	r3, r2, #1	@ tmp431, b,
 720 0112 1342     		tst	r3, r2	@ tmp431, b
 721 0114 B6D1     		bne	.L66	@,
2097:ff.c          **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 722              		.loc 1 2097 0 is_stmt 1
 723 0116 94F84200 		ldrb	r0, [r4, #66]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 724 011a 94F84130 		ldrb	r3, [r4, #65]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 725 011e 43EA0023 		orr	r3, r3, r0, lsl #8	@, D.4991, fs_23->win, fs_23->win,
 726 0122 98B2     		uxth	r0, r3	@ D.4992, D.4991
2098:ff.c          **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 727              		.loc 1 2098 0
 728 0124 1B07     		lsls	r3, r3, #28	@, D.4991,
2097:ff.c          **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 729              		.loc 1 2097 0
 730 0126 2081     		strh	r0, [r4, #8]	@ movhi	@ D.4992, fs_23->n_rootdir
2098:ff.c          **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 731              		.loc 1 2098 0
 732 0128 ACD1     		bne	.L66	@,
2100:ff.c          **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 733              		.loc 1 2100 0
 734 012a 94F84470 		ldrb	r7, [r4, #68]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 735 012e 94F84330 		ldrb	r3, [r4, #67]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 736              	.LVL83:
2101:ff.c          **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 737              		.loc 1 2101 0
 738 0132 53EA0723 		orrs	r3, r3, r7, lsl #8	@, tsect, fs_23->win, fs_23->win,
 739              	.LVL84:
 740 0136 0DD1     		bne	.L68	@,
2101:ff.c          **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 741              		.loc 1 2101 0 is_stmt 0 discriminator 1
 742 0138 94F85230 		ldrb	r3, [r4, #82]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 743              	.LVL85:
 744 013c 94F85370 		ldrb	r7, [r4, #83]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
ARM GAS  /tmp/ccKU0f2P.s 			page 54


 745              	.LVL86:
 746 0140 1B04     		lsls	r3, r3, #16	@ tmp453, fs_23->win,
 747 0142 43EA0763 		orr	r3, r3, r7, lsl #24	@, tmp454, tmp453, fs_23->win,
 748 0146 94F85070 		ldrb	r7, [r4, #80]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 749 014a 3B43     		orrs	r3, r3, r7	@, tmp456, tmp454, fs_23->win
 750 014c 94F85170 		ldrb	r7, [r4, #81]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 751 0150 43EA0723 		orr	r3, r3, r7, lsl #8	@, tsect, tmp456, fs_23->win,
 752              	.LVL87:
 753              	.L68:
2103:ff.c          **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 754              		.loc 1 2103 0 is_stmt 1
 755 0154 94F83F80 		ldrb	r8, [r4, #63]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 756 0158 94F83E70 		ldrb	r7, [r4, #62]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 757              	.LVL88:
2104:ff.c          **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 758              		.loc 1 2104 0
 759 015c 57EA0828 		orrs	r8, r7, r8, lsl #8	@, nrsv, fs_23->win, fs_23->win,
 760              	.LVL89:
 761 0160 90D0     		beq	.L66	@,
2092:ff.c          **** 	fasize *= b;										/* Number of sectors for FAT area */
 762              		.loc 1 2092 0
 763 0162 05FB01FC 		mul	ip, r5, r1	@ fasize, b, fasize
2107:ff.c          **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 764              		.loc 1 2107 0
 765 0166 08EB1017 		add	r7, r8, r0, lsr #4	@, tmp467, nrsv, D.4992,
 766              	.LVL90:
 767 016a 6744     		add	r7, r7, ip	@ sysect, tmp467, fasize
 768              	.LVL91:
2108:ff.c          **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 769              		.loc 1 2108 0
 770 016c BB42     		cmp	r3, r7	@ tsect, sysect
 771 016e 89D3     		bcc	.L66	@,
2109:ff.c          **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 772              		.loc 1 2109 0
 773 0170 DB1B     		subs	r3, r3, r7	@ tmp468, tsect, sysect
 774              	.LVL92:
 775 0172 B3FBF2F3 		udiv	r3, r3, r2	@ nclst, tmp468, b
 776              	.LVL93:
2110:ff.c          **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 777              		.loc 1 2110 0
 778 0176 002B     		cmp	r3, #0	@ nclst
 779 0178 84D0     		beq	.L66	@
 780              	.LVL94:
2112:ff.c          **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 781              		.loc 1 2112 0
 782 017a 40F6F575 		movw	r5, #4085	@ tmp469,
 783              	.LVL95:
 784 017e AB42     		cmp	r3, r5	@ nclst, tmp469
 785 0180 06D9     		bls	.L85	@,
 786              	.LVL96:
 787 0182 4FF6F572 		movw	r2, #65525	@ tmp470,
 788 0186 9342     		cmp	r3, r2	@ nclst, tmp470
 789 0188 8CBF     		ite	hi	@
 790 018a 0325     		movhi	r5, #3	@, fmt,
 791 018c 0225     		movls	r5, #2	@, fmt,
 792 018e 00E0     		b	.L70	@
 793              	.LVL97:
ARM GAS  /tmp/ccKU0f2P.s 			page 55


 794              	.L85:
2111:ff.c          **** 	fmt = FS_FAT12;
 795              		.loc 1 2111 0
 796 0190 0125     		movs	r5, #1	@ fmt,
 797              	.LVL98:
 798              	.L70:
2116:ff.c          **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 799              		.loc 1 2116 0
 800 0192 0233     		adds	r3, r3, #2	@ D.5045, nclst,
 801              	.LVL99:
2117:ff.c          **** 	fs->database = bsect + sysect;						/* Data start sector */
 802              		.loc 1 2117 0
 803 0194 BF19     		adds	r7, r7, r6	@ tmp471, sysect, bsect
 804              	.LVL100:
2118:ff.c          **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 805              		.loc 1 2118 0
 806 0196 06EB0802 		add	r2, r6, r8	@ D.5047, bsect, nrsv
2119:ff.c          **** 	if (fmt == FS_FAT32) {
 807              		.loc 1 2119 0
 808 019a 032D     		cmp	r5, #3	@ fmt,
2116:ff.c          **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 809              		.loc 1 2116 0
 810 019c A361     		str	r3, [r4, #24]	@ D.5045, fs_23->n_fatent
2117:ff.c          **** 	fs->database = bsect + sysect;						/* Data start sector */
 811              		.loc 1 2117 0
 812 019e A762     		str	r7, [r4, #40]	@ tmp471, fs_23->database
2118:ff.c          **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 813              		.loc 1 2118 0
 814 01a0 2262     		str	r2, [r4, #32]	@ D.5047, fs_23->fatbase
2119:ff.c          **** 	if (fmt == FS_FAT32) {
 815              		.loc 1 2119 0
 816 01a2 13D1     		bne	.L71	@,
2120:ff.c          **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 817              		.loc 1 2120 0
 818 01a4 0028     		cmp	r0, #0	@ D.4992
 819 01a6 7FF46DAF 		bne	.L66	@
2121:ff.c          **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 820              		.loc 1 2121 0
 821 01aa 94F85E20 		ldrb	r2, [r4, #94]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 822 01ae 94F85F00 		ldrb	r0, [r4, #95]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 823              	.LVL101:
 824 01b2 1204     		lsls	r2, r2, #16	@ tmp475, fs_23->win,
 825 01b4 42EA0062 		orr	r2, r2, r0, lsl #24	@, tmp476, tmp475, fs_23->win,
 826 01b8 94F85C00 		ldrb	r0, [r4, #92]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 827 01bc 0243     		orrs	r2, r2, r0	@, tmp478, tmp476, fs_23->win
 828 01be 94F85D00 		ldrb	r0, [r4, #93]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 829 01c2 42EA0022 		orr	r2, r2, r0, lsl #8	@, tmp481, tmp478, fs_23->win,
 830 01c6 6262     		str	r2, [r4, #36]	@ tmp481, fs_23->dirbase
2122:ff.c          **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 831              		.loc 1 2122 0
 832 01c8 9800     		lsls	r0, r3, #2	@ szbfat, D.5045,
 833              	.LVL102:
 834 01ca 0FE0     		b	.L72	@
 835              	.LVL103:
 836              	.L71:
2124:ff.c          **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 837              		.loc 1 2124 0
ARM GAS  /tmp/ccKU0f2P.s 			page 56


 838 01cc 0028     		cmp	r0, #0	@ D.4992
 839 01ce 3FF459AF 		beq	.L66	@
2125:ff.c          **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 840              		.loc 1 2125 0
 841 01d2 0CEB0200 		add	r0, ip, r2	@ tmp482, fasize, D.5047
 842              	.LVL104:
2127:ff.c          **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 843              		.loc 1 2127 0
 844 01d6 022D     		cmp	r5, #2	@ fmt,
2125:ff.c          **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 845              		.loc 1 2125 0
 846 01d8 6062     		str	r0, [r4, #36]	@ tmp482, fs_23->dirbase
2127:ff.c          **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 847              		.loc 1 2127 0
 848 01da 01D1     		bne	.L73	@,
2127:ff.c          **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 849              		.loc 1 2127 0 is_stmt 0 discriminator 1
 850 01dc 5800     		lsls	r0, r3, #1	@ szbfat, D.5045,
 851 01de 05E0     		b	.L72	@
 852              	.L73:
2127:ff.c          **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 853              		.loc 1 2127 0 discriminator 2
 854 01e0 0322     		movs	r2, #3	@ tmp484,
 855 01e2 5A43     		muls	r2, r3, r2	@ tmp483, D.5045
 856 01e4 03F00103 		and	r3, r3, #1	@ tmp486, D.5045,
 857              	.LVL105:
 858 01e8 03EB5200 		add	r0, r3, r2, lsr #1	@, szbfat, tmp486, tmp483,
 859              	.L72:
 860              	.LVL106:
2129:ff.c          **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 861              		.loc 1 2129 0 is_stmt 1
 862 01ec 00F2FF13 		addw	r3, r0, #511	@ tmp487, szbfat,
 863 01f0 B1EB532F 		cmp	r1, r3, lsr #9	@ fasize, tmp487,
 864 01f4 FFF446AF 		bcc	.L66	@,
2135:ff.c          **** 	fs->last_clust = 0;
 865              		.loc 1 2135 0
 866 01f8 0020     		movs	r0, #0	@ tmp490,
 867              	.LVL107:
2134:ff.c          **** 	fs->free_clust = 0xFFFFFFFF;
 868              		.loc 1 2134 0
 869 01fa 4FF0FF31 		mov	r1, #-1	@ tmp489,
 870              	.LVL108:
2138:ff.c          **** 	if (fmt == FS_FAT32) {
 871              		.loc 1 2138 0
 872 01fe 032D     		cmp	r5, #3	@ fmt,
2134:ff.c          **** 	fs->free_clust = 0xFFFFFFFF;
 873              		.loc 1 2134 0
 874 0200 2161     		str	r1, [r4, #16]	@ tmp489, fs_23->free_clust
2135:ff.c          **** 	fs->last_clust = 0;
 875              		.loc 1 2135 0
 876 0202 E060     		str	r0, [r4, #12]	@ tmp490, fs_23->last_clust
2138:ff.c          **** 	if (fmt == FS_FAT32) {
 877              		.loc 1 2138 0
 878 0204 5AD1     		bne	.L75	@,
2140:ff.c          **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 879              		.loc 1 2140 0
 880 0206 94F86120 		ldrb	r2, [r4, #97]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
ARM GAS  /tmp/ccKU0f2P.s 			page 57


 881 020a 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 882              	.LVL109:
2139:ff.c          **** 	 	fs->fsi_flag = 0;
 883              		.loc 1 2139 0
 884 020e 6071     		strb	r0, [r4, #5]	@ tmp490, fs_23->fsi_flag
2140:ff.c          **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 885              		.loc 1 2140 0
 886 0210 43EA0221 		orr	r1, r3, r2, lsl #8	@, tmp499, fs_23->win, fs_23->win,
 887 0214 7218     		adds	r2, r6, r1	@ D.5096, bsect, tmp499
 888 0216 6261     		str	r2, [r4, #20]	@ D.5096, fs_23->fsi_sector
2141:ff.c          **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 889              		.loc 1 2141 0
 890 0218 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_23->drv
 891 021a 04F13001 		add	r1, r4, #48	@, fs,
 892 021e 0123     		movs	r3, #1	@,
 893 0220 FFF7FEFF 		bl	disk_read	@
 894              	.LVL110:
 895 0224 0028     		cmp	r0, #0	@
 896 0226 49D1     		bne	.L75	@
2142:ff.c          **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 897              		.loc 1 2142 0 discriminator 1
 898 0228 94F82F02 		ldrb	r0, [r4, #559]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 899 022c 94F82E22 		ldrb	r2, [r4, #558]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 900 0230 42EA0023 		orr	r3, r2, r0, lsl #8	@, tmp508, fs_23->win, fs_23->win,
2141:ff.c          **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 901              		.loc 1 2141 0 discriminator 1
 902 0234 3048     		ldr	r0, .L107+4	@ tmp512,
 903 0236 19B2     		sxth	r1, r3	@ tmp511, tmp508
 904 0238 8142     		cmp	r1, r0	@ tmp511, tmp512
 905 023a 3FD1     		bne	.L75	@,
2143:ff.c          **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 906              		.loc 1 2143 0
 907 023c 94F83220 		ldrb	r2, [r4, #50]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 908 0240 94F83330 		ldrb	r3, [r4, #51]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 909 0244 1104     		lsls	r1, r2, #16	@ tmp516, fs_23->win,
 910 0246 41EA0360 		orr	r0, r1, r3, lsl #24	@, tmp517, tmp516, fs_23->win,
 911 024a 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 912 024e 94F83120 		ldrb	r2, [r4, #49]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 913 0252 1843     		orrs	r0, r0, r3	@, tmp519, tmp517, fs_23->win
 914 0254 40EA0221 		orr	r1, r0, r2, lsl #8	@, tmp522, tmp519, fs_23->win,
2142:ff.c          **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 915              		.loc 1 2142 0
 916 0258 2848     		ldr	r0, .L107+8	@ tmp523,
 917 025a 8142     		cmp	r1, r0	@ tmp522, tmp523
 918 025c 2ED1     		bne	.L75	@,
2144:ff.c          **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 919              		.loc 1 2144 0
 920 025e 94F81622 		ldrb	r2, [r4, #534]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 921 0262 94F81732 		ldrb	r3, [r4, #535]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 922 0266 1104     		lsls	r1, r2, #16	@ tmp527, fs_23->win,
 923 0268 41EA0360 		orr	r0, r1, r3, lsl #24	@, tmp528, tmp527, fs_23->win,
 924 026c 94F81432 		ldrb	r3, [r4, #532]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 925 0270 94F81522 		ldrb	r2, [r4, #533]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 926 0274 1843     		orrs	r0, r0, r3	@, tmp530, tmp528, fs_23->win
 927 0276 40EA0221 		orr	r1, r0, r2, lsl #8	@, tmp533, tmp530, fs_23->win,
2143:ff.c          **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 928              		.loc 1 2143 0
ARM GAS  /tmp/ccKU0f2P.s 			page 58


 929 027a 2148     		ldr	r0, .L107+12	@ tmp534,
 930 027c 8142     		cmp	r1, r0	@ tmp533, tmp534
 931 027e 1DD1     		bne	.L75	@,
2145:ff.c          **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 932              		.loc 1 2145 0
 933 0280 94F81E32 		ldrb	r3, [r4, #542]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 934 0284 94F81F22 		ldrb	r2, [r4, #543]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 935 0288 1904     		lsls	r1, r3, #16	@ tmp538, fs_23->win,
 936 028a 41EA0260 		orr	r0, r1, r2, lsl #24	@, tmp539, tmp538, fs_23->win,
 937 028e 94F81C22 		ldrb	r2, [r4, #540]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 938 0292 94F81D32 		ldrb	r3, [r4, #541]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 939 0296 1043     		orrs	r0, r0, r2	@, tmp541, tmp539, fs_23->win
2146:ff.c          **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 940              		.loc 1 2146 0
 941 0298 94F81A22 		ldrb	r2, [r4, #538]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
2145:ff.c          **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 942              		.loc 1 2145 0
 943 029c 40EA0321 		orr	r1, r0, r3, lsl #8	@, tmp544, tmp541, fs_23->win,
2146:ff.c          **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 944              		.loc 1 2146 0
 945 02a0 94F81B02 		ldrb	r0, [r4, #539]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
2145:ff.c          **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 946              		.loc 1 2145 0
 947 02a4 E160     		str	r1, [r4, #12]	@ tmp544, fs_23->last_clust
2146:ff.c          **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 948              		.loc 1 2146 0
 949 02a6 1304     		lsls	r3, r2, #16	@ tmp548, fs_23->win,
 950 02a8 43EA0061 		orr	r1, r3, r0, lsl #24	@, tmp549, tmp548, fs_23->win,
 951 02ac 94F81802 		ldrb	r0, [r4, #536]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 952 02b0 94F81922 		ldrb	r2, [r4, #537]	@ zero_extendqisi2	@ fs_23->win, fs_23->win
 953 02b4 0143     		orrs	r1, r1, r0	@, tmp551, tmp549, fs_23->win
 954 02b6 41EA0223 		orr	r3, r1, r2, lsl #8	@, tmp554, tmp551, fs_23->win,
 955 02ba 2361     		str	r3, [r4, #16]	@ tmp554, fs_23->free_clust
 956              	.L75:
2151:ff.c          **** 	fs->id = ++Fsid;		/* File system mount ID */
 957              		.loc 1 2151 0
 958 02bc 1149     		ldr	r1, .L107+16	@ tmp556,
2150:ff.c          **** 	fs->fs_type = fmt;		/* FAT sub-type */
 959              		.loc 1 2150 0
 960 02be 2570     		strb	r5, [r4, #0]	@ fmt, fs_23->fs_type
2151:ff.c          **** 	fs->id = ++Fsid;		/* File system mount ID */
 961              		.loc 1 2151 0
 962 02c0 0888     		ldrh	r0, [r1, #0]	@, Fsid
 963 02c2 421C     		adds	r2, r0, #1	@ tmp558, Fsid,
 964 02c4 93B2     		uxth	r3, r2	@ Fsid.4, tmp558
2152:ff.c          **** 	fs->winsect = 0;		/* Invalidate sector cache */
 965              		.loc 1 2152 0
 966 02c6 0020     		movs	r0, #0	@ tmp562,
2151:ff.c          **** 	fs->id = ++Fsid;		/* File system mount ID */
 967              		.loc 1 2151 0
 968 02c8 0B80     		strh	r3, [r1, #0]	@ movhi	@ Fsid.4, Fsid
 969 02ca E380     		strh	r3, [r4, #6]	@ movhi	@ Fsid.4, fs_23->id
2152:ff.c          **** 	fs->winsect = 0;		/* Invalidate sector cache */
 970              		.loc 1 2152 0
 971 02cc E062     		str	r0, [r4, #44]	@ tmp562, fs_23->winsect
2153:ff.c          **** 	fs->wflag = 0;
 972              		.loc 1 2153 0
ARM GAS  /tmp/ccKU0f2P.s 			page 59


 973 02ce 2071     		strb	r0, [r4, #4]	@ tmp562, fs_23->wflag
2161:ff.c          **** 	return FR_OK;
 974              		.loc 1 2161 0
 975 02d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 976              	.LVL111:
 977              	.L106:
2038:ff.c          **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 978              		.loc 1 2038 0
 979 02d4 0C20     		movs	r0, #12	@ D.4884,
 980 02d6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 981              	.LVL112:
 982              	.L79:
2047:ff.c          **** 			return FR_OK;				/* The file system object is valid */
 983              		.loc 1 2047 0
 984 02da 2846     		mov	r0, r5	@ D.4884, chk_wp
 985              	.LVL113:
 986 02dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 987              	.LVL114:
 988              	.L81:
2058:ff.c          **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 989              		.loc 1 2058 0
 990 02e0 0320     		movs	r0, #3	@ D.4884,
 991              	.LVL115:
 992 02e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 993              	.LVL116:
 994              	.L82:
2060:ff.c          **** 		return FR_WRITE_PROTECTED;
 995              		.loc 1 2060 0
 996 02e6 0A20     		movs	r0, #10	@ D.4884,
 997              	.LVL117:
 998 02e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 999              	.LVL118:
 1000              	.L84:
2078:ff.c          **** 	if (fmt == 3) return FR_DISK_ERR;
 1001              		.loc 1 2078 0
 1002 02ec 0120     		movs	r0, #1	@ D.4884,
 1003              	.LVL119:
2162:ff.c          **** }
 1004              		.loc 1 2162 0
 1005 02ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1006              	.L108:
 1007 02f2 00BF     		.align	2
 1008              	.L107:
 1009 02f4 00000000 		.word	.LANCHOR0
 1010 02f8 55AAFFFF 		.word	-21931
 1011 02fc 52526141 		.word	1096897106
 1012 0300 72724161 		.word	1631679090
 1013 0304 00000000 		.word	.LANCHOR1
 1014              		.cfi_endproc
 1015              	.LFE20:
 1016              		.size	chk_mounted, .-chk_mounted
 1017              		.section	.text.sync,"ax",%progbits
 1018              		.align	1
 1019              		.thumb
 1020              		.thumb_func
 1021              		.type	sync, %function
 1022              	sync:
ARM GAS  /tmp/ccKU0f2P.s 			page 60


 1023              	.LFB5:
 764:ff.c          **** {
 1024              		.loc 1 764 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              	.LVL120:
 1029 0000 70B5     		push	{r4, r5, r6, lr}	@
 1030              	.LCFI6:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 4, -16
 1033              		.cfi_offset 5, -12
 1034              		.cfi_offset 6, -8
 1035              		.cfi_offset 14, -4
 768:ff.c          **** 	res = move_window(fs, 0);
 1036              		.loc 1 768 0
 1037 0002 0021     		movs	r1, #0	@,
 764:ff.c          **** {
 1038              		.loc 1 764 0
 1039 0004 0446     		mov	r4, r0	@ fs, fs
 768:ff.c          **** 	res = move_window(fs, 0);
 1040              		.loc 1 768 0
 1041 0006 FFF7FEFF 		bl	move_window	@
 1042              	.LVL121:
 1043 000a 0546     		mov	r5, r0	@ tmp163,
 1044              	.LVL122:
 769:ff.c          **** 	if (res == FR_OK) {
 1045              		.loc 1 769 0
 1046 000c 002D     		cmp	r5, #0	@ tmp163
 1047 000e 51D1     		bne	.L110	@
 771:ff.c          **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 1048              		.loc 1 771 0
 1049 0010 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2	@ fs_2(D)->fs_type, fs_2(D)->fs_type
 1050 0012 032B     		cmp	r3, #3	@ fs_2(D)->fs_type,
 1051 0014 46D1     		bne	.L111	@,
 771:ff.c          **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 1052              		.loc 1 771 0 is_stmt 0 discriminator 1
 1053 0016 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2	@ fs_2(D)->fsi_flag, fs_2(D)->fsi_flag
 1054              	.LVL123:
 1055 0018 0028     		cmp	r0, #0	@ fs_2(D)->fsi_flag
 1056 001a 43D0     		beq	.L111	@
 774:ff.c          **** 			mem_set(fs->win, 0, 512);
 1057              		.loc 1 774 0 is_stmt 1
 1058 001c 04F13006 		add	r6, r4, #48	@ D.5533, fs,
 1059 0020 3046     		mov	r0, r6	@, D.5533
 1060 0022 2946     		mov	r1, r5	@, tmp163
 1061 0024 4FF40072 		mov	r2, #512	@,
 772:ff.c          **** 			fs->winsect = 0;
 1062              		.loc 1 772 0
 1063 0028 E562     		str	r5, [r4, #44]	@ tmp163, fs_2(D)->winsect
 774:ff.c          **** 			mem_set(fs->win, 0, 512);
 1064              		.loc 1 774 0
 1065 002a FFF7FEFF 		bl	mem_set	@
 1066              	.LVL124:
 776:ff.c          **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1067              		.loc 1 776 0
 1068 002e 5223     		movs	r3, #82	@ tmp171,
ARM GAS  /tmp/ccKU0f2P.s 			page 61


 775:ff.c          **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1069              		.loc 1 775 0
 1070 0030 5521     		movs	r1, #85	@ tmp167,
 1071 0032 AA22     		movs	r2, #170	@ tmp169,
 776:ff.c          **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1072              		.loc 1 776 0
 1073 0034 84F83030 		strb	r3, [r4, #48]	@ tmp171, fs_2(D)->win
 1074 0038 84F83130 		strb	r3, [r4, #49]	@ tmp171, fs_2(D)->win
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1075              		.loc 1 778 0
 1076 003c 2369     		ldr	r3, [r4, #16]	@ D.5534, fs_2(D)->free_clust
 775:ff.c          **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1077              		.loc 1 775 0
 1078 003e 84F82E12 		strb	r1, [r4, #558]	@ tmp167, fs_2(D)->win
 776:ff.c          **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1079              		.loc 1 776 0
 1080 0042 6120     		movs	r0, #97	@ tmp175,
 777:ff.c          **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1081              		.loc 1 777 0
 1082 0044 7221     		movs	r1, #114	@ tmp179,
 775:ff.c          **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1083              		.loc 1 775 0
 1084 0046 84F82F22 		strb	r2, [r4, #559]	@ tmp169, fs_2(D)->win
 776:ff.c          **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1085              		.loc 1 776 0
 1086 004a 4122     		movs	r2, #65	@ tmp177,
 1087 004c 84F83200 		strb	r0, [r4, #50]	@ tmp175, fs_2(D)->win
 1088 0050 84F83320 		strb	r2, [r4, #51]	@ tmp177, fs_2(D)->win
 777:ff.c          **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1089              		.loc 1 777 0
 1090 0054 84F81412 		strb	r1, [r4, #532]	@ tmp179, fs_2(D)->win
 1091 0058 84F81512 		strb	r1, [r4, #533]	@ tmp179, fs_2(D)->win
 1092 005c 84F81622 		strb	r2, [r4, #534]	@ tmp177, fs_2(D)->win
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1093              		.loc 1 778 0
 1094 0060 190E     		lsrs	r1, r3, #24	@ tmp193, D.5534,
 1095 0062 1A0C     		lsrs	r2, r3, #16	@ tmp191, D.5534,
 777:ff.c          **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1096              		.loc 1 777 0
 1097 0064 84F81702 		strb	r0, [r4, #535]	@ tmp175, fs_2(D)->win
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1098              		.loc 1 778 0
 1099 0068 84F81832 		strb	r3, [r4, #536]	@ D.5534, fs_2(D)->win
 1100 006c C3F30720 		ubfx	r0, r3, #8, #8	@ tmp189, D.5534,,
 779:ff.c          **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1101              		.loc 1 779 0
 1102 0070 E368     		ldr	r3, [r4, #12]	@ D.5543, fs_2(D)->last_clust
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1103              		.loc 1 778 0
 1104 0072 84F81902 		strb	r0, [r4, #537]	@ tmp189, fs_2(D)->win
 1105 0076 84F81A22 		strb	r2, [r4, #538]	@ tmp191, fs_2(D)->win
 779:ff.c          **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1106              		.loc 1 779 0
 1107 007a C3F30720 		ubfx	r0, r3, #8, #8	@ tmp197, D.5543,,
 1108 007e 1A0C     		lsrs	r2, r3, #16	@ tmp199, D.5543,
 778:ff.c          **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1109              		.loc 1 778 0
ARM GAS  /tmp/ccKU0f2P.s 			page 62


 1110 0080 84F81B12 		strb	r1, [r4, #539]	@ tmp193, fs_2(D)->win
 779:ff.c          **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1111              		.loc 1 779 0
 1112 0084 190E     		lsrs	r1, r3, #24	@ tmp201, D.5543,
 1113 0086 84F81C32 		strb	r3, [r4, #540]	@ D.5543, fs_2(D)->win
 1114 008a 84F81D02 		strb	r0, [r4, #541]	@ tmp197, fs_2(D)->win
 1115 008e 84F81E22 		strb	r2, [r4, #542]	@ tmp199, fs_2(D)->win
 1116 0092 84F81F12 		strb	r1, [r4, #543]	@ tmp201, fs_2(D)->win
 781:ff.c          **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 1117              		.loc 1 781 0
 1118 0096 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_2(D)->drv
 1119 0098 6269     		ldr	r2, [r4, #20]	@, fs_2(D)->fsi_sector
 1120 009a 3146     		mov	r1, r6	@, D.5533
 1121 009c 0123     		movs	r3, #1	@,
 1122 009e FFF7FEFF 		bl	disk_write	@
 1123              	.LVL125:
 782:ff.c          **** 			fs->fsi_flag = 0;
 1124              		.loc 1 782 0
 1125 00a2 6571     		strb	r5, [r4, #5]	@ tmp163, fs_2(D)->fsi_flag
 1126              	.L111:
 785:ff.c          **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 1127              		.loc 1 785 0
 1128 00a4 0021     		movs	r1, #0	@,
 1129 00a6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2	@, fs_2(D)->drv
 1130 00a8 0A46     		mov	r2, r1	@,
 1131 00aa FFF7FEFF 		bl	disk_ioctl	@
 1132              	.LVL126:
 1133 00ae 0030     		adds	r0, r0, #0	@ res,,
 1134 00b0 18BF     		it	ne
 1135 00b2 0120     		movne	r0, #1	@ res,
 1136              	.L110:
 1137              	.LVL127:
 790:ff.c          **** }
 1138              		.loc 1 790 0
 1139 00b4 70BD     		pop	{r4, r5, r6, pc}	@
 1140              		.cfi_endproc
 1141              	.LFE5:
 1142              		.size	sync, .-sync
 1143              		.section	.text.chk_chr.constprop.1,"ax",%progbits
 1144              		.align	1
 1145              		.thumb
 1146              		.thumb_func
 1147              		.type	chk_chr.constprop.1, %function
 1148              	chk_chr.constprop.1:
 1149              	.LFB32:
 565:ff.c          **** int chk_chr (const char* str, int chr) {
 1150              		.loc 1 565 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              		@ link register save eliminated.
 1155              	.LVL128:
 1156 0000 034A     		ldr	r2, .L122	@ ivtmp.160,
 1157              	.LVL129:
 1158              	.L117:
 566:ff.c          **** 	while (*str && *str != chr) str++;
 1159              		.loc 1 566 0
ARM GAS  /tmp/ccKU0f2P.s 			page 63


 1160 0002 12F8013F 		ldrb	r3, [r2, #1]!	@ zero_extendqisi2	@ D.6153, MEM[base: D.6307_13, offset: 0B]
 1161 0006 0BB1     		cbz	r3, .L116	@ D.6153,
 1162 0008 8342     		cmp	r3, r0	@ D.6153, chr
 1163 000a FAD1     		bne	.L117	@,
 1164              	.L116:
 568:ff.c          **** }
 1165              		.loc 1 568 0
 1166 000c 1846     		mov	r0, r3	@, D.6153
 1167              	.LVL130:
 1168 000e 7047     		bx	lr	@
 1169              	.L123:
 1170              		.align	2
 1171              	.L122:
 1172 0010 FFFFFFFF 		.word	.LC0-1
 1173              		.cfi_endproc
 1174              	.LFE32:
 1175              		.size	chk_chr.constprop.1, .-chk_chr.constprop.1
 1176              		.section	.text.create_name,"ax",%progbits
 1177              		.align	1
 1178              		.thumb
 1179              		.thumb_func
 1180              		.type	create_name, %function
 1181              	create_name:
 1182              	.LFB16:
1627:ff.c          **** {
 1183              		.loc 1 1627 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 0
 1186              		@ frame_needed = 0, uses_anonymous_args = 0
 1187              	.LVL131:
 1188 0000 0A68     		ldr	r2, [r1, #0]	@ ivtmp.178, *path_15(D)
 1189 0002 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}	@
 1190              	.LCFI7:
 1191              		.cfi_def_cfa_offset 40
 1192              		.cfi_offset 3, -40
 1193              		.cfi_offset 4, -36
 1194              		.cfi_offset 5, -32
 1195              		.cfi_offset 6, -28
 1196              		.cfi_offset 7, -24
 1197              		.cfi_offset 8, -20
 1198              		.cfi_offset 9, -16
 1199              		.cfi_offset 10, -12
 1200              		.cfi_offset 11, -8
 1201              		.cfi_offset 14, -4
1627:ff.c          **** {
 1202              		.loc 1 1627 0
 1203 0006 8B46     		mov	fp, r1	@ path, path
 1204              	.LVL132:
 1205              	.L160:
1759:ff.c          **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 1206              		.loc 1 1759 0 discriminator 1
 1207 0008 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2	@ D.5286, MEM[base: p_12, offset: 0B]
 1208 000a 2F2B     		cmp	r3, #47	@ D.5286,
 1209 000c 9146     		mov	r9, r2	@ p, ivtmp.178
 1210              	.LVL133:
 1211 000e 02F10102 		add	r2, r2, #1	@ ivtmp.178, p,
 1212              	.LVL134:
ARM GAS  /tmp/ccKU0f2P.s 			page 64


 1213 0012 F9D0     		beq	.L160	@,
1759:ff.c          **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 1214              		.loc 1 1759 0 is_stmt 0 discriminator 3
 1215 0014 5C2B     		cmp	r3, #92	@ D.5286,
 1216 0016 F7D0     		beq	.L160	@,
1760:ff.c          **** 	sfn = dj->fn;
 1217              		.loc 1 1760 0 is_stmt 1
 1218 0018 8769     		ldr	r7, [r0, #24]	@ sfn, dj_19(D)->fn
 1219              	.LVL135:
1761:ff.c          **** 	mem_set(sfn, ' ', 11);
 1220              		.loc 1 1761 0
 1221 001a 2021     		movs	r1, #32	@,
 1222              	.LVL136:
 1223 001c 3846     		mov	r0, r7	@, sfn
 1224              	.LVL137:
 1225 001e 0B22     		movs	r2, #11	@,
 1226 0020 FFF7FEFF 		bl	mem_set	@
 1227              	.LVL138:
1762:ff.c          **** 	si = i = b = 0; ni = 8;
 1228              		.loc 1 1762 0
 1229 0024 0026     		movs	r6, #0	@ i,
 1230 0026 B246     		mov	sl, r6	@ si, i
 1231 0028 4FF00808 		mov	r8, #8	@ ni,
 1232 002c 3546     		mov	r5, r6	@ b, i
 1233              	.LVL139:
 1234              	.L162:
1777:ff.c          **** 		c = (BYTE)p[si++];
 1235              		.loc 1 1777 0
 1236 002e 19F80A40 		ldrb	r4, [r9, sl]	@ zero_extendqisi2	@ c, MEM[base: p_85, index: si_10, offset: 0B]
 1237              	.LVL140:
1778:ff.c          **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 1238              		.loc 1 1778 0
 1239 0032 202C     		cmp	r4, #32	@ c,
1777:ff.c          **** 		c = (BYTE)p[si++];
 1240              		.loc 1 1777 0
 1241 0034 0AF1010A 		add	sl, sl, #1	@ si, si,
 1242              	.LVL141:
1778:ff.c          **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 1243              		.loc 1 1778 0
 1244 0038 28D9     		bls	.L128	@,
1778:ff.c          **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 1245              		.loc 1 1778 0 is_stmt 0 discriminator 1
 1246 003a 2F2C     		cmp	r4, #47	@ c,
 1247 003c 26D0     		beq	.L128	@,
 1248 003e 5C2C     		cmp	r4, #92	@ c,
 1249 0040 24D0     		beq	.L128	@,
1779:ff.c          **** 		if (c == '.' || i >= ni) {
 1250              		.loc 1 1779 0 is_stmt 1
 1251 0042 2E2C     		cmp	r4, #46	@ c,
 1252 0044 46D0     		beq	.L129	@,
1779:ff.c          **** 		if (c == '.' || i >= ni) {
 1253              		.loc 1 1779 0 is_stmt 0 discriminator 1
 1254 0046 4645     		cmp	r6, r8	@ i, ni
 1255 0048 02D3     		bcc	.L130	@,
 1256              	.LVL142:
 1257              	.L134:
1780:ff.c          **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
ARM GAS  /tmp/ccKU0f2P.s 			page 65


 1258              		.loc 1 1780 0 is_stmt 1
 1259 004a 0620     		movs	r0, #6	@ D.5298,
 1260 004c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}	@
 1261              	.LVL143:
 1262              	.L130:
1784:ff.c          **** 		if (c >= 0x80) {				/* Extended char? */
 1263              		.loc 1 1784 0
 1264 0050 2006     		lsls	r0, r4, #24	@, c,
 1265 0052 04D5     		bpl	.L133	@,
1787:ff.c          **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 1266              		.loc 1 1787 0
 1267 0054 803C     		subs	r4, r4, #128	@ D.5303, c,
 1268 0056 2448     		ldr	r0, .L164	@ tmp166,
 1269 0058 045D     		ldrb	r4, [r0, r4]	@ zero_extendqisi2	@ c, excvt
1785:ff.c          **** 			b |= 3;						/* Eliminate NT flag */
 1270              		.loc 1 1785 0
 1271 005a 45F00305 		orr	r5, r5, #3	@ b, b,
 1272              	.LVL144:
 1273              	.L133:
1801:ff.c          **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 1274              		.loc 1 1801 0
 1275 005e 2046     		mov	r0, r4	@, c
 1276 0060 FFF7FEFF 		bl	chk_chr.constprop.1	@
 1277              	.LVL145:
 1278 0064 0028     		cmp	r0, #0	@
 1279 0066 F0D1     		bne	.L134	@
1803:ff.c          **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 1280              		.loc 1 1803 0
 1281 0068 A4F14101 		sub	r1, r4, #65	@ tmp168, c,
 1282 006c 1929     		cmp	r1, #25	@ tmp168,
 1283 006e 02D8     		bhi	.L135	@,
1804:ff.c          **** 				b |= 2;
 1284              		.loc 1 1804 0
 1285 0070 45F00205 		orr	r5, r5, #2	@ b, b,
 1286              	.LVL146:
 1287 0074 07E0     		b	.L136	@
 1288              	.L135:
1806:ff.c          **** 				if (IsLower(c)) {		/* ASCII small capital? */
 1289              		.loc 1 1806 0
 1290 0076 A4F16103 		sub	r3, r4, #97	@ tmp171, c,
 1291 007a 192B     		cmp	r3, #25	@ tmp171,
 1292 007c 03D8     		bhi	.L136	@,
1807:ff.c          **** 					b |= 1; c -= 0x20;
 1293              		.loc 1 1807 0
 1294 007e 203C     		subs	r4, r4, #32	@ tmp173, c,
 1295              	.LVL147:
 1296 0080 45F00105 		orr	r5, r5, #1	@ b, b,
 1297              	.LVL148:
 1298 0084 E4B2     		uxtb	r4, r4	@ c, tmp173
 1299              	.LVL149:
 1300              	.L136:
1810:ff.c          **** 			sfn[i++] = c;
 1301              		.loc 1 1810 0
 1302 0086 BC55     		strb	r4, [r7, r6]	@ c, *D.5308_41
 1303 0088 0136     		adds	r6, r6, #1	@ i, i,
 1304              	.LVL150:
 1305 008a D0E7     		b	.L162	@
ARM GAS  /tmp/ccKU0f2P.s 			page 66


 1306              	.LVL151:
 1307              	.L128:
1813:ff.c          **** 	*path = &p[si];						/* Return pointer to the next segment */
 1308              		.loc 1 1813 0
 1309 008c 09EB0A02 		add	r2, r9, sl	@ tmp175, p, si
 1310 0090 CBF80020 		str	r2, [fp, #0]	@ tmp175, *path_15(D)
1814:ff.c          **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 1311              		.loc 1 1814 0
 1312 0094 202C     		cmp	r4, #32	@ c,
 1313 0096 94BF     		ite	ls	@
 1314 0098 0424     		movls	r4, #4	@, c,
 1315 009a 0024     		movhi	r4, #0	@, c,
 1316              	.LVL152:
1816:ff.c          **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 1317              		.loc 1 1816 0
 1318 009c 002E     		cmp	r6, #0	@ i
 1319 009e D4D0     		beq	.L134	@
1817:ff.c          **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 1320              		.loc 1 1817 0
 1321 00a0 3878     		ldrb	r0, [r7, #0]	@ zero_extendqisi2	@ *sfn_20, *sfn_20
 1322 00a2 E528     		cmp	r0, #229	@ *sfn_20,
 1323 00a4 01D1     		bne	.L138	@,
1817:ff.c          **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 1324              		.loc 1 1817 0 is_stmt 0 discriminator 1
 1325 00a6 0521     		movs	r1, #5	@ tmp177,
 1326 00a8 3970     		strb	r1, [r7, #0]	@ tmp177, *sfn_20
 1327              	.L138:
1819:ff.c          **** 	if (ni == 8) b <<= 2;
 1328              		.loc 1 1819 0 is_stmt 1
 1329 00aa B8F1080F 		cmp	r8, #8	@ ni,
 1330 00ae 01D1     		bne	.L139	@,
1819:ff.c          **** 	if (ni == 8) b <<= 2;
 1331              		.loc 1 1819 0 is_stmt 0 discriminator 1
 1332 00b0 AB00     		lsls	r3, r5, #2	@ tmp179, b,
 1333 00b2 DDB2     		uxtb	r5, r3	@ b, tmp179
 1334              	.LVL153:
 1335              	.L139:
1820:ff.c          **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 1336              		.loc 1 1820 0 is_stmt 1
 1337 00b4 05F00302 		and	r2, r5, #3	@ tmp181, b,
 1338 00b8 012A     		cmp	r2, #1	@ tmp181,
1821:ff.c          **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 1339              		.loc 1 1821 0
 1340 00ba 05F00C05 		and	r5, r5, #12	@ tmp184, b,
 1341              	.LVL154:
1820:ff.c          **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 1342              		.loc 1 1820 0
 1343 00be 08BF     		it	eq
 1344 00c0 44F01004 		orreq	r4, r4, #16	@ c, c,
 1345              	.LVL155:
1821:ff.c          **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 1346              		.loc 1 1821 0
 1347 00c4 042D     		cmp	r5, #4	@ tmp184,
 1348 00c6 08BF     		it	eq
 1349 00c8 44F00804 		orreq	r4, r4, #8	@ c, c,
 1350              	.LVL156:
1823:ff.c          **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
ARM GAS  /tmp/ccKU0f2P.s 			page 67


 1351              		.loc 1 1823 0
 1352 00cc FC72     		strb	r4, [r7, #11]	@ c, MEM[(BYTE *)sfn_20 + 11B]
1825:ff.c          **** 	return FR_OK;
 1353              		.loc 1 1825 0
 1354 00ce 0020     		movs	r0, #0	@ D.5298,
 1355 00d0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}	@
 1356              	.LVL157:
 1357              	.L129:
1780:ff.c          **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 1358              		.loc 1 1780 0
 1359 00d4 B8F1080F 		cmp	r8, #8	@ ni,
 1360 00d8 B7D1     		bne	.L134	@,
 1361              	.L163:
 1362              	.LVL158:
1782:ff.c          **** 			b <<= 2; continue;
 1363              		.loc 1 1782 0
 1364 00da AD00     		lsls	r5, r5, #2	@ tmp163, b,
 1365              	.LVL159:
1781:ff.c          **** 			i = 8; ni = 11;
 1366              		.loc 1 1781 0
 1367 00dc 4646     		mov	r6, r8	@ i, ni
1782:ff.c          **** 			b <<= 2; continue;
 1368              		.loc 1 1782 0
 1369 00de EDB2     		uxtb	r5, r5	@ b, tmp163
 1370              	.LVL160:
1781:ff.c          **** 			i = 8; ni = 11;
 1371              		.loc 1 1781 0
 1372 00e0 4FF00B08 		mov	r8, #11	@ ni,
1782:ff.c          **** 			b <<= 2; continue;
 1373              		.loc 1 1782 0
 1374 00e4 A3E7     		b	.L162	@
 1375              	.L165:
 1376 00e6 00BF     		.align	2
 1377              	.L164:
 1378 00e8 00000000 		.word	.LANCHOR2
 1379              		.cfi_endproc
 1380              	.LFE16:
 1381              		.size	create_name, .-create_name
 1382              		.section	.text.mem_cmp.constprop.2,"ax",%progbits
 1383              		.align	1
 1384              		.thumb
 1385              		.thumb_func
 1386              		.type	mem_cmp.constprop.2, %function
 1387              	mem_cmp.constprop.2:
 1388              	.LFB31:
 555:ff.c          **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 1389              		.loc 1 555 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL161:
 1394 0000 10B5     		push	{r4, lr}	@
 1395              	.LCFI8:
 1396              		.cfi_def_cfa_offset 8
 1397              		.cfi_offset 4, -8
 1398              		.cfi_offset 14, -4
 555:ff.c          **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
ARM GAS  /tmp/ccKU0f2P.s 			page 68


 1399              		.loc 1 555 0
 1400 0002 0023     		movs	r3, #0	@ ivtmp.184,
 1401              	.L167:
 559:ff.c          **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 1402              		.loc 1 559 0
 1403 0004 C45C     		ldrb	r4, [r0, r3]	@ zero_extendqisi2	@ MEM[base: dst_13(D), index: ivtmp.184_3, offset: 0B], MEM[b
 1404 0006 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ MEM[base: src_14(D), index: ivtmp.184_3, offset: 0B], MEM[b
 1405              	.LVL162:
 1406 0008 0133     		adds	r3, r3, #1	@ ivtmp.184, ivtmp.184,
 1407 000a A21A     		subs	r2, r4, r2	@ r, MEM[base: dst_13(D), index: ivtmp.184_3, offset: 0B], MEM[base: src_14(D), in
 1408              	.LVL163:
 1409 000c 01D1     		bne	.L168	@,
 1410              	.L169:
 1411              	.LVL164:
 1412 000e 0B2B     		cmp	r3, #11	@ ivtmp.184,
 1413 0010 F8D1     		bne	.L167	@,
 1414              	.LVL165:
 1415              	.L168:
 561:ff.c          **** }
 1416              		.loc 1 561 0
 1417 0012 1046     		mov	r0, r2	@, r
 1418              	.LVL166:
 1419 0014 10BD     		pop	{r4, pc}	@
 1420              		.cfi_endproc
 1421              	.LFE31:
 1422              		.size	mem_cmp.constprop.2, .-mem_cmp.constprop.2
 1423              		.section	.text.clust2sect,"ax",%progbits
 1424              		.align	1
 1425              		.global	clust2sect
 1426              		.thumb
 1427              		.thumb_func
 1428              		.type	clust2sect, %function
 1429              	clust2sect:
 1430              	.LFB6:
 805:ff.c          **** {
 1431              		.loc 1 805 0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
 1435              		@ link register save eliminated.
 1436              	.LVL167:
 807:ff.c          **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1437              		.loc 1 807 0
 1438 0000 8369     		ldr	r3, [r0, #24]	@ fs_4(D)->n_fatent, fs_4(D)->n_fatent
 806:ff.c          **** 	clst -= 2;
 1439              		.loc 1 806 0
 1440 0002 0239     		subs	r1, r1, #2	@ clst, clst,
 1441              	.LVL168:
 807:ff.c          **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1442              		.loc 1 807 0
 1443 0004 9A1E     		subs	r2, r3, #2	@ tmp145, fs_4(D)->n_fatent,
 1444 0006 9142     		cmp	r1, r2	@ clst, tmp145
 1445 0008 04D2     		bcs	.L176	@,
 808:ff.c          **** 	return clst * fs->csize + fs->database;
 1446              		.loc 1 808 0
 1447 000a 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2	@ fs_4(D)->csize, fs_4(D)->csize
 1448 000c 806A     		ldr	r0, [r0, #40]	@ fs_4(D)->database, fs_4(D)->database
ARM GAS  /tmp/ccKU0f2P.s 			page 69


 1449              	.LVL169:
 1450 000e 02FB0100 		mla	r0, r2, r1, r0	@ D.6027, fs_4(D)->csize, clst, fs_4(D)->database
 1451 0012 7047     		bx	lr	@
 1452              	.LVL170:
 1453              	.L176:
 807:ff.c          **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1454              		.loc 1 807 0
 1455 0014 0020     		movs	r0, #0	@ D.6027,
 1456              	.LVL171:
 809:ff.c          **** }
 1457              		.loc 1 809 0
 1458 0016 7047     		bx	lr	@
 1459              		.cfi_endproc
 1460              	.LFE6:
 1461              		.size	clust2sect, .-clust2sect
 1462              		.section	.text.get_fat,"ax",%progbits
 1463              		.align	1
 1464              		.global	get_fat
 1465              		.thumb
 1466              		.thumb_func
 1467              		.type	get_fat, %function
 1468              	get_fat:
 1469              	.LFB7:
 823:ff.c          **** {
 1470              		.loc 1 823 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL172:
 828:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1475              		.loc 1 828 0
 1476 0000 0129     		cmp	r1, #1	@ clst,
 823:ff.c          **** {
 1477              		.loc 1 823 0
 1478 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 1479              	.LCFI9:
 1480              		.cfi_def_cfa_offset 24
 1481              		.cfi_offset 3, -24
 1482              		.cfi_offset 4, -20
 1483              		.cfi_offset 5, -16
 1484              		.cfi_offset 6, -12
 1485              		.cfi_offset 7, -8
 1486              		.cfi_offset 14, -4
 823:ff.c          **** {
 1487              		.loc 1 823 0
 1488 0004 0446     		mov	r4, r0	@ fs, fs
 1489 0006 0D46     		mov	r5, r1	@ clst, clst
 828:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1490              		.loc 1 828 0
 1491 0008 59D9     		bls	.L186	@,
 828:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1492              		.loc 1 828 0 is_stmt 0 discriminator 1
 1493 000a 8369     		ldr	r3, [r0, #24]	@ fs_4(D)->n_fatent, fs_4(D)->n_fatent
 1494 000c 9942     		cmp	r1, r3	@ clst, fs_4(D)->n_fatent
 1495 000e 56D2     		bcs	.L186	@,
 831:ff.c          **** 	switch (fs->fs_type) {
 1496              		.loc 1 831 0 is_stmt 1
ARM GAS  /tmp/ccKU0f2P.s 			page 70


 1497 0010 0178     		ldrb	r1, [r0, #0]	@ zero_extendqisi2	@ fs_4(D)->fs_type, fs_4(D)->fs_type
 1498              	.LVL173:
 1499 0012 0229     		cmp	r1, #2	@ fs_4(D)->fs_type,
 1500 0014 28D0     		beq	.L180	@,
 1501 0016 0329     		cmp	r1, #3	@ fs_4(D)->fs_type,
 1502 0018 37D0     		beq	.L181	@,
 1503 001a 0129     		cmp	r1, #1	@ fs_4(D)->fs_type,
 1504 001c 51D1     		bne	.L188	@,
 1505              	.LVL174:
 834:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1506              		.loc 1 834 0
 1507 001e 026A     		ldr	r2, [r0, #32]	@ fs_4(D)->fatbase, fs_4(D)->fatbase
 833:ff.c          **** 		bc = (UINT)clst; bc += bc / 2;
 1508              		.loc 1 833 0
 1509 0020 05EB5506 		add	r6, r5, r5, lsr #1	@, bc, clst, clst,
 1510              	.LVL175:
 834:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1511              		.loc 1 834 0
 1512 0024 02EB5621 		add	r1, r2, r6, lsr #9	@,, fs_4(D)->fatbase, bc,
 1513 0028 FFF7FEFF 		bl	move_window	@
 1514              	.LVL176:
 1515 002c 0028     		cmp	r0, #0	@
 1516 002e 48D1     		bne	.L188	@
 1517              	.L182:
 835:ff.c          **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1518              		.loc 1 835 0
 1519 0030 F005     		lsls	r0, r6, #23	@ tmp206, bc,
 836:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1520              		.loc 1 836 0
 1521 0032 236A     		ldr	r3, [r4, #32]	@ fs_4(D)->fatbase, fs_4(D)->fatbase
 835:ff.c          **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1522              		.loc 1 835 0
 1523 0034 04EBD057 		add	r7, r4, r0, lsr #23	@, tmp207, fs, tmp206,
 1524 0038 0136     		adds	r6, r6, #1	@ bc, bc,
 1525              	.LVL177:
 836:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1526              		.loc 1 836 0
 1527 003a 2046     		mov	r0, r4	@, fs
 1528 003c 03EB5621 		add	r1, r3, r6, lsr #9	@,, fs_4(D)->fatbase, bc,
 835:ff.c          **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1529              		.loc 1 835 0
 1530 0040 97F83070 		ldrb	r7, [r7, #48]	@ zero_extendqisi2	@ D.5976, fs_4(D)->win
 1531              	.LVL178:
 836:ff.c          **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1532              		.loc 1 836 0
 1533 0044 FFF7FEFF 		bl	move_window	@
 1534              	.LVL179:
 1535 0048 0028     		cmp	r0, #0	@
 1536 004a 3AD1     		bne	.L188	@
 837:ff.c          **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1537              		.loc 1 837 0
 1538 004c F605     		lsls	r6, r6, #23	@ tmp213, bc,
 1539              	.LVL180:
 1540 004e 04EBD654 		add	r4, r4, r6, lsr #23	@, tmp214, fs, tmp213,
 1541              	.LVL181:
 838:ff.c          **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1542              		.loc 1 838 0
ARM GAS  /tmp/ccKU0f2P.s 			page 71


 1543 0052 EB07     		lsls	r3, r5, #31	@, clst,
 837:ff.c          **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1544              		.loc 1 837 0
 1545 0054 94F83010 		ldrb	r1, [r4, #48]	@ zero_extendqisi2	@ tmp215, fs_4(D)->win
 1546 0058 47EA0122 		orr	r2, r7, r1, lsl #8	@, wc, D.5976, tmp215,
 1547              	.LVL182:
 838:ff.c          **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1548              		.loc 1 838 0
 1549 005c 01D5     		bpl	.L184	@,
 838:ff.c          **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1550              		.loc 1 838 0 is_stmt 0 discriminator 1
 1551 005e 1009     		lsrs	r0, r2, #4	@ D.5966, wc,
 1552 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1553              	.L184:
 838:ff.c          **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1554              		.loc 1 838 0 discriminator 2
 1555 0062 1005     		lsls	r0, r2, #20	@ tmp218, wc,
 1556 0064 000D     		lsrs	r0, r0, #20	@ D.5966, tmp218,
 1557 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1558              	.LVL183:
 1559              	.L180:
 841:ff.c          **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 1560              		.loc 1 841 0 is_stmt 1
 1561 0068 026A     		ldr	r2, [r0, #32]	@ fs_4(D)->fatbase, fs_4(D)->fatbase
 1562 006a 02EB1521 		add	r1, r2, r5, lsr #8	@,, fs_4(D)->fatbase, clst,
 1563 006e FFF7FEFF 		bl	move_window	@
 1564              	.LVL184:
 1565 0072 30BB     		cbnz	r0, .L188	@,
 842:ff.c          **** 		p = &fs->win[clst * 2 % SS(fs)];
 1566              		.loc 1 842 0
 1567 0074 2D06     		lsls	r5, r5, #24	@ tmp224, clst,
 1568              	.LVL185:
 1569 0076 ED0D     		lsrs	r5, r5, #23	@ D.5992, tmp224,
 1570              	.LVL186:
 843:ff.c          **** 		return LD_WORD(p);
 1571              		.loc 1 843 0
 1572 0078 6319     		adds	r3, r4, r5	@ tmp225, fs, D.5992
 1573 007a 6419     		adds	r4, r4, r5	@ tmp229, fs, D.5992
 1574              	.LVL187:
 1575 007c 93F83010 		ldrb	r1, [r3, #48]	@ zero_extendqisi2	@ tmp227, MEM[(BYTE *)fs_4(D)].win
 1576 0080 94F83100 		ldrb	r0, [r4, #49]	@ zero_extendqisi2	@ MEM[(BYTE *)p_39 + 1B], MEM[(BYTE *)p_39 + 1B]
 1577 0084 41EA0020 		orr	r0, r1, r0, lsl #8	@, D.5966, tmp227, MEM[(BYTE *)p_39 + 1B],
 1578 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1579              	.LVL188:
 1580              	.L181:
 846:ff.c          **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 1581              		.loc 1 846 0
 1582 008a 036A     		ldr	r3, [r0, #32]	@ fs_4(D)->fatbase, fs_4(D)->fatbase
 1583 008c 03EBD511 		add	r1, r3, r5, lsr #7	@,, fs_4(D)->fatbase, clst,
 1584 0090 FFF7FEFF 		bl	move_window	@
 1585              	.LVL189:
 1586 0094 A8B9     		cbnz	r0, .L188	@,
 847:ff.c          **** 		p = &fs->win[clst * 4 % SS(fs)];
 1587              		.loc 1 847 0
 1588 0096 6D06     		lsls	r5, r5, #25	@ tmp239, clst,
 1589              	.LVL190:
 1590 0098 ED0D     		lsrs	r5, r5, #23	@ D.6007, tmp239,
ARM GAS  /tmp/ccKU0f2P.s 			page 72


 1591 009a 05F13001 		add	r1, r5, #48	@ tmp240, D.6007,
 1592 009e 6318     		adds	r3, r4, r1	@ p, fs, tmp240
 1593              	.LVL191:
 848:ff.c          **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1594              		.loc 1 848 0
 1595 00a0 6419     		adds	r4, r4, r5	@ tmp249, fs, D.6007
 1596              	.LVL192:
 1597 00a2 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2	@ MEM[(BYTE *)p_56 + 3B], MEM[(BYTE *)p_56 + 3B]
 1598 00a4 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2	@ MEM[(BYTE *)p_56 + 2B], MEM[(BYTE *)p_56 + 2B]
 1599 00a6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2	@ MEM[(BYTE *)p_56 + 1B], MEM[(BYTE *)p_56 + 1B]
 1600              	.LVL193:
 1601 00a8 0106     		lsls	r1, r0, #24	@ tmp244, MEM[(BYTE *)p_56 + 3B],
 1602              	.LVL194:
 1603 00aa 41EA0242 		orr	r2, r1, r2, lsl #16	@, tmp245, tmp244, MEM[(BYTE *)p_56 + 2B],
 1604 00ae 94F83010 		ldrb	r1, [r4, #48]	@ zero_extendqisi2	@ tmp250, MEM[(BYTE *)fs_4(D)].win
 1605 00b2 42EA0320 		orr	r0, r2, r3, lsl #8	@, tmp248, tmp245, MEM[(BYTE *)p_56 + 1B],
 1606 00b6 0843     		orrs	r0, r0, r1	@, tmp251, tmp248, tmp250
 1607 00b8 20F07040 		bic	r0, r0, #-268435456	@ D.5966, tmp251,
 1608 00bc F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1609              	.LVL195:
 1610              	.L186:
 829:ff.c          **** 		return 1;
 1611              		.loc 1 829 0
 1612 00be 0120     		movs	r0, #1	@ D.5966,
 1613              	.LVL196:
 1614 00c0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1615              	.LVL197:
 1616              	.L188:
 851:ff.c          **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 1617              		.loc 1 851 0
 1618 00c2 4FF0FF30 		mov	r0, #-1	@ D.5966,
 852:ff.c          **** }
 1619              		.loc 1 852 0
 1620 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1621              		.cfi_endproc
 1622              	.LFE7:
 1623              		.size	get_fat, .-get_fat
 1624              		.section	.text.dir_sdi.constprop.0,"ax",%progbits
 1625              		.align	1
 1626              		.thumb
 1627              		.thumb_func
 1628              		.type	dir_sdi.constprop.0, %function
 1629              	dir_sdi.constprop.0:
 1630              	.LFB33:
1065:ff.c          **** FRESULT dir_sdi (
 1631              		.loc 1 1065 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              	.LVL198:
1075:ff.c          **** 	clst = dj->sclust;
 1636              		.loc 1 1075 0
 1637 0000 8168     		ldr	r1, [r0, #8]	@ clst, dj_1(D)->sclust
 1638              	.LVL199:
1065:ff.c          **** FRESULT dir_sdi (
 1639              		.loc 1 1065 0
 1640 0002 38B5     		push	{r3, r4, r5, lr}	@
ARM GAS  /tmp/ccKU0f2P.s 			page 73


 1641              	.LCFI10:
 1642              		.cfi_def_cfa_offset 16
 1643              		.cfi_offset 3, -16
 1644              		.cfi_offset 4, -12
 1645              		.cfi_offset 5, -8
 1646              		.cfi_offset 14, -4
1074:ff.c          **** 	dj->index = idx;
 1647              		.loc 1 1074 0
 1648 0004 0023     		movs	r3, #0	@ tmp152,
1076:ff.c          **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1649              		.loc 1 1076 0
 1650 0006 0129     		cmp	r1, #1	@ clst,
1065:ff.c          **** FRESULT dir_sdi (
 1651              		.loc 1 1065 0
 1652 0008 0446     		mov	r4, r0	@ dj, dj
1074:ff.c          **** 	dj->index = idx;
 1653              		.loc 1 1074 0
 1654 000a C380     		strh	r3, [r0, #6]	@ movhi	@ tmp152, dj_1(D)->index
1076:ff.c          **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1655              		.loc 1 1076 0
 1656 000c 01D1     		bne	.L190	@,
 1657              	.LVL200:
 1658              	.L192:
1077:ff.c          **** 		return FR_INT_ERR;
 1659              		.loc 1 1077 0
 1660 000e 0220     		movs	r0, #2	@ D.6174,
 1661 0010 38BD     		pop	{r3, r4, r5, pc}	@
 1662              	.LVL201:
 1663              	.L190:
1076:ff.c          **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1664              		.loc 1 1076 0
 1665 0012 0568     		ldr	r5, [r0, #0]	@ D.6176, dj_1(D)->fs
 1666 0014 A869     		ldr	r0, [r5, #24]	@ D.6176_3->n_fatent, D.6176_3->n_fatent
 1667              	.LVL202:
 1668 0016 8142     		cmp	r1, r0	@ clst, D.6176_3->n_fatent
 1669 0018 F9D2     		bcs	.L192	@,
1078:ff.c          **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1670              		.loc 1 1078 0
 1671 001a 61B9     		cbnz	r1, .L193	@ clst,
 1672 001c 2978     		ldrb	r1, [r5, #0]	@ zero_extendqisi2	@ D.6176_3->fs_type, D.6176_3->fs_type
 1673              	.LVL203:
 1674 001e 0329     		cmp	r1, #3	@ D.6176_3->fs_type,
 1675 0020 01D1     		bne	.L194	@,
1079:ff.c          **** 		clst = dj->fs->dirbase;
 1676              		.loc 1 1079 0
 1677 0022 696A     		ldr	r1, [r5, #36]	@ clst, D.6176_3->dirbase
 1678              	.LVL204:
1081:ff.c          **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 1679              		.loc 1 1081 0
 1680 0024 39B9     		cbnz	r1, .L193	@ clst,
 1681              	.LVL205:
 1682              	.L194:
1083:ff.c          **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 1683              		.loc 1 1083 0
 1684 0026 2A89     		ldrh	r2, [r5, #8]	@ D.6176_3->n_rootdir, D.6176_3->n_rootdir
1082:ff.c          **** 		dj->clust = clst;
 1685              		.loc 1 1082 0
ARM GAS  /tmp/ccKU0f2P.s 			page 74


 1686 0028 0021     		movs	r1, #0	@ tmp155,
 1687 002a E160     		str	r1, [r4, #12]	@ tmp155, dj_1(D)->clust
1083:ff.c          **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 1688              		.loc 1 1083 0
 1689 002c 002A     		cmp	r2, #0	@ D.6176_3->n_rootdir
 1690 002e EED0     		beq	.L192	@
1085:ff.c          **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 1691              		.loc 1 1085 0
 1692 0030 6B6A     		ldr	r3, [r5, #36]	@ D.6176_3->dirbase, D.6176_3->dirbase
 1693 0032 2361     		str	r3, [r4, #16]	@ D.6176_3->dirbase, dj_1(D)->sect
 1694 0034 13E0     		b	.L195	@
 1695              	.LVL206:
 1696              	.L193:
1088:ff.c          **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 1697              		.loc 1 1088 0
 1698 0036 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2	@ D.6176_3->csize, D.6176_3->csize
1089:ff.c          **** 		while (idx >= ic) {	/* Follow cluster chain */
 1699              		.loc 1 1089 0
 1700 0038 62B9     		cbnz	r2, .L196	@ D.6176_3->csize,
 1701              	.LVL207:
 1702              	.L202:
1090:ff.c          **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1703              		.loc 1 1090 0
 1704 003a 2068     		ldr	r0, [r4, #0]	@, dj_1(D)->fs
 1705 003c FFF7FEFF 		bl	get_fat	@
 1706              	.LVL208:
1091:ff.c          **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1707              		.loc 1 1091 0
 1708 0040 421C     		adds	r2, r0, #1	@, clst,
1090:ff.c          **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1709              		.loc 1 1090 0
 1710 0042 0146     		mov	r1, r0	@ clst,
 1711              	.LVL209:
1091:ff.c          **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1712              		.loc 1 1091 0
 1713 0044 0FD0     		beq	.L198	@,
1092:ff.c          **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1714              		.loc 1 1092 0
 1715 0046 0128     		cmp	r0, #1	@ clst,
 1716 0048 E1D9     		bls	.L192	@,
 1717 004a 2368     		ldr	r3, [r4, #0]	@ dj_1(D)->fs, dj_1(D)->fs
 1718 004c 9869     		ldr	r0, [r3, #24]	@ D.6176_19->n_fatent, D.6176_19->n_fatent
 1719              	.LVL210:
 1720 004e 8142     		cmp	r1, r0	@ clst, D.6176_19->n_fatent
 1721 0050 F3D3     		bcc	.L202	@,
 1722 0052 DCE7     		b	.L192	@
 1723              	.LVL211:
 1724              	.L196:
1096:ff.c          **** 		dj->clust = clst;
 1725              		.loc 1 1096 0
 1726 0054 E160     		str	r1, [r4, #12]	@ clst, dj_1(D)->clust
1097:ff.c          **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 1727              		.loc 1 1097 0
 1728 0056 2846     		mov	r0, r5	@, D.6176
 1729 0058 FFF7FEFF 		bl	clust2sect	@
 1730              	.LVL212:
 1731 005c 2061     		str	r0, [r4, #16]	@, dj_1(D)->sect
ARM GAS  /tmp/ccKU0f2P.s 			page 75


 1732              	.L195:
1100:ff.c          **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
 1733              		.loc 1 1100 0
 1734 005e 3035     		adds	r5, r5, #48	@ tmp165, D.6176,
 1735 0060 6561     		str	r5, [r4, #20]	@ tmp165, dj_1(D)->dir
1102:ff.c          **** 	return FR_OK;	/* Seek succeeded */
 1736              		.loc 1 1102 0
 1737 0062 0020     		movs	r0, #0	@ D.6174,
 1738 0064 38BD     		pop	{r3, r4, r5, pc}	@
 1739              	.LVL213:
 1740              	.L198:
1091:ff.c          **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1741              		.loc 1 1091 0
 1742 0066 0120     		movs	r0, #1	@ D.6174,
 1743              	.LVL214:
1103:ff.c          **** }
 1744              		.loc 1 1103 0
 1745 0068 38BD     		pop	{r3, r4, r5, pc}	@
 1746              		.cfi_endproc
 1747              	.LFE33:
 1748              		.size	dir_sdi.constprop.0, .-dir_sdi.constprop.0
 1749              		.section	.text.put_fat,"ax",%progbits
 1750              		.align	1
 1751              		.global	put_fat
 1752              		.thumb
 1753              		.thumb_func
 1754              		.type	put_fat, %function
 1755              	put_fat:
 1756              	.LFB8:
 867:ff.c          **** {
 1757              		.loc 1 867 0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 1761              	.LVL215:
 873:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1762              		.loc 1 873 0
 1763 0000 0129     		cmp	r1, #1	@ clst,
 867:ff.c          **** {
 1764              		.loc 1 867 0
 1765 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 1766              	.LCFI11:
 1767              		.cfi_def_cfa_offset 24
 1768              		.cfi_offset 3, -24
 1769              		.cfi_offset 4, -20
 1770              		.cfi_offset 5, -16
 1771              		.cfi_offset 6, -12
 1772              		.cfi_offset 7, -8
 1773              		.cfi_offset 14, -4
 867:ff.c          **** {
 1774              		.loc 1 867 0
 1775 0004 0446     		mov	r4, r0	@ fs, fs
 1776 0006 0D46     		mov	r5, r1	@ clst, clst
 1777 0008 1646     		mov	r6, r2	@ val, val
 873:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1778              		.loc 1 873 0
 1779 000a 70D9     		bls	.L214	@,
ARM GAS  /tmp/ccKU0f2P.s 			page 76


 873:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1780              		.loc 1 873 0 is_stmt 0 discriminator 1
 1781 000c 8369     		ldr	r3, [r0, #24]	@ fs_6(D)->n_fatent, fs_6(D)->n_fatent
 1782 000e 9942     		cmp	r1, r3	@ clst, fs_6(D)->n_fatent
 1783 0010 6DD2     		bcs	.L214	@,
 877:ff.c          **** 		switch (fs->fs_type) {
 1784              		.loc 1 877 0 is_stmt 1
 1785 0012 0178     		ldrb	r1, [r0, #0]	@ zero_extendqisi2	@ fs_6(D)->fs_type, fs_6(D)->fs_type
 1786              	.LVL216:
 1787 0014 0229     		cmp	r1, #2	@ fs_6(D)->fs_type,
 1788 0016 3AD0     		beq	.L207	@,
 1789 0018 0329     		cmp	r1, #3	@ fs_6(D)->fs_type,
 1790 001a 49D0     		beq	.L208	@,
 1791 001c 0129     		cmp	r1, #1	@ fs_6(D)->fs_type,
 1792 001e 62D1     		bne	.L216	@,
 1793              	.LVL217:
 880:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1794              		.loc 1 880 0
 1795 0020 026A     		ldr	r2, [r0, #32]	@ fs_6(D)->fatbase, fs_6(D)->fatbase
 1796              	.LVL218:
 879:ff.c          **** 			bc = clst; bc += bc / 2;
 1797              		.loc 1 879 0
 1798 0022 05EB5507 		add	r7, r5, r5, lsr #1	@, bc, clst, clst,
 1799              	.LVL219:
 880:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1800              		.loc 1 880 0
 1801 0026 02EB5721 		add	r1, r2, r7, lsr #9	@,, fs_6(D)->fatbase, bc,
 1802 002a FFF7FEFF 		bl	move_window	@
 1803              	.LVL220:
 881:ff.c          **** 			if (res != FR_OK) break;
 1804              		.loc 1 881 0
 1805 002e 0028     		cmp	r0, #0	@ res
 1806 0030 5AD1     		bne	.L205	@
 882:ff.c          **** 			p = &fs->win[bc % SS(fs)];
 1807              		.loc 1 882 0
 1808 0032 F805     		lsls	r0, r7, #23	@ tmp219, bc,
 1809              	.LVL221:
 1810 0034 C20D     		lsrs	r2, r0, #23	@ D.5900, tmp219,
 1811              	.LVL222:
 883:ff.c          **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1812              		.loc 1 883 0
 1813 0036 15F00105 		ands	r5, r5, #1	@ D.5902, clst,
 1814              	.LVL223:
 1815 003a F3B2     		uxtb	r3, r6	@ iftmp.10, val
 1816 003c 07D0     		beq	.L210	@,
 883:ff.c          **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1817              		.loc 1 883 0 is_stmt 0 discriminator 1
 1818 003e A118     		adds	r1, r4, r2	@ tmp220, fs, D.5900
 1819 0040 91F83000 		ldrb	r0, [r1, #48]	@ zero_extendqisi2	@ tmp222, MEM[(BYTE *)fs_6(D)].win
 1820 0044 00F00F01 		and	r1, r0, #15	@ tmp223, tmp222,
 1821 0048 41EA0313 		orr	r3, r1, r3, lsl #4	@, tmp228, tmp223, iftmp.10,
 1822 004c DBB2     		uxtb	r3, r3	@ iftmp.10, tmp228
 1823              	.L210:
 883:ff.c          **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1824              		.loc 1 883 0 discriminator 3
 1825 004e A218     		adds	r2, r4, r2	@ tmp229, fs, D.5900
 1826              	.LVL224:
ARM GAS  /tmp/ccKU0f2P.s 			page 77


 886:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1827              		.loc 1 886 0 is_stmt 1 discriminator 3
 1828 0050 216A     		ldr	r1, [r4, #32]	@ fs_6(D)->fatbase, fs_6(D)->fatbase
 883:ff.c          **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1829              		.loc 1 883 0 discriminator 3
 1830 0052 82F83030 		strb	r3, [r2, #48]	@ iftmp.10, MEM[(BYTE *)fs_6(D)].win
 885:ff.c          **** 			fs->wflag = 1;
 1831              		.loc 1 885 0 discriminator 3
 1832 0056 0120     		movs	r0, #1	@ tmp231,
 884:ff.c          **** 			bc++;
 1833              		.loc 1 884 0 discriminator 3
 1834 0058 0137     		adds	r7, r7, #1	@ bc, bc,
 1835              	.LVL225:
 885:ff.c          **** 			fs->wflag = 1;
 1836              		.loc 1 885 0 discriminator 3
 1837 005a 2071     		strb	r0, [r4, #4]	@ tmp231, fs_6(D)->wflag
 886:ff.c          **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1838              		.loc 1 886 0 discriminator 3
 1839 005c 01EB5721 		add	r1, r1, r7, lsr #9	@,, fs_6(D)->fatbase, bc,
 1840 0060 2046     		mov	r0, r4	@, fs
 1841 0062 FFF7FEFF 		bl	move_window	@
 1842              	.LVL226:
 887:ff.c          **** 			if (res != FR_OK) break;
 1843              		.loc 1 887 0 discriminator 3
 1844 0066 0028     		cmp	r0, #0	@ res
 1845 0068 3ED1     		bne	.L205	@
 888:ff.c          **** 			p = &fs->win[bc % SS(fs)];
 1846              		.loc 1 888 0
 1847 006a FF05     		lsls	r7, r7, #23	@ tmp237, bc,
 1848              	.LVL227:
 1849 006c FA0D     		lsrs	r2, r7, #23	@ D.5900, tmp237,
 1850              	.LVL228:
 889:ff.c          **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1851              		.loc 1 889 0
 1852 006e 15B1     		cbz	r5, .L211	@ D.5902,
 889:ff.c          **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1853              		.loc 1 889 0 is_stmt 0 discriminator 1
 1854 0070 C6F30716 		ubfx	r6, r6, #4, #8	@ iftmp.11, val,,
 1855              	.LVL229:
 1856 0074 07E0     		b	.L212	@
 1857              	.LVL230:
 1858              	.L211:
 889:ff.c          **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1859              		.loc 1 889 0 discriminator 2
 1860 0076 A318     		adds	r3, r4, r2	@ tmp239, fs, D.5900
 1861 0078 C6F30326 		ubfx	r6, r6, #8, #4	@ tmp244, val,,
 1862              	.LVL231:
 1863 007c 93F83010 		ldrb	r1, [r3, #48]	@ zero_extendqisi2	@ tmp241, MEM[(BYTE *)fs_6(D)].win
 1864 0080 21F00F07 		bic	r7, r1, #15	@ tmp242, tmp241,
 1865 0084 3E43     		orrs	r6, r6, r7	@, iftmp.11, tmp244, tmp242
 1866              	.L212:
 889:ff.c          **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1867              		.loc 1 889 0 discriminator 3
 1868 0086 A718     		adds	r7, r4, r2	@ tmp248, fs, D.5900
 1869 0088 87F83060 		strb	r6, [r7, #48]	@ iftmp.11, MEM[(BYTE *)fs_6(D)].win
 890:ff.c          **** 			break;
 1870              		.loc 1 890 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/ccKU0f2P.s 			page 78


 1871 008c 2CE0     		b	.L205	@
 1872              	.LVL232:
 1873              	.L207:
 893:ff.c          **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 1874              		.loc 1 893 0
 1875 008e 036A     		ldr	r3, [r0, #32]	@ fs_6(D)->fatbase, fs_6(D)->fatbase
 1876 0090 03EB1521 		add	r1, r3, r5, lsr #8	@,, fs_6(D)->fatbase, clst,
 1877 0094 FFF7FEFF 		bl	move_window	@
 1878              	.LVL233:
 894:ff.c          **** 			if (res != FR_OK) break;
 1879              		.loc 1 894 0
 1880 0098 30BB     		cbnz	r0, .L205	@ res,
 895:ff.c          **** 			p = &fs->win[clst * 2 % SS(fs)];
 1881              		.loc 1 895 0
 1882 009a 2D06     		lsls	r5, r5, #24	@ tmp255, clst,
 1883              	.LVL234:
 1884 009c EA0D     		lsrs	r2, r5, #23	@ D.5929, tmp255,
 1885              	.LVL235:
 896:ff.c          **** 			ST_WORD(p, (WORD)val);
 1886              		.loc 1 896 0
 1887 009e A118     		adds	r1, r4, r2	@ tmp256, fs, D.5929
 1888 00a0 0D46     		mov	r5, r1	@ tmp259, tmp256
 1889 00a2 81F83060 		strb	r6, [r1, #48]	@ val, MEM[(BYTE *)fs_6(D)].win
 1890 00a6 C6F30726 		ubfx	r6, r6, #8, #8	@ tmp261, val,,
 1891              	.LVL236:
 1892 00aa 81F83160 		strb	r6, [r1, #49]	@ tmp261, MEM[(BYTE *)p_55 + 1B]
 897:ff.c          **** 			break;
 1893              		.loc 1 897 0
 1894 00ae 1BE0     		b	.L205	@
 1895              	.LVL237:
 1896              	.L208:
 900:ff.c          **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 1897              		.loc 1 900 0
 1898 00b0 026A     		ldr	r2, [r0, #32]	@ fs_6(D)->fatbase, fs_6(D)->fatbase
 1899              	.LVL238:
 1900 00b2 02EBD511 		add	r1, r2, r5, lsr #7	@,, fs_6(D)->fatbase, clst,
 1901 00b6 FFF7FEFF 		bl	move_window	@
 1902              	.LVL239:
 901:ff.c          **** 			if (res != FR_OK) break;
 1903              		.loc 1 901 0
 1904 00ba A8B9     		cbnz	r0, .L205	@ res,
 902:ff.c          **** 			p = &fs->win[clst * 4 % SS(fs)];
 1905              		.loc 1 902 0
 1906 00bc 6D06     		lsls	r5, r5, #25	@ tmp268, clst,
 1907              	.LVL240:
 1908 00be E90D     		lsrs	r1, r5, #23	@ D.5938, tmp268,
 1909 00c0 01F13003 		add	r3, r1, #48	@ tmp269, D.5938,
 1910 00c4 E318     		adds	r3, r4, r3	@ p, fs, tmp269
 1911              	.LVL241:
 903:ff.c          **** 			val |= LD_DWORD(p) & 0xF0000000;
 1912              		.loc 1 903 0
 1913 00c6 6518     		adds	r5, r4, r1	@ tmp278, fs, D.5938
 1914 00c8 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2	@ MEM[(BYTE *)p_67 + 3B], MEM[(BYTE *)p_67 + 3B]
 1915 00ca 1206     		lsls	r2, r2, #24	@ tmp273, MEM[(BYTE *)p_67 + 3B],
 1916 00cc 02F07041 		and	r1, r2, #-268435456	@ tmp281, tmp273,
 1917 00d0 0E43     		orrs	r6, r6, r1	@, val, val, tmp281
 1918              	.LVL242:
ARM GAS  /tmp/ccKU0f2P.s 			page 79


 904:ff.c          **** 			ST_DWORD(p, val);
 1919              		.loc 1 904 0
 1920 00d2 85F83060 		strb	r6, [r5, #48]	@ val, MEM[(BYTE *)fs_6(D)].win
 1921 00d6 C6F30722 		ubfx	r2, r6, #8, #8	@ tmp285, val,,
 1922 00da 310C     		lsrs	r1, r6, #16	@ tmp287, val,
 1923 00dc 360E     		lsrs	r6, r6, #24	@ tmp289, val,
 1924              	.LVL243:
 1925 00de 5A70     		strb	r2, [r3, #1]	@ tmp285, MEM[(BYTE *)p_67 + 1B]
 1926 00e0 9970     		strb	r1, [r3, #2]	@ tmp287, MEM[(BYTE *)p_67 + 2B]
 1927 00e2 DE70     		strb	r6, [r3, #3]	@ tmp289, MEM[(BYTE *)p_67 + 3B]
 905:ff.c          **** 			break;
 1928              		.loc 1 905 0
 1929 00e4 00E0     		b	.L205	@
 1930              	.LVL244:
 1931              	.L216:
 908:ff.c          **** 			res = FR_INT_ERR;
 1932              		.loc 1 908 0
 1933 00e6 0220     		movs	r0, #2	@ res,
 1934              	.LVL245:
 1935              	.L205:
 910:ff.c          **** 		fs->wflag = 1;
 1936              		.loc 1 910 0
 1937 00e8 0123     		movs	r3, #1	@ tmp291,
 1938 00ea 2371     		strb	r3, [r4, #4]	@ tmp291, fs_6(D)->wflag
 1939 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1940              	.LVL246:
 1941              	.L214:
 874:ff.c          **** 		res = FR_INT_ERR;
 1942              		.loc 1 874 0
 1943 00ee 0220     		movs	r0, #2	@ res,
 1944              	.LVL247:
 914:ff.c          **** }
 1945              		.loc 1 914 0
 1946 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1947              		.cfi_endproc
 1948              	.LFE8:
 1949              		.size	put_fat, .-put_fat
 1950              		.section	.text.create_chain,"ax",%progbits
 1951              		.align	1
 1952              		.thumb
 1953              		.thumb_func
 1954              		.type	create_chain, %function
 1955              	create_chain:
 1956              	.LFB10:
 982:ff.c          **** {
 1957              		.loc 1 982 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961              	.LVL248:
 1962 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 1963              	.LCFI12:
 1964              		.cfi_def_cfa_offset 24
 1965              		.cfi_offset 3, -24
 1966              		.cfi_offset 4, -20
 1967              		.cfi_offset 5, -16
 1968              		.cfi_offset 6, -12
ARM GAS  /tmp/ccKU0f2P.s 			page 80


 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 982:ff.c          **** {
 1971              		.loc 1 982 0
 1972 0002 0546     		mov	r5, r0	@ fs, fs
 987:ff.c          **** 	if (clst == 0) {		/* Create a new chain */
 1973              		.loc 1 987 0
 1974 0004 0F46     		mov	r7, r1	@ clst, clst
 1975 0006 31B9     		cbnz	r1, .L218	@ clst,
 988:ff.c          **** 		scl = fs->last_clust;			/* Get suggested start point */
 1976              		.loc 1 988 0
 1977 0008 C668     		ldr	r6, [r0, #12]	@ scl, fs_9(D)->last_clust
 1978              	.LVL249:
 989:ff.c          **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1979              		.loc 1 989 0
 1980 000a 6EB1     		cbz	r6, .L233	@ scl,
 989:ff.c          **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1981              		.loc 1 989 0 is_stmt 0 discriminator 2
 1982 000c 8069     		ldr	r0, [r0, #24]	@ fs_9(D)->n_fatent, fs_9(D)->n_fatent
 1983              	.LVL250:
 1984 000e 8642     		cmp	r6, r0	@ scl, fs_9(D)->n_fatent
 1985 0010 28BF     		it	cs	@
 1986 0012 0126     		movcs	r6, #1	@, scl,
 1987              	.LVL251:
 1988 0014 09E0     		b	.L219	@
 1989              	.LVL252:
 1990              	.L218:
 992:ff.c          **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 1991              		.loc 1 992 0 is_stmt 1
 1992 0016 FFF7FEFF 		bl	get_fat	@
 1993              	.LVL253:
 993:ff.c          **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1994              		.loc 1 993 0
 1995 001a 0128     		cmp	r0, #1	@ cs,
 1996 001c 3BD9     		bls	.L245	@,
 1997              	.L220:
 994:ff.c          **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1998              		.loc 1 994 0
 1999 001e AB69     		ldr	r3, [r5, #24]	@ fs_9(D)->n_fatent, fs_9(D)->n_fatent
 2000 0020 9842     		cmp	r0, r3	@ cs, fs_9(D)->n_fatent
 2001 0022 39D3     		bcc	.L221	@,
 2002 0024 3E46     		mov	r6, r7	@ scl, clst
 2003 0026 00E0     		b	.L219	@
 2004              	.LVL254:
 2005              	.L233:
 989:ff.c          **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2006              		.loc 1 989 0
 2007 0028 0126     		movs	r6, #1	@ scl,
 2008              	.LVL255:
 2009              	.L219:
 2010 002a 3446     		mov	r4, r6	@ ncl, scl
 2011              	.L227:
 2012              	.LVL256:
1001:ff.c          **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 2013              		.loc 1 1001 0
 2014 002c A969     		ldr	r1, [r5, #24]	@ fs_9(D)->n_fatent, fs_9(D)->n_fatent
1000:ff.c          **** 		ncl++;							/* Next cluster */
ARM GAS  /tmp/ccKU0f2P.s 			page 81


 2015              		.loc 1 1000 0
 2016 002e 0134     		adds	r4, r4, #1	@ ncl, ncl,
 2017              	.LVL257:
1001:ff.c          **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 2018              		.loc 1 1001 0
 2019 0030 8C42     		cmp	r4, r1	@ ncl, fs_9(D)->n_fatent
 2020 0032 04D3     		bcc	.L222	@,
 2021              	.LVL258:
1003:ff.c          **** 			if (ncl > scl) return 0;	/* No free cluster */
 2022              		.loc 1 1003 0
 2023 0034 012E     		cmp	r6, #1	@ scl,
 2024 0036 01D8     		bhi	.L235	@,
 2025              	.LVL259:
 2026              	.L226:
 2027 0038 0020     		movs	r0, #0	@ cs,
 2028 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 2029              	.LVL260:
 2030              	.L235:
1002:ff.c          **** 			ncl = 2;
 2031              		.loc 1 1002 0
 2032 003c 0224     		movs	r4, #2	@ ncl,
 2033              	.LVL261:
 2034              	.L222:
1005:ff.c          **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 2035              		.loc 1 1005 0
 2036 003e 2846     		mov	r0, r5	@, fs
 2037 0040 2146     		mov	r1, r4	@, ncl
 2038 0042 FFF7FEFF 		bl	get_fat	@
 2039              	.LVL262:
1006:ff.c          **** 		if (cs == 0) break;				/* Found a free cluster */
 2040              		.loc 1 1006 0
 2041 0046 48B1     		cbz	r0, .L223	@ cs,
1007:ff.c          **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2042              		.loc 1 1007 0
 2043 0048 431C     		adds	r3, r0, #1	@, cs,
 2044 004a 02D1     		bne	.L224	@,
 2045              	.LVL263:
 2046              	.L232:
1023:ff.c          **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 2047              		.loc 1 1023 0
 2048 004c 4FF0FF30 		mov	r0, #-1	@ cs,
 2049 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 2050              	.LVL264:
 2051              	.L224:
1007:ff.c          **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 2052              		.loc 1 1007 0 discriminator 1
 2053 0052 0128     		cmp	r0, #1	@ cs,
 2054 0054 1FD0     		beq	.L245	@,
1009:ff.c          **** 		if (ncl == scl) return 0;		/* No free cluster */
 2055              		.loc 1 1009 0
 2056 0056 B442     		cmp	r4, r6	@ ncl, scl
 2057 0058 E8D1     		bne	.L227	@,
 2058 005a EDE7     		b	.L226	@
 2059              	.L223:
1012:ff.c          **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 2060              		.loc 1 1012 0
 2061 005c 2846     		mov	r0, r5	@, fs
ARM GAS  /tmp/ccKU0f2P.s 			page 82


 2062              	.LVL265:
 2063 005e 2146     		mov	r1, r4	@, ncl
 2064 0060 6FF07042 		mvn	r2, #-268435456	@,
 2065 0064 FFF7FEFF 		bl	put_fat	@
 2066              	.LVL266:
1013:ff.c          **** 	if (res == FR_OK && clst != 0) {
 2067              		.loc 1 1013 0
 2068 0068 98B9     		cbnz	r0, .L228	@ res,
1013:ff.c          **** 	if (res == FR_OK && clst != 0) {
 2069              		.loc 1 1013 0 is_stmt 0 discriminator 1
 2070 006a 47B9     		cbnz	r7, .L229	@ clst,
 2071              	.L231:
1018:ff.c          **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2072              		.loc 1 1018 0 is_stmt 1
 2073 006c 2A69     		ldr	r2, [r5, #16]	@ D.4812, fs_9(D)->free_clust
1017:ff.c          **** 		fs->last_clust = ncl;			/* Update FSINFO */
 2074              		.loc 1 1017 0
 2075 006e EC60     		str	r4, [r5, #12]	@ ncl, fs_9(D)->last_clust
1018:ff.c          **** 		if (fs->free_clust != 0xFFFFFFFF) {
 2076              		.loc 1 1018 0
 2077 0070 511C     		adds	r1, r2, #1	@, D.4812,
 2078 0072 0CD0     		beq	.L246	@,
 2079              	.L230:
1019:ff.c          **** 			fs->free_clust--;
 2080              		.loc 1 1019 0
 2081 0074 531E     		subs	r3, r2, #1	@ tmp153, D.4812,
1020:ff.c          **** 			fs->fsi_flag = 1;
 2082              		.loc 1 1020 0
 2083 0076 0120     		movs	r0, #1	@ tmp154,
 2084              	.LVL267:
1019:ff.c          **** 			fs->free_clust--;
 2085              		.loc 1 1019 0
 2086 0078 2B61     		str	r3, [r5, #16]	@ tmp153, fs_9(D)->free_clust
1020:ff.c          **** 			fs->fsi_flag = 1;
 2087              		.loc 1 1020 0
 2088 007a 6871     		strb	r0, [r5, #5]	@ tmp154, fs_9(D)->fsi_flag
 2089 007c 07E0     		b	.L246	@
 2090              	.LVL268:
 2091              	.L229:
1014:ff.c          **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 2092              		.loc 1 1014 0
 2093 007e 2846     		mov	r0, r5	@, fs
 2094              	.LVL269:
 2095 0080 3946     		mov	r1, r7	@, clst
 2096 0082 2246     		mov	r2, r4	@, ncl
 2097 0084 FFF7FEFF 		bl	put_fat	@
 2098              	.LVL270:
1016:ff.c          **** 	if (res == FR_OK) {
 2099              		.loc 1 1016 0
 2100 0088 0028     		cmp	r0, #0	@ res
 2101 008a EFD0     		beq	.L231	@
 2102 008c 01E0     		b	.L228	@
 2103              	.LVL271:
 2104              	.L246:
1020:ff.c          **** 			fs->fsi_flag = 1;
 2105              		.loc 1 1020 0
 2106 008e 2046     		mov	r0, r4	@ cs, ncl
ARM GAS  /tmp/ccKU0f2P.s 			page 83


 2107 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 2108              	.LVL272:
 2109              	.L228:
1023:ff.c          **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 2110              		.loc 1 1023 0
 2111 0092 0128     		cmp	r0, #1	@ res,
 2112 0094 DAD0     		beq	.L232	@,
 2113              	.LVL273:
 2114              	.L245:
 2115 0096 0120     		movs	r0, #1	@ cs,
 2116              	.L221:
1027:ff.c          **** }
 2117              		.loc 1 1027 0
 2118 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 2119              		.cfi_endproc
 2120              	.LFE10:
 2121              		.size	create_chain, .-create_chain
 2122              		.section	.text.dir_next,"ax",%progbits
 2123              		.align	1
 2124              		.thumb
 2125              		.thumb_func
 2126              		.type	dir_next, %function
 2127              	dir_next:
 2128              	.LFB12:
1117:ff.c          **** {
 2129              		.loc 1 1117 0
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 0
 2132              		@ frame_needed = 0, uses_anonymous_args = 0
 2133              	.LVL274:
 2134 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 2135              	.LCFI13:
 2136              		.cfi_def_cfa_offset 32
 2137              		.cfi_offset 3, -32
 2138              		.cfi_offset 4, -28
 2139              		.cfi_offset 5, -24
 2140              		.cfi_offset 6, -20
 2141              		.cfi_offset 7, -16
 2142              		.cfi_offset 8, -12
 2143              		.cfi_offset 9, -8
 2144              		.cfi_offset 14, -4
1123:ff.c          **** 	i = dj->index + 1;
 2145              		.loc 1 1123 0
 2146 0004 C688     		ldrh	r6, [r0, #6]	@, dj_6(D)->index
1117:ff.c          **** {
 2147              		.loc 1 1117 0
 2148 0006 0446     		mov	r4, r0	@ dj, dj
1123:ff.c          **** 	i = dj->index + 1;
 2149              		.loc 1 1123 0
 2150 0008 701C     		adds	r0, r6, #1	@ tmp182, dj_6(D)->index,
 2151              	.LVL275:
 2152 000a 86B2     		uxth	r6, r0	@ i, tmp182
1117:ff.c          **** {
 2153              		.loc 1 1117 0
 2154 000c 0F46     		mov	r7, r1	@ stretch, stretch
 2155              	.LVL276:
1124:ff.c          **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
ARM GAS  /tmp/ccKU0f2P.s 			page 84


 2156              		.loc 1 1124 0
 2157 000e 16B9     		cbnz	r6, .L248	@ i,
 2158              	.LVL277:
 2159              	.L250:
 2160              	.LBB3:
1125:ff.c          **** 		return FR_NO_FILE;
 2161              		.loc 1 1125 0
 2162 0010 0420     		movs	r0, #4	@ D.4729,
 2163 0012 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2164              	.LVL278:
 2165              	.L248:
 2166              	.LBE3:
1124:ff.c          **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 2167              		.loc 1 1124 0 discriminator 1
 2168 0016 2369     		ldr	r3, [r4, #16]	@ D.4728, dj_6(D)->sect
 2169 0018 002B     		cmp	r3, #0	@ D.4728
 2170 001a F9D0     		beq	.L250	@
1127:ff.c          **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 2171              		.loc 1 1127 0
 2172 001c 16F00F08 		ands	r8, r6, #15	@ D.4730, i,
 2173 0020 5CD1     		bne	.L252	@,
1128:ff.c          **** 		dj->sect++;					/* Next sector */
 2174              		.loc 1 1128 0
 2175 0022 591C     		adds	r1, r3, #1	@ tmp184, D.4728,
 2176              	.LVL279:
 2177 0024 2161     		str	r1, [r4, #16]	@ tmp184, dj_6(D)->sect
1130:ff.c          **** 		if (dj->clust == 0) {	/* Static table */
 2178              		.loc 1 1130 0
 2179 0026 E168     		ldr	r1, [r4, #12]	@ D.4734, dj_6(D)->clust
 2180 0028 2068     		ldr	r0, [r4, #0]	@ D.4737, dj_6(D)->fs
 2181              	.LVL280:
 2182 002a 19B9     		cbnz	r1, .L253	@ D.4734,
1131:ff.c          **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 2183              		.loc 1 1131 0
 2184 002c 0189     		ldrh	r1, [r0, #8]	@ D.4737_14->n_rootdir, D.4737_14->n_rootdir
 2185 002e B142     		cmp	r1, r6	@ D.4737_14->n_rootdir, i
 2186 0030 EED9     		bls	.L250	@,
 2187 0032 53E0     		b	.L252	@
 2188              	.L253:
1135:ff.c          **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 2189              		.loc 1 1135 0
 2190 0034 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2	@ D.4737_19->csize, D.4737_19->csize
 2191 0036 531E     		subs	r3, r2, #1	@ tmp188, D.4737_19->csize,
 2192 0038 13EA1612 		ands	r2, r3, r6, lsr #4	@,, tmp188, i,
 2193 003c 4ED1     		bne	.L252	@,
1136:ff.c          **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 2194              		.loc 1 1136 0
 2195 003e FFF7FEFF 		bl	get_fat	@
 2196              	.LVL281:
1137:ff.c          **** 				if (clst <= 1) return FR_INT_ERR;
 2197              		.loc 1 1137 0
 2198 0042 0128     		cmp	r0, #1	@ clst,
1136:ff.c          **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 2199              		.loc 1 1136 0
 2200 0044 0546     		mov	r5, r0	@ clst,
 2201              	.LVL282:
1137:ff.c          **** 				if (clst <= 1) return FR_INT_ERR;
ARM GAS  /tmp/ccKU0f2P.s 			page 85


 2202              		.loc 1 1137 0
 2203 0046 02D8     		bhi	.L255	@,
 2204              	.L258:
 2205 0048 0220     		movs	r0, #2	@ D.4729,
 2206              	.LVL283:
 2207 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2208              	.LVL284:
 2209              	.L255:
1138:ff.c          **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2210              		.loc 1 1138 0
 2211 004e 411C     		adds	r1, r0, #1	@, clst,
 2212 0050 02D1     		bne	.L256	@,
 2213              	.LVL285:
 2214              	.L259:
 2215 0052 0120     		movs	r0, #1	@ D.4729,
 2216 0054 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2217              	.LVL286:
 2218              	.L256:
1139:ff.c          **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 2219              		.loc 1 1139 0
 2220 0058 2068     		ldr	r0, [r4, #0]	@ D.4737, dj_6(D)->fs
 2221              	.LVL287:
 2222 005a 8169     		ldr	r1, [r0, #24]	@ D.4737_30->n_fatent, D.4737_30->n_fatent
 2223 005c 8D42     		cmp	r5, r1	@ clst, D.4737_30->n_fatent
 2224 005e 37D3     		bcc	.L257	@,
 2225              	.LBB4:
1142:ff.c          **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 2226              		.loc 1 1142 0
 2227 0060 002F     		cmp	r7, #0	@ stretch
 2228 0062 D5D0     		beq	.L250	@
1143:ff.c          **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 2229              		.loc 1 1143 0
 2230 0064 E168     		ldr	r1, [r4, #12]	@, dj_6(D)->clust
 2231 0066 FFF7FEFF 		bl	create_chain	@
 2232              	.LVL288:
1144:ff.c          **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2233              		.loc 1 1144 0
 2234 006a 0546     		mov	r5, r0	@ clst,
 2235 006c 0028     		cmp	r0, #0	@ clst
 2236 006e 41D0     		beq	.L262	@
1145:ff.c          **** 					if (clst == 1) return FR_INT_ERR;
 2237              		.loc 1 1145 0
 2238 0070 0128     		cmp	r0, #1	@ clst,
 2239 0072 E9D0     		beq	.L258	@,
1146:ff.c          **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 2240              		.loc 1 1146 0
 2241 0074 421C     		adds	r2, r0, #1	@, clst,
 2242 0076 ECD0     		beq	.L259	@,
1148:ff.c          **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 2243              		.loc 1 1148 0
 2244 0078 2068     		ldr	r0, [r4, #0]	@, dj_6(D)->fs
 2245              	.LVL289:
 2246 007a 0021     		movs	r1, #0	@,
 2247 007c FFF7FEFF 		bl	move_window	@
 2248              	.LVL290:
 2249 0080 0746     		mov	r7, r0	@ tmp193,
 2250              	.LVL291:
ARM GAS  /tmp/ccKU0f2P.s 			page 86


 2251 0082 0028     		cmp	r0, #0	@ tmp193
 2252 0084 E5D1     		bne	.L259	@
1149:ff.c          **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 2253              		.loc 1 1149 0
 2254 0086 2068     		ldr	r0, [r4, #0]	@ dj_6(D)->fs, dj_6(D)->fs
 2255 0088 3946     		mov	r1, r7	@, tmp193
 2256 008a 3030     		adds	r0, r0, #48	@, dj_6(D)->fs,
 2257 008c 4FF40072 		mov	r2, #512	@,
 2258 0090 FFF7FEFF 		bl	mem_set	@
 2259              	.LVL292:
1150:ff.c          **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 2260              		.loc 1 1150 0
 2261 0094 D4F80090 		ldr	r9, [r4, #0]	@ D.4737, dj_6(D)->fs
 2262 0098 2946     		mov	r1, r5	@, clst
 2263 009a 4846     		mov	r0, r9	@, D.4737
 2264 009c FFF7FEFF 		bl	clust2sect	@
 2265              	.LVL293:
 2266 00a0 C9F82C00 		str	r0, [r9, #44]	@, D.4737_45->winsect
 2267              	.LVL294:
 2268              	.L260:
1151:ff.c          **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2269              		.loc 1 1151 0 discriminator 1
 2270 00a4 2068     		ldr	r0, [r4, #0]	@ D.4737, dj_6(D)->fs
 2271 00a6 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2	@ D.4737_48->csize, D.4737_48->csize
 2272 00a8 BA42     		cmp	r2, r7	@ D.4737_48->csize, c
 2273 00aa 0ED9     		bls	.L275	@,
 2274              	.L261:
1152:ff.c          **** 						dj->fs->wflag = 1;
 2275              		.loc 1 1152 0
 2276 00ac 0121     		movs	r1, #1	@ tmp196,
 2277 00ae 0171     		strb	r1, [r0, #4]	@ tmp196, D.4737_48->wflag
1153:ff.c          **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 2278              		.loc 1 1153 0
 2279 00b0 2068     		ldr	r0, [r4, #0]	@, dj_6(D)->fs
 2280 00b2 0021     		movs	r1, #0	@,
 2281 00b4 FFF7FEFF 		bl	move_window	@
 2282              	.LVL295:
 2283 00b8 0028     		cmp	r0, #0	@
 2284 00ba CAD1     		bne	.L259	@
1154:ff.c          **** 						dj->fs->winsect++;
 2285              		.loc 1 1154 0
 2286 00bc 2068     		ldr	r0, [r4, #0]	@ D.4737, dj_6(D)->fs
 2287 00be C26A     		ldr	r2, [r0, #44]	@ D.4737_54->winsect, D.4737_54->winsect
1151:ff.c          **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2288              		.loc 1 1151 0
 2289 00c0 0137     		adds	r7, r7, #1	@ tmp201, c,
 2290              	.LVL296:
1154:ff.c          **** 						dj->fs->winsect++;
 2291              		.loc 1 1154 0
 2292 00c2 531C     		adds	r3, r2, #1	@ tmp199, D.4737_54->winsect,
 2293 00c4 C362     		str	r3, [r0, #44]	@ tmp199, D.4737_54->winsect
1151:ff.c          **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2294              		.loc 1 1151 0
 2295 00c6 FFB2     		uxtb	r7, r7	@ c, tmp201
 2296              	.LVL297:
 2297 00c8 ECE7     		b	.L260	@
 2298              	.L275:
ARM GAS  /tmp/ccKU0f2P.s 			page 87


1156:ff.c          **** 					dj->fs->winsect -= c;						/* Rewind window address */
 2299              		.loc 1 1156 0
 2300 00ca C36A     		ldr	r3, [r0, #44]	@ D.4737_115->winsect, D.4737_115->winsect
 2301 00cc DF1B     		subs	r7, r3, r7	@ tmp203, D.4737_115->winsect, c
 2302              	.LVL298:
 2303 00ce C762     		str	r7, [r0, #44]	@ tmp203, D.4737_115->winsect
 2304              	.L257:
 2305              	.LBE4:
1161:ff.c          **** 				dj->clust = clst;				/* Initialize data for new cluster */
 2306              		.loc 1 1161 0
 2307 00d0 E560     		str	r5, [r4, #12]	@ clst, dj_6(D)->clust
1162:ff.c          **** 				dj->sect = clust2sect(dj->fs, clst);
 2308              		.loc 1 1162 0
 2309 00d2 2068     		ldr	r0, [r4, #0]	@, dj_6(D)->fs
 2310 00d4 2946     		mov	r1, r5	@, clst
 2311 00d6 FFF7FEFF 		bl	clust2sect	@
 2312              	.LVL299:
 2313 00da 2061     		str	r0, [r4, #16]	@, dj_6(D)->sect
 2314              	.LVL300:
 2315              	.L252:
1168:ff.c          **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2316              		.loc 1 1168 0
 2317 00dc 2068     		ldr	r0, [r4, #0]	@ dj_6(D)->fs, dj_6(D)->fs
1167:ff.c          **** 	dj->index = i;
 2318              		.loc 1 1167 0
 2319 00de E680     		strh	r6, [r4, #6]	@ movhi	@ i, dj_6(D)->index
1168:ff.c          **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2320              		.loc 1 1168 0
 2321 00e0 4FEA4818 		lsl	r8, r8, #5	@ tmp206, D.4730,
 2322 00e4 08F13008 		add	r8, r8, #48	@ tmp207, tmp206,
 2323 00e8 00EB0802 		add	r2, r0, r8	@ tmp208, dj_6(D)->fs, tmp207
 2324 00ec 6261     		str	r2, [r4, #20]	@ tmp208, dj_6(D)->dir
1170:ff.c          **** 	return FR_OK;
 2325              		.loc 1 1170 0
 2326 00ee 0020     		movs	r0, #0	@ D.4729,
 2327 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2328              	.LVL301:
 2329              	.L262:
 2330              	.LBB5:
1144:ff.c          **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2331              		.loc 1 1144 0
 2332 00f4 0720     		movs	r0, #7	@ D.4729,
 2333              	.LVL302:
 2334              	.LBE5:
1171:ff.c          **** }
 2335              		.loc 1 1171 0
 2336 00f6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2337              		.cfi_endproc
 2338              	.LFE12:
 2339              		.size	dir_next, .-dir_next
 2340              		.section	.text.dir_read,"ax",%progbits
 2341              		.align	1
 2342              		.thumb
 2343              		.thumb_func
 2344              		.type	dir_read, %function
 2345              	dir_read:
 2346              	.LFB14:
ARM GAS  /tmp/ccKU0f2P.s 			page 88


1417:ff.c          **** {
 2347              		.loc 1 1417 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              	.LVL303:
 2352 0000 10B5     		push	{r4, lr}	@
 2353              	.LCFI14:
 2354              		.cfi_def_cfa_offset 8
 2355              		.cfi_offset 4, -8
 2356              		.cfi_offset 14, -4
1424:ff.c          **** 	res = FR_NO_FILE;
 2357              		.loc 1 1424 0
 2358 0002 0423     		movs	r3, #4	@ res,
1417:ff.c          **** {
 2359              		.loc 1 1417 0
 2360 0004 0446     		mov	r4, r0	@ dj, dj
 2361              	.LVL304:
 2362              	.L277:
1425:ff.c          **** 	while (dj->sect) {
 2363              		.loc 1 1425 0 discriminator 1
 2364 0006 2169     		ldr	r1, [r4, #16]	@ D.4628, dj_4(D)->sect
 2365 0008 B9B1     		cbz	r1, .L298	@ D.4628,
 2366              	.L281:
1426:ff.c          **** 		res = move_window(dj->fs, dj->sect);
 2367              		.loc 1 1426 0
 2368 000a 2068     		ldr	r0, [r4, #0]	@, dj_4(D)->fs
 2369 000c FFF7FEFF 		bl	move_window	@
 2370              	.LVL305:
1427:ff.c          **** 		if (res != FR_OK) break;
 2371              		.loc 1 1427 0
 2372 0010 D0B9     		cbnz	r0, .L278	@ res,
1428:ff.c          **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2373              		.loc 1 1428 0
 2374 0012 6269     		ldr	r2, [r4, #20]	@ dir, dj_4(D)->dir
 2375              	.LVL306:
1429:ff.c          **** 		c = dir[DIR_Name];
 2376              		.loc 1 1429 0
 2377 0014 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2	@ c, *dir_9
 2378              	.LVL307:
1430:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2379              		.loc 1 1430 0
 2380 0016 B3B1     		cbz	r3, .L283	@ c,
1451:ff.c          **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 2381              		.loc 1 1451 0
 2382 0018 E52B     		cmp	r3, #229	@ c,
 2383 001a 06D0     		beq	.L279	@,
1451:ff.c          **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 2384              		.loc 1 1451 0 is_stmt 0 discriminator 1
 2385 001c 2E2B     		cmp	r3, #46	@ c,
 2386 001e 04D0     		beq	.L279	@,
 2387 0020 D17A     		ldrb	r1, [r2, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_9 + 11B], MEM[(BYTE *)dir_9 + 11B]
 2388 0022 01F00802 		and	r2, r1, #8	@ tmp148, MEM[(BYTE *)dir_9 + 11B],
 2389              	.LVL308:
 2390 0026 D3B2     		uxtb	r3, r2	@ tmp149, tmp148
 2391 0028 83B1     		cbz	r3, .L289	@ tmp149,
 2392              	.L279:
ARM GAS  /tmp/ccKU0f2P.s 			page 89


1454:ff.c          **** 		res = dir_next(dj, 0);				/* Next entry */
 2393              		.loc 1 1454 0 is_stmt 1
 2394 002a 2046     		mov	r0, r4	@, dj
 2395              	.LVL309:
 2396 002c 0021     		movs	r1, #0	@,
 2397 002e FFF7FEFF 		bl	dir_next	@
 2398              	.LVL310:
 2399 0032 0346     		mov	r3, r0	@ res, tmp150
 2400              	.LVL311:
1455:ff.c          **** 		if (res != FR_OK) break;
 2401              		.loc 1 1455 0
 2402 0034 0028     		cmp	r0, #0	@ tmp150
 2403 0036 E6D0     		beq	.L277	@
 2404 0038 06E0     		b	.L278	@
 2405              	.LVL312:
 2406              	.L298:
1425:ff.c          **** 	while (dj->sect) {
 2407              		.loc 1 1425 0
 2408 003a 1846     		mov	r0, r3	@ res, res
 2409              	.LVL313:
1458:ff.c          **** 	if (res != FR_OK) dj->sect = 0;
 2410              		.loc 1 1458 0
 2411 003c 33B1     		cbz	r3, .L289	@ res,
 2412              	.LVL314:
 2413              	.L282:
1458:ff.c          **** 	if (res != FR_OK) dj->sect = 0;
 2414              		.loc 1 1458 0 is_stmt 0 discriminator 1
 2415 003e 0020     		movs	r0, #0	@ tmp151,
 2416 0040 2061     		str	r0, [r4, #16]	@ tmp151, dj_4(D)->sect
 2417 0042 1846     		mov	r0, r3	@ res, res
 2418 0044 10BD     		pop	{r4, pc}	@
 2419              	.LVL315:
 2420              	.L283:
1430:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2421              		.loc 1 1430 0 is_stmt 1
 2422 0046 0420     		movs	r0, #4	@ res,
 2423              	.LVL316:
 2424              	.L278:
1425:ff.c          **** 	while (dj->sect) {
 2425              		.loc 1 1425 0
 2426 0048 0346     		mov	r3, r0	@ res, res
 2427 004a F8E7     		b	.L282	@
 2428              	.LVL317:
 2429              	.L289:
1461:ff.c          **** }
 2430              		.loc 1 1461 0
 2431 004c 10BD     		pop	{r4, pc}	@
 2432              		.cfi_endproc
 2433              	.LFE14:
 2434              		.size	dir_read, .-dir_read
 2435              		.section	.text.dir_find,"ax",%progbits
 2436              		.align	1
 2437              		.thumb
 2438              		.thumb_func
 2439              		.type	dir_find, %function
 2440              	dir_find:
 2441              	.LFB13:
ARM GAS  /tmp/ccKU0f2P.s 			page 90


1356:ff.c          **** {
 2442              		.loc 1 1356 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 0
 2445              		@ frame_needed = 0, uses_anonymous_args = 0
 2446              	.LVL318:
 2447 0000 38B5     		push	{r3, r4, r5, lr}	@
 2448              	.LCFI15:
 2449              		.cfi_def_cfa_offset 16
 2450              		.cfi_offset 3, -16
 2451              		.cfi_offset 4, -12
 2452              		.cfi_offset 5, -8
 2453              		.cfi_offset 14, -4
1356:ff.c          **** {
 2454              		.loc 1 1356 0
 2455 0002 0546     		mov	r5, r0	@ dj, dj
1363:ff.c          **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
 2456              		.loc 1 1363 0
 2457 0004 FFF7FEFF 		bl	dir_sdi.constprop.0	@
 2458              	.LVL319:
 2459              	.L312:
1364:ff.c          **** 	if (res != FR_OK) return res;
 2460              		.loc 1 1364 0
 2461 0008 0446     		mov	r4, r0	@ res,
 2462 000a B8B9     		cbnz	r0, .L300	@ res,
1370:ff.c          **** 		res = move_window(dj->fs, dj->sect);
 2463              		.loc 1 1370 0
 2464 000c 2868     		ldr	r0, [r5, #0]	@, dj_3(D)->fs
 2465              	.LVL320:
 2466 000e 2969     		ldr	r1, [r5, #16]	@, dj_3(D)->sect
 2467 0010 FFF7FEFF 		bl	move_window	@
 2468              	.LVL321:
1371:ff.c          **** 		if (res != FR_OK) break;
 2469              		.loc 1 1371 0
 2470 0014 0446     		mov	r4, r0	@ res,
 2471 0016 88B9     		cbnz	r0, .L300	@ res,
1372:ff.c          **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2472              		.loc 1 1372 0
 2473 0018 6869     		ldr	r0, [r5, #20]	@ dir, dj_3(D)->dir
 2474              	.LVL322:
1374:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2475              		.loc 1 1374 0
 2476 001a 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2	@ *dir_9, *dir_9
 2477 001c 6BB1     		cbz	r3, .L303	@ *dir_9,
1397:ff.c          **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 2478              		.loc 1 1397 0
 2479 001e C17A     		ldrb	r1, [r0, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_9 + 11B], MEM[(BYTE *)dir_9 + 11B]
 2480 0020 01F00802 		and	r2, r1, #8	@ tmp151, MEM[(BYTE *)dir_9 + 11B],
 2481 0024 D3B2     		uxtb	r3, r2	@ tmp152, tmp151
 2482 0026 1BB9     		cbnz	r3, .L301	@ tmp152,
1397:ff.c          **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 2483              		.loc 1 1397 0 is_stmt 0 discriminator 1
 2484 0028 A969     		ldr	r1, [r5, #24]	@, dj_3(D)->fn
 2485 002a FFF7FEFF 		bl	mem_cmp.constprop.2	@
 2486              	.LVL323:
 2487 002e 28B1     		cbz	r0, .L300	@,
 2488              	.L301:
ARM GAS  /tmp/ccKU0f2P.s 			page 91


1400:ff.c          **** 		res = dir_next(dj, 0);		/* Next entry */
 2489              		.loc 1 1400 0 is_stmt 1
 2490 0030 2846     		mov	r0, r5	@, dj
 2491 0032 0021     		movs	r1, #0	@,
 2492 0034 FFF7FEFF 		bl	dir_next	@
 2493              	.LVL324:
 2494 0038 E6E7     		b	.L312	@
 2495              	.LVL325:
 2496              	.L303:
1374:ff.c          **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2497              		.loc 1 1374 0
 2498 003a 0424     		movs	r4, #4	@ res,
 2499              	.LVL326:
 2500              	.L300:
1404:ff.c          **** }
 2501              		.loc 1 1404 0
 2502 003c 2046     		mov	r0, r4	@, res
 2503 003e 38BD     		pop	{r3, r4, r5, pc}	@
 2504              		.cfi_endproc
 2505              	.LFE13:
 2506              		.size	dir_find, .-dir_find
 2507              		.section	.text.follow_path,"ax",%progbits
 2508              		.align	1
 2509              		.thumb
 2510              		.thumb_func
 2511              		.type	follow_path, %function
 2512              	follow_path:
 2513              	.LFB18:
1923:ff.c          **** {
 2514              		.loc 1 1923 0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 8
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
 2518              	.LVL327:
 2519 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 2520              	.LCFI16:
 2521              		.cfi_def_cfa_offset 24
 2522              		.cfi_offset 0, -24
 2523              		.cfi_offset 1, -20
 2524              		.cfi_offset 2, -16
 2525              		.cfi_offset 4, -12
 2526              		.cfi_offset 5, -8
 2527              		.cfi_offset 14, -4
 2528              	.LVL328:
1923:ff.c          **** {
 2529              		.loc 1 1923 0
 2530 0002 0191     		str	r1, [sp, #4]	@ path, path
1935:ff.c          **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 2531              		.loc 1 1935 0
 2532 0004 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2	@ D.5233, *path.5_2
 2533              	.LVL329:
 2534 0006 2F2B     		cmp	r3, #47	@ D.5233,
1923:ff.c          **** {
 2535              		.loc 1 1923 0
 2536 0008 0446     		mov	r4, r0	@ dj, dj
1935:ff.c          **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 2537              		.loc 1 1935 0
ARM GAS  /tmp/ccKU0f2P.s 			page 92


 2538 000a 01D0     		beq	.L314	@,
1935:ff.c          **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 2539              		.loc 1 1935 0 is_stmt 0 discriminator 1
 2540 000c 5C2B     		cmp	r3, #92	@ D.5233,
 2541 000e 01D1     		bne	.L315	@,
 2542              	.L314:
1936:ff.c          **** 		path++;
 2543              		.loc 1 1936 0 is_stmt 1
 2544 0010 0131     		adds	r1, r1, #1	@ tmp170, path.5,
 2545 0012 0191     		str	r1, [sp, #4]	@ tmp170, path
 2546              	.L315:
1937:ff.c          **** 	dj->sclust = 0;						/* Start from the root dir */
 2547              		.loc 1 1937 0
 2548 0014 0025     		movs	r5, #0	@ tmp171,
1940:ff.c          **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 2549              		.loc 1 1940 0
 2550 0016 0198     		ldr	r0, [sp, #4]	@ path, path
 2551              	.LVL330:
1937:ff.c          **** 	dj->sclust = 0;						/* Start from the root dir */
 2552              		.loc 1 1937 0
 2553 0018 A560     		str	r5, [r4, #8]	@ tmp171, dj_8(D)->sclust
1940:ff.c          **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 2554              		.loc 1 1940 0
 2555 001a 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2	@ *path.5_9, *path.5_9
 2556 001c 1F2A     		cmp	r2, #31	@ *path.5_9,
 2557 001e 1FD8     		bhi	.L323	@,
1941:ff.c          **** 		res = dir_sdi(dj, 0);
 2558              		.loc 1 1941 0
 2559 0020 2046     		mov	r0, r4	@, dj
 2560 0022 FFF7FEFF 		bl	dir_sdi.constprop.0	@
 2561              	.LVL331:
1942:ff.c          **** 		dj->dir = 0;
 2562              		.loc 1 1942 0
 2563 0026 6561     		str	r5, [r4, #20]	@ tmp171, dj_8(D)->dir
 2564 0028 2CE0     		b	.L317	@
 2565              	.L326:
1948:ff.c          **** 			res = dir_find(dj);				/* Find it */
 2566              		.loc 1 1948 0
 2567 002a 2046     		mov	r0, r4	@, dj
 2568              	.LVL332:
 2569 002c FFF7FEFF 		bl	dir_find	@
 2570              	.LVL333:
1949:ff.c          **** 			ns = *(dj->fn+NS);
 2571              		.loc 1 1949 0
 2572 0030 A369     		ldr	r3, [r4, #24]	@ dj_8(D)->fn, dj_8(D)->fn
 2573 0032 D97A     		ldrb	r1, [r3, #11]	@ zero_extendqisi2	@ ns, MEM[(BYTE *)D.5240_14 + 11B]
 2574              	.LVL334:
1950:ff.c          **** 			if (res != FR_OK) {				/* Failed to find the object */
 2575              		.loc 1 1950 0
 2576 0034 D8B9     		cbnz	r0, .L325	@ res,
 2577              	.L318:
1962:ff.c          **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 2578              		.loc 1 1962 0
 2579 0036 01F00402 		and	r2, r1, #4	@ tmp184, ns,
 2580 003a D3B2     		uxtb	r3, r2	@ tmp185, tmp184
 2581              	.LVL335:
 2582 003c 13BB     		cbnz	r3, .L317	@ tmp185,
ARM GAS  /tmp/ccKU0f2P.s 			page 93


1963:ff.c          **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 2583              		.loc 1 1963 0
 2584 003e 6069     		ldr	r0, [r4, #20]	@ dir, dj_8(D)->dir
 2585              	.LVL336:
1964:ff.c          **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 2586              		.loc 1 1964 0
 2587 0040 C17A     		ldrb	r1, [r0, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_21 + 11B], MEM[(BYTE *)dir_21 + 11B]
 2588 0042 01F01002 		and	r2, r1, #16	@ tmp189, MEM[(BYTE *)dir_21 + 11B],
 2589 0046 D3B2     		uxtb	r3, r2	@ tmp190, tmp189
 2590 0048 DBB1     		cbz	r3, .L320	@ tmp190,
1967:ff.c          **** 			dj->sclust = LD_CLUST(dir);
 2591              		.loc 1 1967 0
 2592 004a 417D     		ldrb	r1, [r0, #21]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_21 + 21B], MEM[(BYTE *)dir_21 + 21B]
 2593 004c 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_21 + 20B], MEM[(BYTE *)dir_21 + 20B]
 2594 004e 42EA0122 		orr	r2, r2, r1, lsl #8	@, tmp197, MEM[(BYTE *)dir_21 + 20B], MEM[(BYTE *)dir_21 + 21B],
 2595 0052 C17E     		ldrb	r1, [r0, #27]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_21 + 27B], MEM[(BYTE *)dir_21 + 27B]
 2596 0054 807E     		ldrb	r0, [r0, #26]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_21 + 26B], MEM[(BYTE *)dir_21 + 26B]
 2597              	.LVL337:
 2598 0056 40EA0123 		orr	r3, r0, r1, lsl #8	@, tmp205, MEM[(BYTE *)dir_21 + 26B], MEM[(BYTE *)dir_21 + 27B],
 2599 005a 43EA0242 		orr	r2, r3, r2, lsl #16	@, tmp206, tmp205, tmp197,
 2600 005e A260     		str	r2, [r4, #8]	@ tmp206, dj_8(D)->sclust
 2601              	.LVL338:
 2602              	.L323:
1946:ff.c          **** 			res = create_name(dj, &path);	/* Get a segment */
 2603              		.loc 1 1946 0
 2604 0060 2046     		mov	r0, r4	@, dj
 2605 0062 01A9     		add	r1, sp, #4	@,,
 2606 0064 FFF7FEFF 		bl	create_name	@
 2607              	.LVL339:
1947:ff.c          **** 			if (res != FR_OK) break;
 2608              		.loc 1 1947 0
 2609 0068 0028     		cmp	r0, #0	@ res
 2610 006a DED0     		beq	.L326	@
 2611 006c 0AE0     		b	.L317	@
 2612              	.LVL340:
 2613              	.L325:
1951:ff.c          **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 2614              		.loc 1 1951 0
 2615 006e 0428     		cmp	r0, #4	@ res,
 2616 0070 08D1     		bne	.L317	@,
1958:ff.c          **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 2617              		.loc 1 1958 0
 2618 0072 01F00401 		and	r1, r1, #4	@ tmp181, ns,
 2619 0076 C8B2     		uxtb	r0, r1	@ tmp182, tmp181
 2620              	.LVL341:
 2621 0078 0028     		cmp	r0, #0	@ tmp182,
 2622 007a 14BF     		ite	ne	@
 2623 007c 0420     		movne	r0, #4	@, res,
 2624 007e 0520     		moveq	r0, #5	@, res,
 2625 0080 00E0     		b	.L317	@
 2626              	.LVL342:
 2627              	.L320:
1965:ff.c          **** 				res = FR_NO_PATH; break;
 2628              		.loc 1 1965 0
 2629 0082 0520     		movs	r0, #5	@ res,
 2630              	.LVL343:
 2631              	.L317:
ARM GAS  /tmp/ccKU0f2P.s 			page 94


1972:ff.c          **** }
 2632              		.loc 1 1972 0
 2633 0084 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 2634              		.cfi_endproc
 2635              	.LFE18:
 2636              		.size	follow_path, .-follow_path
 2637              		.section	.text.dir_register,"ax",%progbits
 2638              		.align	1
 2639              		.thumb
 2640              		.thumb_func
 2641              		.type	dir_register, %function
 2642              	dir_register:
 2643              	.LFB15:
1474:ff.c          **** {
 2644              		.loc 1 1474 0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 0
 2647              		@ frame_needed = 0, uses_anonymous_args = 0
 2648              	.LVL344:
 2649 0000 70B5     		push	{r4, r5, r6, lr}	@
 2650              	.LCFI17:
 2651              		.cfi_def_cfa_offset 16
 2652              		.cfi_offset 4, -16
 2653              		.cfi_offset 5, -12
 2654              		.cfi_offset 6, -8
 2655              		.cfi_offset 14, -4
1474:ff.c          **** {
 2656              		.loc 1 1474 0
 2657 0002 0446     		mov	r4, r0	@ dj, dj
1541:ff.c          **** 	res = dir_sdi(dj, 0);
 2658              		.loc 1 1541 0
 2659 0004 FFF7FEFF 		bl	dir_sdi.constprop.0	@
 2660              	.LVL345:
 2661              	.L345:
1542:ff.c          **** 	if (res == FR_OK) {
 2662              		.loc 1 1542 0
 2663 0008 0546     		mov	r5, r0	@ res,
 2664 000a 18BB     		cbnz	r0, .L336	@ res,
1544:ff.c          **** 			res = move_window(dj->fs, dj->sect);
 2665              		.loc 1 1544 0
 2666 000c 2068     		ldr	r0, [r4, #0]	@, dj_3(D)->fs
 2667              	.LVL346:
 2668 000e 2169     		ldr	r1, [r4, #16]	@, dj_3(D)->sect
 2669 0010 FFF7FEFF 		bl	move_window	@
 2670              	.LVL347:
1545:ff.c          **** 			if (res != FR_OK) break;
 2671              		.loc 1 1545 0
 2672 0014 0546     		mov	r5, r0	@ res,
 2673 0016 E8B9     		cbnz	r0, .L336	@ res,
1546:ff.c          **** 			c = *dj->dir;
 2674              		.loc 1 1546 0
 2675 0018 6369     		ldr	r3, [r4, #20]	@ dj_3(D)->dir, dj_3(D)->dir
 2676 001a 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2	@ c, *D.5853_8
 2677              	.LVL348:
1547:ff.c          **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 2678              		.loc 1 1547 0
 2679 001c E528     		cmp	r0, #229	@ c,
ARM GAS  /tmp/ccKU0f2P.s 			page 95


 2680 001e 05D0     		beq	.L329	@,
1547:ff.c          **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 2681              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2682 0020 20B1     		cbz	r0, .L329	@ c,
1548:ff.c          **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 2683              		.loc 1 1548 0 is_stmt 1
 2684 0022 2046     		mov	r0, r4	@, dj
 2685 0024 0121     		movs	r1, #1	@,
 2686 0026 FFF7FEFF 		bl	dir_next	@
 2687              	.LVL349:
 2688 002a EDE7     		b	.L345	@
 2689              	.LVL350:
 2690              	.L329:
1554:ff.c          **** 		res = move_window(dj->fs, dj->sect);
 2691              		.loc 1 1554 0
 2692 002c 2068     		ldr	r0, [r4, #0]	@, dj_3(D)->fs
 2693 002e 2169     		ldr	r1, [r4, #16]	@, dj_3(D)->sect
 2694 0030 FFF7FEFF 		bl	move_window	@
 2695              	.LVL351:
1555:ff.c          **** 		if (res == FR_OK) {
 2696              		.loc 1 1555 0
 2697 0034 0546     		mov	r5, r0	@ res,
 2698 0036 68B9     		cbnz	r0, .L336	@ res,
 2699              	.L331:
1556:ff.c          **** 			dir = dj->dir;
 2700              		.loc 1 1556 0
 2701 0038 6669     		ldr	r6, [r4, #20]	@ dir, dj_3(D)->dir
 2702              	.LVL352:
1557:ff.c          **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
 2703              		.loc 1 1557 0
 2704 003a 2946     		mov	r1, r5	@, res
 2705 003c 3046     		mov	r0, r6	@, dir
 2706              	.LVL353:
 2707 003e 2022     		movs	r2, #32	@,
 2708 0040 FFF7FEFF 		bl	mem_set	@
 2709              	.LVL354:
1558:ff.c          **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 2710              		.loc 1 1558 0
 2711 0044 A169     		ldr	r1, [r4, #24]	@, dj_3(D)->fn
 2712 0046 0B22     		movs	r2, #11	@,
 2713 0048 3046     		mov	r0, r6	@, dir
 2714 004a FFF7FEFF 		bl	mem_cpy	@
 2715              	.LVL355:
1562:ff.c          **** 			dj->fs->wflag = 1;
 2716              		.loc 1 1562 0
 2717 004e 2168     		ldr	r1, [r4, #0]	@ D.5850, dj_3(D)->fs
 2718 0050 0122     		movs	r2, #1	@ tmp150,
 2719 0052 0A71     		strb	r2, [r1, #4]	@ tmp150, D.5850_16->wflag
 2720              	.LVL356:
 2721              	.L336:
1567:ff.c          **** }
 2722              		.loc 1 1567 0
 2723 0054 2846     		mov	r0, r5	@, res
 2724 0056 70BD     		pop	{r4, r5, r6, pc}	@
 2725              		.cfi_endproc
 2726              	.LFE15:
 2727              		.size	dir_register, .-dir_register
ARM GAS  /tmp/ccKU0f2P.s 			page 96


 2728              		.section	.text.remove_chain,"ax",%progbits
 2729              		.align	1
 2730              		.thumb
 2731              		.thumb_func
 2732              		.type	remove_chain, %function
 2733              	remove_chain:
 2734              	.LFB9:
 929:ff.c          **** {
 2735              		.loc 1 929 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739              	.LVL357:
 936:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2740              		.loc 1 936 0
 2741 0000 0129     		cmp	r1, #1	@ clst,
 929:ff.c          **** {
 2742              		.loc 1 929 0
 2743 0002 70B5     		push	{r4, r5, r6, lr}	@
 2744              	.LCFI18:
 2745              		.cfi_def_cfa_offset 16
 2746              		.cfi_offset 4, -16
 2747              		.cfi_offset 5, -12
 2748              		.cfi_offset 6, -8
 2749              		.cfi_offset 14, -4
 929:ff.c          **** {
 2750              		.loc 1 929 0
 2751 0004 0446     		mov	r4, r0	@ fs, fs
 2752 0006 0D46     		mov	r5, r1	@ clst, clst
 936:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2753              		.loc 1 936 0
 2754 0008 01D8     		bhi	.L347	@,
 2755              	.LVL358:
 2756              	.L349:
 937:ff.c          **** 		res = FR_INT_ERR;
 2757              		.loc 1 937 0
 2758 000a 0220     		movs	r0, #2	@ res,
 2759 000c 70BD     		pop	{r4, r5, r6, pc}	@
 2760              	.LVL359:
 2761              	.L347:
 936:ff.c          **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2762              		.loc 1 936 0 discriminator 1
 2763 000e 8369     		ldr	r3, [r0, #24]	@ fs_5(D)->n_fatent, fs_5(D)->n_fatent
 2764 0010 9942     		cmp	r1, r3	@ clst, fs_5(D)->n_fatent
 2765 0012 FAD2     		bcs	.L349	@,
 2766              	.LVL360:
 2767              	.L362:
 941:ff.c          **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 2768              		.loc 1 941 0 discriminator 1
 2769 0014 A069     		ldr	r0, [r4, #24]	@ fs_5(D)->n_fatent, fs_5(D)->n_fatent
 2770 0016 8542     		cmp	r5, r0	@ clst, fs_5(D)->n_fatent
 2771 0018 05D2     		bcs	.L354	@,
 2772              	.L353:
 942:ff.c          **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 2773              		.loc 1 942 0
 2774 001a 2046     		mov	r0, r4	@, fs
 2775 001c 2946     		mov	r1, r5	@, clst
ARM GAS  /tmp/ccKU0f2P.s 			page 97


 2776 001e FFF7FEFF 		bl	get_fat	@
 2777              	.LVL361:
 943:ff.c          **** 			if (nxt == 0) break;				/* Empty cluster? */
 2778              		.loc 1 943 0
 2779 0022 0646     		mov	r6, r0	@ nxt,
 2780 0024 08B9     		cbnz	r0, .L351	@ nxt,
 2781              	.LVL362:
 2782              	.L354:
 937:ff.c          **** 		res = FR_INT_ERR;
 2783              		.loc 1 937 0
 2784 0026 0020     		movs	r0, #0	@ res,
 2785 0028 70BD     		pop	{r4, r5, r6, pc}	@
 2786              	.LVL363:
 2787              	.L351:
 944:ff.c          **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 2788              		.loc 1 944 0
 2789 002a 0128     		cmp	r0, #1	@ nxt,
 2790 002c EDD0     		beq	.L349	@,
 945:ff.c          **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 2791              		.loc 1 945 0
 2792 002e 431C     		adds	r3, r0, #1	@, nxt,
 2793 0030 0ED0     		beq	.L355	@,
 946:ff.c          **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 2794              		.loc 1 946 0
 2795 0032 2046     		mov	r0, r4	@, fs
 2796              	.LVL364:
 2797 0034 2946     		mov	r1, r5	@, clst
 2798 0036 0022     		movs	r2, #0	@,
 2799 0038 FFF7FEFF 		bl	put_fat	@
 2800              	.LVL365:
 947:ff.c          **** 			if (res != FR_OK) break;
 2801              		.loc 1 947 0
 2802 003c 48B9     		cbnz	r0, .L348	@ res,
 948:ff.c          **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 2803              		.loc 1 948 0
 2804 003e 2169     		ldr	r1, [r4, #16]	@ D.5873, fs_5(D)->free_clust
 2805 0040 481C     		adds	r0, r1, #1	@, D.5873,
 2806              	.LVL366:
 2807 0042 03D0     		beq	.L352	@,
 949:ff.c          **** 				fs->free_clust++;
 2808              		.loc 1 949 0
 2809 0044 4A1C     		adds	r2, r1, #1	@ tmp145, D.5873,
 950:ff.c          **** 				fs->fsi_flag = 1;
 2810              		.loc 1 950 0
 2811 0046 0125     		movs	r5, #1	@ tmp146,
 2812              	.LVL367:
 949:ff.c          **** 				fs->free_clust++;
 2813              		.loc 1 949 0
 2814 0048 2261     		str	r2, [r4, #16]	@ tmp145, fs_5(D)->free_clust
 950:ff.c          **** 				fs->fsi_flag = 1;
 2815              		.loc 1 950 0
 2816 004a 6571     		strb	r5, [r4, #5]	@ tmp146, fs_5(D)->fsi_flag
 2817              	.L352:
 2818 004c 3546     		mov	r5, r6	@ clst, nxt
 2819 004e E1E7     		b	.L362	@
 2820              	.LVL368:
 2821              	.L355:
ARM GAS  /tmp/ccKU0f2P.s 			page 98


 945:ff.c          **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 2822              		.loc 1 945 0
 2823 0050 0120     		movs	r0, #1	@ res,
 2824              	.LVL369:
 2825              	.L348:
 967:ff.c          **** }
 2826              		.loc 1 967 0
 2827 0052 70BD     		pop	{r4, r5, r6, pc}	@
 2828              		.cfi_endproc
 2829              	.LFE9:
 2830              		.size	remove_chain, .-remove_chain
 2831              		.section	.text.f_mount,"ax",%progbits
 2832              		.align	1
 2833              		.global	f_mount
 2834              		.thumb
 2835              		.thumb_func
 2836              		.type	f_mount, %function
 2837              	f_mount:
 2838              	.LFB22:
2187:ff.c          **** 
2188:ff.c          **** 
2189:ff.c          **** 
2190:ff.c          **** 
2191:ff.c          **** /*--------------------------------------------------------------------------
2192:ff.c          **** 
2193:ff.c          ****    Public Functions
2194:ff.c          **** 
2195:ff.c          **** --------------------------------------------------------------------------*/
2196:ff.c          **** 
2197:ff.c          **** 
2198:ff.c          **** 
2199:ff.c          **** /*-----------------------------------------------------------------------*/
2200:ff.c          **** /* Mount/Unmount a Logical Drive                                         */
2201:ff.c          **** /*-----------------------------------------------------------------------*/
2202:ff.c          **** 
2203:ff.c          **** FRESULT f_mount (
2204:ff.c          **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2205:ff.c          **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2206:ff.c          **** )
2207:ff.c          **** {
 2839              		.loc 1 2207 0
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 0
 2842              		@ frame_needed = 0, uses_anonymous_args = 0
 2843              		@ link register save eliminated.
 2844              	.LVL370:
2208:ff.c          **** 	FATFS *rfs;
2209:ff.c          **** 
2210:ff.c          **** 
2211:ff.c          **** 	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 2845              		.loc 1 2211 0
 2846 0000 48B9     		cbnz	r0, .L367	@ vol,
2212:ff.c          **** 		return FR_INVALID_DRIVE;
2213:ff.c          **** 	rfs = FatFs[vol];			/* Get current fs object */
 2847              		.loc 1 2213 0
 2848 0002 064A     		ldr	r2, .L374	@ tmp139,
 2849 0004 1368     		ldr	r3, [r2, #0]	@ rfs, FatFs
ARM GAS  /tmp/ccKU0f2P.s 			page 99


 2850              	.LVL371:
2214:ff.c          **** 
2215:ff.c          **** 	if (rfs) {
 2851              		.loc 1 2215 0
 2852 0006 03B1     		cbz	r3, .L365	@ rfs,
2216:ff.c          **** #if _FS_SHARE
2217:ff.c          **** 		clear_lock(rfs);
2218:ff.c          **** #endif
2219:ff.c          **** #if _FS_REENTRANT				/* Discard sync object of the current volume */
2220:ff.c          **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2221:ff.c          **** #endif
2222:ff.c          **** 		rfs->fs_type = 0;		/* Clear old fs object */
 2853              		.loc 1 2222 0
 2854 0008 1870     		strb	r0, [r3, #0]	@ vol, rfs_5->fs_type
 2855              	.L365:
2223:ff.c          **** 	}
2224:ff.c          **** 
2225:ff.c          **** 	if (fs) {
 2856              		.loc 1 2225 0
 2857 000a 09B1     		cbz	r1, .L366	@ fs,
2226:ff.c          **** 		fs->fs_type = 0;		/* Clear new fs object */
 2858              		.loc 1 2226 0
 2859 000c 0020     		movs	r0, #0	@ tmp142,
 2860              	.LVL372:
 2861 000e 0870     		strb	r0, [r1, #0]	@ tmp142, fs_6(D)->fs_type
 2862              	.L366:
2227:ff.c          **** #if _FS_REENTRANT				/* Create sync object for the new volume */
2228:ff.c          **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2229:ff.c          **** #endif
2230:ff.c          **** 	}
2231:ff.c          **** 	FatFs[vol] = fs;			/* Register new fs object */
 2863              		.loc 1 2231 0
 2864 0010 1160     		str	r1, [r2, #0]	@ fs, FatFs
2232:ff.c          **** 
2233:ff.c          **** 	return FR_OK;
 2865              		.loc 1 2233 0
 2866 0012 0020     		movs	r0, #0	@ D.5881,
 2867 0014 7047     		bx	lr	@
 2868              	.LVL373:
 2869              	.L367:
2212:ff.c          **** 		return FR_INVALID_DRIVE;
 2870              		.loc 1 2212 0
 2871 0016 0B20     		movs	r0, #11	@ D.5881,
 2872              	.LVL374:
2234:ff.c          **** }
 2873              		.loc 1 2234 0
 2874 0018 7047     		bx	lr	@
 2875              	.L375:
 2876 001a 00BF     		.align	2
 2877              	.L374:
 2878 001c 00000000 		.word	.LANCHOR0
 2879              		.cfi_endproc
 2880              	.LFE22:
 2881              		.size	f_mount, .-f_mount
 2882              		.section	.text.f_open,"ax",%progbits
 2883              		.align	1
 2884              		.global	f_open
ARM GAS  /tmp/ccKU0f2P.s 			page 100


 2885              		.thumb
 2886              		.thumb_func
 2887              		.type	f_open, %function
 2888              	f_open:
 2889              	.LFB23:
2235:ff.c          **** 
2236:ff.c          **** 
2237:ff.c          **** 
2238:ff.c          **** 
2239:ff.c          **** /*-----------------------------------------------------------------------*/
2240:ff.c          **** /* Open or Create a File                                                 */
2241:ff.c          **** /*-----------------------------------------------------------------------*/
2242:ff.c          **** 
2243:ff.c          **** FRESULT f_open (
2244:ff.c          **** 	FIL *fp,			/* Pointer to the blank file object */
2245:ff.c          **** 	const TCHAR *path,	/* Pointer to the file name */
2246:ff.c          **** 	BYTE mode			/* Access mode and file open mode flags */
2247:ff.c          **** )
2248:ff.c          **** {
 2890              		.loc 1 2248 0
 2891              		.cfi_startproc
 2892              		@ args = 0, pretend = 0, frame = 48
 2893              		@ frame_needed = 0, uses_anonymous_args = 0
 2894              	.LVL375:
 2895 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 2896              	.LCFI19:
 2897              		.cfi_def_cfa_offset 24
 2898              		.cfi_offset 4, -24
 2899              		.cfi_offset 5, -20
 2900              		.cfi_offset 6, -16
 2901              		.cfi_offset 7, -12
 2902              		.cfi_offset 8, -8
 2903              		.cfi_offset 14, -4
 2904 0004 8CB0     		sub	sp, sp, #48	@,,
 2905              	.LCFI20:
 2906              		.cfi_def_cfa_offset 72
 2907              		.loc 1 2248 0
 2908 0006 0546     		mov	r5, r0	@ fp, fp
 2909 0008 0CA8     		add	r0, sp, #48	@ tmp229,,
 2910              	.LVL376:
2249:ff.c          **** 	FRESULT res;
2250:ff.c          **** 	DIR dj;
2251:ff.c          **** 	BYTE *dir;
2252:ff.c          **** 	DEF_NAMEBUF;
2253:ff.c          **** 
2254:ff.c          **** 
2255:ff.c          **** 	fp->fs = 0;			/* Clear file object */
 2911              		.loc 1 2255 0
 2912 000a 0023     		movs	r3, #0	@ tmp227,
2248:ff.c          **** {
 2913              		.loc 1 2248 0
 2914 000c 40F82C1D 		str	r1, [r0, #-44]!	@ path, path
 2915 0010 1746     		mov	r7, r2	@ mode, mode
2256:ff.c          **** 
2257:ff.c          **** #if !_FS_READONLY
2258:ff.c          **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
2259:ff.c          **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
ARM GAS  /tmp/ccKU0f2P.s 			page 101


 2916              		.loc 1 2259 0
 2917 0012 05A9     		add	r1, sp, #20	@,,
 2918              	.LVL377:
2255:ff.c          **** 	fp->fs = 0;			/* Clear file object */
 2919              		.loc 1 2255 0
 2920 0014 2B60     		str	r3, [r5, #0]	@ tmp227, fp_12(D)->fs
2258:ff.c          **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 2921              		.loc 1 2258 0
 2922 0016 02F01F06 		and	r6, r2, #31	@ mode, mode,
 2923              	.LVL378:
 2924              		.loc 1 2259 0
 2925 001a 02F01E02 		and	r2, r2, #30	@, mode,
 2926 001e FFF7FEFF 		bl	chk_mounted	@
 2927              	.LVL379:
2260:ff.c          **** #else
2261:ff.c          **** 	mode &= FA_READ;
2262:ff.c          **** 	res = chk_mounted(&path, &dj.fs, 0);
2263:ff.c          **** #endif
2264:ff.c          **** 	INIT_BUF(dj);
 2928              		.loc 1 2264 0
 2929 0022 02A9     		add	r1, sp, #8	@ tmp234,,
 2930 0024 0B91     		str	r1, [sp, #44]	@ tmp234, dj.fn
2265:ff.c          **** 	if (res == FR_OK)
 2931              		.loc 1 2265 0
 2932 0026 18B9     		cbnz	r0, .L377	@ res,
2266:ff.c          **** 		res = follow_path(&dj, path);	/* Follow the file path */
 2933              		.loc 1 2266 0
 2934 0028 05A8     		add	r0, sp, #20	@,,
 2935              	.LVL380:
 2936 002a 0199     		ldr	r1, [sp, #4]	@, path
 2937 002c FFF7FEFF 		bl	follow_path	@
 2938              	.LVL381:
 2939              	.L377:
2267:ff.c          **** 	dir = dj.dir;
 2940              		.loc 1 2267 0
 2941 0030 0A9C     		ldr	r4, [sp, #40]	@ dir, dj.dir
 2942              	.LVL382:
2268:ff.c          **** 
2269:ff.c          **** #if !_FS_READONLY	/* R/W configuration */
2270:ff.c          **** 	if (res == FR_OK) {
 2943              		.loc 1 2270 0
 2944 0032 18B9     		cbnz	r0, .L378	@ res,
2271:ff.c          **** 		if (!dir)	/* Current dir itself */
2272:ff.c          **** 			res = FR_INVALID_NAME;
 2945              		.loc 1 2272 0
 2946 0034 002C     		cmp	r4, #0	@ dir,
 2947 0036 0CBF     		ite	eq	@
 2948 0038 0620     		moveq	r0, #6	@, res,
 2949 003a 0020     		movne	r0, #0	@, res,
 2950              	.LVL383:
 2951              	.L378:
2273:ff.c          **** #if _FS_SHARE
2274:ff.c          **** 		else
2275:ff.c          **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2276:ff.c          **** #endif
2277:ff.c          **** 	}
2278:ff.c          **** 	/* Create or Open a file */
ARM GAS  /tmp/ccKU0f2P.s 			page 102


2279:ff.c          **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 2952              		.loc 1 2279 0
 2953 003c 17F01C0F 		tst	r7, #28	@ mode,
 2954 0040 49D0     		beq	.L379	@,
 2955              	.LBB6:
2280:ff.c          **** 		DWORD dw, cl;
2281:ff.c          **** 
2282:ff.c          **** 		if (res != FR_OK) {					/* No file, create new */
 2956              		.loc 1 2282 0
 2957 0042 48B1     		cbz	r0, .L380	@ res,
2283:ff.c          **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 2958              		.loc 1 2283 0
 2959 0044 0428     		cmp	r0, #4	@ res,
 2960 0046 02D1     		bne	.L381	@,
2284:ff.c          **** #if _FS_SHARE
2285:ff.c          **** 				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2286:ff.c          **** #else
2287:ff.c          **** 				res = dir_register(&dj);
 2961              		.loc 1 2287 0
 2962 0048 05A8     		add	r0, sp, #20	@,,
 2963              	.LVL384:
 2964 004a FFF7FEFF 		bl	dir_register	@
 2965              	.LVL385:
 2966              	.L381:
2288:ff.c          **** #endif
2289:ff.c          **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
 2967              		.loc 1 2289 0
 2968 004e 46F00806 		orr	r6, r6, #8	@ mode, mode,
 2969              	.LVL386:
2290:ff.c          **** 			dir = dj.dir;					/* New entry */
 2970              		.loc 1 2290 0
 2971 0052 0A9C     		ldr	r4, [sp, #40]	@ dir, dj.dir
 2972              	.LVL387:
2291:ff.c          **** 		}
2292:ff.c          **** 		else {								/* Any object is already existing */
2293:ff.c          **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2294:ff.c          **** 				res = FR_DENIED;
2295:ff.c          **** 			} else {
2296:ff.c          **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2297:ff.c          **** 					res = FR_EXIST;
2298:ff.c          **** 			}
2299:ff.c          **** 		}
2300:ff.c          **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 2973              		.loc 1 2300 0
 2974 0054 48B1     		cbz	r0, .L382	@ res,
 2975 0056 79E0     		b	.L401	@
 2976              	.L380:
2293:ff.c          **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 2977              		.loc 1 2293 0
 2978 0058 E17A     		ldrb	r1, [r4, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_19 + 11B], MEM[(BYTE *)dir_19 + 11B]
 2979 005a 11F0110F 		tst	r1, #17	@ MEM[(BYTE *)dir_19 + 11B],
 2980 005e 74D1     		bne	.L394	@,
2296:ff.c          **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 2981              		.loc 1 2296 0
 2982 0060 07F00400 		and	r0, r7, #4	@ tmp249, mode,
 2983              	.LVL388:
 2984 0064 C7B2     		uxtb	r7, r0	@ tmp250, tmp249
ARM GAS  /tmp/ccKU0f2P.s 			page 103


 2985 0066 002F     		cmp	r7, #0	@ tmp250
 2986 0068 6BD1     		bne	.L392	@
 2987              	.LVL389:
 2988              	.L382:
 2989              		.loc 1 2300 0 discriminator 1
 2990 006a 06F00802 		and	r2, r6, #8	@ tmp252, mode,
 2991 006e D3B2     		uxtb	r3, r2	@ tmp253, tmp252
 2992 0070 002B     		cmp	r3, #0	@ tmp253
 2993 0072 3ED0     		beq	.L386	@
2301:ff.c          **** 			dw = get_fattime();					/* Created time */
 2994              		.loc 1 2301 0
 2995 0074 FFF7FEFF 		bl	get_fattime	@
 2996              	.LVL390:
2302:ff.c          **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 2997              		.loc 1 2302 0
 2998 0078 010C     		lsrs	r1, r0, #16	@ tmp258, dw,
 2999 007a C0F30727 		ubfx	r7, r0, #8, #8	@ tmp256, dw,,
 3000 007e A073     		strb	r0, [r4, #14]	@ dw, MEM[(BYTE *)dir_201 + 14B]
 3001 0080 000E     		lsrs	r0, r0, #24	@ tmp260, dw,
 3002              	.LVL391:
2303:ff.c          **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
2304:ff.c          **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
2305:ff.c          **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 3003              		.loc 1 2305 0
 3004 0082 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_201 + 20B], MEM[(BYTE *)dir_201 + 20B]
2302:ff.c          **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 3005              		.loc 1 2302 0
 3006 0084 E773     		strb	r7, [r4, #15]	@ tmp256, MEM[(BYTE *)dir_201 + 15B]
 3007 0086 2174     		strb	r1, [r4, #16]	@ tmp258, MEM[(BYTE *)dir_201 + 16B]
 3008              		.loc 1 2305 0
 3009 0088 677D     		ldrb	r7, [r4, #21]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_201 + 21B], MEM[(BYTE *)dir_201 + 21B]
 3010 008a E17E     		ldrb	r1, [r4, #27]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_201 + 27B], MEM[(BYTE *)dir_201 + 27B]
2302:ff.c          **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 3011              		.loc 1 2302 0
 3012 008c 6074     		strb	r0, [r4, #17]	@ tmp260, MEM[(BYTE *)dir_201 + 17B]
 3013              		.loc 1 2305 0
 3014 008e A07E     		ldrb	r0, [r4, #26]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_201 + 26B], MEM[(BYTE *)dir_201 + 26B]
2303:ff.c          **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 3015              		.loc 1 2303 0
 3016 0090 0023     		movs	r3, #0	@ tmp262,
 3017              		.loc 1 2305 0
 3018 0092 42EA0727 		orr	r7, r2, r7, lsl #8	@, tmp278, MEM[(BYTE *)dir_201 + 20B], MEM[(BYTE *)dir_201 + 21B],
 3019 0096 40EA0122 		orr	r2, r0, r1, lsl #8	@, tmp286, MEM[(BYTE *)dir_201 + 26B], MEM[(BYTE *)dir_201 + 27B],
 3020              	.LVL392:
2306:ff.c          **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
2307:ff.c          **** 			dj.fs->wflag = 1;
 3021              		.loc 1 2307 0
 3022 009a 0598     		ldr	r0, [sp, #20]	@ D.5802, dj.fs
2303:ff.c          **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 3023              		.loc 1 2303 0
 3024 009c E372     		strb	r3, [r4, #11]	@ tmp262, MEM[(BYTE *)dir_201 + 11B]
2304:ff.c          **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 3025              		.loc 1 2304 0
 3026 009e 2377     		strb	r3, [r4, #28]	@ tmp262, MEM[(BYTE *)dir_201 + 28B]
 3027 00a0 6377     		strb	r3, [r4, #29]	@ tmp262, MEM[(BYTE *)dir_201 + 29B]
 3028 00a2 A377     		strb	r3, [r4, #30]	@ tmp262, MEM[(BYTE *)dir_201 + 30B]
 3029 00a4 E377     		strb	r3, [r4, #31]	@ tmp262, MEM[(BYTE *)dir_201 + 31B]
ARM GAS  /tmp/ccKU0f2P.s 			page 104


2306:ff.c          **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
 3030              		.loc 1 2306 0
 3031 00a6 A376     		strb	r3, [r4, #26]	@ tmp262, MEM[(BYTE *)dir_201 + 26B]
 3032 00a8 E376     		strb	r3, [r4, #27]	@ tmp262, MEM[(BYTE *)dir_201 + 27B]
 3033 00aa 2375     		strb	r3, [r4, #20]	@ tmp262, MEM[(BYTE *)dir_201 + 20B]
 3034 00ac 6375     		strb	r3, [r4, #21]	@ tmp262, MEM[(BYTE *)dir_201 + 21B]
 3035              		.loc 1 2307 0
 3036 00ae 0123     		movs	r3, #1	@ tmp295,
2308:ff.c          **** 			if (cl) {							/* Remove the cluster chain if exist */
 3037              		.loc 1 2308 0
 3038 00b0 52EA0747 		orrs	r7, r2, r7, lsl #16	@, cl, tmp286, tmp278,
 3039              	.LVL393:
2307:ff.c          **** 			dj.fs->wflag = 1;
 3040              		.loc 1 2307 0
 3041 00b4 0371     		strb	r3, [r0, #4]	@ tmp295, D.5802_82->wflag
 3042              		.loc 1 2308 0
 3043 00b6 1CD0     		beq	.L386	@,
2309:ff.c          **** 				dw = dj.fs->winsect;
2310:ff.c          **** 				res = remove_chain(dj.fs, cl);
 3044              		.loc 1 2310 0
 3045 00b8 3946     		mov	r1, r7	@, cl
2309:ff.c          **** 				dw = dj.fs->winsect;
 3046              		.loc 1 2309 0
 3047 00ba D0F82C80 		ldr	r8, [r0, #44]	@ dw, D.5802_82->winsect
 3048              	.LVL394:
 3049              		.loc 1 2310 0
 3050 00be FFF7FEFF 		bl	remove_chain	@
 3051              	.LVL395:
2311:ff.c          **** 				if (res == FR_OK) {
 3052              		.loc 1 2311 0
 3053 00c2 0028     		cmp	r0, #0	@ res
 3054 00c4 42D1     		bne	.L401	@
2312:ff.c          **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 3055              		.loc 1 2312 0
 3056 00c6 0598     		ldr	r0, [sp, #20]	@ D.5802, dj.fs
 3057              	.LVL396:
 3058 00c8 013F     		subs	r7, r7, #1	@ tmp298, cl,
 3059              	.LVL397:
 3060 00ca C760     		str	r7, [r0, #12]	@ tmp298, D.5802_87->last_clust
2313:ff.c          **** 					res = move_window(dj.fs, dw);
 3061              		.loc 1 2313 0
 3062 00cc 4146     		mov	r1, r8	@, dw
 3063 00ce FFF7FEFF 		bl	move_window	@
 3064              	.LVL398:
 3065              	.LBE6:
2314:ff.c          **** 				}
2315:ff.c          **** 			}
2316:ff.c          **** 		}
2317:ff.c          **** 	}
2318:ff.c          **** 	else {	/* Open an existing file */
2319:ff.c          **** 		if (res == FR_OK) {						/* Follow succeeded */
2320:ff.c          **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
2321:ff.c          **** 				res = FR_NO_FILE;
2322:ff.c          **** 			} else {
2323:ff.c          **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2324:ff.c          **** 					res = FR_DENIED;
2325:ff.c          **** 			}
ARM GAS  /tmp/ccKU0f2P.s 			page 105


2326:ff.c          **** 		}
2327:ff.c          **** 	}
2328:ff.c          **** 	if (res == FR_OK) {
 3066              		.loc 1 2328 0
 3067 00d2 70B1     		cbz	r0, .L386	@ res,
 3068 00d4 3AE0     		b	.L401	@
 3069              	.LVL399:
 3070              	.L379:
2319:ff.c          **** 		if (res == FR_OK) {						/* Follow succeeded */
 3071              		.loc 1 2319 0
 3072 00d6 0028     		cmp	r0, #0	@ res
 3073 00d8 38D1     		bne	.L401	@
2320:ff.c          **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 3074              		.loc 1 2320 0
 3075 00da E07A     		ldrb	r0, [r4, #11]	@ zero_extendqisi2	@ D.5749, MEM[(BYTE *)dir_19 + 11B]
 3076              	.LVL400:
 3077 00dc 00F01002 		and	r2, r0, #16	@ tmp301, D.5749,
 3078 00e0 D3B2     		uxtb	r3, r2	@ tmp302, tmp301
 3079 00e2 002B     		cmp	r3, #0	@ tmp302
 3080 00e4 2FD1     		bne	.L393	@
2323:ff.c          **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 3081              		.loc 1 2323 0
 3082 00e6 07F00207 		and	r7, r7, #2	@ tmp304, mode,
 3083 00ea FFB2     		uxtb	r7, r7	@ tmp305, tmp304
 3084 00ec 0FB1     		cbz	r7, .L386	@ tmp305,
2323:ff.c          **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 3085              		.loc 1 2323 0 is_stmt 0 discriminator 1
 3086 00ee C207     		lsls	r2, r0, #31	@, D.5749,
 3087 00f0 2BD4     		bmi	.L394	@,
 3088              	.LVL401:
 3089              	.L386:
2329:ff.c          **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 3090              		.loc 1 2329 0 is_stmt 1
 3091 00f2 06F00801 		and	r1, r6, #8	@ tmp310, mode,
 3092 00f6 C8B2     		uxtb	r0, r1	@ tmp311, tmp310
 3093 00f8 08B1     		cbz	r0, .L388	@ tmp311,
2330:ff.c          **** 			mode |= FA__WRITTEN;
 3094              		.loc 1 2330 0
 3095 00fa 46F02006 		orr	r6, r6, #32	@ mode, mode,
 3096              	.LVL402:
 3097              	.L388:
2331:ff.c          **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3098              		.loc 1 2331 0
 3099 00fe 059B     		ldr	r3, [sp, #20]	@ D.5802, dj.fs
 3100 0100 DA6A     		ldr	r2, [r3, #44]	@ D.5802_106->winsect, D.5802_106->winsect
2332:ff.c          **** 		fp->dir_ptr = dir;
2333:ff.c          **** #if _FS_SHARE
2334:ff.c          **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2335:ff.c          **** 		if (!fp->lockid) res = FR_INT_ERR;
2336:ff.c          **** #endif
2337:ff.c          **** 	}
2338:ff.c          **** 
2339:ff.c          **** #else				/* R/O configuration */
2340:ff.c          **** 	if (res == FR_OK) {					/* Follow succeeded */
2341:ff.c          **** 		if (!dir) {						/* Current dir itself */
2342:ff.c          **** 			res = FR_INVALID_NAME;
2343:ff.c          **** 		} else {
ARM GAS  /tmp/ccKU0f2P.s 			page 106


2344:ff.c          **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2345:ff.c          **** 				res = FR_NO_FILE;
2346:ff.c          **** 		}
2347:ff.c          **** 	}
2348:ff.c          **** #endif
2349:ff.c          **** 	FREE_BUF();
2350:ff.c          **** 
2351:ff.c          **** 	if (res == FR_OK) {
2352:ff.c          **** 		fp->flag = mode;					/* File access mode */
 3101              		.loc 1 2352 0
 3102 0102 AE71     		strb	r6, [r5, #6]	@ mode, fp_12(D)->flag
2331:ff.c          **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3103              		.loc 1 2331 0
 3104 0104 EA61     		str	r2, [r5, #28]	@ D.5802_106->winsect, fp_12(D)->dir_sect
2332:ff.c          **** 		fp->dir_ptr = dir;
 3105              		.loc 1 2332 0
 3106 0106 2C62     		str	r4, [r5, #32]	@ dir, fp_12(D)->dir_ptr
2353:ff.c          **** 		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 3107              		.loc 1 2353 0
 3108 0108 207D     		ldrb	r0, [r4, #20]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 20B], MEM[(BYTE *)dir_202 + 20B]
 3109 010a 617D     		ldrb	r1, [r4, #21]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 21B], MEM[(BYTE *)dir_202 + 21B]
 3110 010c A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 26B], MEM[(BYTE *)dir_202 + 26B]
 3111 010e 40EA0121 		orr	r1, r0, r1, lsl #8	@, tmp321, MEM[(BYTE *)dir_202 + 20B], MEM[(BYTE *)dir_202 + 21B],
 3112 0112 E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 27B], MEM[(BYTE *)dir_202 + 27B]
 3113 0114 42EA0020 		orr	r0, r2, r0, lsl #8	@, tmp329, MEM[(BYTE *)dir_202 + 26B], MEM[(BYTE *)dir_202 + 27B],
 3114 0118 40EA0141 		orr	r1, r0, r1, lsl #16	@, tmp330, tmp329, tmp321,
 3115 011c 2961     		str	r1, [r5, #16]	@ tmp330, fp_12(D)->sclust
2354:ff.c          **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3116              		.loc 1 2354 0
 3117 011e A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 30B], MEM[(BYTE *)dir_202 + 30B]
 3118 0120 E07F     		ldrb	r0, [r4, #31]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 31B], MEM[(BYTE *)dir_202 + 31B]
 3119 0122 1104     		lsls	r1, r2, #16	@ tmp334, MEM[(BYTE *)dir_202 + 30B],
 3120 0124 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 28B], MEM[(BYTE *)dir_202 + 28B]
 3121 0126 41EA0060 		orr	r0, r1, r0, lsl #24	@, tmp335, tmp334, MEM[(BYTE *)dir_202 + 31B],
 3122 012a 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_202 + 29B], MEM[(BYTE *)dir_202 + 29B]
2355:ff.c          **** 		fp->fptr = 0;						/* File pointer */
2356:ff.c          **** 		fp->dsect = 0;
2357:ff.c          **** #if _USE_FASTSEEK
2358:ff.c          **** 		fp->cltbl = 0;						/* Normal seek mode */
2359:ff.c          **** #endif
2360:ff.c          **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 3123              		.loc 1 2360 0
 3124 012c 2B60     		str	r3, [r5, #0]	@ D.5802, fp_12(D)->fs
2354:ff.c          **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3125              		.loc 1 2354 0
 3126 012e 1043     		orrs	r0, r0, r2	@, tmp337, tmp335, MEM[(BYTE *)dir_202 + 28B]
 3127 0130 40EA0120 		orr	r0, r0, r1, lsl #8	@, tmp340, tmp337, MEM[(BYTE *)dir_202 + 29B],
 3128              		.loc 1 2360 0
 3129 0134 DB88     		ldrh	r3, [r3, #6]	@, D.5802_106->id
2354:ff.c          **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3130              		.loc 1 2354 0
 3131 0136 E860     		str	r0, [r5, #12]	@ tmp340, fp_12(D)->fsize
2355:ff.c          **** 		fp->fptr = 0;						/* File pointer */
 3132              		.loc 1 2355 0
 3133 0138 0020     		movs	r0, #0	@ tmp341,
 3134 013a A860     		str	r0, [r5, #8]	@ tmp341, fp_12(D)->fptr
2356:ff.c          **** 		fp->dsect = 0;
ARM GAS  /tmp/ccKU0f2P.s 			page 107


 3135              		.loc 1 2356 0
 3136 013c A861     		str	r0, [r5, #24]	@ tmp341, fp_12(D)->dsect
 3137              		.loc 1 2360 0
 3138 013e AB80     		strh	r3, [r5, #4]	@ movhi	@ D.5802_106->id, fp_12(D)->id
 3139 0140 04E0     		b	.L401	@
 3140              	.L392:
 3141              	.LBB7:
2297:ff.c          **** 					res = FR_EXIST;
 3142              		.loc 1 2297 0
 3143 0142 0820     		movs	r0, #8	@ res,
 3144              	.LVL403:
 3145 0144 02E0     		b	.L401	@
 3146              	.LVL404:
 3147              	.L393:
 3148              	.LBE7:
2321:ff.c          **** 				res = FR_NO_FILE;
 3149              		.loc 1 2321 0
 3150 0146 0420     		movs	r0, #4	@ res,
 3151 0148 00E0     		b	.L401	@
 3152              	.L394:
2324:ff.c          **** 					res = FR_DENIED;
 3153              		.loc 1 2324 0
 3154 014a 0720     		movs	r0, #7	@ res,
 3155              	.LVL405:
 3156              	.L401:
2361:ff.c          **** 	}
2362:ff.c          **** 
2363:ff.c          **** 	LEAVE_FF(dj.fs, res);
2364:ff.c          **** }
 3157              		.loc 1 2364 0
 3158 014c 0CB0     		add	sp, sp, #48	@,,
 3159 014e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3160              		.cfi_endproc
 3161              	.LFE23:
 3162              		.size	f_open, .-f_open
 3163              		.section	.text.f_read,"ax",%progbits
 3164              		.align	1
 3165              		.global	f_read
 3166              		.thumb
 3167              		.thumb_func
 3168              		.type	f_read, %function
 3169              	f_read:
 3170              	.LFB24:
2365:ff.c          **** 
2366:ff.c          **** 
2367:ff.c          **** 
2368:ff.c          **** 
2369:ff.c          **** /*-----------------------------------------------------------------------*/
2370:ff.c          **** /* Read File                                                             */
2371:ff.c          **** /*-----------------------------------------------------------------------*/
2372:ff.c          **** 
2373:ff.c          **** FRESULT f_read (
2374:ff.c          **** 	FIL *fp, 		/* Pointer to the file object */
2375:ff.c          **** 	void *buff,		/* Pointer to data buffer */
2376:ff.c          **** 	UINT btr,		/* Number of bytes to read */
2377:ff.c          **** 	UINT *br		/* Pointer to number of bytes read */
2378:ff.c          **** )
ARM GAS  /tmp/ccKU0f2P.s 			page 108


2379:ff.c          **** {
 3171              		.loc 1 2379 0
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 8
 3174              		@ frame_needed = 0, uses_anonymous_args = 0
 3175              	.LVL406:
 3176 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}	@
 3177              	.LCFI21:
 3178              		.cfi_def_cfa_offset 48
 3179              		.cfi_offset 0, -48
 3180              		.cfi_offset 1, -44
 3181              		.cfi_offset 2, -40
 3182              		.cfi_offset 4, -36
 3183              		.cfi_offset 5, -32
 3184              		.cfi_offset 6, -28
 3185              		.cfi_offset 7, -24
 3186              		.cfi_offset 8, -20
 3187              		.cfi_offset 9, -16
 3188              		.cfi_offset 10, -12
 3189              		.cfi_offset 11, -8
 3190              		.cfi_offset 14, -4
 3191              		.loc 1 2379 0
 3192 0004 0446     		mov	r4, r0	@ fp, fp
 3193 0006 9A46     		mov	sl, r3	@ br, br
2380:ff.c          **** 	FRESULT res;
2381:ff.c          **** 	DWORD clst, sect, remain;
2382:ff.c          **** 	UINT rcnt, cc;
2383:ff.c          **** 	BYTE csect, *rbuff = buff;
2384:ff.c          **** 
2385:ff.c          **** 
2386:ff.c          **** 	*br = 0;	/* Initialize byte counter */
 3194              		.loc 1 2386 0
 3195 0008 0023     		movs	r3, #0	@ tmp241,
 3196              	.LVL407:
2379:ff.c          **** {
 3197              		.loc 1 2379 0
 3198 000a 8846     		mov	r8, r1	@ buff, buff
 3199              	.LVL408:
 3200              		.loc 1 2386 0
 3201 000c CAF80030 		str	r3, [sl, #0]	@ tmp241, *br_10(D)
2387:ff.c          **** 
2388:ff.c          **** 	res = validate(fp->fs, fp->id);				/* Check validity */
 3202              		.loc 1 2388 0
 3203 0010 0068     		ldr	r0, [r0, #0]	@, fp_11(D)->fs
 3204              	.LVL409:
 3205 0012 A188     		ldrh	r1, [r4, #4]	@, fp_11(D)->id
 3206              	.LVL410:
2379:ff.c          **** {
 3207              		.loc 1 2379 0
 3208 0014 1746     		mov	r7, r2	@ btr, btr
 3209              		.loc 1 2388 0
 3210 0016 FFF7FEFF 		bl	validate	@
 3211              	.LVL411:
2389:ff.c          **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3212              		.loc 1 2389 0
 3213 001a 0546     		mov	r5, r0	@ res,
 3214 001c 0028     		cmp	r0, #0	@ res
ARM GAS  /tmp/ccKU0f2P.s 			page 109


 3215 001e 40F0A080 		bne	.L415	@
2390:ff.c          **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 3216              		.loc 1 2390 0
 3217 0022 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ D.5655, fp_11(D)->flag
 3218              	.LVL412:
 3219 0024 0206     		lsls	r2, r0, #24	@, D.5655,
 3220 0026 00F19980 		bmi	.L433	@,
2391:ff.c          **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2392:ff.c          **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 3221              		.loc 1 2392 0
 3222 002a C007     		lsls	r0, r0, #31	@, D.5655,
 3223 002c 40F19880 		bpl	.L434	@,
 3224              	.LVL413:
2393:ff.c          **** 		LEAVE_FF(fp->fs, FR_DENIED);
2394:ff.c          **** 	remain = fp->fsize - fp->fptr;
 3225              		.loc 1 2394 0
 3226 0030 E168     		ldr	r1, [r4, #12]	@ fp_11(D)->fsize, fp_11(D)->fsize
 3227 0032 A268     		ldr	r2, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3228 0034 8E1A     		subs	r6, r1, r2	@ tmp248, fp_11(D)->fsize, fp_11(D)->fptr
 3229              	.LVL414:
 3230 0036 B742     		cmp	r7, r6	@ btr, tmp248
 3231 0038 38BF     		it	cc
 3232 003a 3E46     		movcc	r6, r7	@ btr, btr
 3233              	.LVL415:
 3234              	.L416:
2395:ff.c          **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
2396:ff.c          **** 
2397:ff.c          **** 	for ( ;  btr;								/* Repeat until all data read */
 3235              		.loc 1 2397 0 discriminator 1
 3236 003c 002E     		cmp	r6, #0	@ btr
 3237 003e 00F09080 		beq	.L415	@
 3238              	.L432:
2398:ff.c          **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2399:ff.c          **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 3239              		.loc 1 2399 0
 3240 0042 A168     		ldr	r1, [r4, #8]	@ D.5664, fp_11(D)->fptr
 3241 0044 CB05     		lsls	r3, r1, #23	@, D.5664,
 3242 0046 70D1     		bne	.L417	@,
2400:ff.c          **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3243              		.loc 1 2400 0
 3244 0048 2068     		ldr	r0, [r4, #0]	@ D.5650, fp_11(D)->fs
 3245 004a 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ D.5650_33->csize, D.5650_33->csize
 3246 004c 5A1E     		subs	r2, r3, #1	@ tmp256, D.5650_33->csize,
 3247 004e 02EA5123 		and	r3, r2, r1, lsr #9	@, tmp259, tmp256, D.5664,
 3248              	.LVL416:
2401:ff.c          **** 			if (!csect) {						/* On the cluster boundary? */
 3249              		.loc 1 2401 0
 3250 0052 13F0FF02 		ands	r2, r3, #255	@ csect, tmp259,
 3251 0056 0CD1     		bne	.L418	@,
2402:ff.c          **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 3252              		.loc 1 2402 0
 3253 0058 09B9     		cbnz	r1, .L419	@ D.5664,
2403:ff.c          **** 					clst = fp->sclust;			/* Follow from the origin */
 3254              		.loc 1 2403 0
 3255 005a 2069     		ldr	r0, [r4, #16]	@ clst, fp_11(D)->sclust
 3256              	.LVL417:
 3257 005c 04E0     		b	.L420	@
ARM GAS  /tmp/ccKU0f2P.s 			page 110


 3258              	.LVL418:
 3259              	.L419:
2404:ff.c          **** 				} else {						/* Middle or end of the file */
2405:ff.c          **** #if _USE_FASTSEEK
2406:ff.c          **** 					if (fp->cltbl)
2407:ff.c          **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2408:ff.c          **** 					else
2409:ff.c          **** #endif
2410:ff.c          **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 3260              		.loc 1 2410 0
 3261 005e 6169     		ldr	r1, [r4, #20]	@, fp_11(D)->clust
 3262 0060 0192     		str	r2, [sp, #4]	@,
 3263 0062 FFF7FEFF 		bl	get_fat	@
 3264              	.LVL419:
 3265 0066 019A     		ldr	r2, [sp, #4]	@,
 3266              	.L420:
2411:ff.c          **** 				}
2412:ff.c          **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 3267              		.loc 1 2412 0
 3268 0068 0128     		cmp	r0, #1	@ clst,
 3269 006a 0BD9     		bls	.L444	@,
 3270              	.L421:
2413:ff.c          **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3271              		.loc 1 2413 0
 3272 006c 411C     		adds	r1, r0, #1	@, clst,
 3273 006e 55D0     		beq	.L445	@,
 3274              	.L422:
2414:ff.c          **** 				fp->clust = clst;				/* Update current cluster */
 3275              		.loc 1 2414 0
 3276 0070 6061     		str	r0, [r4, #20]	@ clst, fp_11(D)->clust
 3277              	.LVL420:
 3278              	.L418:
2415:ff.c          **** 			}
2416:ff.c          **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 3279              		.loc 1 2416 0
 3280 0072 D4F800B0 		ldr	fp, [r4, #0]	@ D.5650, fp_11(D)->fs
 3281 0076 6169     		ldr	r1, [r4, #20]	@, fp_11(D)->clust
 3282 0078 0192     		str	r2, [sp, #4]	@,
 3283 007a 5846     		mov	r0, fp	@, D.5650
 3284 007c FFF7FEFF 		bl	clust2sect	@
 3285              	.LVL421:
2417:ff.c          **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3286              		.loc 1 2417 0
 3287 0080 019B     		ldr	r3, [sp, #4]	@,
 3288 0082 20B9     		cbnz	r0, .L423	@ sect,
 3289              	.LVL422:
 3290              	.L444:
 3291              		.loc 1 2417 0 is_stmt 0 discriminator 1
 3292 0084 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3293 0086 60F07F03 		orn	r3, r0, #127	@ tmp270, fp_11(D)->flag,
 3294 008a A371     		strb	r3, [r4, #6]	@ tmp270, fp_11(D)->flag
 3295 008c 66E0     		b	.L433	@
 3296              	.LVL423:
 3297              	.L423:
2418:ff.c          **** 			sect += csect;
2419:ff.c          **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2420:ff.c          **** 			if (cc) {							/* Read maximum contiguous sectors directly */
ARM GAS  /tmp/ccKU0f2P.s 			page 111


 3298              		.loc 1 2420 0 is_stmt 1
 3299 008e 5FEA5629 		lsrs	r9, r6, #9	@ cc, btr,
2418:ff.c          **** 			sect += csect;
 3300              		.loc 1 2418 0
 3301 0092 00EB0307 		add	r7, r0, r3	@ sect, sect, csect
 3302              	.LVL424:
 3303              		.loc 1 2420 0
 3304 0096 24D0     		beq	.L424	@,
2421:ff.c          **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3305              		.loc 1 2421 0
 3306 0098 9BF80220 		ldrb	r2, [fp, #2]	@ zero_extendqisi2	@ D.5672, D.5650_48->csize
 3307 009c 09EB0300 		add	r0, r9, r3	@ tmp272, cc, csect
 3308 00a0 9042     		cmp	r0, r2	@ tmp272, D.5672
2422:ff.c          **** 					cc = fp->fs->csize - csect;
 3309              		.loc 1 2422 0
 3310 00a2 88BF     		it	hi
 3311 00a4 C3EB0209 		rsbhi	r9, r3, r2	@ cc, csect, D.5672
 3312              	.LVL425:
2423:ff.c          **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 3313              		.loc 1 2423 0
 3314 00a8 4146     		mov	r1, r8	@, rbuff
 3315 00aa 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2	@, D.5650_48->drv
 3316 00ae 3A46     		mov	r2, r7	@, sect
 3317 00b0 5FFA89F3 		uxtb	r3, r9	@, cc
 3318 00b4 FFF7FEFF 		bl	disk_read	@
 3319              	.LVL426:
 3320 00b8 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3321 00ba 80BB     		cbnz	r0, .L446	@,
 3322              	.L426:
2424:ff.c          **** 					ABORT(fp->fs, FR_DISK_ERR);
2425:ff.c          **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2426:ff.c          **** #if _FS_TINY
2427:ff.c          **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2428:ff.c          **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2429:ff.c          **** #else
2430:ff.c          **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 3323              		.loc 1 2430 0
 3324 00bc 01F04001 		and	r1, r1, #64	@ tmp283, fp_11(D)->flag,
 3325 00c0 CBB2     		uxtb	r3, r1	@ tmp284, tmp283
 3326 00c2 5BB1     		cbz	r3, .L427	@ tmp284,
 3327              		.loc 1 2430 0 is_stmt 0 discriminator 1
 3328 00c4 A269     		ldr	r2, [r4, #24]	@ fp_11(D)->dsect, fp_11(D)->dsect
 3329 00c6 D71B     		subs	r7, r2, r7	@ D.5707, fp_11(D)->dsect, sect
 3330              	.LVL427:
 3331 00c8 4F45     		cmp	r7, r9	@ D.5707, cc
 3332 00ca 07D2     		bcs	.L427	@,
2431:ff.c          **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 3333              		.loc 1 2431 0 is_stmt 1
 3334 00cc 08EB4720 		add	r0, r8, r7, lsl #9	@,, rbuff, D.5707,
 3335 00d0 04F12401 		add	r1, r4, #36	@, fp,
 3336 00d4 4FF40072 		mov	r2, #512	@,
 3337 00d8 FFF7FEFF 		bl	mem_cpy	@
 3338              	.LVL428:
 3339              	.L427:
2432:ff.c          **** #endif
2433:ff.c          **** #endif
2434:ff.c          **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
ARM GAS  /tmp/ccKU0f2P.s 			page 112


 3340              		.loc 1 2434 0
 3341 00dc 4FEA4927 		lsl	r7, r9, #9	@ rcnt, cc,
 3342              	.LVL429:
2435:ff.c          **** 				continue;
 3343              		.loc 1 2435 0
 3344 00e0 31E0     		b	.L428	@
 3345              	.LVL430:
 3346              	.L424:
2436:ff.c          **** 			}
2437:ff.c          **** #if !_FS_TINY
2438:ff.c          **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 3347              		.loc 1 2438 0
 3348 00e2 A269     		ldr	r2, [r4, #24]	@ D.5706, fp_11(D)->dsect
 3349 00e4 BA42     		cmp	r2, r7	@ D.5706, sect
 3350 00e6 1FD0     		beq	.L429	@,
2439:ff.c          **** #if !_FS_READONLY
2440:ff.c          **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 3351              		.loc 1 2440 0
 3352 00e8 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3353 00ea 00F04001 		and	r1, r0, #64	@ tmp292, fp_11(D)->flag,
 3354 00ee CBB2     		uxtb	r3, r1	@ tmp293, tmp292
 3355 00f0 5BB1     		cbz	r3, .L430	@ tmp293,
2441:ff.c          **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3356              		.loc 1 2441 0
 3357 00f2 04F12401 		add	r1, r4, #36	@, fp,
 3358 00f6 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2	@, D.5650_48->drv
 3359 00fa 0123     		movs	r3, #1	@,
 3360 00fc FFF7FEFF 		bl	disk_write	@
 3361              	.LVL431:
 3362 0100 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3363 0102 60B9     		cbnz	r0, .L446	@,
 3364              	.L431:
2442:ff.c          **** 						ABORT(fp->fs, FR_DISK_ERR);
2443:ff.c          **** 					fp->flag &= ~FA__DIRTY;
 3365              		.loc 1 2443 0
 3366 0104 21F04002 		bic	r2, r1, #64	@ tmp303, fp_11(D)->flag,
 3367 0108 A271     		strb	r2, [r4, #6]	@ tmp303, fp_11(D)->flag
 3368              	.L430:
2444:ff.c          **** 				}
2445:ff.c          **** #endif
2446:ff.c          **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 3369              		.loc 1 2446 0
 3370 010a 2146     		mov	r1, r4	@ tmp307, fp
 3371 010c 3A46     		mov	r2, r7	@, sect
 3372 010e 51F8240B 		ldr	r0, [r1], #36	@ fp_11(D)->fs, fp_11(D)->fs
 3373 0112 0123     		movs	r3, #1	@,
 3374 0114 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2	@, D.5650_100->drv
 3375 0116 FFF7FEFF 		bl	disk_read	@
 3376              	.LVL432:
 3377 011a 28B1     		cbz	r0, .L429	@,
 3378              	.LVL433:
 3379              	.L445:
2447:ff.c          **** 					ABORT(fp->fs, FR_DISK_ERR);
 3380              		.loc 1 2447 0
 3381 011c A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3382              	.L446:
 3383 011e 61F07F05 		orn	r5, r1, #127	@ tmp311, fp_11(D)->flag,
ARM GAS  /tmp/ccKU0f2P.s 			page 113


 3384 0122 A571     		strb	r5, [r4, #6]	@ tmp311, fp_11(D)->flag
 3385 0124 0125     		movs	r5, #1	@ res,
 3386 0126 1CE0     		b	.L415	@
 3387              	.LVL434:
 3388              	.L429:
2448:ff.c          **** 			}
2449:ff.c          **** #endif
2450:ff.c          **** 			fp->dsect = sect;
 3389              		.loc 1 2450 0
 3390 0128 A761     		str	r7, [r4, #24]	@ sect, fp_11(D)->dsect
 3391              	.LVL435:
 3392              	.L417:
2451:ff.c          **** 		}
2452:ff.c          **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 3393              		.loc 1 2452 0
 3394 012a A768     		ldr	r7, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3395 012c F905     		lsls	r1, r7, #23	@ tmp314, fp_11(D)->fptr,
 3396 012e CB0D     		lsrs	r3, r1, #23	@ D.5667, tmp314,
 3397 0130 C3F50077 		rsb	r7, r3, #512	@ rcnt, D.5667,
 3398              	.LVL436:
 3399 0134 BE42     		cmp	r6, r7	@ btr, rcnt
 3400 0136 38BF     		it	cc
 3401 0138 3746     		movcc	r7, r6	@ rcnt, btr
 3402              	.LVL437:
2453:ff.c          **** 		if (rcnt > btr) rcnt = btr;
2454:ff.c          **** #if _FS_TINY
2455:ff.c          **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
2456:ff.c          **** 			ABORT(fp->fs, FR_DISK_ERR);
2457:ff.c          **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2458:ff.c          **** #else
2459:ff.c          **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 3403              		.loc 1 2459 0
 3404 013a E118     		adds	r1, r4, r3	@ tmp316, fp, D.5667
 3405 013c 4046     		mov	r0, r8	@, rbuff
 3406 013e 2431     		adds	r1, r1, #36	@, tmp316,
 3407 0140 3A46     		mov	r2, r7	@, rcnt
 3408 0142 FFF7FEFF 		bl	mem_cpy	@
 3409              	.LVL438:
 3410              	.L428:
2398:ff.c          **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 3411              		.loc 1 2398 0
 3412 0146 A068     		ldr	r0, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3413 0148 DAF80030 		ldr	r3, [sl, #0]	@ *br_10(D), *br_10(D)
 3414 014c C119     		adds	r1, r0, r7	@ tmp318, fp_11(D)->fptr, rcnt
 3415 014e DA19     		adds	r2, r3, r7	@ tmp320, *br_10(D), rcnt
 3416 0150 A160     		str	r1, [r4, #8]	@ tmp318, fp_11(D)->fptr
 3417 0152 B844     		add	r8, r8, r7	@ rbuff, rbuff, rcnt
 3418              	.LVL439:
 3419 0154 CAF80020 		str	r2, [sl, #0]	@ tmp320, *br_10(D)
 3420 0158 F61B     		subs	r6, r6, r7	@ btr, btr, rcnt
 3421              	.LVL440:
 3422 015a 6FE7     		b	.L416	@
 3423              	.LVL441:
 3424              	.L433:
2391:ff.c          **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 3425              		.loc 1 2391 0
 3426 015c 0225     		movs	r5, #2	@ res,
ARM GAS  /tmp/ccKU0f2P.s 			page 114


 3427 015e 00E0     		b	.L415	@
 3428              	.LVL442:
 3429              	.L434:
2393:ff.c          **** 		LEAVE_FF(fp->fs, FR_DENIED);
 3430              		.loc 1 2393 0
 3431 0160 0725     		movs	r5, #7	@ res,
 3432              	.LVL443:
 3433              	.L415:
2460:ff.c          **** #endif
2461:ff.c          **** 	}
2462:ff.c          **** 
2463:ff.c          **** 	LEAVE_FF(fp->fs, FR_OK);
2464:ff.c          **** }
 3434              		.loc 1 2464 0
 3435 0162 2846     		mov	r0, r5	@, res
 3436 0164 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3437              		.cfi_endproc
 3438              	.LFE24:
 3439              		.size	f_read, .-f_read
 3440              		.section	.text.f_write,"ax",%progbits
 3441              		.align	1
 3442              		.global	f_write
 3443              		.thumb
 3444              		.thumb_func
 3445              		.type	f_write, %function
 3446              	f_write:
 3447              	.LFB25:
2465:ff.c          **** 
2466:ff.c          **** 
2467:ff.c          **** 
2468:ff.c          **** 
2469:ff.c          **** #if !_FS_READONLY
2470:ff.c          **** /*-----------------------------------------------------------------------*/
2471:ff.c          **** /* Write File                                                            */
2472:ff.c          **** /*-----------------------------------------------------------------------*/
2473:ff.c          **** 
2474:ff.c          **** FRESULT f_write (
2475:ff.c          **** 	FIL *fp,			/* Pointer to the file object */
2476:ff.c          **** 	const void *buff,	/* Pointer to the data to be written */
2477:ff.c          **** 	UINT btw,			/* Number of bytes to write */
2478:ff.c          **** 	UINT *bw			/* Pointer to number of bytes written */
2479:ff.c          **** )
2480:ff.c          **** {
 3448              		.loc 1 2480 0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 8
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 3452              	.LVL444:
 3453 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}	@
 3454              	.LCFI22:
 3455              		.cfi_def_cfa_offset 48
 3456              		.cfi_offset 0, -48
 3457              		.cfi_offset 1, -44
 3458              		.cfi_offset 2, -40
 3459              		.cfi_offset 4, -36
 3460              		.cfi_offset 5, -32
 3461              		.cfi_offset 6, -28
ARM GAS  /tmp/ccKU0f2P.s 			page 115


 3462              		.cfi_offset 7, -24
 3463              		.cfi_offset 8, -20
 3464              		.cfi_offset 9, -16
 3465              		.cfi_offset 10, -12
 3466              		.cfi_offset 11, -8
 3467              		.cfi_offset 14, -4
 3468              		.loc 1 2480 0
 3469 0004 0446     		mov	r4, r0	@ fp, fp
 3470 0006 9946     		mov	r9, r3	@ bw, bw
2481:ff.c          **** 	FRESULT res;
2482:ff.c          **** 	DWORD clst, sect;
2483:ff.c          **** 	UINT wcnt, cc;
2484:ff.c          **** 	const BYTE *wbuff = buff;
2485:ff.c          **** 	BYTE csect;
2486:ff.c          **** 
2487:ff.c          **** 
2488:ff.c          **** 	*bw = 0;	/* Initialize byte counter */
 3471              		.loc 1 2488 0
 3472 0008 0023     		movs	r3, #0	@ tmp248,
 3473              	.LVL445:
2480:ff.c          **** {
 3474              		.loc 1 2480 0
 3475 000a 8846     		mov	r8, r1	@ buff, buff
 3476              	.LVL446:
 3477              		.loc 1 2488 0
 3478 000c C9F80030 		str	r3, [r9, #0]	@ tmp248, *bw_10(D)
2489:ff.c          **** 
2490:ff.c          **** 	res = validate(fp->fs, fp->id);			/* Check validity */
 3479              		.loc 1 2490 0
 3480 0010 0068     		ldr	r0, [r0, #0]	@, fp_11(D)->fs
 3481              	.LVL447:
 3482 0012 A188     		ldrh	r1, [r4, #4]	@, fp_11(D)->id
 3483              	.LVL448:
2480:ff.c          **** {
 3484              		.loc 1 2480 0
 3485 0014 1746     		mov	r7, r2	@ btw, btw
 3486              		.loc 1 2490 0
 3487 0016 FFF7FEFF 		bl	validate	@
 3488              	.LVL449:
2491:ff.c          **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3489              		.loc 1 2491 0
 3490 001a 0546     		mov	r5, r0	@ res,
 3491 001c 0028     		cmp	r0, #0	@ res
 3492 001e 40F0B780 		bne	.L448	@
2492:ff.c          **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 3493              		.loc 1 2492 0
 3494 0022 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ D.5564, fp_11(D)->flag
 3495              	.LVL450:
 3496 0024 0206     		lsls	r2, r0, #24	@, D.5564,
 3497 0026 57D4     		bmi	.L481	@,
2493:ff.c          **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2494:ff.c          **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 3498              		.loc 1 2494 0
 3499 0028 00F00201 		and	r1, r0, #2	@ tmp253, D.5564,
 3500 002c CAB2     		uxtb	r2, r1	@ tmp254, tmp253
 3501 002e 002A     		cmp	r2, #0	@ tmp254
 3502 0030 00F0AD80 		beq	.L472	@
ARM GAS  /tmp/ccKU0f2P.s 			page 116


2495:ff.c          **** 		LEAVE_FF(fp->fs, FR_DENIED);
2496:ff.c          **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 3503              		.loc 1 2496 0
 3504 0034 E368     		ldr	r3, [r4, #12]	@ D.5572, fp_11(D)->fsize
 3505 0036 DF42     		cmn	r7, r3	@ btw, D.5572
 3506 0038 28BF     		it	cs	@
 3507 003a 0027     		movcs	r7, #0	@, btw,
 3508              	.LVL451:
 3509 003c 30E0     		b	.L450	@
 3510              	.LVL452:
 3511              	.L462:
2497:ff.c          **** 
2498:ff.c          **** 	for ( ;  btw;							/* Repeat until all data written */
2499:ff.c          **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2500:ff.c          **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
2501:ff.c          **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2502:ff.c          **** 			if (!csect) {					/* On the cluster boundary? */
2503:ff.c          **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2504:ff.c          **** 					clst = fp->sclust;		/* Follow from the origin */
2505:ff.c          **** 					if (clst == 0)			/* When no cluster is allocated, */
2506:ff.c          **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2507:ff.c          **** 				} else {					/* Middle or end of the file */
2508:ff.c          **** #if _USE_FASTSEEK
2509:ff.c          **** 					if (fp->cltbl)
2510:ff.c          **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2511:ff.c          **** 					else
2512:ff.c          **** #endif
2513:ff.c          **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2514:ff.c          **** 				}
2515:ff.c          **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2516:ff.c          **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2517:ff.c          **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2518:ff.c          **** 				fp->clust = clst;			/* Update current cluster */
2519:ff.c          **** 			}
2520:ff.c          **** #if _FS_TINY
2521:ff.c          **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
2522:ff.c          **** 				ABORT(fp->fs, FR_DISK_ERR);
2523:ff.c          **** #else
2524:ff.c          **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2525:ff.c          **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2526:ff.c          **** 					ABORT(fp->fs, FR_DISK_ERR);
2527:ff.c          **** 				fp->flag &= ~FA__DIRTY;
2528:ff.c          **** 			}
2529:ff.c          **** #endif
2530:ff.c          **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2531:ff.c          **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2532:ff.c          **** 			sect += csect;
2533:ff.c          **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2534:ff.c          **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 3512              		.loc 1 2534 0
 3513 003e 5FEA572B 		lsrs	fp, r7, #9	@ cc, btw,
2532:ff.c          **** 			sect += csect;
 3514              		.loc 1 2532 0
 3515 0042 00EB0A06 		add	r6, r0, sl	@ sect, sect, csect
 3516              	.LVL453:
 3517              		.loc 1 2534 0
 3518 0046 74D0     		beq	.L463	@,
ARM GAS  /tmp/ccKU0f2P.s 			page 117


2535:ff.c          **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3519              		.loc 1 2535 0
 3520 0048 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2	@ D.5582, D.5559_63->csize
 3521 004a 0BEB0A01 		add	r1, fp, sl	@ tmp295, cc, csect
 3522 004e 8142     		cmp	r1, r0	@ tmp295, D.5582
2536:ff.c          **** 					cc = fp->fs->csize - csect;
 3523              		.loc 1 2536 0
 3524 0050 88BF     		it	hi
 3525 0052 CAEB000B 		rsbhi	fp, sl, r0	@ cc, csect, D.5582
 3526              	.LVL454:
2537:ff.c          **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 3527              		.loc 1 2537 0
 3528 0056 4146     		mov	r1, r8	@, wbuff
 3529 0058 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@, D.5559_63->drv
 3530 005a 3246     		mov	r2, r6	@, sect
 3531 005c 5FFA8BF3 		uxtb	r3, fp	@, cc
 3532 0060 FFF7FEFF 		bl	disk_write	@
 3533              	.LVL455:
 3534 0064 0028     		cmp	r0, #0	@
 3535 0066 73D1     		bne	.L482	@
 3536              	.L465:
2538:ff.c          **** 					ABORT(fp->fs, FR_DISK_ERR);
2539:ff.c          **** #if _FS_TINY
2540:ff.c          **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2541:ff.c          **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2542:ff.c          **** 					fp->fs->wflag = 0;
2543:ff.c          **** 				}
2544:ff.c          **** #else
2545:ff.c          **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
 3537              		.loc 1 2545 0
 3538 0068 A369     		ldr	r3, [r4, #24]	@ fp_11(D)->dsect, fp_11(D)->dsect
 3539 006a 9E1B     		subs	r6, r3, r6	@ D.5625, fp_11(D)->dsect, sect
 3540              	.LVL456:
 3541 006c 5E45     		cmp	r6, fp	@ D.5625, cc
 3542 006e 0BD2     		bcs	.L466	@,
2546:ff.c          **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 3543              		.loc 1 2546 0
 3544 0070 04F12400 		add	r0, r4, #36	@, fp,
 3545 0074 4FF40072 		mov	r2, #512	@,
 3546 0078 08EB4621 		add	r1, r8, r6, lsl #9	@,, wbuff, D.5625,
 3547 007c FFF7FEFF 		bl	mem_cpy	@
 3548              	.LVL457:
2547:ff.c          **** 					fp->flag &= ~FA__DIRTY;
 3549              		.loc 1 2547 0
 3550 0080 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3551 0082 22F04000 		bic	r0, r2, #64	@ tmp309, fp_11(D)->flag,
 3552 0086 A071     		strb	r0, [r4, #6]	@ tmp309, fp_11(D)->flag
 3553              	.L466:
2548:ff.c          **** 				}
2549:ff.c          **** #endif
2550:ff.c          **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 3554              		.loc 1 2550 0
 3555 0088 4FEA4B26 		lsl	r6, fp, #9	@ wcnt, cc,
 3556              	.LVL458:
 3557              	.L467:
2499:ff.c          **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 3558              		.loc 1 2499 0
ARM GAS  /tmp/ccKU0f2P.s 			page 118


 3559 008c A168     		ldr	r1, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3560 008e D9F80020 		ldr	r2, [r9, #0]	@ *bw_10(D), *bw_10(D)
 3561 0092 8B19     		adds	r3, r1, r6	@ tmp330, fp_11(D)->fptr, wcnt
 3562 0094 9019     		adds	r0, r2, r6	@ tmp332, *bw_10(D), wcnt
 3563 0096 A360     		str	r3, [r4, #8]	@ tmp330, fp_11(D)->fptr
 3564 0098 B044     		add	r8, r8, r6	@ wbuff, wbuff, wcnt
 3565              	.LVL459:
 3566 009a C9F80000 		str	r0, [r9, #0]	@ tmp332, *bw_10(D)
 3567 009e BF1B     		subs	r7, r7, r6	@ btw, btw, wcnt
 3568              	.LVL460:
 3569              	.L450:
2498:ff.c          **** 	for ( ;  btw;							/* Repeat until all data written */
 3570              		.loc 1 2498 0 discriminator 1
 3571 00a0 0FB3     		cbz	r7, .L470	@ btw,
 3572              	.L469:
2500:ff.c          **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 3573              		.loc 1 2500 0
 3574 00a2 A168     		ldr	r1, [r4, #8]	@ D.5576, fp_11(D)->fptr
 3575 00a4 CA05     		lsls	r2, r1, #23	@, D.5576,
 3576 00a6 5AD1     		bne	.L451	@,
2501:ff.c          **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3577              		.loc 1 2501 0
 3578 00a8 2068     		ldr	r0, [r4, #0]	@ D.5559, fp_11(D)->fs
 3579 00aa 90F802A0 		ldrb	sl, [r0, #2]	@ zero_extendqisi2	@ D.5559_33->csize, D.5559_33->csize
 3580 00ae 0AF1FF32 		add	r2, sl, #-1	@ tmp261, D.5559_33->csize,
 3581 00b2 02EA5123 		and	r3, r2, r1, lsr #9	@, tmp264, tmp261, D.5576,
 3582              	.LVL461:
2502:ff.c          **** 			if (!csect) {					/* On the cluster boundary? */
 3583              		.loc 1 2502 0
 3584 00b6 13F0FF0A 		ands	sl, r3, #255	@ csect, tmp264,
 3585 00ba 1DD1     		bne	.L452	@,
2503:ff.c          **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 3586              		.loc 1 2503 0
 3587 00bc 71B9     		cbnz	r1, .L453	@ D.5576,
2504:ff.c          **** 					clst = fp->sclust;		/* Follow from the origin */
 3588              		.loc 1 2504 0
 3589 00be 2169     		ldr	r1, [r4, #16]	@ clst, fp_11(D)->sclust
 3590              	.LVL462:
2505:ff.c          **** 					if (clst == 0)			/* When no cluster is allocated, */
 3591              		.loc 1 2505 0
 3592 00c0 21B9     		cbnz	r1, .L454	@ clst,
2506:ff.c          **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 3593              		.loc 1 2506 0
 3594 00c2 FFF7FEFF 		bl	create_chain	@
 3595              	.LVL463:
 3596 00c6 0146     		mov	r1, r0	@ clst,
 3597              	.LVL464:
 3598 00c8 2061     		str	r0, [r4, #16]	@ clst, fp_11(D)->sclust
 3599              	.L455:
2515:ff.c          **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 3600              		.loc 1 2515 0
 3601 00ca 61B1     		cbz	r1, .L470	@ clst,
 3602              	.LVL465:
 3603              	.L454:
2516:ff.c          **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 3604              		.loc 1 2516 0
 3605 00cc 0129     		cmp	r1, #1	@ clst,
ARM GAS  /tmp/ccKU0f2P.s 			page 119


 3606 00ce A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3607 00d0 0FD1     		bne	.L458	@,
 3608              	.LVL466:
 3609              	.L480:
2531:ff.c          **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3610              		.loc 1 2531 0 discriminator 1
 3611 00d2 63F07F01 		orn	r1, r3, #127	@ tmp293, fp_11(D)->flag,
 3612 00d6 A171     		strb	r1, [r4, #6]	@ tmp293, fp_11(D)->flag
 3613              	.L481:
 3614 00d8 0225     		movs	r5, #2	@ res,
 3615 00da 59E0     		b	.L448	@
 3616              	.LVL467:
 3617              	.L453:
2513:ff.c          **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 3618              		.loc 1 2513 0
 3619 00dc 6169     		ldr	r1, [r4, #20]	@, fp_11(D)->clust
 3620 00de FFF7FEFF 		bl	create_chain	@
 3621              	.LVL468:
 3622 00e2 0146     		mov	r1, r0	@ clst,
 3623              	.LVL469:
 3624 00e4 F1E7     		b	.L455	@
 3625              	.LVL470:
 3626              	.L470:
2551:ff.c          **** 				continue;
2552:ff.c          **** 			}
2553:ff.c          **** #if _FS_TINY
2554:ff.c          **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2555:ff.c          **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2556:ff.c          **** 				fp->fs->winsect = sect;
2557:ff.c          **** 			}
2558:ff.c          **** #else
2559:ff.c          **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2560:ff.c          **** 				if (fp->fptr < fp->fsize &&
2561:ff.c          **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2562:ff.c          **** 						ABORT(fp->fs, FR_DISK_ERR);
2563:ff.c          **** 			}
2564:ff.c          **** #endif
2565:ff.c          **** 			fp->dsect = sect;
2566:ff.c          **** 		}
2567:ff.c          **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2568:ff.c          **** 		if (wcnt > btw) wcnt = btw;
2569:ff.c          **** #if _FS_TINY
2570:ff.c          **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2571:ff.c          **** 			ABORT(fp->fs, FR_DISK_ERR);
2572:ff.c          **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2573:ff.c          **** 		fp->fs->wflag = 1;
2574:ff.c          **** #else
2575:ff.c          **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2576:ff.c          **** 		fp->flag |= FA__DIRTY;
2577:ff.c          **** #endif
2578:ff.c          **** 	}
2579:ff.c          **** 
2580:ff.c          **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 3627              		.loc 1 2580 0
 3628 00e6 A068     		ldr	r0, [r4, #8]	@ D.5576, fp_11(D)->fptr
 3629 00e8 E268     		ldr	r2, [r4, #12]	@ fp_11(D)->fsize, fp_11(D)->fsize
 3630 00ea 9042     		cmp	r0, r2	@ D.5576, fp_11(D)->fsize
ARM GAS  /tmp/ccKU0f2P.s 			page 120


 3631 00ec 4AD9     		bls	.L457	@,
 3632              	.L456:
 3633              		.loc 1 2580 0 is_stmt 0 discriminator 1
 3634 00ee E060     		str	r0, [r4, #12]	@ D.5576, fp_11(D)->fsize
 3635 00f0 48E0     		b	.L457	@
 3636              	.LVL471:
 3637              	.L458:
2517:ff.c          **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3638              		.loc 1 2517 0 is_stmt 1
 3639 00f2 481C     		adds	r0, r1, #1	@, clst,
 3640 00f4 2DD0     		beq	.L483	@,
 3641              	.L459:
2518:ff.c          **** 				fp->clust = clst;			/* Update current cluster */
 3642              		.loc 1 2518 0
 3643 00f6 6161     		str	r1, [r4, #20]	@ clst, fp_11(D)->clust
 3644              	.LVL472:
 3645              	.L452:
2524:ff.c          **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 3646              		.loc 1 2524 0
 3647 00f8 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3648 00fa 00F04001 		and	r1, r0, #64	@ tmp277, fp_11(D)->flag,
 3649 00fe CAB2     		uxtb	r2, r1	@ tmp278, tmp277
 3650 0100 62B1     		cbz	r2, .L460	@ tmp278,
2525:ff.c          **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3651              		.loc 1 2525 0
 3652 0102 2146     		mov	r1, r4	@ tmp281, fp
 3653 0104 A269     		ldr	r2, [r4, #24]	@, fp_11(D)->dsect
 3654 0106 51F8243B 		ldr	r3, [r1], #36	@ fp_11(D)->fs, fp_11(D)->fs
 3655 010a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@, D.5559_53->drv
 3656 010c 0123     		movs	r3, #1	@,
 3657 010e FFF7FEFF 		bl	disk_write	@
 3658              	.LVL473:
 3659 0112 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3660 0114 E8B9     		cbnz	r0, .L483	@,
 3661              	.L461:
2527:ff.c          **** 				fp->flag &= ~FA__DIRTY;
 3662              		.loc 1 2527 0
 3663 0116 23F04000 		bic	r0, r3, #64	@ tmp289, fp_11(D)->flag,
 3664 011a A071     		strb	r0, [r4, #6]	@ tmp289, fp_11(D)->flag
 3665              	.L460:
2530:ff.c          **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 3666              		.loc 1 2530 0
 3667 011c 2268     		ldr	r2, [r4, #0]	@ D.5559, fp_11(D)->fs
 3668 011e 6169     		ldr	r1, [r4, #20]	@, fp_11(D)->clust
 3669 0120 0192     		str	r2, [sp, #4]	@,
 3670 0122 1046     		mov	r0, r2	@, D.5559
 3671 0124 FFF7FEFF 		bl	clust2sect	@
 3672              	.LVL474:
2531:ff.c          **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3673              		.loc 1 2531 0
 3674 0128 019B     		ldr	r3, [sp, #4]	@,
 3675 012a 0028     		cmp	r0, #0	@ sect
 3676 012c 87D1     		bne	.L462	@
2531:ff.c          **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3677              		.loc 1 2531 0 is_stmt 0 discriminator 1
 3678 012e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3679 0130 CFE7     		b	.L480	@
ARM GAS  /tmp/ccKU0f2P.s 			page 121


 3680              	.LVL475:
 3681              	.L463:
2559:ff.c          **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 3682              		.loc 1 2559 0 is_stmt 1
 3683 0132 A169     		ldr	r1, [r4, #24]	@ fp_11(D)->dsect, fp_11(D)->dsect
 3684 0134 B142     		cmp	r1, r6	@ fp_11(D)->dsect, sect
 3685 0136 11D0     		beq	.L468	@,
2560:ff.c          **** 				if (fp->fptr < fp->fsize &&
 3686              		.loc 1 2560 0
 3687 0138 A068     		ldr	r0, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3688 013a E268     		ldr	r2, [r4, #12]	@ fp_11(D)->fsize, fp_11(D)->fsize
 3689 013c 9042     		cmp	r0, r2	@ fp_11(D)->fptr, fp_11(D)->fsize
 3690 013e 0DD2     		bcs	.L468	@,
2561:ff.c          **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 3691              		.loc 1 2561 0 discriminator 1
 3692 0140 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@, D.5559_63->drv
 3693 0142 04F12401 		add	r1, r4, #36	@, fp,
 3694 0146 3246     		mov	r2, r6	@, sect
 3695 0148 0123     		movs	r3, #1	@,
 3696 014a FFF7FEFF 		bl	disk_read	@
 3697              	.LVL476:
2560:ff.c          **** 				if (fp->fptr < fp->fsize &&
 3698              		.loc 1 2560 0 discriminator 1
 3699 014e 28B1     		cbz	r0, .L468	@,
 3700              	.L482:
2562:ff.c          **** 						ABORT(fp->fs, FR_DISK_ERR);
 3701              		.loc 1 2562 0
 3702 0150 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3703              	.LVL477:
 3704              	.L483:
 3705 0152 63F07F05 		orn	r5, r3, #127	@ tmp319, fp_11(D)->flag,
 3706 0156 A571     		strb	r5, [r4, #6]	@ tmp319, fp_11(D)->flag
 3707 0158 0125     		movs	r5, #1	@ res,
 3708 015a 19E0     		b	.L448	@
 3709              	.LVL478:
 3710              	.L468:
2565:ff.c          **** 			fp->dsect = sect;
 3711              		.loc 1 2565 0
 3712 015c A661     		str	r6, [r4, #24]	@ sect, fp_11(D)->dsect
 3713              	.LVL479:
 3714              	.L451:
2567:ff.c          **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 3715              		.loc 1 2567 0
 3716 015e A668     		ldr	r6, [r4, #8]	@ fp_11(D)->fptr, fp_11(D)->fptr
 3717 0160 F305     		lsls	r3, r6, #23	@ tmp322, fp_11(D)->fptr,
 3718 0162 D90D     		lsrs	r1, r3, #23	@ D.5577, tmp322,
 3719 0164 C1F50076 		rsb	r6, r1, #512	@ wcnt, D.5577,
 3720              	.LVL480:
2575:ff.c          **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 3721              		.loc 1 2575 0
 3722 0168 6018     		adds	r0, r4, r1	@ tmp324, fp, D.5577
 3723 016a B742     		cmp	r7, r6	@ btw, wcnt
 3724 016c 38BF     		it	cc
 3725 016e 3E46     		movcc	r6, r7	@ wcnt, btw
 3726              	.LVL481:
 3727 0170 2430     		adds	r0, r0, #36	@, tmp324,
 3728 0172 3246     		mov	r2, r6	@, wcnt
ARM GAS  /tmp/ccKU0f2P.s 			page 122


 3729 0174 4146     		mov	r1, r8	@, wbuff
 3730 0176 FFF7FEFF 		bl	mem_cpy	@
 3731              	.LVL482:
2576:ff.c          **** 		fp->flag |= FA__DIRTY;
 3732              		.loc 1 2576 0
 3733 017a A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3734 017c 40F04002 		orr	r2, r0, #64	@ tmp328, fp_11(D)->flag,
 3735 0180 A271     		strb	r2, [r4, #6]	@ tmp328, fp_11(D)->flag
 3736 0182 83E7     		b	.L467	@
 3737              	.LVL483:
 3738              	.L457:
2581:ff.c          **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 3739              		.loc 1 2581 0
 3740 0184 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_11(D)->flag, fp_11(D)->flag
 3741 0186 43F02001 		orr	r1, r3, #32	@ tmp336, fp_11(D)->flag,
 3742 018a A171     		strb	r1, [r4, #6]	@ tmp336, fp_11(D)->flag
2582:ff.c          **** 
2583:ff.c          **** 	LEAVE_FF(fp->fs, FR_OK);
 3743              		.loc 1 2583 0
 3744 018c 00E0     		b	.L448	@
 3745              	.LVL484:
 3746              	.L472:
2495:ff.c          **** 		LEAVE_FF(fp->fs, FR_DENIED);
 3747              		.loc 1 2495 0
 3748 018e 0725     		movs	r5, #7	@ res,
 3749              	.LVL485:
 3750              	.L448:
2584:ff.c          **** }
 3751              		.loc 1 2584 0
 3752 0190 2846     		mov	r0, r5	@, res
 3753 0192 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 3754              		.cfi_endproc
 3755              	.LFE25:
 3756              		.size	f_write, .-f_write
 3757              		.section	.text.f_sync,"ax",%progbits
 3758              		.align	1
 3759              		.global	f_sync
 3760              		.thumb
 3761              		.thumb_func
 3762              		.type	f_sync, %function
 3763              	f_sync:
 3764              	.LFB26:
2585:ff.c          **** 
2586:ff.c          **** 
2587:ff.c          **** 
2588:ff.c          **** 
2589:ff.c          **** /*-----------------------------------------------------------------------*/
2590:ff.c          **** /* Synchronize the File Object                                           */
2591:ff.c          **** /*-----------------------------------------------------------------------*/
2592:ff.c          **** 
2593:ff.c          **** FRESULT f_sync (
2594:ff.c          **** 	FIL *fp		/* Pointer to the file object */
2595:ff.c          **** )
2596:ff.c          **** {
 3765              		.loc 1 2596 0
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccKU0f2P.s 			page 123


 3768              		@ frame_needed = 0, uses_anonymous_args = 0
 3769              	.LVL486:
 3770 0000 38B5     		push	{r3, r4, r5, lr}	@
 3771              	.LCFI23:
 3772              		.cfi_def_cfa_offset 16
 3773              		.cfi_offset 3, -16
 3774              		.cfi_offset 4, -12
 3775              		.cfi_offset 5, -8
 3776              		.cfi_offset 14, -4
 3777              		.loc 1 2596 0
 3778 0002 0446     		mov	r4, r0	@ fp, fp
2597:ff.c          **** 	FRESULT res;
2598:ff.c          **** 	DWORD tim;
2599:ff.c          **** 	BYTE *dir;
2600:ff.c          **** 
2601:ff.c          **** 
2602:ff.c          **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 3779              		.loc 1 2602 0
 3780 0004 0068     		ldr	r0, [r0, #0]	@, fp_3(D)->fs
 3781              	.LVL487:
 3782 0006 A188     		ldrh	r1, [r4, #4]	@, fp_3(D)->id
 3783 0008 FFF7FEFF 		bl	validate	@
 3784              	.LVL488:
2603:ff.c          **** 	if (res == FR_OK) {
 3785              		.loc 1 2603 0
 3786 000c 0028     		cmp	r0, #0	@ res
 3787 000e 4CD1     		bne	.L485	@
2604:ff.c          **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 3788              		.loc 1 2604 0
 3789 0010 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ D.5462, fp_3(D)->flag
 3790 0012 03F02002 		and	r2, r3, #32	@ tmp196, D.5462,
 3791 0016 D1B2     		uxtb	r1, r2	@ tmp197, tmp196
 3792 0018 0029     		cmp	r1, #0	@ tmp197
 3793 001a 46D0     		beq	.L485	@
2605:ff.c          **** #if !_FS_TINY	/* Write-back dirty buffer */
2606:ff.c          **** 			if (fp->flag & FA__DIRTY) {
 3794              		.loc 1 2606 0
 3795 001c 03F04000 		and	r0, r3, #64	@ tmp199, D.5462,
 3796              	.LVL489:
 3797 0020 C3B2     		uxtb	r3, r0	@ tmp200, tmp199
 3798 0022 6BB1     		cbz	r3, .L486	@ tmp200,
2607:ff.c          **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3799              		.loc 1 2607 0
 3800 0024 2146     		mov	r1, r4	@ tmp203, fp
 3801 0026 0123     		movs	r3, #1	@,
 3802 0028 51F8242B 		ldr	r2, [r1], #36	@ fp_3(D)->fs, fp_3(D)->fs
 3803 002c 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2	@, D.5458_13->drv
 3804 002e A269     		ldr	r2, [r4, #24]	@, fp_3(D)->dsect
 3805 0030 FFF7FEFF 		bl	disk_write	@
 3806              	.LVL490:
 3807 0034 0028     		cmp	r0, #0	@
 3808 0036 37D1     		bne	.L487	@
2608:ff.c          **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2609:ff.c          **** 				fp->flag &= ~FA__DIRTY;
 3809              		.loc 1 2609 0
 3810 0038 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_3(D)->flag, fp_3(D)->flag
 3811 003a 21F04000 		bic	r0, r1, #64	@ tmp207, fp_3(D)->flag,
ARM GAS  /tmp/ccKU0f2P.s 			page 124


 3812 003e A071     		strb	r0, [r4, #6]	@ tmp207, fp_3(D)->flag
 3813              	.L486:
2610:ff.c          **** 			}
2611:ff.c          **** #endif
2612:ff.c          **** 			/* Update the directory entry */
2613:ff.c          **** 			res = move_window(fp->fs, fp->dir_sect);
 3814              		.loc 1 2613 0
 3815 0040 2068     		ldr	r0, [r4, #0]	@, fp_3(D)->fs
 3816 0042 E169     		ldr	r1, [r4, #28]	@, fp_3(D)->dir_sect
 3817 0044 FFF7FEFF 		bl	move_window	@
 3818              	.LVL491:
2614:ff.c          **** 			if (res == FR_OK) {
 3819              		.loc 1 2614 0
 3820 0048 0028     		cmp	r0, #0	@ res
 3821 004a 2ED1     		bne	.L485	@
2615:ff.c          **** 				dir = fp->dir_ptr;
 3822              		.loc 1 2615 0
 3823 004c 256A     		ldr	r5, [r4, #32]	@ dir, fp_3(D)->dir_ptr
 3824              	.LVL492:
2616:ff.c          **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 3825              		.loc 1 2616 0
 3826 004e EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)dir_24 + 11B], MEM[(BYTE *)dir_24 + 11B]
 3827 0050 43F02002 		orr	r2, r3, #32	@ tmp212, MEM[(BYTE *)dir_24 + 11B],
 3828 0054 EA72     		strb	r2, [r5, #11]	@ tmp212, MEM[(BYTE *)dir_24 + 11B]
2617:ff.c          **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 3829              		.loc 1 2617 0
 3830 0056 E168     		ldr	r1, [r4, #12]	@ fp_3(D)->fsize, fp_3(D)->fsize
 3831 0058 2977     		strb	r1, [r5, #28]	@ fp_3(D)->fsize, MEM[(BYTE *)dir_24 + 28B]
 3832 005a A089     		ldrh	r0, [r4, #12]	@ fp_3(D)->fsize, fp_3(D)->fsize
 3833              	.LVL493:
 3834 005c 030A     		lsrs	r3, r0, #8	@ tmp218, fp_3(D)->fsize,
 3835 005e 6B77     		strb	r3, [r5, #29]	@ tmp218, MEM[(BYTE *)dir_24 + 29B]
 3836 0060 E289     		ldrh	r2, [r4, #14]	@ tmp220, fp_3(D)->fsize
 3837 0062 AA77     		strb	r2, [r5, #30]	@ tmp220, MEM[(BYTE *)dir_24 + 30B]
 3838 0064 E17B     		ldrb	r1, [r4, #15]	@ zero_extendqisi2	@ tmp223, fp_3(D)->fsize
 3839 0066 E977     		strb	r1, [r5, #31]	@ tmp223, MEM[(BYTE *)dir_24 + 31B]
2618:ff.c          **** 				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 3840              		.loc 1 2618 0
 3841 0068 2069     		ldr	r0, [r4, #16]	@ fp_3(D)->sclust, fp_3(D)->sclust
 3842 006a A876     		strb	r0, [r5, #26]	@ fp_3(D)->sclust, MEM[(BYTE *)dir_24 + 26B]
 3843 006c 238A     		ldrh	r3, [r4, #16]	@ fp_3(D)->sclust, fp_3(D)->sclust
 3844 006e 1A0A     		lsrs	r2, r3, #8	@ tmp230, fp_3(D)->sclust,
 3845 0070 EA76     		strb	r2, [r5, #27]	@ tmp230, MEM[(BYTE *)dir_24 + 27B]
 3846 0072 618A     		ldrh	r1, [r4, #18]	@ tmp232, fp_3(D)->sclust
 3847 0074 2975     		strb	r1, [r5, #20]	@ tmp232, MEM[(BYTE *)dir_24 + 20B]
 3848 0076 608A     		ldrh	r0, [r4, #18]	@ tmp237, fp_3(D)->sclust
 3849 0078 030A     		lsrs	r3, r0, #8	@ tmp238, tmp237,
 3850 007a 6B75     		strb	r3, [r5, #21]	@ tmp238, MEM[(BYTE *)dir_24 + 21B]
2619:ff.c          **** 				tim = get_fattime();						/* Update updated time */
 3851              		.loc 1 2619 0
 3852 007c FFF7FEFF 		bl	get_fattime	@
 3853              	.LVL494:
2620:ff.c          **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 3854              		.loc 1 2620 0
 3855 0080 A875     		strb	r0, [r5, #22]	@ tim, MEM[(BYTE *)dir_24 + 22B]
 3856 0082 010C     		lsrs	r1, r0, #16	@ tmp244, tim,
 3857 0084 C0F30722 		ubfx	r2, r0, #8, #8	@ tmp242, tim,,
ARM GAS  /tmp/ccKU0f2P.s 			page 125


 3858 0088 000E     		lsrs	r0, r0, #24	@ tmp246, tim,
 3859              	.LVL495:
 3860 008a EA75     		strb	r2, [r5, #23]	@ tmp242, MEM[(BYTE *)dir_24 + 23B]
 3861 008c 6876     		strb	r0, [r5, #25]	@ tmp246, MEM[(BYTE *)dir_24 + 25B]
 3862 008e 2976     		strb	r1, [r5, #24]	@ tmp244, MEM[(BYTE *)dir_24 + 24B]
2621:ff.c          **** 				fp->flag &= ~FA__WRITTEN;
 3863              		.loc 1 2621 0
 3864 0090 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_3(D)->flag, fp_3(D)->flag
2622:ff.c          **** 				fp->fs->wflag = 1;
 3865              		.loc 1 2622 0
 3866 0092 2168     		ldr	r1, [r4, #0]	@ D.5458, fp_3(D)->fs
 3867 0094 0120     		movs	r0, #1	@ tmp252,
2621:ff.c          **** 				fp->flag &= ~FA__WRITTEN;
 3868              		.loc 1 2621 0
 3869 0096 23F02002 		bic	r2, r3, #32	@ tmp250, fp_3(D)->flag,
 3870 009a A271     		strb	r2, [r4, #6]	@ tmp250, fp_3(D)->flag
 3871              		.loc 1 2622 0
 3872 009c 0871     		strb	r0, [r1, #4]	@ tmp252, D.5458_78->wflag
2623:ff.c          **** 				res = sync(fp->fs);
 3873              		.loc 1 2623 0
 3874 009e 2068     		ldr	r0, [r4, #0]	@, fp_3(D)->fs
2624:ff.c          **** 			}
2625:ff.c          **** 		}
2626:ff.c          **** 	}
2627:ff.c          **** 
2628:ff.c          **** 	LEAVE_FF(fp->fs, res);
2629:ff.c          **** }
 3875              		.loc 1 2629 0
 3876 00a0 BDE83840 		pop	{r3, r4, r5, lr}	@
2623:ff.c          **** 				res = sync(fp->fs);
 3877              		.loc 1 2623 0
 3878 00a4 FFF7FEBF 		b	sync	@
 3879              	.LVL496:
 3880              	.L487:
2608:ff.c          **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 3881              		.loc 1 2608 0
 3882 00a8 0120     		movs	r0, #1	@ res,
 3883              	.L485:
 3884              		.loc 1 2629 0
 3885 00aa 38BD     		pop	{r3, r4, r5, pc}	@
 3886              		.cfi_endproc
 3887              	.LFE26:
 3888              		.size	f_sync, .-f_sync
 3889              		.section	.text.f_close,"ax",%progbits
 3890              		.align	1
 3891              		.global	f_close
 3892              		.thumb
 3893              		.thumb_func
 3894              		.type	f_close, %function
 3895              	f_close:
 3896              	.LFB27:
2630:ff.c          **** 
2631:ff.c          **** #endif /* !_FS_READONLY */
2632:ff.c          **** 
2633:ff.c          **** 
2634:ff.c          **** 
2635:ff.c          **** 
ARM GAS  /tmp/ccKU0f2P.s 			page 126


2636:ff.c          **** /*-----------------------------------------------------------------------*/
2637:ff.c          **** /* Close File                                                            */
2638:ff.c          **** /*-----------------------------------------------------------------------*/
2639:ff.c          **** 
2640:ff.c          **** FRESULT f_close (
2641:ff.c          **** 	FIL *fp		/* Pointer to the file object to be closed */
2642:ff.c          **** )
2643:ff.c          **** {
 3897              		.loc 1 2643 0
 3898              		.cfi_startproc
 3899              		@ args = 0, pretend = 0, frame = 0
 3900              		@ frame_needed = 0, uses_anonymous_args = 0
 3901              	.LVL497:
 3902 0000 10B5     		push	{r4, lr}	@
 3903              	.LCFI24:
 3904              		.cfi_def_cfa_offset 8
 3905              		.cfi_offset 4, -8
 3906              		.cfi_offset 14, -4
 3907              		.loc 1 2643 0
 3908 0002 0446     		mov	r4, r0	@ fp, fp
2644:ff.c          **** 	FRESULT res;
2645:ff.c          **** 
2646:ff.c          **** #if _FS_READONLY
2647:ff.c          **** 	FATFS *fs = fp->fs;
2648:ff.c          **** 	res = validate(fs, fp->id);
2649:ff.c          **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2650:ff.c          **** 	LEAVE_FF(fs, res);
2651:ff.c          **** 
2652:ff.c          **** #else
2653:ff.c          **** 	res = f_sync(fp);		/* Flush cached data */
 3909              		.loc 1 2653 0
 3910 0004 FFF7FEFF 		bl	f_sync	@
 3911              	.LVL498:
2654:ff.c          **** #if _FS_SHARE
2655:ff.c          **** 	if (res == FR_OK) {		/* Decrement open counter */
2656:ff.c          **** #if _FS_REENTRANT
2657:ff.c          **** 		res = validate(fp->fs, fp->id);
2658:ff.c          **** 		if (res == FR_OK) {
2659:ff.c          **** 			res = dec_lock(fp->lockid);	
2660:ff.c          **** 			unlock_fs(fp->fs, FR_OK);
2661:ff.c          **** 		}
2662:ff.c          **** #else
2663:ff.c          **** 		res = dec_lock(fp->lockid);
2664:ff.c          **** #endif
2665:ff.c          **** 	}
2666:ff.c          **** #endif
2667:ff.c          **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 3912              		.loc 1 2667 0
 3913 0008 00B9     		cbnz	r0, .L495	@ res,
 3914              		.loc 1 2667 0 is_stmt 0 discriminator 1
 3915 000a 2060     		str	r0, [r4, #0]	@ res, fp_1(D)->fs
 3916              	.L495:
2668:ff.c          **** 	return res;
2669:ff.c          **** #endif
2670:ff.c          **** }
 3917              		.loc 1 2670 0 is_stmt 1
 3918 000c 10BD     		pop	{r4, pc}	@
ARM GAS  /tmp/ccKU0f2P.s 			page 127


 3919              		.cfi_endproc
 3920              	.LFE27:
 3921              		.size	f_close, .-f_close
 3922              		.section	.text.f_lseek,"ax",%progbits
 3923              		.align	1
 3924              		.global	f_lseek
 3925              		.thumb
 3926              		.thumb_func
 3927              		.type	f_lseek, %function
 3928              	f_lseek:
 3929              	.LFB28:
2671:ff.c          **** 
2672:ff.c          **** 
2673:ff.c          **** 
2674:ff.c          **** 
2675:ff.c          **** /*-----------------------------------------------------------------------*/
2676:ff.c          **** /* Current Drive/Directory Handlings                                     */
2677:ff.c          **** /*-----------------------------------------------------------------------*/
2678:ff.c          **** 
2679:ff.c          **** #if _FS_RPATH >= 1
2680:ff.c          **** 
2681:ff.c          **** FRESULT f_chdrive (
2682:ff.c          **** 	BYTE drv		/* Drive number */
2683:ff.c          **** )
2684:ff.c          **** {
2685:ff.c          **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2686:ff.c          **** 
2687:ff.c          **** 	CurrVol = drv;
2688:ff.c          **** 
2689:ff.c          **** 	return FR_OK;
2690:ff.c          **** }
2691:ff.c          **** 
2692:ff.c          **** 
2693:ff.c          **** 
2694:ff.c          **** FRESULT f_chdir (
2695:ff.c          **** 	const TCHAR *path	/* Pointer to the directory path */
2696:ff.c          **** )
2697:ff.c          **** {
2698:ff.c          **** 	FRESULT res;
2699:ff.c          **** 	DIR dj;
2700:ff.c          **** 	DEF_NAMEBUF;
2701:ff.c          **** 
2702:ff.c          **** 
2703:ff.c          **** 	res = chk_mounted(&path, &dj.fs, 0);
2704:ff.c          **** 	if (res == FR_OK) {
2705:ff.c          **** 		INIT_BUF(dj);
2706:ff.c          **** 		res = follow_path(&dj, path);		/* Follow the path */
2707:ff.c          **** 		FREE_BUF();
2708:ff.c          **** 		if (res == FR_OK) {					/* Follow completed */
2709:ff.c          **** 			if (!dj.dir) {
2710:ff.c          **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2711:ff.c          **** 			} else {
2712:ff.c          **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2713:ff.c          **** 					dj.fs->cdir = LD_CLUST(dj.dir);
2714:ff.c          **** 				else
2715:ff.c          **** 					res = FR_NO_PATH;		/* Reached but a file */
2716:ff.c          **** 			}
ARM GAS  /tmp/ccKU0f2P.s 			page 128


2717:ff.c          **** 		}
2718:ff.c          **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2719:ff.c          **** 	}
2720:ff.c          **** 
2721:ff.c          **** 	LEAVE_FF(dj.fs, res);
2722:ff.c          **** }
2723:ff.c          **** 
2724:ff.c          **** 
2725:ff.c          **** #if _FS_RPATH >= 2
2726:ff.c          **** FRESULT f_getcwd (
2727:ff.c          **** 	TCHAR *path,	/* Pointer to the directory path */
2728:ff.c          **** 	UINT sz_path	/* Size of path */
2729:ff.c          **** )
2730:ff.c          **** {
2731:ff.c          **** 	FRESULT res;
2732:ff.c          **** 	DIR dj;
2733:ff.c          **** 	UINT i, n;
2734:ff.c          **** 	DWORD ccl;
2735:ff.c          **** 	TCHAR *tp;
2736:ff.c          **** 	FILINFO fno;
2737:ff.c          **** 	DEF_NAMEBUF;
2738:ff.c          **** 
2739:ff.c          **** 
2740:ff.c          **** 	*path = 0;
2741:ff.c          **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2742:ff.c          **** 	if (res == FR_OK) {
2743:ff.c          **** 		INIT_BUF(dj);
2744:ff.c          **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2745:ff.c          **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2746:ff.c          **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2747:ff.c          **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2748:ff.c          **** 			if (res != FR_OK) break;
2749:ff.c          **** 			res = dir_read(&dj);
2750:ff.c          **** 			if (res != FR_OK) break;
2751:ff.c          **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2752:ff.c          **** 			res = dir_sdi(&dj, 0);
2753:ff.c          **** 			if (res != FR_OK) break;
2754:ff.c          **** 			do {							/* Find the entry links to the child dir */
2755:ff.c          **** 				res = dir_read(&dj);
2756:ff.c          **** 				if (res != FR_OK) break;
2757:ff.c          **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2758:ff.c          **** 				res = dir_next(&dj, 0);	
2759:ff.c          **** 			} while (res == FR_OK);
2760:ff.c          **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2761:ff.c          **** 			if (res != FR_OK) break;
2762:ff.c          **** #if _USE_LFN
2763:ff.c          **** 			fno.lfname = path;
2764:ff.c          **** 			fno.lfsize = i;
2765:ff.c          **** #endif
2766:ff.c          **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2767:ff.c          **** 			tp = fno.fname;
2768:ff.c          **** 			if (_USE_LFN && *path) tp = path;
2769:ff.c          **** 			for (n = 0; tp[n]; n++) ;
2770:ff.c          **** 			if (i < n + 3) {
2771:ff.c          **** 				res = FR_NOT_ENOUGH_CORE; break;
2772:ff.c          **** 			}
2773:ff.c          **** 			while (n) path[--i] = tp[--n];
ARM GAS  /tmp/ccKU0f2P.s 			page 129


2774:ff.c          **** 			path[--i] = '/';
2775:ff.c          **** 		}
2776:ff.c          **** 		tp = path;
2777:ff.c          **** 		if (res == FR_OK) {
2778:ff.c          **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2779:ff.c          **** 			*tp++ = ':';
2780:ff.c          **** 			if (i == sz_path) {				/* Root-dir */
2781:ff.c          **** 				*tp++ = '/';
2782:ff.c          **** 			} else {						/* Sub-dir */
2783:ff.c          **** 				do		/* Add stacked path str */
2784:ff.c          **** 					*tp++ = path[i++];
2785:ff.c          **** 				while (i < sz_path);
2786:ff.c          **** 			}
2787:ff.c          **** 		}
2788:ff.c          **** 		*tp = 0;
2789:ff.c          **** 		FREE_BUF();
2790:ff.c          **** 	}
2791:ff.c          **** 
2792:ff.c          **** 	LEAVE_FF(dj.fs, res);
2793:ff.c          **** }
2794:ff.c          **** #endif /* _FS_RPATH >= 2 */
2795:ff.c          **** #endif /* _FS_RPATH >= 1 */
2796:ff.c          **** 
2797:ff.c          **** 
2798:ff.c          **** 
2799:ff.c          **** #if _FS_MINIMIZE <= 2
2800:ff.c          **** /*-----------------------------------------------------------------------*/
2801:ff.c          **** /* Seek File R/W Pointer                                                 */
2802:ff.c          **** /*-----------------------------------------------------------------------*/
2803:ff.c          **** 
2804:ff.c          **** FRESULT f_lseek (
2805:ff.c          **** 	FIL *fp,		/* Pointer to the file object */
2806:ff.c          **** 	DWORD ofs		/* File pointer from top of file */
2807:ff.c          **** )
2808:ff.c          **** {
 3930              		.loc 1 2808 0
 3931              		.cfi_startproc
 3932              		@ args = 0, pretend = 0, frame = 0
 3933              		@ frame_needed = 0, uses_anonymous_args = 0
 3934              	.LVL499:
 3935 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 3936              	.LCFI25:
 3937              		.cfi_def_cfa_offset 24
 3938              		.cfi_offset 3, -24
 3939              		.cfi_offset 4, -20
 3940              		.cfi_offset 5, -16
 3941              		.cfi_offset 6, -12
 3942              		.cfi_offset 7, -8
 3943              		.cfi_offset 14, -4
 3944              		.loc 1 2808 0
 3945 0002 0446     		mov	r4, r0	@ fp, fp
 3946 0004 0D46     		mov	r5, r1	@ ofs, ofs
2809:ff.c          **** 	FRESULT res;
2810:ff.c          **** 
2811:ff.c          **** 
2812:ff.c          **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 3947              		.loc 1 2812 0
ARM GAS  /tmp/ccKU0f2P.s 			page 130


 3948 0006 0068     		ldr	r0, [r0, #0]	@, fp_12(D)->fs
 3949              	.LVL500:
 3950 0008 A188     		ldrh	r1, [r4, #4]	@, fp_12(D)->id
 3951              	.LVL501:
 3952 000a FFF7FEFF 		bl	validate	@
 3953              	.LVL502:
2813:ff.c          **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3954              		.loc 1 2813 0
 3955 000e 0646     		mov	r6, r0	@ res,
 3956 0010 0028     		cmp	r0, #0	@ res
 3957 0012 40F09380 		bne	.L497	@
2814:ff.c          **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 3958              		.loc 1 2814 0
 3959 0016 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2	@ D.5378, fp_12(D)->flag
 3960 0018 1106     		lsls	r1, r2, #24	@, D.5378,
 3961 001a 00F18E80 		bmi	.L520	@,
 3962              	.LBB8:
2815:ff.c          **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2816:ff.c          **** 
2817:ff.c          **** #if _USE_FASTSEEK
2818:ff.c          **** 	if (fp->cltbl) {	/* Fast seek */
2819:ff.c          **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2820:ff.c          **** 
2821:ff.c          **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2822:ff.c          **** 			tbl = fp->cltbl;
2823:ff.c          **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2824:ff.c          **** 			cl = fp->sclust;			/* Top of the chain */
2825:ff.c          **** 			if (cl) {
2826:ff.c          **** 				do {
2827:ff.c          **** 					/* Get a fragment */
2828:ff.c          **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2829:ff.c          **** 					do {
2830:ff.c          **** 						pcl = cl; ncl++;
2831:ff.c          **** 						cl = get_fat(fp->fs, cl);
2832:ff.c          **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2833:ff.c          **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2834:ff.c          **** 					} while (cl == pcl + 1);
2835:ff.c          **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2836:ff.c          **** 						*tbl++ = ncl; *tbl++ = tcl;
2837:ff.c          **** 					}
2838:ff.c          **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2839:ff.c          **** 			}
2840:ff.c          **** 			*fp->cltbl = ulen;	/* Number of items used */
2841:ff.c          **** 			if (ulen <= tlen)
2842:ff.c          **** 				*tbl = 0;		/* Terminate table */
2843:ff.c          **** 			else
2844:ff.c          **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2845:ff.c          **** 
2846:ff.c          **** 		} else {						/* Fast seek */
2847:ff.c          **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2848:ff.c          **** 				ofs = fp->fsize;
2849:ff.c          **** 			fp->fptr = ofs;				/* Set file pointer */
2850:ff.c          **** 			if (ofs) {
2851:ff.c          **** 				fp->clust = clmt_clust(fp, ofs - 1);
2852:ff.c          **** 				dsc = clust2sect(fp->fs, fp->clust);
2853:ff.c          **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2854:ff.c          **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
ARM GAS  /tmp/ccKU0f2P.s 			page 131


2855:ff.c          **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2856:ff.c          **** #if !_FS_TINY
2857:ff.c          **** #if !_FS_READONLY
2858:ff.c          **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2859:ff.c          **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2860:ff.c          **** 							ABORT(fp->fs, FR_DISK_ERR);
2861:ff.c          **** 						fp->flag &= ~FA__DIRTY;
2862:ff.c          **** 					}
2863:ff.c          **** #endif
2864:ff.c          **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2865:ff.c          **** 						ABORT(fp->fs, FR_DISK_ERR);
2866:ff.c          **** #endif
2867:ff.c          **** 					fp->dsect = dsc;
2868:ff.c          **** 				}
2869:ff.c          **** 			}
2870:ff.c          **** 		}
2871:ff.c          **** 	} else
2872:ff.c          **** #endif
2873:ff.c          **** 
2874:ff.c          **** 	/* Normal Seek */
2875:ff.c          **** 	{
2876:ff.c          **** 		DWORD clst, bcs, nsect, ifptr;
2877:ff.c          **** 
2878:ff.c          **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 3963              		.loc 1 2878 0
 3964 001e E368     		ldr	r3, [r4, #12]	@ ofs, fp_12(D)->fsize
 3965 0020 9D42     		cmp	r5, r3	@ ofs, ofs
 3966 0022 05D9     		bls	.L498	@,
2879:ff.c          **** #if !_FS_READONLY
2880:ff.c          **** 			 && !(fp->flag & FA_WRITE)
 3967              		.loc 1 2880 0
 3968 0024 02F00200 		and	r0, r2, #2	@ tmp214, D.5378,
 3969              	.LVL503:
 3970 0028 C1B2     		uxtb	r1, r0	@ tmp215, tmp214
 3971 002a 0029     		cmp	r1, #0	@ tmp215,
 3972 002c 08BF     		it	eq	@
 3973 002e 1D46     		moveq	r5, r3	@, ofs, ofs
 3974              	.LVL504:
 3975              	.L498:
2881:ff.c          **** #endif
2882:ff.c          **** 			) ofs = fp->fsize;
2883:ff.c          **** 
2884:ff.c          **** 		ifptr = fp->fptr;
2885:ff.c          **** 		fp->fptr = nsect = 0;
 3976              		.loc 1 2885 0
 3977 0030 0022     		movs	r2, #0	@ tmp216,
2884:ff.c          **** 		ifptr = fp->fptr;
 3978              		.loc 1 2884 0
 3979 0032 A368     		ldr	r3, [r4, #8]	@ ifptr, fp_12(D)->fptr
 3980              	.LVL505:
 3981              		.loc 1 2885 0
 3982 0034 A260     		str	r2, [r4, #8]	@ tmp216, fp_12(D)->fptr
2886:ff.c          **** 		if (ofs) {
 3983              		.loc 1 2886 0
 3984 0036 0DB9     		cbnz	r5, .L499	@ ofs,
 3985              	.LVL506:
 3986              	.L506:
ARM GAS  /tmp/ccKU0f2P.s 			page 132


2885:ff.c          **** 		fp->fptr = nsect = 0;
 3987              		.loc 1 2885 0
 3988 0038 0025     		movs	r5, #0	@ nsect,
 3989              	.LVL507:
 3990 003a 4DE0     		b	.L500	@
 3991              	.LVL508:
 3992              	.L499:
2887:ff.c          **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 3993              		.loc 1 2887 0
 3994 003c 2068     		ldr	r0, [r4, #0]	@ D.5373, fp_12(D)->fs
 3995 003e 8778     		ldrb	r7, [r0, #2]	@ zero_extendqisi2	@ D.5373_28->csize, D.5373_28->csize
 3996 0040 7F02     		lsls	r7, r7, #9	@ bcs, D.5373_28->csize,
 3997              	.LVL509:
2888:ff.c          **** 			if (ifptr > 0 &&
 3998              		.loc 1 2888 0
 3999 0042 6BB1     		cbz	r3, .L501	@ ifptr,
2889:ff.c          **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4000              		.loc 1 2889 0 discriminator 1
 4001 0044 013B     		subs	r3, r3, #1	@ D.5398, ifptr,
 4002              	.LVL510:
 4003 0046 691E     		subs	r1, r5, #1	@ tmp218, ofs,
 4004 0048 B1FBF7F1 		udiv	r1, r1, r7	@ tmp220, tmp218, bcs
 4005 004c B3FBF7F2 		udiv	r2, r3, r7	@ tmp222, D.5398, bcs
2888:ff.c          **** 			if (ifptr > 0 &&
 4006              		.loc 1 2888 0 discriminator 1
 4007 0050 9142     		cmp	r1, r2	@ tmp220, tmp222
 4008 0052 05D3     		bcc	.L501	@,
2890:ff.c          **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 4009              		.loc 1 2890 0
 4010 0054 7842     		negs	r0, r7	@ tmp223, bcs
 4011 0056 0340     		ands	r3, r3, r0	@, D.5402, D.5398, tmp223
 4012 0058 A360     		str	r3, [r4, #8]	@ D.5402, fp_12(D)->fptr
2891:ff.c          **** 				ofs -= fp->fptr;
 4013              		.loc 1 2891 0
 4014 005a ED1A     		subs	r5, r5, r3	@ ofs, ofs, D.5402
 4015              	.LVL511:
2892:ff.c          **** 				clst = fp->clust;
 4016              		.loc 1 2892 0
 4017 005c 6169     		ldr	r1, [r4, #20]	@ clst, fp_12(D)->clust
 4018              	.LVL512:
 4019 005e 0AE0     		b	.L502	@
 4020              	.LVL513:
 4021              	.L501:
2893:ff.c          **** 			} else {									/* When seek to back cluster, */
2894:ff.c          **** 				clst = fp->sclust;						/* start from the first cluster */
 4022              		.loc 1 2894 0
 4023 0060 2169     		ldr	r1, [r4, #16]	@ clst, fp_12(D)->sclust
 4024              	.LVL514:
2895:ff.c          **** #if !_FS_READONLY
2896:ff.c          **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 4025              		.loc 1 2896 0
 4026 0062 39B9     		cbnz	r1, .L503	@ clst,
2897:ff.c          **** 					clst = create_chain(fp->fs, 0);
 4027              		.loc 1 2897 0
 4028 0064 FFF7FEFF 		bl	create_chain	@
 4029              	.LVL515:
2898:ff.c          **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
ARM GAS  /tmp/ccKU0f2P.s 			page 133


 4030              		.loc 1 2898 0
 4031 0068 0128     		cmp	r0, #1	@ clst,
2897:ff.c          **** 					clst = create_chain(fp->fs, 0);
 4032              		.loc 1 2897 0
 4033 006a 0146     		mov	r1, r0	@ clst,
 4034              	.LVL516:
 4035              		.loc 1 2898 0
 4036 006c 2DD0     		beq	.L541	@,
 4037              	.L504:
2899:ff.c          **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4038              		.loc 1 2899 0
 4039 006e 431C     		adds	r3, r0, #1	@, clst,
 4040 0070 52D0     		beq	.L539	@,
 4041              	.L505:
2900:ff.c          **** 					fp->sclust = clst;
 4042              		.loc 1 2900 0
 4043 0072 2061     		str	r0, [r4, #16]	@ clst, fp_12(D)->sclust
 4044              	.LVL517:
 4045              	.L503:
2901:ff.c          **** 				}
2902:ff.c          **** #endif
2903:ff.c          **** 				fp->clust = clst;
 4046              		.loc 1 2903 0
 4047 0074 6161     		str	r1, [r4, #20]	@ clst, fp_12(D)->clust
 4048              	.L502:
2904:ff.c          **** 			}
2905:ff.c          **** 			if (clst != 0) {
 4049              		.loc 1 2905 0
 4050 0076 0029     		cmp	r1, #0	@ clst
 4051 0078 DED0     		beq	.L506	@
 4052              	.LVL518:
 4053              	.L538:
2906:ff.c          **** 				while (ofs > bcs) {						/* Cluster following loop */
 4054              		.loc 1 2906 0 discriminator 1
 4055 007a BD42     		cmp	r5, r7	@ ofs, bcs
 4056 007c 1CD9     		bls	.L509	@,
 4057              	.L514:
2907:ff.c          **** #if !_FS_READONLY
2908:ff.c          **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 4058              		.loc 1 2908 0
 4059 007e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
2909:ff.c          **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 4060              		.loc 1 2909 0
 4061 0080 2068     		ldr	r0, [r4, #0]	@, fp_12(D)->fs
2908:ff.c          **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 4062              		.loc 1 2908 0
 4063 0082 03F00202 		and	r2, r3, #2	@ tmp235, fp_12(D)->flag,
 4064 0086 D3B2     		uxtb	r3, r2	@ tmp236, tmp235
 4065 0088 23B1     		cbz	r3, .L508	@ tmp236,
 4066              		.loc 1 2909 0
 4067 008a FFF7FEFF 		bl	create_chain	@
 4068              	.LVL519:
2910:ff.c          **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 4069              		.loc 1 2910 0
 4070 008e 0146     		mov	r1, r0	@ clst,
 4071 0090 18B9     		cbnz	r0, .L510	@ clst,
 4072 0092 10E0     		b	.L542	@
ARM GAS  /tmp/ccKU0f2P.s 			page 134


 4073              	.LVL520:
 4074              	.L508:
2911:ff.c          **** 							ofs = bcs; break;
2912:ff.c          **** 						}
2913:ff.c          **** 					} else
2914:ff.c          **** #endif
2915:ff.c          **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 4075              		.loc 1 2915 0
 4076 0094 FFF7FEFF 		bl	get_fat	@
 4077              	.LVL521:
 4078 0098 0146     		mov	r1, r0	@ clst,
 4079              	.LVL522:
 4080              	.L510:
2916:ff.c          **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4081              		.loc 1 2916 0
 4082 009a 481C     		adds	r0, r1, #1	@, clst,
 4083              	.LVL523:
 4084 009c 3CD0     		beq	.L539	@,
 4085              	.L511:
2917:ff.c          **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 4086              		.loc 1 2917 0
 4087 009e 0129     		cmp	r1, #1	@ clst,
 4088 00a0 13D9     		bls	.L541	@,
 4089              		.loc 1 2917 0 is_stmt 0 discriminator 2
 4090 00a2 2068     		ldr	r0, [r4, #0]	@ fp_12(D)->fs, fp_12(D)->fs
 4091 00a4 8269     		ldr	r2, [r0, #24]	@ D.5373_62->n_fatent, D.5373_62->n_fatent
 4092 00a6 9142     		cmp	r1, r2	@ clst, D.5373_62->n_fatent
 4093 00a8 0FD2     		bcs	.L541	@,
 4094              	.L513:
2918:ff.c          **** 					fp->clust = clst;
2919:ff.c          **** 					fp->fptr += bcs;
 4095              		.loc 1 2919 0 is_stmt 1
 4096 00aa A368     		ldr	r3, [r4, #8]	@ fp_12(D)->fptr, fp_12(D)->fptr
2918:ff.c          **** 					fp->clust = clst;
 4097              		.loc 1 2918 0
 4098 00ac 6161     		str	r1, [r4, #20]	@ clst, fp_12(D)->clust
 4099              		.loc 1 2919 0
 4100 00ae D819     		adds	r0, r3, r7	@ tmp247, fp_12(D)->fptr, bcs
 4101 00b0 A060     		str	r0, [r4, #8]	@ tmp247, fp_12(D)->fptr
2920:ff.c          **** 					ofs -= bcs;
 4102              		.loc 1 2920 0
 4103 00b2 ED1B     		subs	r5, r5, r7	@ ofs, ofs, bcs
 4104              	.LVL524:
 4105 00b4 E1E7     		b	.L538	@
 4106              	.LVL525:
 4107              	.L542:
2910:ff.c          **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 4108              		.loc 1 2910 0
 4109 00b6 3D46     		mov	r5, r7	@ ofs, bcs
 4110              	.LVL526:
 4111              	.L509:
2921:ff.c          **** 				}
2922:ff.c          **** 				fp->fptr += ofs;
 4112              		.loc 1 2922 0
 4113 00b8 A268     		ldr	r2, [r4, #8]	@ fp_12(D)->fptr, fp_12(D)->fptr
 4114 00ba 5319     		adds	r3, r2, r5	@ tmp249, fp_12(D)->fptr, ofs
 4115 00bc A360     		str	r3, [r4, #8]	@ tmp249, fp_12(D)->fptr
ARM GAS  /tmp/ccKU0f2P.s 			page 135


2923:ff.c          **** 				if (ofs % SS(fp->fs)) {
 4116              		.loc 1 2923 0
 4117 00be EB05     		lsls	r3, r5, #23	@, ofs,
 4118 00c0 BAD0     		beq	.L506	@,
2924:ff.c          **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 4119              		.loc 1 2924 0
 4120 00c2 2068     		ldr	r0, [r4, #0]	@, fp_12(D)->fs
 4121 00c4 FFF7FEFF 		bl	clust2sect	@
 4122              	.LVL527:
2925:ff.c          **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 4123              		.loc 1 2925 0
 4124 00c8 20B9     		cbnz	r0, .L515	@ nsect,
 4125              	.LVL528:
 4126              	.L541:
 4127              		.loc 1 2925 0 is_stmt 0 discriminator 1
 4128 00ca A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
 4129 00cc 60F07F02 		orn	r2, r0, #127	@ tmp255, fp_12(D)->flag,
 4130 00d0 A271     		strb	r2, [r4, #6]	@ tmp255, fp_12(D)->flag
 4131 00d2 32E0     		b	.L520	@
 4132              	.LVL529:
 4133              	.L515:
2926:ff.c          **** 					nsect += ofs / SS(fp->fs);
 4134              		.loc 1 2926 0 is_stmt 1
 4135 00d4 00EB5525 		add	r5, r0, r5, lsr #9	@, nsect, nsect, ofs,
 4136              	.LVL530:
 4137              	.L500:
2927:ff.c          **** 				}
2928:ff.c          **** 			}
2929:ff.c          **** 		}
2930:ff.c          **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 4138              		.loc 1 2930 0
 4139 00d8 A168     		ldr	r1, [r4, #8]	@ fp_12(D)->fptr, fp_12(D)->fptr
 4140 00da CB05     		lsls	r3, r1, #23	@, fp_12(D)->fptr,
 4141 00dc 23D0     		beq	.L516	@,
 4142              		.loc 1 2930 0 is_stmt 0 discriminator 1
 4143 00de A269     		ldr	r2, [r4, #24]	@ D.5435, fp_12(D)->dsect
 4144 00e0 9542     		cmp	r5, r2	@ nsect, D.5435
 4145 00e2 20D0     		beq	.L516	@,
2931:ff.c          **** #if !_FS_TINY
2932:ff.c          **** #if !_FS_READONLY
2933:ff.c          **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 4146              		.loc 1 2933 0 is_stmt 1
 4147 00e4 A079     		ldrb	r0, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
 4148 00e6 00F04003 		and	r3, r0, #64	@ tmp264, fp_12(D)->flag,
 4149 00ea D9B2     		uxtb	r1, r3	@ tmp265, tmp264
 4150 00ec 59B1     		cbz	r1, .L517	@ tmp265,
2934:ff.c          **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 4151              		.loc 1 2934 0
 4152 00ee 2146     		mov	r1, r4	@ tmp268, fp
 4153 00f0 0123     		movs	r3, #1	@,
 4154 00f2 51F8240B 		ldr	r0, [r1], #36	@ fp_12(D)->fs, fp_12(D)->fs
 4155 00f6 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2	@, D.5373_86->drv
 4156 00f8 FFF7FEFF 		bl	disk_write	@
 4157              	.LVL531:
 4158 00fc A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
 4159 00fe 60B9     		cbnz	r0, .L540	@,
 4160              	.L518:
ARM GAS  /tmp/ccKU0f2P.s 			page 136


2935:ff.c          **** 					ABORT(fp->fs, FR_DISK_ERR);
2936:ff.c          **** 				fp->flag &= ~FA__DIRTY;
 4161              		.loc 1 2936 0
 4162 0100 21F04002 		bic	r2, r1, #64	@ tmp276, fp_12(D)->flag,
 4163 0104 A271     		strb	r2, [r4, #6]	@ tmp276, fp_12(D)->flag
 4164              	.L517:
2937:ff.c          **** 			}
2938:ff.c          **** #endif
2939:ff.c          **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 4165              		.loc 1 2939 0
 4166 0106 2146     		mov	r1, r4	@ tmp280, fp
 4167 0108 2A46     		mov	r2, r5	@, nsect
 4168 010a 51F8243B 		ldr	r3, [r1], #36	@ fp_12(D)->fs, fp_12(D)->fs
 4169 010e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@, D.5373_96->drv
 4170 0110 0123     		movs	r3, #1	@,
 4171 0112 FFF7FEFF 		bl	disk_read	@
 4172              	.LVL532:
 4173 0116 28B1     		cbz	r0, .L519	@,
 4174              	.LVL533:
 4175              	.L539:
2940:ff.c          **** 				ABORT(fp->fs, FR_DISK_ERR);
 4176              		.loc 1 2940 0
 4177 0118 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
 4178              	.L540:
 4179 011a 61F07F06 		orn	r6, r1, #127	@ tmp284, fp_12(D)->flag,
 4180 011e A671     		strb	r6, [r4, #6]	@ tmp284, fp_12(D)->flag
 4181 0120 0126     		movs	r6, #1	@ res,
 4182 0122 0BE0     		b	.L497	@
 4183              	.LVL534:
 4184              	.L519:
2941:ff.c          **** #endif
2942:ff.c          **** 			fp->dsect = nsect;
 4185              		.loc 1 2942 0
 4186 0124 A561     		str	r5, [r4, #24]	@ nsect, fp_12(D)->dsect
 4187              	.L516:
2943:ff.c          **** 		}
2944:ff.c          **** #if !_FS_READONLY
2945:ff.c          **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 4188              		.loc 1 2945 0
 4189 0126 A168     		ldr	r1, [r4, #8]	@ D.5403, fp_12(D)->fptr
 4190 0128 E068     		ldr	r0, [r4, #12]	@ fp_12(D)->fsize, fp_12(D)->fsize
 4191 012a 8142     		cmp	r1, r0	@ D.5403, fp_12(D)->fsize
 4192 012c 06D9     		bls	.L497	@,
2946:ff.c          **** 			fp->fsize = fp->fptr;
2947:ff.c          **** 			fp->flag |= FA__WRITTEN;
 4193              		.loc 1 2947 0
 4194 012e A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2	@ fp_12(D)->flag, fp_12(D)->flag
2946:ff.c          **** 			fp->fsize = fp->fptr;
 4195              		.loc 1 2946 0
 4196 0130 E160     		str	r1, [r4, #12]	@ D.5403, fp_12(D)->fsize
 4197              		.loc 1 2947 0
 4198 0132 42F02003 		orr	r3, r2, #32	@ tmp289, fp_12(D)->flag,
 4199 0136 A371     		strb	r3, [r4, #6]	@ tmp289, fp_12(D)->flag
 4200 0138 00E0     		b	.L497	@
 4201              	.LVL535:
 4202              	.L520:
 4203              	.LBE8:
ARM GAS  /tmp/ccKU0f2P.s 			page 137


2815:ff.c          **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 4204              		.loc 1 2815 0
 4205 013a 0226     		movs	r6, #2	@ res,
 4206              	.LVL536:
 4207              	.L497:
2948:ff.c          **** 		}
2949:ff.c          **** #endif
2950:ff.c          **** 	}
2951:ff.c          **** 
2952:ff.c          **** 	LEAVE_FF(fp->fs, res);
2953:ff.c          **** }
 4208              		.loc 1 2953 0
 4209 013c 3046     		mov	r0, r6	@, res
 4210 013e F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 4211              		.cfi_endproc
 4212              	.LFE28:
 4213              		.size	f_lseek, .-f_lseek
 4214              		.section	.text.f_opendir,"ax",%progbits
 4215              		.align	1
 4216              		.global	f_opendir
 4217              		.thumb
 4218              		.thumb_func
 4219              		.type	f_opendir, %function
 4220              	f_opendir:
 4221              	.LFB29:
2954:ff.c          **** 
2955:ff.c          **** 
2956:ff.c          **** 
2957:ff.c          **** #if _FS_MINIMIZE <= 1
2958:ff.c          **** /*-----------------------------------------------------------------------*/
2959:ff.c          **** /* Create a Directroy Object                                             */
2960:ff.c          **** /*-----------------------------------------------------------------------*/
2961:ff.c          **** 
2962:ff.c          **** FRESULT f_opendir (
2963:ff.c          **** 	DIR *dj,			/* Pointer to directory object to create */
2964:ff.c          **** 	const TCHAR *path	/* Pointer to the directory path */
2965:ff.c          **** )
2966:ff.c          **** {
 4222              		.loc 1 2966 0
 4223              		.cfi_startproc
 4224              		@ args = 0, pretend = 0, frame = 24
 4225              		@ frame_needed = 0, uses_anonymous_args = 0
 4226              	.LVL537:
 4227 0000 10B5     		push	{r4, lr}	@
 4228              	.LCFI26:
 4229              		.cfi_def_cfa_offset 8
 4230              		.cfi_offset 4, -8
 4231              		.cfi_offset 14, -4
 4232 0002 86B0     		sub	sp, sp, #24	@,,
 4233              	.LCFI27:
 4234              		.cfi_def_cfa_offset 32
 4235              		.loc 1 2966 0
 4236 0004 0446     		mov	r4, r0	@ dj, dj
 4237 0006 06A8     		add	r0, sp, #24	@ tmp164,,
 4238              	.LVL538:
2967:ff.c          **** 	FRESULT res;
2968:ff.c          **** 	DEF_NAMEBUF;
ARM GAS  /tmp/ccKU0f2P.s 			page 138


2969:ff.c          **** 
2970:ff.c          **** 
2971:ff.c          **** 	res = chk_mounted(&path, &dj->fs, 0);
 4239              		.loc 1 2971 0
 4240 0008 0022     		movs	r2, #0	@,
2966:ff.c          **** {
 4241              		.loc 1 2966 0
 4242 000a 40F8141D 		str	r1, [r0, #-20]!	@ path, path
 4243              		.loc 1 2971 0
 4244 000e 2146     		mov	r1, r4	@, dj
 4245              	.LVL539:
 4246 0010 FFF7FEFF 		bl	chk_mounted	@
 4247              	.LVL540:
2972:ff.c          **** 	if (res == FR_OK) {
 4248              		.loc 1 2972 0
 4249 0014 18BB     		cbnz	r0, .L551	@ res,
2973:ff.c          **** 		INIT_BUF(*dj);
 4250              		.loc 1 2973 0
 4251 0016 03AB     		add	r3, sp, #12	@ tmp166,,
 4252 0018 A361     		str	r3, [r4, #24]	@ tmp166, dj_4(D)->fn
2974:ff.c          **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 4253              		.loc 1 2974 0
 4254 001a 2046     		mov	r0, r4	@, dj
 4255              	.LVL541:
 4256 001c 0199     		ldr	r1, [sp, #4]	@, path
 4257 001e FFF7FEFF 		bl	follow_path	@
 4258              	.LVL542:
2975:ff.c          **** 		FREE_BUF();
2976:ff.c          **** 		if (res == FR_OK) {						/* Follow completed */
 4259              		.loc 1 2976 0
 4260 0022 B8B9     		cbnz	r0, .L545	@ res,
2977:ff.c          **** 			if (dj->dir) {						/* It is not the root dir */
 4261              		.loc 1 2977 0
 4262 0024 6069     		ldr	r0, [r4, #20]	@ D.4830, dj_4(D)->dir
 4263 0026 78B1     		cbz	r0, .L546	@ D.4830,
2978:ff.c          **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 4264              		.loc 1 2978 0
 4265 0028 C27A     		ldrb	r2, [r0, #11]	@ zero_extendqisi2	@ MEM[(BYTE *)D.4830_9 + 11B], MEM[(BYTE *)D.4830_9 + 11B]
 4266 002a 02F01001 		and	r1, r2, #16	@ tmp171, MEM[(BYTE *)D.4830_9 + 11B],
 4267 002e CBB2     		uxtb	r3, r1	@ tmp172, tmp171
 4268 0030 A3B1     		cbz	r3, .L548	@ tmp172,
2979:ff.c          **** 					dj->sclust = LD_CLUST(dj->dir);
 4269              		.loc 1 2979 0
 4270 0032 417D     		ldrb	r1, [r0, #21]	@ zero_extendqisi2	@ MEM[(BYTE *)D.4830_9 + 21B], MEM[(BYTE *)D.4830_9 + 21B]
 4271 0034 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2	@ MEM[(BYTE *)D.4830_9 + 20B], MEM[(BYTE *)D.4830_9 + 20B]
 4272 0036 42EA0122 		orr	r2, r2, r1, lsl #8	@, tmp179, MEM[(BYTE *)D.4830_9 + 20B], MEM[(BYTE *)D.4830_9 + 21B],
 4273 003a C17E     		ldrb	r1, [r0, #27]	@ zero_extendqisi2	@ MEM[(BYTE *)D.4830_9 + 27B], MEM[(BYTE *)D.4830_9 + 27B]
 4274 003c 807E     		ldrb	r0, [r0, #26]	@ zero_extendqisi2	@ MEM[(BYTE *)D.4830_9 + 26B], MEM[(BYTE *)D.4830_9 + 26B]
 4275 003e 40EA0123 		orr	r3, r0, r1, lsl #8	@, tmp187, MEM[(BYTE *)D.4830_9 + 26B], MEM[(BYTE *)D.4830_9 + 27B],
 4276 0042 43EA0242 		orr	r2, r3, r2, lsl #16	@, tmp188, tmp187, tmp179,
 4277 0046 A260     		str	r2, [r4, #8]	@ tmp188, dj_4(D)->sclust
 4278              	.L546:
 4279              	.LVL543:
2980:ff.c          **** 				} else {						/* The object is not a directory */
2981:ff.c          **** 					res = FR_NO_PATH;
2982:ff.c          **** 				}
2983:ff.c          **** 			}
ARM GAS  /tmp/ccKU0f2P.s 			page 139


2984:ff.c          **** 			if (res == FR_OK) {
2985:ff.c          **** 				dj->id = dj->fs->id;
 4280              		.loc 1 2985 0
 4281 0048 2168     		ldr	r1, [r4, #0]	@ dj_4(D)->fs, dj_4(D)->fs
 4282 004a C888     		ldrh	r0, [r1, #6]	@, D.4866_44->id
 4283 004c A080     		strh	r0, [r4, #4]	@ movhi	@ D.4866_44->id, dj_4(D)->id
2986:ff.c          **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 4284              		.loc 1 2986 0
 4285 004e 2046     		mov	r0, r4	@, dj
 4286 0050 FFF7FEFF 		bl	dir_sdi.constprop.0	@
 4287              	.LVL544:
 4288              	.L545:
2987:ff.c          **** 			}
2988:ff.c          **** 		}
2989:ff.c          **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 4289              		.loc 1 2989 0
 4290 0054 0428     		cmp	r0, #4	@ res,
 4291 0056 08BF     		it	eq	@
 4292 0058 0520     		moveq	r0, #5	@, res,
 4293 005a 00E0     		b	.L551	@
 4294              	.L548:
2981:ff.c          **** 					res = FR_NO_PATH;
 4295              		.loc 1 2981 0
 4296 005c 0520     		movs	r0, #5	@ res,
 4297              	.L551:
2990:ff.c          **** 	}
2991:ff.c          **** 
2992:ff.c          **** 	LEAVE_FF(dj->fs, res);
2993:ff.c          **** }
 4298              		.loc 1 2993 0
 4299 005e 06B0     		add	sp, sp, #24	@,,
 4300 0060 10BD     		pop	{r4, pc}
 4301              		.cfi_endproc
 4302              	.LFE29:
 4303              		.size	f_opendir, .-f_opendir
 4304              		.section	.text.f_readdir,"ax",%progbits
 4305              		.align	1
 4306              		.global	f_readdir
 4307              		.thumb
 4308              		.thumb_func
 4309              		.type	f_readdir, %function
 4310              	f_readdir:
 4311              	.LFB30:
2994:ff.c          **** 
2995:ff.c          **** 
2996:ff.c          **** 
2997:ff.c          **** 
2998:ff.c          **** /*-----------------------------------------------------------------------*/
2999:ff.c          **** /* Read Directory Entry in Sequense                                      */
3000:ff.c          **** /*-----------------------------------------------------------------------*/
3001:ff.c          **** 
3002:ff.c          **** FRESULT f_readdir (
3003:ff.c          **** 	DIR *dj,			/* Pointer to the open directory object */
3004:ff.c          **** 	FILINFO *fno		/* Pointer to file information to return */
3005:ff.c          **** )
3006:ff.c          **** {
 4312              		.loc 1 3006 0
ARM GAS  /tmp/ccKU0f2P.s 			page 140


 4313              		.cfi_startproc
 4314              		@ args = 0, pretend = 0, frame = 16
 4315              		@ frame_needed = 0, uses_anonymous_args = 0
 4316              	.LVL545:
 4317 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}	@
 4318              	.LCFI28:
 4319              		.cfi_def_cfa_offset 32
 4320              		.cfi_offset 0, -32
 4321              		.cfi_offset 1, -28
 4322              		.cfi_offset 2, -24
 4323              		.cfi_offset 3, -20
 4324              		.cfi_offset 4, -16
 4325              		.cfi_offset 5, -12
 4326              		.cfi_offset 6, -8
 4327              		.cfi_offset 14, -4
 4328              		.loc 1 3006 0
 4329 0002 0446     		mov	r4, r0	@ dj, dj
 4330 0004 0E46     		mov	r6, r1	@ fno, fno
3007:ff.c          **** 	FRESULT res;
3008:ff.c          **** 	DEF_NAMEBUF;
3009:ff.c          **** 
3010:ff.c          **** 
3011:ff.c          **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 4331              		.loc 1 3011 0
 4332 0006 0068     		ldr	r0, [r0, #0]	@, dj_3(D)->fs
 4333              	.LVL546:
 4334 0008 A188     		ldrh	r1, [r4, #4]	@, dj_3(D)->id
 4335              	.LVL547:
 4336 000a FFF7FEFF 		bl	validate	@
 4337              	.LVL548:
3012:ff.c          **** 	if (res == FR_OK) {
 4338              		.loc 1 3012 0
 4339 000e 0546     		mov	r5, r0	@ res,
 4340 0010 E0B9     		cbnz	r0, .L555	@ res,
3013:ff.c          **** 		if (!fno) {
 4341              		.loc 1 3013 0
 4342 0012 1EB9     		cbnz	r6, .L556	@ fno,
3014:ff.c          **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 4343              		.loc 1 3014 0
 4344 0014 2046     		mov	r0, r4	@, dj
 4345              	.LVL549:
 4346 0016 FFF7FEFF 		bl	dir_sdi.constprop.0	@
 4347              	.LVL550:
 4348 001a 16E0     		b	.L560	@
 4349              	.LVL551:
 4350              	.L556:
3015:ff.c          **** 		} else {
3016:ff.c          **** 			INIT_BUF(*dj);
 4351              		.loc 1 3016 0
 4352 001c 01AB     		add	r3, sp, #4	@ tmp145,,
 4353 001e A361     		str	r3, [r4, #24]	@ tmp145, dj_3(D)->fn
3017:ff.c          **** 			res = dir_read(dj);				/* Read an directory item */
 4354              		.loc 1 3017 0
 4355 0020 2046     		mov	r0, r4	@, dj
 4356              	.LVL552:
 4357 0022 FFF7FEFF 		bl	dir_read	@
 4358              	.LVL553:
ARM GAS  /tmp/ccKU0f2P.s 			page 141


3018:ff.c          **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 4359              		.loc 1 3018 0
 4360 0026 0428     		cmp	r0, #4	@ tmp146,
 4361 0028 01D1     		bne	.L557	@,
3019:ff.c          **** 				dj->sect = 0;
 4362              		.loc 1 3019 0
 4363 002a 2561     		str	r5, [r4, #16]	@ res, dj_3(D)->sect
 4364              	.LVL554:
 4365 002c 00E0     		b	.L558	@
 4366              	.LVL555:
 4367              	.L557:
3020:ff.c          **** 				res = FR_OK;
3021:ff.c          **** 			}
3022:ff.c          **** 			if (res == FR_OK) {				/* A valid entry is found */
 4368              		.loc 1 3022 0
 4369 002e 60B9     		cbnz	r0, .L560	@ tmp146,
 4370              	.LVL556:
 4371              	.L558:
3023:ff.c          **** 				get_fileinfo(dj, fno);		/* Get the object information */
 4372              		.loc 1 3023 0
 4373 0030 2046     		mov	r0, r4	@, dj
 4374 0032 3146     		mov	r1, r6	@, fno
 4375 0034 FFF7FEFF 		bl	get_fileinfo	@
 4376              	.LVL557:
3024:ff.c          **** 				res = dir_next(dj, 0);		/* Increment index for next */
 4377              		.loc 1 3024 0
 4378 0038 0021     		movs	r1, #0	@,
 4379 003a 2046     		mov	r0, r4	@, dj
 4380 003c FFF7FEFF 		bl	dir_next	@
 4381              	.LVL558:
3025:ff.c          **** 				if (res == FR_NO_FILE) {
 4382              		.loc 1 3025 0
 4383 0040 0428     		cmp	r0, #4	@ tmp148,
 4384 0042 02D1     		bne	.L560	@,
3026:ff.c          **** 					dj->sect = 0;
 4385              		.loc 1 3026 0
 4386 0044 0020     		movs	r0, #0	@ tmp149,
 4387              	.LVL559:
 4388 0046 2061     		str	r0, [r4, #16]	@ tmp149, dj_3(D)->sect
 4389              	.LVL560:
 4390 0048 00E0     		b	.L555	@
 4391              	.LVL561:
 4392              	.L560:
3025:ff.c          **** 				if (res == FR_NO_FILE) {
 4393              		.loc 1 3025 0
 4394 004a 0546     		mov	r5, r0	@ res, tmp148
 4395              	.L555:
 4396              	.LVL562:
3027:ff.c          **** 					res = FR_OK;
3028:ff.c          **** 				}
3029:ff.c          **** 			}
3030:ff.c          **** 			FREE_BUF();
3031:ff.c          **** 		}
3032:ff.c          **** 	}
3033:ff.c          **** 
3034:ff.c          **** 	LEAVE_FF(dj->fs, res);
3035:ff.c          **** }
ARM GAS  /tmp/ccKU0f2P.s 			page 142


 4397              		.loc 1 3035 0
 4398 004c 2846     		mov	r0, r5	@, res
 4399 004e 04B0     		add	sp, sp, #16	@,,
 4400 0050 70BD     		pop	{r4, r5, r6, pc}
 4401              		.cfi_endproc
 4402              	.LFE30:
 4403              		.size	f_readdir, .-f_readdir
 4404              		.section	.rodata.str1.1,"aMS",%progbits,1
 4405              	.LC0:
 4406 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 4406      3A3B3C3D 
 4406      3E3F5B5D 
 4406      7C7F00
 4407              		.section	.bss.Fsid,"aw",%nobits
 4408              		.align	1
 4409              		.set	.LANCHOR1,. + 0
 4410              		.type	Fsid, %object
 4411              		.size	Fsid, 2
 4412              	Fsid:
 4413 0000 0000     		.space	2
 4414              		.section	.rodata.excvt.4406,"a",%progbits
 4415              		.set	.LANCHOR2,. + 0
 4416              		.type	excvt.4406, %object
 4417              		.size	excvt.4406, 128
 4418              	excvt.4406:
 4419 0000 80       		.byte	-128
 4420 0001 81       		.byte	-127
 4421 0002 82       		.byte	-126
 4422 0003 83       		.byte	-125
 4423 0004 84       		.byte	-124
 4424 0005 85       		.byte	-123
 4425 0006 86       		.byte	-122
 4426 0007 87       		.byte	-121
 4427 0008 88       		.byte	-120
 4428 0009 89       		.byte	-119
 4429 000a 8A       		.byte	-118
 4430 000b 8B       		.byte	-117
 4431 000c 8C       		.byte	-116
 4432 000d 8D       		.byte	-115
 4433 000e 8E       		.byte	-114
 4434 000f 8F       		.byte	-113
 4435 0010 90       		.byte	-112
 4436 0011 91       		.byte	-111
 4437 0012 92       		.byte	-110
 4438 0013 93       		.byte	-109
 4439 0014 94       		.byte	-108
 4440 0015 95       		.byte	-107
 4441 0016 96       		.byte	-106
 4442 0017 97       		.byte	-105
 4443 0018 98       		.byte	-104
 4444 0019 99       		.byte	-103
 4445 001a AD       		.byte	-83
 4446 001b 9B       		.byte	-101
 4447 001c 8C       		.byte	-116
 4448 001d 9D       		.byte	-99
 4449 001e AE       		.byte	-82
 4450 001f 9F       		.byte	-97
ARM GAS  /tmp/ccKU0f2P.s 			page 143


 4451 0020 A0       		.byte	-96
 4452 0021 21       		.byte	33
 4453 0022 A2       		.byte	-94
 4454 0023 A3       		.byte	-93
 4455 0024 A4       		.byte	-92
 4456 0025 A5       		.byte	-91
 4457 0026 A6       		.byte	-90
 4458 0027 A7       		.byte	-89
 4459 0028 A8       		.byte	-88
 4460 0029 A9       		.byte	-87
 4461 002a AA       		.byte	-86
 4462 002b AB       		.byte	-85
 4463 002c AC       		.byte	-84
 4464 002d AD       		.byte	-83
 4465 002e AE       		.byte	-82
 4466 002f AF       		.byte	-81
 4467 0030 B0       		.byte	-80
 4468 0031 B1       		.byte	-79
 4469 0032 B2       		.byte	-78
 4470 0033 B3       		.byte	-77
 4471 0034 B4       		.byte	-76
 4472 0035 B5       		.byte	-75
 4473 0036 B6       		.byte	-74
 4474 0037 B7       		.byte	-73
 4475 0038 B8       		.byte	-72
 4476 0039 B9       		.byte	-71
 4477 003a BA       		.byte	-70
 4478 003b BB       		.byte	-69
 4479 003c BC       		.byte	-68
 4480 003d BD       		.byte	-67
 4481 003e BE       		.byte	-66
 4482 003f BF       		.byte	-65
 4483 0040 C0       		.byte	-64
 4484 0041 C1       		.byte	-63
 4485 0042 C2       		.byte	-62
 4486 0043 C3       		.byte	-61
 4487 0044 C4       		.byte	-60
 4488 0045 C5       		.byte	-59
 4489 0046 C6       		.byte	-58
 4490 0047 C7       		.byte	-57
 4491 0048 C8       		.byte	-56
 4492 0049 C9       		.byte	-55
 4493 004a CA       		.byte	-54
 4494 004b CB       		.byte	-53
 4495 004c CC       		.byte	-52
 4496 004d CD       		.byte	-51
 4497 004e CE       		.byte	-50
 4498 004f CF       		.byte	-49
 4499 0050 D0       		.byte	-48
 4500 0051 D1       		.byte	-47
 4501 0052 D2       		.byte	-46
 4502 0053 D3       		.byte	-45
 4503 0054 D4       		.byte	-44
 4504 0055 D5       		.byte	-43
 4505 0056 D6       		.byte	-42
 4506 0057 D7       		.byte	-41
 4507 0058 D8       		.byte	-40
ARM GAS  /tmp/ccKU0f2P.s 			page 144


 4508 0059 D9       		.byte	-39
 4509 005a DA       		.byte	-38
 4510 005b DB       		.byte	-37
 4511 005c DC       		.byte	-36
 4512 005d DD       		.byte	-35
 4513 005e DE       		.byte	-34
 4514 005f DF       		.byte	-33
 4515 0060 C0       		.byte	-64
 4516 0061 C1       		.byte	-63
 4517 0062 C2       		.byte	-62
 4518 0063 C3       		.byte	-61
 4519 0064 C4       		.byte	-60
 4520 0065 C5       		.byte	-59
 4521 0066 C6       		.byte	-58
 4522 0067 C7       		.byte	-57
 4523 0068 C8       		.byte	-56
 4524 0069 C9       		.byte	-55
 4525 006a CA       		.byte	-54
 4526 006b CB       		.byte	-53
 4527 006c CC       		.byte	-52
 4528 006d CD       		.byte	-51
 4529 006e CE       		.byte	-50
 4530 006f CF       		.byte	-49
 4531 0070 D0       		.byte	-48
 4532 0071 D1       		.byte	-47
 4533 0072 D2       		.byte	-46
 4534 0073 D3       		.byte	-45
 4535 0074 D4       		.byte	-44
 4536 0075 D5       		.byte	-43
 4537 0076 D6       		.byte	-42
 4538 0077 F7       		.byte	-9
 4539 0078 D8       		.byte	-40
 4540 0079 D9       		.byte	-39
 4541 007a DA       		.byte	-38
 4542 007b DB       		.byte	-37
 4543 007c DC       		.byte	-36
 4544 007d DD       		.byte	-35
 4545 007e DE       		.byte	-34
 4546 007f 9F       		.byte	-97
 4547              		.section	.bss.FatFs,"aw",%nobits
 4548              		.align	2
 4549              		.set	.LANCHOR0,. + 0
 4550              		.type	FatFs, %object
 4551              		.size	FatFs, 4
 4552              	FatFs:
 4553 0000 00000000 		.space	4
 4554              		.text
 4555              	.Letext0:
 4556              		.file 2 "integer.h"
 4557              		.file 3 "ff.h"
 4558              		.file 4 "diskio.h"
 4559              		.section	.debug_info,"",%progbits
 4560              	.Ldebug_info0:
 4561 0000 521B0000 		.4byte	0x1b52
 4562 0004 0200     		.2byte	0x2
 4563 0006 00000000 		.4byte	.Ldebug_abbrev0
 4564 000a 04       		.byte	0x4
ARM GAS  /tmp/ccKU0f2P.s 			page 145


 4565 000b 01       		.uleb128 0x1
 4566 000c DB000000 		.4byte	.LASF135
 4567 0010 01       		.byte	0x1
 4568 0011 4C000000 		.4byte	.LASF136
 4569 0015 1E030000 		.4byte	.LASF137
 4570 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4571 001d 00000000 		.4byte	0
 4572 0021 00000000 		.4byte	0
 4573 0025 00000000 		.4byte	.Ldebug_line0
 4574 0029 02       		.uleb128 0x2
 4575 002a 04       		.byte	0x4
 4576 002b 05       		.byte	0x5
 4577 002c 696E7400 		.ascii	"int\000"
 4578 0030 03       		.uleb128 0x3
 4579 0031 D9010000 		.4byte	.LASF3
 4580 0035 02       		.byte	0x2
 4581 0036 11       		.byte	0x11
 4582 0037 3B000000 		.4byte	0x3b
 4583 003b 04       		.uleb128 0x4
 4584 003c 04       		.byte	0x4
 4585 003d 07       		.byte	0x7
 4586 003e CC010000 		.4byte	.LASF0
 4587 0042 04       		.uleb128 0x4
 4588 0043 01       		.byte	0x1
 4589 0044 08       		.byte	0x8
 4590 0045 51040000 		.4byte	.LASF1
 4591 0049 04       		.uleb128 0x4
 4592 004a 01       		.byte	0x1
 4593 004b 08       		.byte	0x8
 4594 004c B8030000 		.4byte	.LASF2
 4595 0050 03       		.uleb128 0x3
 4596 0051 B2010000 		.4byte	.LASF4
 4597 0055 02       		.byte	0x2
 4598 0056 16       		.byte	0x16
 4599 0057 49000000 		.4byte	0x49
 4600 005b 04       		.uleb128 0x4
 4601 005c 02       		.byte	0x2
 4602 005d 05       		.byte	0x5
 4603 005e CC030000 		.4byte	.LASF5
 4604 0062 04       		.uleb128 0x4
 4605 0063 02       		.byte	0x2
 4606 0064 07       		.byte	0x7
 4607 0065 17020000 		.4byte	.LASF6
 4608 0069 03       		.uleb128 0x3
 4609 006a 0B030000 		.4byte	.LASF7
 4610 006e 02       		.byte	0x2
 4611 006f 1B       		.byte	0x1b
 4612 0070 62000000 		.4byte	0x62
 4613 0074 04       		.uleb128 0x4
 4614 0075 04       		.byte	0x4
 4615 0076 05       		.byte	0x5
 4616 0077 24010000 		.4byte	.LASF8
 4617 007b 04       		.uleb128 0x4
 4618 007c 04       		.byte	0x4
 4619 007d 07       		.byte	0x7
 4620 007e E4010000 		.4byte	.LASF9
 4621 0082 03       		.uleb128 0x3
ARM GAS  /tmp/ccKU0f2P.s 			page 146


 4622 0083 85010000 		.4byte	.LASF10
 4623 0087 02       		.byte	0x2
 4624 0088 21       		.byte	0x21
 4625 0089 7B000000 		.4byte	0x7b
 4626 008d 03       		.uleb128 0x3
 4627 008e 6E030000 		.4byte	.LASF11
 4628 0092 03       		.byte	0x3
 4629 0093 42       		.byte	0x42
 4630 0094 42000000 		.4byte	0x42
 4631 0098 05       		.uleb128 0x5
 4632 0099 3002     		.2byte	0x230
 4633 009b 03       		.byte	0x3
 4634 009c 4D       		.byte	0x4d
 4635 009d 9D010000 		.4byte	0x19d
 4636 00a1 06       		.uleb128 0x6
 4637 00a2 36000000 		.4byte	.LASF12
 4638 00a6 03       		.byte	0x3
 4639 00a7 4E       		.byte	0x4e
 4640 00a8 50000000 		.4byte	0x50
 4641 00ac 02       		.byte	0x2
 4642 00ad 23       		.byte	0x23
 4643 00ae 00       		.uleb128 0
 4644 00af 07       		.uleb128 0x7
 4645 00b0 64727600 		.ascii	"drv\000"
 4646 00b4 03       		.byte	0x3
 4647 00b5 4F       		.byte	0x4f
 4648 00b6 50000000 		.4byte	0x50
 4649 00ba 02       		.byte	0x2
 4650 00bb 23       		.byte	0x23
 4651 00bc 01       		.uleb128 0x1
 4652 00bd 06       		.uleb128 0x6
 4653 00be 9C010000 		.4byte	.LASF13
 4654 00c2 03       		.byte	0x3
 4655 00c3 50       		.byte	0x50
 4656 00c4 50000000 		.4byte	0x50
 4657 00c8 02       		.byte	0x2
 4658 00c9 23       		.byte	0x23
 4659 00ca 02       		.uleb128 0x2
 4660 00cb 06       		.uleb128 0x6
 4661 00cc 38010000 		.4byte	.LASF14
 4662 00d0 03       		.byte	0x3
 4663 00d1 51       		.byte	0x51
 4664 00d2 50000000 		.4byte	0x50
 4665 00d6 02       		.byte	0x2
 4666 00d7 23       		.byte	0x23
 4667 00d8 03       		.uleb128 0x3
 4668 00d9 06       		.uleb128 0x6
 4669 00da 45040000 		.4byte	.LASF15
 4670 00de 03       		.byte	0x3
 4671 00df 52       		.byte	0x52
 4672 00e0 50000000 		.4byte	0x50
 4673 00e4 02       		.byte	0x2
 4674 00e5 23       		.byte	0x23
 4675 00e6 04       		.uleb128 0x4
 4676 00e7 06       		.uleb128 0x6
 4677 00e8 C0040000 		.4byte	.LASF16
 4678 00ec 03       		.byte	0x3
ARM GAS  /tmp/ccKU0f2P.s 			page 147


 4679 00ed 53       		.byte	0x53
 4680 00ee 50000000 		.4byte	0x50
 4681 00f2 02       		.byte	0x2
 4682 00f3 23       		.byte	0x23
 4683 00f4 05       		.uleb128 0x5
 4684 00f5 07       		.uleb128 0x7
 4685 00f6 696400   		.ascii	"id\000"
 4686 00f9 03       		.byte	0x3
 4687 00fa 54       		.byte	0x54
 4688 00fb 69000000 		.4byte	0x69
 4689 00ff 02       		.byte	0x2
 4690 0100 23       		.byte	0x23
 4691 0101 06       		.uleb128 0x6
 4692 0102 06       		.uleb128 0x6
 4693 0103 63000000 		.4byte	.LASF17
 4694 0107 03       		.byte	0x3
 4695 0108 55       		.byte	0x55
 4696 0109 69000000 		.4byte	0x69
 4697 010d 02       		.byte	0x2
 4698 010e 23       		.byte	0x23
 4699 010f 08       		.uleb128 0x8
 4700 0110 06       		.uleb128 0x6
 4701 0111 96000000 		.4byte	.LASF18
 4702 0115 03       		.byte	0x3
 4703 0116 5D       		.byte	0x5d
 4704 0117 82000000 		.4byte	0x82
 4705 011b 02       		.byte	0x2
 4706 011c 23       		.byte	0x23
 4707 011d 0C       		.uleb128 0xc
 4708 011e 06       		.uleb128 0x6
 4709 011f 45010000 		.4byte	.LASF19
 4710 0123 03       		.byte	0x3
 4711 0124 5E       		.byte	0x5e
 4712 0125 82000000 		.4byte	0x82
 4713 0129 02       		.byte	0x2
 4714 012a 23       		.byte	0x23
 4715 012b 10       		.uleb128 0x10
 4716 012c 06       		.uleb128 0x6
 4717 012d 05050000 		.4byte	.LASF20
 4718 0131 03       		.byte	0x3
 4719 0132 5F       		.byte	0x5f
 4720 0133 82000000 		.4byte	0x82
 4721 0137 02       		.byte	0x2
 4722 0138 23       		.byte	0x23
 4723 0139 14       		.uleb128 0x14
 4724 013a 06       		.uleb128 0x6
 4725 013b D2000000 		.4byte	.LASF21
 4726 013f 03       		.byte	0x3
 4727 0140 64       		.byte	0x64
 4728 0141 82000000 		.4byte	0x82
 4729 0145 02       		.byte	0x2
 4730 0146 23       		.byte	0x23
 4731 0147 18       		.uleb128 0x18
 4732 0148 06       		.uleb128 0x6
 4733 0149 CC000000 		.4byte	.LASF22
 4734 014d 03       		.byte	0x3
 4735 014e 65       		.byte	0x65
ARM GAS  /tmp/ccKU0f2P.s 			page 148


 4736 014f 82000000 		.4byte	0x82
 4737 0153 02       		.byte	0x2
 4738 0154 23       		.byte	0x23
 4739 0155 1C       		.uleb128 0x1c
 4740 0156 06       		.uleb128 0x6
 4741 0157 7D010000 		.4byte	.LASF23
 4742 015b 03       		.byte	0x3
 4743 015c 66       		.byte	0x66
 4744 015d 82000000 		.4byte	0x82
 4745 0161 02       		.byte	0x2
 4746 0162 23       		.byte	0x23
 4747 0163 20       		.uleb128 0x20
 4748 0164 06       		.uleb128 0x6
 4749 0165 AA000000 		.4byte	.LASF24
 4750 0169 03       		.byte	0x3
 4751 016a 67       		.byte	0x67
 4752 016b 82000000 		.4byte	0x82
 4753 016f 02       		.byte	0x2
 4754 0170 23       		.byte	0x23
 4755 0171 24       		.uleb128 0x24
 4756 0172 06       		.uleb128 0x6
 4757 0173 2A020000 		.4byte	.LASF25
 4758 0177 03       		.byte	0x3
 4759 0178 68       		.byte	0x68
 4760 0179 82000000 		.4byte	0x82
 4761 017d 02       		.byte	0x2
 4762 017e 23       		.byte	0x23
 4763 017f 28       		.uleb128 0x28
 4764 0180 06       		.uleb128 0x6
 4765 0181 57020000 		.4byte	.LASF26
 4766 0185 03       		.byte	0x3
 4767 0186 69       		.byte	0x69
 4768 0187 82000000 		.4byte	0x82
 4769 018b 02       		.byte	0x2
 4770 018c 23       		.byte	0x23
 4771 018d 2C       		.uleb128 0x2c
 4772 018e 07       		.uleb128 0x7
 4773 018f 77696E00 		.ascii	"win\000"
 4774 0193 03       		.byte	0x3
 4775 0194 6A       		.byte	0x6a
 4776 0195 9D010000 		.4byte	0x19d
 4777 0199 02       		.byte	0x2
 4778 019a 23       		.byte	0x23
 4779 019b 30       		.uleb128 0x30
 4780 019c 00       		.byte	0
 4781 019d 08       		.uleb128 0x8
 4782 019e 50000000 		.4byte	0x50
 4783 01a2 AE010000 		.4byte	0x1ae
 4784 01a6 09       		.uleb128 0x9
 4785 01a7 AE010000 		.4byte	0x1ae
 4786 01ab FF01     		.2byte	0x1ff
 4787 01ad 00       		.byte	0
 4788 01ae 04       		.uleb128 0x4
 4789 01af 04       		.byte	0x4
 4790 01b0 07       		.byte	0x7
 4791 01b1 D8020000 		.4byte	.LASF27
 4792 01b5 03       		.uleb128 0x3
ARM GAS  /tmp/ccKU0f2P.s 			page 149


 4793 01b6 A8020000 		.4byte	.LASF28
 4794 01ba 03       		.byte	0x3
 4795 01bb 6B       		.byte	0x6b
 4796 01bc 98000000 		.4byte	0x98
 4797 01c0 05       		.uleb128 0x5
 4798 01c1 2402     		.2byte	0x224
 4799 01c3 03       		.byte	0x3
 4800 01c4 71       		.byte	0x71
 4801 01c5 70020000 		.4byte	0x270
 4802 01c9 07       		.uleb128 0x7
 4803 01ca 667300   		.ascii	"fs\000"
 4804 01cd 03       		.byte	0x3
 4805 01ce 72       		.byte	0x72
 4806 01cf 70020000 		.4byte	0x270
 4807 01d3 02       		.byte	0x2
 4808 01d4 23       		.byte	0x23
 4809 01d5 00       		.uleb128 0
 4810 01d6 07       		.uleb128 0x7
 4811 01d7 696400   		.ascii	"id\000"
 4812 01da 03       		.byte	0x3
 4813 01db 73       		.byte	0x73
 4814 01dc 69000000 		.4byte	0x69
 4815 01e0 02       		.byte	0x2
 4816 01e1 23       		.byte	0x23
 4817 01e2 04       		.uleb128 0x4
 4818 01e3 06       		.uleb128 0x6
 4819 01e4 D6030000 		.4byte	.LASF29
 4820 01e8 03       		.byte	0x3
 4821 01e9 74       		.byte	0x74
 4822 01ea 50000000 		.4byte	0x50
 4823 01ee 02       		.byte	0x2
 4824 01ef 23       		.byte	0x23
 4825 01f0 06       		.uleb128 0x6
 4826 01f1 06       		.uleb128 0x6
 4827 01f2 D8040000 		.4byte	.LASF30
 4828 01f6 03       		.byte	0x3
 4829 01f7 75       		.byte	0x75
 4830 01f8 50000000 		.4byte	0x50
 4831 01fc 02       		.byte	0x2
 4832 01fd 23       		.byte	0x23
 4833 01fe 07       		.uleb128 0x7
 4834 01ff 06       		.uleb128 0x6
 4835 0200 C0020000 		.4byte	.LASF31
 4836 0204 03       		.byte	0x3
 4837 0205 76       		.byte	0x76
 4838 0206 82000000 		.4byte	0x82
 4839 020a 02       		.byte	0x2
 4840 020b 23       		.byte	0x23
 4841 020c 08       		.uleb128 0x8
 4842 020d 06       		.uleb128 0x6
 4843 020e CC000000 		.4byte	.LASF22
 4844 0212 03       		.byte	0x3
 4845 0213 77       		.byte	0x77
 4846 0214 82000000 		.4byte	0x82
 4847 0218 02       		.byte	0x2
 4848 0219 23       		.byte	0x23
 4849 021a 0C       		.uleb128 0xc
ARM GAS  /tmp/ccKU0f2P.s 			page 150


 4850 021b 06       		.uleb128 0x6
 4851 021c 10030000 		.4byte	.LASF32
 4852 0220 03       		.byte	0x3
 4853 0221 78       		.byte	0x78
 4854 0222 82000000 		.4byte	0x82
 4855 0226 02       		.byte	0x2
 4856 0227 23       		.byte	0x23
 4857 0228 10       		.uleb128 0x10
 4858 0229 06       		.uleb128 0x6
 4859 022a 59050000 		.4byte	.LASF33
 4860 022e 03       		.byte	0x3
 4861 022f 79       		.byte	0x79
 4862 0230 82000000 		.4byte	0x82
 4863 0234 02       		.byte	0x2
 4864 0235 23       		.byte	0x23
 4865 0236 14       		.uleb128 0x14
 4866 0237 06       		.uleb128 0x6
 4867 0238 B2030000 		.4byte	.LASF34
 4868 023c 03       		.byte	0x3
 4869 023d 7A       		.byte	0x7a
 4870 023e 82000000 		.4byte	0x82
 4871 0242 02       		.byte	0x2
 4872 0243 23       		.byte	0x23
 4873 0244 18       		.uleb128 0x18
 4874 0245 06       		.uleb128 0x6
 4875 0246 A1000000 		.4byte	.LASF35
 4876 024a 03       		.byte	0x3
 4877 024b 7C       		.byte	0x7c
 4878 024c 82000000 		.4byte	0x82
 4879 0250 02       		.byte	0x2
 4880 0251 23       		.byte	0x23
 4881 0252 1C       		.uleb128 0x1c
 4882 0253 06       		.uleb128 0x6
 4883 0254 B7010000 		.4byte	.LASF36
 4884 0258 03       		.byte	0x3
 4885 0259 7D       		.byte	0x7d
 4886 025a 76020000 		.4byte	0x276
 4887 025e 02       		.byte	0x2
 4888 025f 23       		.byte	0x23
 4889 0260 20       		.uleb128 0x20
 4890 0261 07       		.uleb128 0x7
 4891 0262 62756600 		.ascii	"buf\000"
 4892 0266 03       		.byte	0x3
 4893 0267 86       		.byte	0x86
 4894 0268 9D010000 		.4byte	0x19d
 4895 026c 02       		.byte	0x2
 4896 026d 23       		.byte	0x23
 4897 026e 24       		.uleb128 0x24
 4898 026f 00       		.byte	0
 4899 0270 0A       		.uleb128 0xa
 4900 0271 04       		.byte	0x4
 4901 0272 B5010000 		.4byte	0x1b5
 4902 0276 0A       		.uleb128 0xa
 4903 0277 04       		.byte	0x4
 4904 0278 50000000 		.4byte	0x50
 4905 027c 0B       		.uleb128 0xb
 4906 027d 46494C00 		.ascii	"FIL\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 151


 4907 0281 03       		.byte	0x3
 4908 0282 88       		.byte	0x88
 4909 0283 C0010000 		.4byte	0x1c0
 4910 0287 0C       		.uleb128 0xc
 4911 0288 1C       		.byte	0x1c
 4912 0289 03       		.byte	0x3
 4913 028a 8E       		.byte	0x8e
 4914 028b FD020000 		.4byte	0x2fd
 4915 028f 07       		.uleb128 0x7
 4916 0290 667300   		.ascii	"fs\000"
 4917 0293 03       		.byte	0x3
 4918 0294 8F       		.byte	0x8f
 4919 0295 70020000 		.4byte	0x270
 4920 0299 02       		.byte	0x2
 4921 029a 23       		.byte	0x23
 4922 029b 00       		.uleb128 0
 4923 029c 07       		.uleb128 0x7
 4924 029d 696400   		.ascii	"id\000"
 4925 02a0 03       		.byte	0x3
 4926 02a1 90       		.byte	0x90
 4927 02a2 69000000 		.4byte	0x69
 4928 02a6 02       		.byte	0x2
 4929 02a7 23       		.byte	0x23
 4930 02a8 04       		.uleb128 0x4
 4931 02a9 06       		.uleb128 0x6
 4932 02aa 68040000 		.4byte	.LASF37
 4933 02ae 03       		.byte	0x3
 4934 02af 91       		.byte	0x91
 4935 02b0 69000000 		.4byte	0x69
 4936 02b4 02       		.byte	0x2
 4937 02b5 23       		.byte	0x23
 4938 02b6 06       		.uleb128 0x6
 4939 02b7 06       		.uleb128 0x6
 4940 02b8 10030000 		.4byte	.LASF32
 4941 02bc 03       		.byte	0x3
 4942 02bd 92       		.byte	0x92
 4943 02be 82000000 		.4byte	0x82
 4944 02c2 02       		.byte	0x2
 4945 02c3 23       		.byte	0x23
 4946 02c4 08       		.uleb128 0x8
 4947 02c5 06       		.uleb128 0x6
 4948 02c6 59050000 		.4byte	.LASF33
 4949 02ca 03       		.byte	0x3
 4950 02cb 93       		.byte	0x93
 4951 02cc 82000000 		.4byte	0x82
 4952 02d0 02       		.byte	0x2
 4953 02d1 23       		.byte	0x23
 4954 02d2 0C       		.uleb128 0xc
 4955 02d3 06       		.uleb128 0x6
 4956 02d4 78000000 		.4byte	.LASF38
 4957 02d8 03       		.byte	0x3
 4958 02d9 94       		.byte	0x94
 4959 02da 82000000 		.4byte	0x82
 4960 02de 02       		.byte	0x2
 4961 02df 23       		.byte	0x23
 4962 02e0 10       		.uleb128 0x10
 4963 02e1 07       		.uleb128 0x7
ARM GAS  /tmp/ccKU0f2P.s 			page 152


 4964 02e2 64697200 		.ascii	"dir\000"
 4965 02e6 03       		.byte	0x3
 4966 02e7 95       		.byte	0x95
 4967 02e8 76020000 		.4byte	0x276
 4968 02ec 02       		.byte	0x2
 4969 02ed 23       		.byte	0x23
 4970 02ee 14       		.uleb128 0x14
 4971 02ef 07       		.uleb128 0x7
 4972 02f0 666E00   		.ascii	"fn\000"
 4973 02f3 03       		.byte	0x3
 4974 02f4 96       		.byte	0x96
 4975 02f5 76020000 		.4byte	0x276
 4976 02f9 02       		.byte	0x2
 4977 02fa 23       		.byte	0x23
 4978 02fb 18       		.uleb128 0x18
 4979 02fc 00       		.byte	0
 4980 02fd 0B       		.uleb128 0xb
 4981 02fe 44495200 		.ascii	"DIR\000"
 4982 0302 03       		.byte	0x3
 4983 0303 9B       		.byte	0x9b
 4984 0304 87020000 		.4byte	0x287
 4985 0308 0C       		.uleb128 0xc
 4986 0309 18       		.byte	0x18
 4987 030a 03       		.byte	0x3
 4988 030b A1       		.byte	0xa1
 4989 030c 57030000 		.4byte	0x357
 4990 0310 06       		.uleb128 0x6
 4991 0311 CC000000 		.4byte	.LASF22
 4992 0315 03       		.byte	0x3
 4993 0316 A2       		.byte	0xa2
 4994 0317 82000000 		.4byte	0x82
 4995 031b 02       		.byte	0x2
 4996 031c 23       		.byte	0x23
 4997 031d 00       		.uleb128 0
 4998 031e 06       		.uleb128 0x6
 4999 031f AE020000 		.4byte	.LASF39
 5000 0323 03       		.byte	0x3
 5001 0324 A3       		.byte	0xa3
 5002 0325 69000000 		.4byte	0x69
 5003 0329 02       		.byte	0x2
 5004 032a 23       		.byte	0x23
 5005 032b 04       		.uleb128 0x4
 5006 032c 06       		.uleb128 0x6
 5007 032d DE010000 		.4byte	.LASF40
 5008 0331 03       		.byte	0x3
 5009 0332 A4       		.byte	0xa4
 5010 0333 69000000 		.4byte	0x69
 5011 0337 02       		.byte	0x2
 5012 0338 23       		.byte	0x23
 5013 0339 06       		.uleb128 0x6
 5014 033a 06       		.uleb128 0x6
 5015 033b DD040000 		.4byte	.LASF41
 5016 033f 03       		.byte	0x3
 5017 0340 A5       		.byte	0xa5
 5018 0341 50000000 		.4byte	0x50
 5019 0345 02       		.byte	0x2
 5020 0346 23       		.byte	0x23
ARM GAS  /tmp/ccKU0f2P.s 			page 153


 5021 0347 08       		.uleb128 0x8
 5022 0348 06       		.uleb128 0x6
 5023 0349 7E020000 		.4byte	.LASF42
 5024 034d 03       		.byte	0x3
 5025 034e A6       		.byte	0xa6
 5026 034f 57030000 		.4byte	0x357
 5027 0353 02       		.byte	0x2
 5028 0354 23       		.byte	0x23
 5029 0355 09       		.uleb128 0x9
 5030 0356 00       		.byte	0
 5031 0357 08       		.uleb128 0x8
 5032 0358 8D000000 		.4byte	0x8d
 5033 035c 67030000 		.4byte	0x367
 5034 0360 0D       		.uleb128 0xd
 5035 0361 AE010000 		.4byte	0x1ae
 5036 0365 0C       		.byte	0xc
 5037 0366 00       		.byte	0
 5038 0367 03       		.uleb128 0x3
 5039 0368 EB040000 		.4byte	.LASF43
 5040 036c 03       		.byte	0x3
 5041 036d AB       		.byte	0xab
 5042 036e 08030000 		.4byte	0x308
 5043 0372 0E       		.uleb128 0xe
 5044 0373 01       		.byte	0x1
 5045 0374 03       		.byte	0x3
 5046 0375 B1       		.byte	0xb1
 5047 0376 F3030000 		.4byte	0x3f3
 5048 037a 0F       		.uleb128 0xf
 5049 037b 62040000 		.4byte	.LASF44
 5050 037f 00       		.sleb128 0
 5051 0380 0F       		.uleb128 0xf
 5052 0381 4B020000 		.4byte	.LASF45
 5053 0385 01       		.sleb128 1
 5054 0386 0F       		.uleb128 0xf
 5055 0387 38020000 		.4byte	.LASF46
 5056 038b 02       		.sleb128 2
 5057 038c 0F       		.uleb128 0xf
 5058 038d 00000000 		.4byte	.LASF47
 5059 0391 03       		.sleb128 3
 5060 0392 0F       		.uleb128 0xf
 5061 0393 63030000 		.4byte	.LASF48
 5062 0397 04       		.sleb128 4
 5063 0398 0F       		.uleb128 0xf
 5064 0399 37050000 		.4byte	.LASF49
 5065 039d 05       		.sleb128 5
 5066 039e 0F       		.uleb128 0xf
 5067 039f 99040000 		.4byte	.LASF50
 5068 03a3 06       		.sleb128 6
 5069 03a4 0F       		.uleb128 0xf
 5070 03a5 01040000 		.4byte	.LASF51
 5071 03a9 07       		.sleb128 7
 5072 03aa 0F       		.uleb128 0xf
 5073 03ab 74010000 		.4byte	.LASF52
 5074 03af 08       		.sleb128 8
 5075 03b0 0F       		.uleb128 0xf
 5076 03b1 7D000000 		.4byte	.LASF53
 5077 03b5 09       		.sleb128 9
ARM GAS  /tmp/ccKU0f2P.s 			page 154


 5078 03b6 0F       		.uleb128 0xf
 5079 03b7 8A020000 		.4byte	.LASF54
 5080 03bb 0A       		.sleb128 10
 5081 03bc 0F       		.uleb128 0xf
 5082 03bd F0030000 		.4byte	.LASF55
 5083 03c1 0B       		.sleb128 11
 5084 03c2 0F       		.uleb128 0xf
 5085 03c3 74030000 		.4byte	.LASF56
 5086 03c7 0C       		.sleb128 12
 5087 03c8 0F       		.uleb128 0xf
 5088 03c9 50010000 		.4byte	.LASF57
 5089 03cd 0D       		.sleb128 13
 5090 03ce 0F       		.uleb128 0xf
 5091 03cf 21040000 		.4byte	.LASF58
 5092 03d3 0E       		.sleb128 14
 5093 03d4 0F       		.uleb128 0xf
 5094 03d5 00030000 		.4byte	.LASF59
 5095 03d9 0F       		.sleb128 15
 5096 03da 0F       		.uleb128 0xf
 5097 03db 3B040000 		.4byte	.LASF60
 5098 03df 10       		.sleb128 16
 5099 03e0 0F       		.uleb128 0xf
 5100 03e1 61010000 		.4byte	.LASF61
 5101 03e5 11       		.sleb128 17
 5102 03e6 0F       		.uleb128 0xf
 5103 03e7 17000000 		.4byte	.LASF62
 5104 03eb 12       		.sleb128 18
 5105 03ec 0F       		.uleb128 0xf
 5106 03ed B7000000 		.4byte	.LASF63
 5107 03f1 13       		.sleb128 19
 5108 03f2 00       		.byte	0
 5109 03f3 03       		.uleb128 0x3
 5110 03f4 15050000 		.4byte	.LASF64
 5111 03f8 03       		.byte	0x3
 5112 03f9 C6       		.byte	0xc6
 5113 03fa 72030000 		.4byte	0x372
 5114 03fe 03       		.uleb128 0x3
 5115 03ff 7B040000 		.4byte	.LASF65
 5116 0403 04       		.byte	0x4
 5117 0404 0E       		.byte	0xe
 5118 0405 50000000 		.4byte	0x50
 5119 0409 0E       		.uleb128 0xe
 5120 040a 01       		.byte	0x1
 5121 040b 04       		.byte	0x4
 5122 040c 11       		.byte	0x11
 5123 040d 30040000 		.4byte	0x430
 5124 0411 0F       		.uleb128 0xf
 5125 0412 17030000 		.4byte	.LASF66
 5126 0416 00       		.sleb128 0
 5127 0417 0F       		.uleb128 0xf
 5128 0418 1D050000 		.4byte	.LASF67
 5129 041c 01       		.sleb128 1
 5130 041d 0F       		.uleb128 0xf
 5131 041e 0D000000 		.4byte	.LASF68
 5132 0422 02       		.sleb128 2
 5133 0423 0F       		.uleb128 0xf
 5134 0424 58000000 		.4byte	.LASF69
ARM GAS  /tmp/ccKU0f2P.s 			page 155


 5135 0428 03       		.sleb128 3
 5136 0429 0F       		.uleb128 0xf
 5137 042a 2D010000 		.4byte	.LASF70
 5138 042e 04       		.sleb128 4
 5139 042f 00       		.byte	0
 5140 0430 03       		.uleb128 0x3
 5141 0431 F3040000 		.4byte	.LASF71
 5142 0435 04       		.byte	0x4
 5143 0436 17       		.byte	0x17
 5144 0437 09040000 		.4byte	0x409
 5145 043b 10       		.uleb128 0x10
 5146 043c 5F020000 		.4byte	.LASF72
 5147 0440 01       		.byte	0x1
 5148 0441 2B02     		.2byte	0x22b
 5149 0443 01       		.byte	0x1
 5150 0444 29000000 		.4byte	0x29
 5151 0448 01       		.byte	0x1
 5152 0449 90040000 		.4byte	0x490
 5153 044d 11       		.uleb128 0x11
 5154 044e 64737400 		.ascii	"dst\000"
 5155 0452 01       		.byte	0x1
 5156 0453 2B02     		.2byte	0x22b
 5157 0455 90040000 		.4byte	0x490
 5158 0459 11       		.uleb128 0x11
 5159 045a 73726300 		.ascii	"src\000"
 5160 045e 01       		.byte	0x1
 5161 045f 2B02     		.2byte	0x22b
 5162 0461 90040000 		.4byte	0x490
 5163 0465 11       		.uleb128 0x11
 5164 0466 636E7400 		.ascii	"cnt\000"
 5165 046a 01       		.byte	0x1
 5166 046b 2B02     		.2byte	0x22b
 5167 046d 30000000 		.4byte	0x30
 5168 0471 12       		.uleb128 0x12
 5169 0472 6400     		.ascii	"d\000"
 5170 0474 01       		.byte	0x1
 5171 0475 2C02     		.2byte	0x22c
 5172 0477 97040000 		.4byte	0x497
 5173 047b 12       		.uleb128 0x12
 5174 047c 7300     		.ascii	"s\000"
 5175 047e 01       		.byte	0x1
 5176 047f 2C02     		.2byte	0x22c
 5177 0481 97040000 		.4byte	0x497
 5178 0485 12       		.uleb128 0x12
 5179 0486 7200     		.ascii	"r\000"
 5180 0488 01       		.byte	0x1
 5181 0489 2D02     		.2byte	0x22d
 5182 048b 29000000 		.4byte	0x29
 5183 048f 00       		.byte	0
 5184 0490 0A       		.uleb128 0xa
 5185 0491 04       		.byte	0x4
 5186 0492 96040000 		.4byte	0x496
 5187 0496 13       		.uleb128 0x13
 5188 0497 0A       		.uleb128 0xa
 5189 0498 04       		.byte	0x4
 5190 0499 9D040000 		.4byte	0x49d
 5191 049d 14       		.uleb128 0x14
ARM GAS  /tmp/ccKU0f2P.s 			page 156


 5192 049e 50000000 		.4byte	0x50
 5193 04a2 10       		.uleb128 0x10
 5194 04a3 44000000 		.4byte	.LASF73
 5195 04a7 01       		.byte	0x1
 5196 04a8 3502     		.2byte	0x235
 5197 04aa 01       		.byte	0x1
 5198 04ab 29000000 		.4byte	0x29
 5199 04af 01       		.byte	0x1
 5200 04b0 CD040000 		.4byte	0x4cd
 5201 04b4 11       		.uleb128 0x11
 5202 04b5 73747200 		.ascii	"str\000"
 5203 04b9 01       		.byte	0x1
 5204 04ba 3502     		.2byte	0x235
 5205 04bc CD040000 		.4byte	0x4cd
 5206 04c0 11       		.uleb128 0x11
 5207 04c1 63687200 		.ascii	"chr\000"
 5208 04c5 01       		.byte	0x1
 5209 04c6 3502     		.2byte	0x235
 5210 04c8 29000000 		.4byte	0x29
 5211 04cc 00       		.byte	0
 5212 04cd 0A       		.uleb128 0xa
 5213 04ce 04       		.byte	0x4
 5214 04cf D3040000 		.4byte	0x4d3
 5215 04d3 14       		.uleb128 0x14
 5216 04d4 42000000 		.4byte	0x42
 5217 04d8 10       		.uleb128 0x10
 5218 04d9 4C050000 		.4byte	.LASF74
 5219 04dd 01       		.byte	0x1
 5220 04de 2904     		.2byte	0x429
 5221 04e0 01       		.byte	0x1
 5222 04e1 F3030000 		.4byte	0x3f3
 5223 04e5 01       		.byte	0x1
 5224 04e6 19050000 		.4byte	0x519
 5225 04ea 11       		.uleb128 0x11
 5226 04eb 646A00   		.ascii	"dj\000"
 5227 04ee 01       		.byte	0x1
 5228 04ef 2A04     		.2byte	0x42a
 5229 04f1 19050000 		.4byte	0x519
 5230 04f5 11       		.uleb128 0x11
 5231 04f6 69647800 		.ascii	"idx\000"
 5232 04fa 01       		.byte	0x1
 5233 04fb 2B04     		.2byte	0x42b
 5234 04fd 69000000 		.4byte	0x69
 5235 0501 15       		.uleb128 0x15
 5236 0502 33020000 		.4byte	.LASF75
 5237 0506 01       		.byte	0x1
 5238 0507 2E04     		.2byte	0x42e
 5239 0509 82000000 		.4byte	0x82
 5240 050d 12       		.uleb128 0x12
 5241 050e 696300   		.ascii	"ic\000"
 5242 0511 01       		.byte	0x1
 5243 0512 2F04     		.2byte	0x42f
 5244 0514 69000000 		.4byte	0x69
 5245 0518 00       		.byte	0
 5246 0519 0A       		.uleb128 0xa
 5247 051a 04       		.byte	0x4
 5248 051b FD020000 		.4byte	0x2fd
ARM GAS  /tmp/ccKU0f2P.s 			page 157


 5249 051f 16       		.uleb128 0x16
 5250 0520 C9040000 		.4byte	.LASF76
 5251 0524 01       		.byte	0x1
 5252 0525 1102     		.2byte	0x211
 5253 0527 01       		.byte	0x1
 5254 0528 00000000 		.4byte	.LFB0
 5255 052c 12000000 		.4byte	.LFE0
 5256 0530 00000000 		.4byte	.LLST0
 5257 0534 01       		.byte	0x1
 5258 0535 82050000 		.4byte	0x582
 5259 0539 17       		.uleb128 0x17
 5260 053a 64737400 		.ascii	"dst\000"
 5261 053e 01       		.byte	0x1
 5262 053f 1102     		.2byte	0x211
 5263 0541 82050000 		.4byte	0x582
 5264 0545 01       		.byte	0x1
 5265 0546 50       		.byte	0x50
 5266 0547 17       		.uleb128 0x17
 5267 0548 73726300 		.ascii	"src\000"
 5268 054c 01       		.byte	0x1
 5269 054d 1102     		.2byte	0x211
 5270 054f 90040000 		.4byte	0x490
 5271 0553 01       		.byte	0x1
 5272 0554 51       		.byte	0x51
 5273 0555 18       		.uleb128 0x18
 5274 0556 636E7400 		.ascii	"cnt\000"
 5275 055a 01       		.byte	0x1
 5276 055b 1102     		.2byte	0x211
 5277 055d 30000000 		.4byte	0x30
 5278 0561 20000000 		.4byte	.LLST1
 5279 0565 19       		.uleb128 0x19
 5280 0566 6400     		.ascii	"d\000"
 5281 0568 01       		.byte	0x1
 5282 0569 1202     		.2byte	0x212
 5283 056b 76020000 		.4byte	0x276
 5284 056f 33000000 		.4byte	.LLST2
 5285 0573 19       		.uleb128 0x19
 5286 0574 7300     		.ascii	"s\000"
 5287 0576 01       		.byte	0x1
 5288 0577 1302     		.2byte	0x213
 5289 0579 97040000 		.4byte	0x497
 5290 057d 46000000 		.4byte	.LLST3
 5291 0581 00       		.byte	0
 5292 0582 1A       		.uleb128 0x1a
 5293 0583 04       		.byte	0x4
 5294 0584 1B       		.uleb128 0x1b
 5295 0585 D0020000 		.4byte	.LASF77
 5296 0589 01       		.byte	0x1
 5297 058a 2202     		.2byte	0x222
 5298 058c 01       		.byte	0x1
 5299 058d 00000000 		.4byte	.LFB1
 5300 0591 0E000000 		.4byte	.LFE1
 5301 0595 02       		.byte	0x2
 5302 0596 7D       		.byte	0x7d
 5303 0597 00       		.sleb128 0
 5304 0598 01       		.byte	0x1
 5305 0599 D8050000 		.4byte	0x5d8
ARM GAS  /tmp/ccKU0f2P.s 			page 158


 5306 059d 18       		.uleb128 0x18
 5307 059e 64737400 		.ascii	"dst\000"
 5308 05a2 01       		.byte	0x1
 5309 05a3 2202     		.2byte	0x222
 5310 05a5 82050000 		.4byte	0x582
 5311 05a9 59000000 		.4byte	.LLST4
 5312 05ad 17       		.uleb128 0x17
 5313 05ae 76616C00 		.ascii	"val\000"
 5314 05b2 01       		.byte	0x1
 5315 05b3 2202     		.2byte	0x222
 5316 05b5 29000000 		.4byte	0x29
 5317 05b9 01       		.byte	0x1
 5318 05ba 51       		.byte	0x51
 5319 05bb 18       		.uleb128 0x18
 5320 05bc 636E7400 		.ascii	"cnt\000"
 5321 05c0 01       		.byte	0x1
 5322 05c1 2202     		.2byte	0x222
 5323 05c3 30000000 		.4byte	0x30
 5324 05c7 7A000000 		.4byte	.LLST5
 5325 05cb 1C       		.uleb128 0x1c
 5326 05cc 6400     		.ascii	"d\000"
 5327 05ce 01       		.byte	0x1
 5328 05cf 2302     		.2byte	0x223
 5329 05d1 76020000 		.4byte	0x276
 5330 05d5 01       		.byte	0x1
 5331 05d6 50       		.byte	0x50
 5332 05d7 00       		.byte	0
 5333 05d8 16       		.uleb128 0x16
 5334 05d9 E1020000 		.4byte	.LASF78
 5335 05dd 01       		.byte	0x1
 5336 05de 2D07     		.2byte	0x72d
 5337 05e0 01       		.byte	0x1
 5338 05e1 00000000 		.4byte	.LFB17
 5339 05e5 82000000 		.4byte	.LFE17
 5340 05e9 8D000000 		.4byte	.LLST6
 5341 05ed 01       		.byte	0x1
 5342 05ee 5B060000 		.4byte	0x65b
 5343 05f2 18       		.uleb128 0x18
 5344 05f3 646A00   		.ascii	"dj\000"
 5345 05f6 01       		.byte	0x1
 5346 05f7 2E07     		.2byte	0x72e
 5347 05f9 19050000 		.4byte	0x519
 5348 05fd AD000000 		.4byte	.LLST7
 5349 0601 18       		.uleb128 0x18
 5350 0602 666E6F00 		.ascii	"fno\000"
 5351 0606 01       		.byte	0x1
 5352 0607 2F07     		.2byte	0x72f
 5353 0609 5B060000 		.4byte	0x65b
 5354 060d CE000000 		.4byte	.LLST8
 5355 0611 19       		.uleb128 0x19
 5356 0612 6900     		.ascii	"i\000"
 5357 0614 01       		.byte	0x1
 5358 0615 3207     		.2byte	0x732
 5359 0617 30000000 		.4byte	0x30
 5360 061b EF000000 		.4byte	.LLST9
 5361 061f 19       		.uleb128 0x19
 5362 0620 6E7400   		.ascii	"nt\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 159


 5363 0623 01       		.byte	0x1
 5364 0624 3307     		.2byte	0x733
 5365 0626 50000000 		.4byte	0x50
 5366 062a 25010000 		.4byte	.LLST10
 5367 062e 19       		.uleb128 0x19
 5368 062f 64697200 		.ascii	"dir\000"
 5369 0633 01       		.byte	0x1
 5370 0634 3307     		.2byte	0x733
 5371 0636 76020000 		.4byte	0x276
 5372 063a 4B010000 		.4byte	.LLST11
 5373 063e 19       		.uleb128 0x19
 5374 063f 7000     		.ascii	"p\000"
 5375 0641 01       		.byte	0x1
 5376 0642 3407     		.2byte	0x734
 5377 0644 61060000 		.4byte	0x661
 5378 0648 6D010000 		.4byte	.LLST12
 5379 064c 19       		.uleb128 0x19
 5380 064d 6300     		.ascii	"c\000"
 5381 064f 01       		.byte	0x1
 5382 0650 3407     		.2byte	0x734
 5383 0652 8D000000 		.4byte	0x8d
 5384 0656 B7010000 		.4byte	.LLST13
 5385 065a 00       		.byte	0
 5386 065b 0A       		.uleb128 0xa
 5387 065c 04       		.byte	0x4
 5388 065d 67030000 		.4byte	0x367
 5389 0661 0A       		.uleb128 0xa
 5390 0662 04       		.byte	0x4
 5391 0663 8D000000 		.4byte	0x8d
 5392 0667 1D       		.uleb128 0x1d
 5393 0668 0B040000 		.4byte	.LASF79
 5394 066c 01       		.byte	0x1
 5395 066d 7C08     		.2byte	0x87c
 5396 066f 01       		.byte	0x1
 5397 0670 F3030000 		.4byte	0x3f3
 5398 0674 00000000 		.4byte	.LFB21
 5399 0678 24000000 		.4byte	.LFE21
 5400 067c FF010000 		.4byte	.LLST14
 5401 0680 01       		.byte	0x1
 5402 0681 AD060000 		.4byte	0x6ad
 5403 0685 18       		.uleb128 0x18
 5404 0686 667300   		.ascii	"fs\000"
 5405 0689 01       		.byte	0x1
 5406 068a 7D08     		.2byte	0x87d
 5407 068c 70020000 		.4byte	0x270
 5408 0690 1F020000 		.4byte	.LLST15
 5409 0694 18       		.uleb128 0x18
 5410 0695 696400   		.ascii	"id\000"
 5411 0698 01       		.byte	0x1
 5412 0699 7E08     		.2byte	0x87e
 5413 069b 69000000 		.4byte	0x69
 5414 069f 59020000 		.4byte	.LLST16
 5415 06a3 1E       		.uleb128 0x1e
 5416 06a4 14000000 		.4byte	.LVL25
 5417 06a8 A71A0000 		.4byte	0x1aa7
 5418 06ac 00       		.byte	0
 5419 06ad 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccKU0f2P.s 			page 160


 5420 06ae B4040000 		.4byte	.LASF80
 5421 06b2 01       		.byte	0x1
 5422 06b3 CF02     		.2byte	0x2cf
 5423 06b5 01       		.byte	0x1
 5424 06b6 F3030000 		.4byte	0x3f3
 5425 06ba 00000000 		.4byte	.LFB4
 5426 06be 76000000 		.4byte	.LFE4
 5427 06c2 85020000 		.4byte	.LLST17
 5428 06c6 01       		.byte	0x1
 5429 06c7 6B070000 		.4byte	0x76b
 5430 06cb 18       		.uleb128 0x18
 5431 06cc 667300   		.ascii	"fs\000"
 5432 06cf 01       		.byte	0x1
 5433 06d0 D002     		.2byte	0x2d0
 5434 06d2 70020000 		.4byte	0x270
 5435 06d6 A5020000 		.4byte	.LLST18
 5436 06da 1F       		.uleb128 0x1f
 5437 06db 67020000 		.4byte	.LASF81
 5438 06df 01       		.byte	0x1
 5439 06e0 D102     		.2byte	0x2d1
 5440 06e2 82000000 		.4byte	0x82
 5441 06e6 EF020000 		.4byte	.LLST19
 5442 06ea 20       		.uleb128 0x20
 5443 06eb E5040000 		.4byte	.LASF82
 5444 06ef 01       		.byte	0x1
 5445 06f0 D402     		.2byte	0x2d4
 5446 06f2 82000000 		.4byte	0x82
 5447 06f6 01       		.byte	0x1
 5448 06f7 55       		.byte	0x55
 5449 06f8 21       		.uleb128 0x21
 5450 06f9 42000000 		.4byte	.LBB2
 5451 06fd 5E000000 		.4byte	.LBE2
 5452 0701 30070000 		.4byte	0x730
 5453 0705 19       		.uleb128 0x19
 5454 0706 6E6600   		.ascii	"nf\000"
 5455 0709 01       		.byte	0x1
 5456 070a DF02     		.2byte	0x2df
 5457 070c 50000000 		.4byte	0x50
 5458 0710 39030000 		.4byte	.LLST20
 5459 0714 22       		.uleb128 0x22
 5460 0715 5A000000 		.4byte	.LVL40
 5461 0719 BF1A0000 		.4byte	0x1abf
 5462 071d 23       		.uleb128 0x23
 5463 071e 01       		.byte	0x1
 5464 071f 53       		.byte	0x53
 5465 0720 01       		.byte	0x1
 5466 0721 31       		.byte	0x31
 5467 0722 23       		.uleb128 0x23
 5468 0723 01       		.byte	0x1
 5469 0724 52       		.byte	0x52
 5470 0725 02       		.byte	0x2
 5471 0726 75       		.byte	0x75
 5472 0727 00       		.sleb128 0
 5473 0728 23       		.uleb128 0x23
 5474 0729 01       		.byte	0x1
 5475 072a 51       		.byte	0x51
 5476 072b 02       		.byte	0x2
ARM GAS  /tmp/ccKU0f2P.s 			page 161


 5477 072c 78       		.byte	0x78
 5478 072d 00       		.sleb128 0
 5479 072e 00       		.byte	0
 5480 072f 00       		.byte	0
 5481 0730 24       		.uleb128 0x24
 5482 0731 2E000000 		.4byte	.LVL36
 5483 0735 BF1A0000 		.4byte	0x1abf
 5484 0739 4F070000 		.4byte	0x74f
 5485 073d 23       		.uleb128 0x23
 5486 073e 01       		.byte	0x1
 5487 073f 53       		.byte	0x53
 5488 0740 01       		.byte	0x1
 5489 0741 31       		.byte	0x31
 5490 0742 23       		.uleb128 0x23
 5491 0743 01       		.byte	0x1
 5492 0744 52       		.byte	0x52
 5493 0745 02       		.byte	0x2
 5494 0746 75       		.byte	0x75
 5495 0747 00       		.sleb128 0
 5496 0748 23       		.uleb128 0x23
 5497 0749 01       		.byte	0x1
 5498 074a 51       		.byte	0x51
 5499 074b 02       		.byte	0x2
 5500 074c 78       		.byte	0x78
 5501 074d 00       		.sleb128 0
 5502 074e 00       		.byte	0
 5503 074f 22       		.uleb128 0x22
 5504 0750 6C000000 		.4byte	.LVL43
 5505 0754 E61A0000 		.4byte	0x1ae6
 5506 0758 23       		.uleb128 0x23
 5507 0759 01       		.byte	0x1
 5508 075a 53       		.byte	0x53
 5509 075b 01       		.byte	0x1
 5510 075c 31       		.byte	0x31
 5511 075d 23       		.uleb128 0x23
 5512 075e 01       		.byte	0x1
 5513 075f 52       		.byte	0x52
 5514 0760 02       		.byte	0x2
 5515 0761 76       		.byte	0x76
 5516 0762 00       		.sleb128 0
 5517 0763 23       		.uleb128 0x23
 5518 0764 01       		.byte	0x1
 5519 0765 51       		.byte	0x51
 5520 0766 02       		.byte	0x2
 5521 0767 74       		.byte	0x74
 5522 0768 30       		.sleb128 48
 5523 0769 00       		.byte	0
 5524 076a 00       		.byte	0
 5525 076b 1D       		.uleb128 0x1d
 5526 076c E7030000 		.4byte	.LASF83
 5527 0770 01       		.byte	0x1
 5528 0771 BE07     		.2byte	0x7be
 5529 0773 01       		.byte	0x1
 5530 0774 50000000 		.4byte	0x50
 5531 0778 00000000 		.4byte	.LFB19
 5532 077c 88000000 		.4byte	.LFE19
 5533 0780 64030000 		.4byte	.LLST21
ARM GAS  /tmp/ccKU0f2P.s 			page 162


 5534 0784 01       		.byte	0x1
 5535 0785 C5070000 		.4byte	0x7c5
 5536 0789 18       		.uleb128 0x18
 5537 078a 667300   		.ascii	"fs\000"
 5538 078d 01       		.byte	0x1
 5539 078e BF07     		.2byte	0x7bf
 5540 0790 70020000 		.4byte	0x270
 5541 0794 84030000 		.4byte	.LLST22
 5542 0798 1F       		.uleb128 0x1f
 5543 0799 78000000 		.4byte	.LASF38
 5544 079d 01       		.byte	0x1
 5545 079e C007     		.2byte	0x7c0
 5546 07a0 82000000 		.4byte	0x82
 5547 07a4 A2030000 		.4byte	.LLST23
 5548 07a8 22       		.uleb128 0x22
 5549 07a9 12000000 		.4byte	.LVL47
 5550 07ad E61A0000 		.4byte	0x1ae6
 5551 07b1 23       		.uleb128 0x23
 5552 07b2 01       		.byte	0x1
 5553 07b3 53       		.byte	0x53
 5554 07b4 01       		.byte	0x1
 5555 07b5 31       		.byte	0x31
 5556 07b6 23       		.uleb128 0x23
 5557 07b7 01       		.byte	0x1
 5558 07b8 52       		.byte	0x52
 5559 07b9 03       		.byte	0x3
 5560 07ba F3       		.byte	0xf3
 5561 07bb 01       		.uleb128 0x1
 5562 07bc 51       		.byte	0x51
 5563 07bd 23       		.uleb128 0x23
 5564 07be 01       		.byte	0x1
 5565 07bf 51       		.byte	0x51
 5566 07c0 02       		.byte	0x2
 5567 07c1 74       		.byte	0x74
 5568 07c2 30       		.sleb128 48
 5569 07c3 00       		.byte	0
 5570 07c4 00       		.byte	0
 5571 07c5 1D       		.uleb128 0x1d
 5572 07c6 EE020000 		.4byte	.LASF84
 5573 07ca 01       		.byte	0x1
 5574 07cb D807     		.2byte	0x7d8
 5575 07cd 01       		.byte	0x1
 5576 07ce F3030000 		.4byte	0x3f3
 5577 07d2 00000000 		.4byte	.LFB20
 5578 07d6 08030000 		.4byte	.LFE20
 5579 07da CE030000 		.4byte	.LLST24
 5580 07de 01       		.byte	0x1
 5581 07df 62090000 		.4byte	0x962
 5582 07e3 1F       		.uleb128 0x1f
 5583 07e4 6D000000 		.4byte	.LASF85
 5584 07e8 01       		.byte	0x1
 5585 07e9 D907     		.2byte	0x7d9
 5586 07eb 62090000 		.4byte	0x962
 5587 07ef EE030000 		.4byte	.LLST25
 5588 07f3 18       		.uleb128 0x18
 5589 07f4 72667300 		.ascii	"rfs\000"
 5590 07f8 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 163


 5591 07f9 DA07     		.2byte	0x7da
 5592 07fb 73090000 		.4byte	0x973
 5593 07ff 28040000 		.4byte	.LLST26
 5594 0803 1F       		.uleb128 0x1f
 5595 0804 83040000 		.4byte	.LASF86
 5596 0808 01       		.byte	0x1
 5597 0809 DB07     		.2byte	0x7db
 5598 080b 50000000 		.4byte	0x50
 5599 080f 62040000 		.4byte	.LLST27
 5600 0813 19       		.uleb128 0x19
 5601 0814 666D7400 		.ascii	"fmt\000"
 5602 0818 01       		.byte	0x1
 5603 0819 DE07     		.2byte	0x7de
 5604 081b 50000000 		.4byte	0x50
 5605 081f 83040000 		.4byte	.LLST28
 5606 0823 19       		.uleb128 0x19
 5607 0824 6200     		.ascii	"b\000"
 5608 0826 01       		.byte	0x1
 5609 0827 DE07     		.2byte	0x7de
 5610 0829 50000000 		.4byte	0x50
 5611 082d DB040000 		.4byte	.LLST29
 5612 0831 19       		.uleb128 0x19
 5613 0832 706900   		.ascii	"pi\000"
 5614 0835 01       		.byte	0x1
 5615 0836 DE07     		.2byte	0x7de
 5616 0838 50000000 		.4byte	0x50
 5617 083c FC040000 		.4byte	.LLST30
 5618 0840 19       		.uleb128 0x19
 5619 0841 74626C00 		.ascii	"tbl\000"
 5620 0845 01       		.byte	0x1
 5621 0846 DE07     		.2byte	0x7de
 5622 0848 76020000 		.4byte	0x276
 5623 084c 1C050000 		.4byte	.LLST31
 5624 0850 19       		.uleb128 0x19
 5625 0851 766F6C00 		.ascii	"vol\000"
 5626 0855 01       		.byte	0x1
 5627 0856 DF07     		.2byte	0x7df
 5628 0858 30000000 		.4byte	0x30
 5629 085c 40050000 		.4byte	.LLST32
 5630 0860 25       		.uleb128 0x25
 5631 0861 10050000 		.4byte	.LASF87
 5632 0865 01       		.byte	0x1
 5633 0866 E007     		.2byte	0x7e0
 5634 0868 FE030000 		.4byte	0x3fe
 5635 086c 5E050000 		.4byte	.LLST33
 5636 0870 25       		.uleb128 0x25
 5637 0871 0A020000 		.4byte	.LASF88
 5638 0875 01       		.byte	0x1
 5639 0876 E107     		.2byte	0x7e1
 5640 0878 82000000 		.4byte	0x82
 5641 087c 9D050000 		.4byte	.LLST34
 5642 0880 25       		.uleb128 0x25
 5643 0881 8F000000 		.4byte	.LASF89
 5644 0885 01       		.byte	0x1
 5645 0886 E107     		.2byte	0x7e1
 5646 0888 82000000 		.4byte	0x82
 5647 088c EA050000 		.4byte	.LLST35
ARM GAS  /tmp/ccKU0f2P.s 			page 164


 5648 0890 25       		.uleb128 0x25
 5649 0891 5F050000 		.4byte	.LASF90
 5650 0895 01       		.byte	0x1
 5651 0896 E107     		.2byte	0x7e1
 5652 0898 82000000 		.4byte	0x82
 5653 089c 90060000 		.4byte	.LLST36
 5654 08a0 25       		.uleb128 0x25
 5655 08a1 10020000 		.4byte	.LASF91
 5656 08a5 01       		.byte	0x1
 5657 08a6 E107     		.2byte	0x7e1
 5658 08a8 82000000 		.4byte	0x82
 5659 08ac F6060000 		.4byte	.LLST37
 5660 08b0 25       		.uleb128 0x25
 5661 08b1 FA020000 		.4byte	.LASF92
 5662 08b5 01       		.byte	0x1
 5663 08b6 E107     		.2byte	0x7e1
 5664 08b8 82000000 		.4byte	0x82
 5665 08bc 87070000 		.4byte	.LLST38
 5666 08c0 25       		.uleb128 0x25
 5667 08c1 6E020000 		.4byte	.LASF93
 5668 08c5 01       		.byte	0x1
 5669 08c6 E107     		.2byte	0x7e1
 5670 08c8 82000000 		.4byte	0x82
 5671 08cc B7070000 		.4byte	.LLST39
 5672 08d0 25       		.uleb128 0x25
 5673 08d1 94040000 		.4byte	.LASF94
 5674 08d5 01       		.byte	0x1
 5675 08d6 E207     		.2byte	0x7e2
 5676 08d8 69000000 		.4byte	0x69
 5677 08dc E3070000 		.4byte	.LLST40
 5678 08e0 19       		.uleb128 0x19
 5679 08e1 7000     		.ascii	"p\000"
 5680 08e3 01       		.byte	0x1
 5681 08e4 E307     		.2byte	0x7e3
 5682 08e6 68090000 		.4byte	0x968
 5683 08ea 30080000 		.4byte	.LLST41
 5684 08ee 19       		.uleb128 0x19
 5685 08ef 667300   		.ascii	"fs\000"
 5686 08f2 01       		.byte	0x1
 5687 08f3 E407     		.2byte	0x7e4
 5688 08f5 70020000 		.4byte	0x270
 5689 08f9 66080000 		.4byte	.LLST42
 5690 08fd 1E       		.uleb128 0x1e
 5691 08fe 38000000 		.4byte	.LVL60
 5692 0902 A71A0000 		.4byte	0x1aa7
 5693 0906 24       		.uleb128 0x24
 5694 0907 5E000000 		.4byte	.LVL62
 5695 090b 0D1B0000 		.4byte	0x1b0d
 5696 090f 19090000 		.4byte	0x919
 5697 0913 23       		.uleb128 0x23
 5698 0914 01       		.byte	0x1
 5699 0915 50       		.byte	0x50
 5700 0916 01       		.byte	0x1
 5701 0917 30       		.byte	0x30
 5702 0918 00       		.byte	0
 5703 0919 24       		.uleb128 0x24
 5704 091a 7A000000 		.4byte	.LVL65
ARM GAS  /tmp/ccKU0f2P.s 			page 165


 5705 091e 6B070000 		.4byte	0x76b
 5706 0922 32090000 		.4byte	0x932
 5707 0926 23       		.uleb128 0x23
 5708 0927 01       		.byte	0x1
 5709 0928 51       		.byte	0x51
 5710 0929 01       		.byte	0x1
 5711 092a 30       		.byte	0x30
 5712 092b 23       		.uleb128 0x23
 5713 092c 01       		.byte	0x1
 5714 092d 50       		.byte	0x50
 5715 092e 02       		.byte	0x2
 5716 092f 74       		.byte	0x74
 5717 0930 00       		.sleb128 0
 5718 0931 00       		.byte	0
 5719 0932 24       		.uleb128 0x24
 5720 0933 AE000000 		.4byte	.LVL71
 5721 0937 6B070000 		.4byte	0x76b
 5722 093b 4C090000 		.4byte	0x94c
 5723 093f 23       		.uleb128 0x23
 5724 0940 01       		.byte	0x1
 5725 0941 51       		.byte	0x51
 5726 0942 02       		.byte	0x2
 5727 0943 76       		.byte	0x76
 5728 0944 00       		.sleb128 0
 5729 0945 23       		.uleb128 0x23
 5730 0946 01       		.byte	0x1
 5731 0947 50       		.byte	0x50
 5732 0948 02       		.byte	0x2
 5733 0949 74       		.byte	0x74
 5734 094a 00       		.sleb128 0
 5735 094b 00       		.byte	0
 5736 094c 22       		.uleb128 0x22
 5737 094d 24020000 		.4byte	.LVL110
 5738 0951 E61A0000 		.4byte	0x1ae6
 5739 0955 23       		.uleb128 0x23
 5740 0956 01       		.byte	0x1
 5741 0957 53       		.byte	0x53
 5742 0958 01       		.byte	0x1
 5743 0959 31       		.byte	0x31
 5744 095a 23       		.uleb128 0x23
 5745 095b 01       		.byte	0x1
 5746 095c 51       		.byte	0x51
 5747 095d 02       		.byte	0x2
 5748 095e 74       		.byte	0x74
 5749 095f 30       		.sleb128 48
 5750 0960 00       		.byte	0
 5751 0961 00       		.byte	0
 5752 0962 0A       		.uleb128 0xa
 5753 0963 04       		.byte	0x4
 5754 0964 68090000 		.4byte	0x968
 5755 0968 0A       		.uleb128 0xa
 5756 0969 04       		.byte	0x4
 5757 096a 6E090000 		.4byte	0x96e
 5758 096e 14       		.uleb128 0x14
 5759 096f 8D000000 		.4byte	0x8d
 5760 0973 0A       		.uleb128 0xa
 5761 0974 04       		.byte	0x4
ARM GAS  /tmp/ccKU0f2P.s 			page 166


 5762 0975 70020000 		.4byte	0x270
 5763 0979 1D       		.uleb128 0x1d
 5764 097a 00050000 		.4byte	.LASF95
 5765 097e 01       		.byte	0x1
 5766 097f F902     		.2byte	0x2f9
 5767 0981 01       		.byte	0x1
 5768 0982 F3030000 		.4byte	0x3f3
 5769 0986 00000000 		.4byte	.LFB5
 5770 098a B6000000 		.4byte	.LFE5
 5771 098e 84080000 		.4byte	.LLST43
 5772 0992 01       		.byte	0x1
 5773 0993 1E0A0000 		.4byte	0xa1e
 5774 0997 18       		.uleb128 0x18
 5775 0998 667300   		.ascii	"fs\000"
 5776 099b 01       		.byte	0x1
 5777 099c FA02     		.2byte	0x2fa
 5778 099e 70020000 		.4byte	0x270
 5779 09a2 A4080000 		.4byte	.LLST44
 5780 09a6 19       		.uleb128 0x19
 5781 09a7 72657300 		.ascii	"res\000"
 5782 09ab 01       		.byte	0x1
 5783 09ac FD02     		.2byte	0x2fd
 5784 09ae F3030000 		.4byte	0x3f3
 5785 09b2 C2080000 		.4byte	.LLST45
 5786 09b6 24       		.uleb128 0x24
 5787 09b7 0A000000 		.4byte	.LVL121
 5788 09bb AD060000 		.4byte	0x6ad
 5789 09bf CF090000 		.4byte	0x9cf
 5790 09c3 23       		.uleb128 0x23
 5791 09c4 01       		.byte	0x1
 5792 09c5 51       		.byte	0x51
 5793 09c6 01       		.byte	0x1
 5794 09c7 30       		.byte	0x30
 5795 09c8 23       		.uleb128 0x23
 5796 09c9 01       		.byte	0x1
 5797 09ca 50       		.byte	0x50
 5798 09cb 02       		.byte	0x2
 5799 09cc 74       		.byte	0x74
 5800 09cd 00       		.sleb128 0
 5801 09ce 00       		.byte	0
 5802 09cf 24       		.uleb128 0x24
 5803 09d0 2E000000 		.4byte	.LVL124
 5804 09d4 84050000 		.4byte	0x584
 5805 09d8 F0090000 		.4byte	0x9f0
 5806 09dc 23       		.uleb128 0x23
 5807 09dd 01       		.byte	0x1
 5808 09de 52       		.byte	0x52
 5809 09df 03       		.byte	0x3
 5810 09e0 0A       		.byte	0xa
 5811 09e1 0002     		.2byte	0x200
 5812 09e3 23       		.uleb128 0x23
 5813 09e4 01       		.byte	0x1
 5814 09e5 51       		.byte	0x51
 5815 09e6 02       		.byte	0x2
 5816 09e7 75       		.byte	0x75
 5817 09e8 00       		.sleb128 0
 5818 09e9 23       		.uleb128 0x23
ARM GAS  /tmp/ccKU0f2P.s 			page 167


 5819 09ea 01       		.byte	0x1
 5820 09eb 50       		.byte	0x50
 5821 09ec 02       		.byte	0x2
 5822 09ed 76       		.byte	0x76
 5823 09ee 00       		.sleb128 0
 5824 09ef 00       		.byte	0
 5825 09f0 24       		.uleb128 0x24
 5826 09f1 A2000000 		.4byte	.LVL125
 5827 09f5 BF1A0000 		.4byte	0x1abf
 5828 09f9 090A0000 		.4byte	0xa09
 5829 09fd 23       		.uleb128 0x23
 5830 09fe 01       		.byte	0x1
 5831 09ff 53       		.byte	0x53
 5832 0a00 01       		.byte	0x1
 5833 0a01 31       		.byte	0x31
 5834 0a02 23       		.uleb128 0x23
 5835 0a03 01       		.byte	0x1
 5836 0a04 51       		.byte	0x51
 5837 0a05 02       		.byte	0x2
 5838 0a06 76       		.byte	0x76
 5839 0a07 00       		.sleb128 0
 5840 0a08 00       		.byte	0
 5841 0a09 22       		.uleb128 0x22
 5842 0a0a AE000000 		.4byte	.LVL126
 5843 0a0e 251B0000 		.4byte	0x1b25
 5844 0a12 23       		.uleb128 0x23
 5845 0a13 01       		.byte	0x1
 5846 0a14 52       		.byte	0x52
 5847 0a15 01       		.byte	0x1
 5848 0a16 30       		.byte	0x30
 5849 0a17 23       		.uleb128 0x23
 5850 0a18 01       		.byte	0x1
 5851 0a19 51       		.byte	0x51
 5852 0a1a 01       		.byte	0x1
 5853 0a1b 30       		.byte	0x30
 5854 0a1c 00       		.byte	0
 5855 0a1d 00       		.byte	0
 5856 0a1e 26       		.uleb128 0x26
 5857 0a1f A2040000 		.4byte	0x4a2
 5858 0a23 00000000 		.4byte	.LFB32
 5859 0a27 14000000 		.4byte	.LFE32
 5860 0a2b 02       		.byte	0x2
 5861 0a2c 7D       		.byte	0x7d
 5862 0a2d 00       		.sleb128 0
 5863 0a2e 01       		.byte	0x1
 5864 0a2f 460A0000 		.4byte	0xa46
 5865 0a33 27       		.uleb128 0x27
 5866 0a34 C0040000 		.4byte	0x4c0
 5867 0a38 EB080000 		.4byte	.LLST46
 5868 0a3c 27       		.uleb128 0x27
 5869 0a3d B4040000 		.4byte	0x4b4
 5870 0a41 0C090000 		.4byte	.LLST47
 5871 0a45 00       		.byte	0
 5872 0a46 1D       		.uleb128 0x1d
 5873 0a47 56040000 		.4byte	.LASF96
 5874 0a4b 01       		.byte	0x1
 5875 0a4c 5706     		.2byte	0x657
ARM GAS  /tmp/ccKU0f2P.s 			page 168


 5876 0a4e 01       		.byte	0x1
 5877 0a4f F3030000 		.4byte	0x3f3
 5878 0a53 00000000 		.4byte	.LFB16
 5879 0a57 EC000000 		.4byte	.LFE16
 5880 0a5b 24090000 		.4byte	.LLST48
 5881 0a5f 01       		.byte	0x1
 5882 0a60 330B0000 		.4byte	0xb33
 5883 0a64 18       		.uleb128 0x18
 5884 0a65 646A00   		.ascii	"dj\000"
 5885 0a68 01       		.byte	0x1
 5886 0a69 5806     		.2byte	0x658
 5887 0a6b 19050000 		.4byte	0x519
 5888 0a6f 44090000 		.4byte	.LLST49
 5889 0a73 1F       		.uleb128 0x1f
 5890 0a74 6D000000 		.4byte	.LASF85
 5891 0a78 01       		.byte	0x1
 5892 0a79 5906     		.2byte	0x659
 5893 0a7b 62090000 		.4byte	0x962
 5894 0a7f 65090000 		.4byte	.LLST50
 5895 0a83 20       		.uleb128 0x20
 5896 0a84 8F030000 		.4byte	.LASF97
 5897 0a88 01       		.byte	0x1
 5898 0a89 5D06     		.2byte	0x65d
 5899 0a8b 430B0000 		.4byte	0xb43
 5900 0a8f 05       		.byte	0x5
 5901 0a90 03       		.byte	0x3
 5902 0a91 00000000 		.4byte	excvt.4406
 5903 0a95 19       		.uleb128 0x19
 5904 0a96 6200     		.ascii	"b\000"
 5905 0a98 01       		.byte	0x1
 5906 0a99 DA06     		.2byte	0x6da
 5907 0a9b 50000000 		.4byte	0x50
 5908 0a9f 83090000 		.4byte	.LLST51
 5909 0aa3 19       		.uleb128 0x19
 5910 0aa4 6300     		.ascii	"c\000"
 5911 0aa6 01       		.byte	0x1
 5912 0aa7 DA06     		.2byte	0x6da
 5913 0aa9 50000000 		.4byte	0x50
 5914 0aad C3090000 		.4byte	.LLST52
 5915 0ab1 12       		.uleb128 0x12
 5916 0ab2 6400     		.ascii	"d\000"
 5917 0ab4 01       		.byte	0x1
 5918 0ab5 DA06     		.2byte	0x6da
 5919 0ab7 50000000 		.4byte	0x50
 5920 0abb 1C       		.uleb128 0x1c
 5921 0abc 73666E00 		.ascii	"sfn\000"
 5922 0ac0 01       		.byte	0x1
 5923 0ac1 DA06     		.2byte	0x6da
 5924 0ac3 76020000 		.4byte	0x276
 5925 0ac7 01       		.byte	0x1
 5926 0ac8 57       		.byte	0x57
 5927 0ac9 19       		.uleb128 0x19
 5928 0aca 6E6900   		.ascii	"ni\000"
 5929 0acd 01       		.byte	0x1
 5930 0ace DB06     		.2byte	0x6db
 5931 0ad0 30000000 		.4byte	0x30
 5932 0ad4 4C0A0000 		.4byte	.LLST53
ARM GAS  /tmp/ccKU0f2P.s 			page 169


 5933 0ad8 19       		.uleb128 0x19
 5934 0ad9 736900   		.ascii	"si\000"
 5935 0adc 01       		.byte	0x1
 5936 0add DB06     		.2byte	0x6db
 5937 0adf 30000000 		.4byte	0x30
 5938 0ae3 770A0000 		.4byte	.LLST54
 5939 0ae7 19       		.uleb128 0x19
 5940 0ae8 6900     		.ascii	"i\000"
 5941 0aea 01       		.byte	0x1
 5942 0aeb DB06     		.2byte	0x6db
 5943 0aed 30000000 		.4byte	0x30
 5944 0af1 960A0000 		.4byte	.LLST55
 5945 0af5 19       		.uleb128 0x19
 5946 0af6 7000     		.ascii	"p\000"
 5947 0af8 01       		.byte	0x1
 5948 0af9 DC06     		.2byte	0x6dc
 5949 0afb CD040000 		.4byte	0x4cd
 5950 0aff C10A0000 		.4byte	.LLST56
 5951 0b03 24       		.uleb128 0x24
 5952 0b04 24000000 		.4byte	.LVL138
 5953 0b08 84050000 		.4byte	0x584
 5954 0b0c 220B0000 		.4byte	0xb22
 5955 0b10 23       		.uleb128 0x23
 5956 0b11 01       		.byte	0x1
 5957 0b12 52       		.byte	0x52
 5958 0b13 01       		.byte	0x1
 5959 0b14 3B       		.byte	0x3b
 5960 0b15 23       		.uleb128 0x23
 5961 0b16 01       		.byte	0x1
 5962 0b17 51       		.byte	0x51
 5963 0b18 02       		.byte	0x2
 5964 0b19 08       		.byte	0x8
 5965 0b1a 20       		.byte	0x20
 5966 0b1b 23       		.uleb128 0x23
 5967 0b1c 01       		.byte	0x1
 5968 0b1d 50       		.byte	0x50
 5969 0b1e 02       		.byte	0x2
 5970 0b1f 77       		.byte	0x77
 5971 0b20 00       		.sleb128 0
 5972 0b21 00       		.byte	0
 5973 0b22 22       		.uleb128 0x22
 5974 0b23 64000000 		.4byte	.LVL145
 5975 0b27 1E0A0000 		.4byte	0xa1e
 5976 0b2b 23       		.uleb128 0x23
 5977 0b2c 01       		.byte	0x1
 5978 0b2d 50       		.byte	0x50
 5979 0b2e 02       		.byte	0x2
 5980 0b2f 74       		.byte	0x74
 5981 0b30 00       		.sleb128 0
 5982 0b31 00       		.byte	0
 5983 0b32 00       		.byte	0
 5984 0b33 08       		.uleb128 0x8
 5985 0b34 50000000 		.4byte	0x50
 5986 0b38 430B0000 		.4byte	0xb43
 5987 0b3c 0D       		.uleb128 0xd
 5988 0b3d AE010000 		.4byte	0x1ae
 5989 0b41 7F       		.byte	0x7f
ARM GAS  /tmp/ccKU0f2P.s 			page 170


 5990 0b42 00       		.byte	0
 5991 0b43 14       		.uleb128 0x14
 5992 0b44 330B0000 		.4byte	0xb33
 5993 0b48 28       		.uleb128 0x28
 5994 0b49 3B040000 		.4byte	0x43b
 5995 0b4d 00000000 		.4byte	.LFB31
 5996 0b51 16000000 		.4byte	.LFE31
 5997 0b55 EB0A0000 		.4byte	.LLST57
 5998 0b59 01       		.byte	0x1
 5999 0b5a 870B0000 		.4byte	0xb87
 6000 0b5e 27       		.uleb128 0x27
 6001 0b5f 4D040000 		.4byte	0x44d
 6002 0b63 0B0B0000 		.4byte	.LLST58
 6003 0b67 29       		.uleb128 0x29
 6004 0b68 59040000 		.4byte	0x459
 6005 0b6c 01       		.byte	0x1
 6006 0b6d 51       		.byte	0x51
 6007 0b6e 2A       		.uleb128 0x2a
 6008 0b6f 71040000 		.4byte	0x471
 6009 0b73 2A       		.uleb128 0x2a
 6010 0b74 7B040000 		.4byte	0x47b
 6011 0b78 2B       		.uleb128 0x2b
 6012 0b79 85040000 		.4byte	0x485
 6013 0b7d 2C0B0000 		.4byte	.LLST59
 6014 0b81 2C       		.uleb128 0x2c
 6015 0b82 65040000 		.4byte	0x465
 6016 0b86 00       		.byte	0
 6017 0b87 2D       		.uleb128 0x2d
 6018 0b88 01       		.byte	0x1
 6019 0b89 C5020000 		.4byte	.LASF98
 6020 0b8d 01       		.byte	0x1
 6021 0b8e 2103     		.2byte	0x321
 6022 0b90 01       		.byte	0x1
 6023 0b91 82000000 		.4byte	0x82
 6024 0b95 00000000 		.4byte	.LFB6
 6025 0b99 18000000 		.4byte	.LFE6
 6026 0b9d 02       		.byte	0x2
 6027 0b9e 7D       		.byte	0x7d
 6028 0b9f 00       		.sleb128 0
 6029 0ba0 01       		.byte	0x1
 6030 0ba1 C50B0000 		.4byte	0xbc5
 6031 0ba5 18       		.uleb128 0x18
 6032 0ba6 667300   		.ascii	"fs\000"
 6033 0ba9 01       		.byte	0x1
 6034 0baa 2203     		.2byte	0x322
 6035 0bac 70020000 		.4byte	0x270
 6036 0bb0 720B0000 		.4byte	.LLST60
 6037 0bb4 1F       		.uleb128 0x1f
 6038 0bb5 33020000 		.4byte	.LASF75
 6039 0bb9 01       		.byte	0x1
 6040 0bba 2303     		.2byte	0x323
 6041 0bbc 82000000 		.4byte	0x82
 6042 0bc0 AC0B0000 		.4byte	.LLST61
 6043 0bc4 00       		.byte	0
 6044 0bc5 2E       		.uleb128 0x2e
 6045 0bc6 01       		.byte	0x1
 6046 0bc7 9D030000 		.4byte	.LASF99
ARM GAS  /tmp/ccKU0f2P.s 			page 171


 6047 0bcb 01       		.byte	0x1
 6048 0bcc 3303     		.2byte	0x333
 6049 0bce 01       		.byte	0x1
 6050 0bcf 82000000 		.4byte	0x82
 6051 0bd3 00000000 		.4byte	.LFB7
 6052 0bd7 C8000000 		.4byte	.LFE7
 6053 0bdb CA0B0000 		.4byte	.LLST62
 6054 0bdf 01       		.byte	0x1
 6055 0be0 7C0C0000 		.4byte	0xc7c
 6056 0be4 18       		.uleb128 0x18
 6057 0be5 667300   		.ascii	"fs\000"
 6058 0be8 01       		.byte	0x1
 6059 0be9 3403     		.2byte	0x334
 6060 0beb 70020000 		.4byte	0x270
 6061 0bef EA0B0000 		.4byte	.LLST63
 6062 0bf3 1F       		.uleb128 0x1f
 6063 0bf4 33020000 		.4byte	.LASF75
 6064 0bf8 01       		.byte	0x1
 6065 0bf9 3503     		.2byte	0x335
 6066 0bfb 82000000 		.4byte	0x82
 6067 0bff 740C0000 		.4byte	.LLST64
 6068 0c03 19       		.uleb128 0x19
 6069 0c04 776300   		.ascii	"wc\000"
 6070 0c07 01       		.byte	0x1
 6071 0c08 3803     		.2byte	0x338
 6072 0c0a 30000000 		.4byte	0x30
 6073 0c0e CF0C0000 		.4byte	.LLST65
 6074 0c12 19       		.uleb128 0x19
 6075 0c13 626300   		.ascii	"bc\000"
 6076 0c16 01       		.byte	0x1
 6077 0c17 3803     		.2byte	0x338
 6078 0c19 30000000 		.4byte	0x30
 6079 0c1d F20C0000 		.4byte	.LLST66
 6080 0c21 19       		.uleb128 0x19
 6081 0c22 7000     		.ascii	"p\000"
 6082 0c24 01       		.byte	0x1
 6083 0c25 3903     		.2byte	0x339
 6084 0c27 76020000 		.4byte	0x276
 6085 0c2b 3C0D0000 		.4byte	.LLST67
 6086 0c2f 24       		.uleb128 0x24
 6087 0c30 2C000000 		.4byte	.LVL176
 6088 0c34 AD060000 		.4byte	0x6ad
 6089 0c38 430C0000 		.4byte	0xc43
 6090 0c3c 23       		.uleb128 0x23
 6091 0c3d 01       		.byte	0x1
 6092 0c3e 50       		.byte	0x50
 6093 0c3f 02       		.byte	0x2
 6094 0c40 74       		.byte	0x74
 6095 0c41 00       		.sleb128 0
 6096 0c42 00       		.byte	0
 6097 0c43 24       		.uleb128 0x24
 6098 0c44 48000000 		.4byte	.LVL179
 6099 0c48 AD060000 		.4byte	0x6ad
 6100 0c4c 570C0000 		.4byte	0xc57
 6101 0c50 23       		.uleb128 0x23
 6102 0c51 01       		.byte	0x1
 6103 0c52 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 172


 6104 0c53 02       		.byte	0x2
 6105 0c54 74       		.byte	0x74
 6106 0c55 00       		.sleb128 0
 6107 0c56 00       		.byte	0
 6108 0c57 24       		.uleb128 0x24
 6109 0c58 72000000 		.4byte	.LVL184
 6110 0c5c AD060000 		.4byte	0x6ad
 6111 0c60 6B0C0000 		.4byte	0xc6b
 6112 0c64 23       		.uleb128 0x23
 6113 0c65 01       		.byte	0x1
 6114 0c66 50       		.byte	0x50
 6115 0c67 02       		.byte	0x2
 6116 0c68 74       		.byte	0x74
 6117 0c69 00       		.sleb128 0
 6118 0c6a 00       		.byte	0
 6119 0c6b 22       		.uleb128 0x22
 6120 0c6c 94000000 		.4byte	.LVL189
 6121 0c70 AD060000 		.4byte	0x6ad
 6122 0c74 23       		.uleb128 0x23
 6123 0c75 01       		.byte	0x1
 6124 0c76 50       		.byte	0x50
 6125 0c77 02       		.byte	0x2
 6126 0c78 74       		.byte	0x74
 6127 0c79 00       		.sleb128 0
 6128 0c7a 00       		.byte	0
 6129 0c7b 00       		.byte	0
 6130 0c7c 28       		.uleb128 0x28
 6131 0c7d D8040000 		.4byte	0x4d8
 6132 0c81 00000000 		.4byte	.LFB33
 6133 0c85 6A000000 		.4byte	.LFE33
 6134 0c89 980D0000 		.4byte	.LLST68
 6135 0c8d 01       		.byte	0x1
 6136 0c8e CD0C0000 		.4byte	0xccd
 6137 0c92 27       		.uleb128 0x27
 6138 0c93 EA040000 		.4byte	0x4ea
 6139 0c97 B80D0000 		.4byte	.LLST69
 6140 0c9b 2B       		.uleb128 0x2b
 6141 0c9c 01050000 		.4byte	0x501
 6142 0ca0 EC0D0000 		.4byte	.LLST70
 6143 0ca4 2B       		.uleb128 0x2b
 6144 0ca5 0D050000 		.4byte	0x50d
 6145 0ca9 580E0000 		.4byte	.LLST71
 6146 0cad 2F       		.uleb128 0x2f
 6147 0cae F5040000 		.4byte	0x4f5
 6148 0cb2 00       		.byte	0
 6149 0cb3 1E       		.uleb128 0x1e
 6150 0cb4 40000000 		.4byte	.LVL208
 6151 0cb8 C50B0000 		.4byte	0xbc5
 6152 0cbc 22       		.uleb128 0x22
 6153 0cbd 5C000000 		.4byte	.LVL212
 6154 0cc1 870B0000 		.4byte	0xb87
 6155 0cc5 23       		.uleb128 0x23
 6156 0cc6 01       		.byte	0x1
 6157 0cc7 50       		.byte	0x50
 6158 0cc8 02       		.byte	0x2
 6159 0cc9 75       		.byte	0x75
 6160 0cca 00       		.sleb128 0
ARM GAS  /tmp/ccKU0f2P.s 			page 173


 6161 0ccb 00       		.byte	0
 6162 0ccc 00       		.byte	0
 6163 0ccd 2E       		.uleb128 0x2e
 6164 0cce 01       		.byte	0x1
 6165 0ccf 2E000000 		.4byte	.LASF100
 6166 0cd3 01       		.byte	0x1
 6167 0cd4 5E03     		.2byte	0x35e
 6168 0cd6 01       		.byte	0x1
 6169 0cd7 F3030000 		.4byte	0x3f3
 6170 0cdb 00000000 		.4byte	.LFB8
 6171 0cdf F2000000 		.4byte	.LFE8
 6172 0ce3 880E0000 		.4byte	.LLST72
 6173 0ce7 01       		.byte	0x1
 6174 0ce8 950D0000 		.4byte	0xd95
 6175 0cec 18       		.uleb128 0x18
 6176 0ced 667300   		.ascii	"fs\000"
 6177 0cf0 01       		.byte	0x1
 6178 0cf1 5F03     		.2byte	0x35f
 6179 0cf3 70020000 		.4byte	0x270
 6180 0cf7 A80E0000 		.4byte	.LLST73
 6181 0cfb 1F       		.uleb128 0x1f
 6182 0cfc 33020000 		.4byte	.LASF75
 6183 0d00 01       		.byte	0x1
 6184 0d01 6003     		.2byte	0x360
 6185 0d03 82000000 		.4byte	0x82
 6186 0d07 1E0F0000 		.4byte	.LLST74
 6187 0d0b 18       		.uleb128 0x18
 6188 0d0c 76616C00 		.ascii	"val\000"
 6189 0d10 01       		.byte	0x1
 6190 0d11 6103     		.2byte	0x361
 6191 0d13 82000000 		.4byte	0x82
 6192 0d17 A00F0000 		.4byte	.LLST75
 6193 0d1b 19       		.uleb128 0x19
 6194 0d1c 626300   		.ascii	"bc\000"
 6195 0d1f 01       		.byte	0x1
 6196 0d20 6403     		.2byte	0x364
 6197 0d22 30000000 		.4byte	0x30
 6198 0d26 52100000 		.4byte	.LLST76
 6199 0d2a 19       		.uleb128 0x19
 6200 0d2b 7000     		.ascii	"p\000"
 6201 0d2d 01       		.byte	0x1
 6202 0d2e 6503     		.2byte	0x365
 6203 0d30 76020000 		.4byte	0x276
 6204 0d34 86100000 		.4byte	.LLST77
 6205 0d38 19       		.uleb128 0x19
 6206 0d39 72657300 		.ascii	"res\000"
 6207 0d3d 01       		.byte	0x1
 6208 0d3e 6603     		.2byte	0x366
 6209 0d40 F3030000 		.4byte	0x3f3
 6210 0d44 18110000 		.4byte	.LLST78
 6211 0d48 24       		.uleb128 0x24
 6212 0d49 2E000000 		.4byte	.LVL220
 6213 0d4d AD060000 		.4byte	0x6ad
 6214 0d51 5C0D0000 		.4byte	0xd5c
 6215 0d55 23       		.uleb128 0x23
 6216 0d56 01       		.byte	0x1
 6217 0d57 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 174


 6218 0d58 02       		.byte	0x2
 6219 0d59 74       		.byte	0x74
 6220 0d5a 00       		.sleb128 0
 6221 0d5b 00       		.byte	0
 6222 0d5c 24       		.uleb128 0x24
 6223 0d5d 66000000 		.4byte	.LVL226
 6224 0d61 AD060000 		.4byte	0x6ad
 6225 0d65 700D0000 		.4byte	0xd70
 6226 0d69 23       		.uleb128 0x23
 6227 0d6a 01       		.byte	0x1
 6228 0d6b 50       		.byte	0x50
 6229 0d6c 02       		.byte	0x2
 6230 0d6d 74       		.byte	0x74
 6231 0d6e 00       		.sleb128 0
 6232 0d6f 00       		.byte	0
 6233 0d70 24       		.uleb128 0x24
 6234 0d71 98000000 		.4byte	.LVL233
 6235 0d75 AD060000 		.4byte	0x6ad
 6236 0d79 840D0000 		.4byte	0xd84
 6237 0d7d 23       		.uleb128 0x23
 6238 0d7e 01       		.byte	0x1
 6239 0d7f 50       		.byte	0x50
 6240 0d80 02       		.byte	0x2
 6241 0d81 74       		.byte	0x74
 6242 0d82 00       		.sleb128 0
 6243 0d83 00       		.byte	0
 6244 0d84 22       		.uleb128 0x22
 6245 0d85 BA000000 		.4byte	.LVL239
 6246 0d89 AD060000 		.4byte	0x6ad
 6247 0d8d 23       		.uleb128 0x23
 6248 0d8e 01       		.byte	0x1
 6249 0d8f 50       		.byte	0x50
 6250 0d90 02       		.byte	0x2
 6251 0d91 74       		.byte	0x74
 6252 0d92 00       		.sleb128 0
 6253 0d93 00       		.byte	0
 6254 0d94 00       		.byte	0
 6255 0d95 1D       		.uleb128 0x1d
 6256 0d96 A5030000 		.4byte	.LASF101
 6257 0d9a 01       		.byte	0x1
 6258 0d9b D203     		.2byte	0x3d2
 6259 0d9d 01       		.byte	0x1
 6260 0d9e 82000000 		.4byte	0x82
 6261 0da2 00000000 		.4byte	.LFB10
 6262 0da6 9A000000 		.4byte	.LFE10
 6263 0daa 62110000 		.4byte	.LLST79
 6264 0dae 01       		.byte	0x1
 6265 0daf 740E0000 		.4byte	0xe74
 6266 0db3 18       		.uleb128 0x18
 6267 0db4 667300   		.ascii	"fs\000"
 6268 0db7 01       		.byte	0x1
 6269 0db8 D303     		.2byte	0x3d3
 6270 0dba 70020000 		.4byte	0x270
 6271 0dbe 82110000 		.4byte	.LLST80
 6272 0dc2 1F       		.uleb128 0x1f
 6273 0dc3 33020000 		.4byte	.LASF75
 6274 0dc7 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 175


 6275 0dc8 D403     		.2byte	0x3d4
 6276 0dca 82000000 		.4byte	0x82
 6277 0dce CC110000 		.4byte	.LLST81
 6278 0dd2 19       		.uleb128 0x19
 6279 0dd3 637300   		.ascii	"cs\000"
 6280 0dd6 01       		.byte	0x1
 6281 0dd7 D703     		.2byte	0x3d7
 6282 0dd9 82000000 		.4byte	0x82
 6283 0ddd 00120000 		.4byte	.LLST82
 6284 0de1 19       		.uleb128 0x19
 6285 0de2 6E636C00 		.ascii	"ncl\000"
 6286 0de6 01       		.byte	0x1
 6287 0de7 D703     		.2byte	0x3d7
 6288 0de9 82000000 		.4byte	0x82
 6289 0ded 29120000 		.4byte	.LLST83
 6290 0df1 19       		.uleb128 0x19
 6291 0df2 73636C00 		.ascii	"scl\000"
 6292 0df6 01       		.byte	0x1
 6293 0df7 D703     		.2byte	0x3d7
 6294 0df9 82000000 		.4byte	0x82
 6295 0dfd 5F120000 		.4byte	.LLST84
 6296 0e01 19       		.uleb128 0x19
 6297 0e02 72657300 		.ascii	"res\000"
 6298 0e06 01       		.byte	0x1
 6299 0e07 D803     		.2byte	0x3d8
 6300 0e09 F3030000 		.4byte	0x3f3
 6301 0e0d 89120000 		.4byte	.LLST85
 6302 0e11 1E       		.uleb128 0x1e
 6303 0e12 1A000000 		.4byte	.LVL253
 6304 0e16 C50B0000 		.4byte	0xbc5
 6305 0e1a 24       		.uleb128 0x24
 6306 0e1b 46000000 		.4byte	.LVL262
 6307 0e1f C50B0000 		.4byte	0xbc5
 6308 0e23 340E0000 		.4byte	0xe34
 6309 0e27 23       		.uleb128 0x23
 6310 0e28 01       		.byte	0x1
 6311 0e29 51       		.byte	0x51
 6312 0e2a 02       		.byte	0x2
 6313 0e2b 74       		.byte	0x74
 6314 0e2c 00       		.sleb128 0
 6315 0e2d 23       		.uleb128 0x23
 6316 0e2e 01       		.byte	0x1
 6317 0e2f 50       		.byte	0x50
 6318 0e30 02       		.byte	0x2
 6319 0e31 75       		.byte	0x75
 6320 0e32 00       		.sleb128 0
 6321 0e33 00       		.byte	0
 6322 0e34 24       		.uleb128 0x24
 6323 0e35 68000000 		.4byte	.LVL266
 6324 0e39 CD0C0000 		.4byte	0xccd
 6325 0e3d 570E0000 		.4byte	0xe57
 6326 0e41 23       		.uleb128 0x23
 6327 0e42 01       		.byte	0x1
 6328 0e43 52       		.byte	0x52
 6329 0e44 05       		.byte	0x5
 6330 0e45 0C       		.byte	0xc
 6331 0e46 FFFFFF0F 		.4byte	0xfffffff
ARM GAS  /tmp/ccKU0f2P.s 			page 176


 6332 0e4a 23       		.uleb128 0x23
 6333 0e4b 01       		.byte	0x1
 6334 0e4c 51       		.byte	0x51
 6335 0e4d 02       		.byte	0x2
 6336 0e4e 74       		.byte	0x74
 6337 0e4f 00       		.sleb128 0
 6338 0e50 23       		.uleb128 0x23
 6339 0e51 01       		.byte	0x1
 6340 0e52 50       		.byte	0x50
 6341 0e53 02       		.byte	0x2
 6342 0e54 75       		.byte	0x75
 6343 0e55 00       		.sleb128 0
 6344 0e56 00       		.byte	0
 6345 0e57 22       		.uleb128 0x22
 6346 0e58 88000000 		.4byte	.LVL270
 6347 0e5c CD0C0000 		.4byte	0xccd
 6348 0e60 23       		.uleb128 0x23
 6349 0e61 01       		.byte	0x1
 6350 0e62 52       		.byte	0x52
 6351 0e63 02       		.byte	0x2
 6352 0e64 74       		.byte	0x74
 6353 0e65 00       		.sleb128 0
 6354 0e66 23       		.uleb128 0x23
 6355 0e67 01       		.byte	0x1
 6356 0e68 51       		.byte	0x51
 6357 0e69 02       		.byte	0x2
 6358 0e6a 77       		.byte	0x77
 6359 0e6b 00       		.sleb128 0
 6360 0e6c 23       		.uleb128 0x23
 6361 0e6d 01       		.byte	0x1
 6362 0e6e 50       		.byte	0x50
 6363 0e6f 02       		.byte	0x2
 6364 0e70 75       		.byte	0x75
 6365 0e71 00       		.sleb128 0
 6366 0e72 00       		.byte	0
 6367 0e73 00       		.byte	0
 6368 0e74 1D       		.uleb128 0x1d
 6369 0e75 75020000 		.4byte	.LASF102
 6370 0e79 01       		.byte	0x1
 6371 0e7a 5904     		.2byte	0x459
 6372 0e7c 01       		.byte	0x1
 6373 0e7d F3030000 		.4byte	0x3f3
 6374 0e81 00000000 		.4byte	.LFB12
 6375 0e85 FA000000 		.4byte	.LFE12
 6376 0e89 BD120000 		.4byte	.LLST86
 6377 0e8d 01       		.byte	0x1
 6378 0e8e 610F0000 		.4byte	0xf61
 6379 0e92 18       		.uleb128 0x18
 6380 0e93 646A00   		.ascii	"dj\000"
 6381 0e96 01       		.byte	0x1
 6382 0e97 5A04     		.2byte	0x45a
 6383 0e99 19050000 		.4byte	0x519
 6384 0e9d DD120000 		.4byte	.LLST87
 6385 0ea1 1F       		.uleb128 0x1f
 6386 0ea2 BF010000 		.4byte	.LASF103
 6387 0ea6 01       		.byte	0x1
 6388 0ea7 5B04     		.2byte	0x45b
ARM GAS  /tmp/ccKU0f2P.s 			page 177


 6389 0ea9 29000000 		.4byte	0x29
 6390 0ead FB120000 		.4byte	.LLST88
 6391 0eb1 25       		.uleb128 0x25
 6392 0eb2 33020000 		.4byte	.LASF75
 6393 0eb6 01       		.byte	0x1
 6394 0eb7 5E04     		.2byte	0x45e
 6395 0eb9 82000000 		.4byte	0x82
 6396 0ebd 61130000 		.4byte	.LLST89
 6397 0ec1 19       		.uleb128 0x19
 6398 0ec2 6900     		.ascii	"i\000"
 6399 0ec4 01       		.byte	0x1
 6400 0ec5 5F04     		.2byte	0x45f
 6401 0ec7 69000000 		.4byte	0x69
 6402 0ecb D7130000 		.4byte	.LLST90
 6403 0ecf 30       		.uleb128 0x30
 6404 0ed0 00000000 		.4byte	.Ldebug_ranges0+0
 6405 0ed4 470F0000 		.4byte	0xf47
 6406 0ed8 19       		.uleb128 0x19
 6407 0ed9 6300     		.ascii	"c\000"
 6408 0edb 01       		.byte	0x1
 6409 0edc 7504     		.2byte	0x475
 6410 0ede 50000000 		.4byte	0x50
 6411 0ee2 0B140000 		.4byte	.LLST91
 6412 0ee6 1E       		.uleb128 0x1e
 6413 0ee7 6A000000 		.4byte	.LVL288
 6414 0eeb 950D0000 		.4byte	0xd95
 6415 0eef 24       		.uleb128 0x24
 6416 0ef0 80000000 		.4byte	.LVL290
 6417 0ef4 AD060000 		.4byte	0x6ad
 6418 0ef8 020F0000 		.4byte	0xf02
 6419 0efc 23       		.uleb128 0x23
 6420 0efd 01       		.byte	0x1
 6421 0efe 51       		.byte	0x51
 6422 0eff 01       		.byte	0x1
 6423 0f00 30       		.byte	0x30
 6424 0f01 00       		.byte	0
 6425 0f02 24       		.uleb128 0x24
 6426 0f03 94000000 		.4byte	.LVL292
 6427 0f07 84050000 		.4byte	0x584
 6428 0f0b 1D0F0000 		.4byte	0xf1d
 6429 0f0f 23       		.uleb128 0x23
 6430 0f10 01       		.byte	0x1
 6431 0f11 52       		.byte	0x52
 6432 0f12 03       		.byte	0x3
 6433 0f13 0A       		.byte	0xa
 6434 0f14 0002     		.2byte	0x200
 6435 0f16 23       		.uleb128 0x23
 6436 0f17 01       		.byte	0x1
 6437 0f18 51       		.byte	0x51
 6438 0f19 02       		.byte	0x2
 6439 0f1a 77       		.byte	0x77
 6440 0f1b 00       		.sleb128 0
 6441 0f1c 00       		.byte	0
 6442 0f1d 24       		.uleb128 0x24
 6443 0f1e A0000000 		.4byte	.LVL293
 6444 0f22 870B0000 		.4byte	0xb87
 6445 0f26 370F0000 		.4byte	0xf37
ARM GAS  /tmp/ccKU0f2P.s 			page 178


 6446 0f2a 23       		.uleb128 0x23
 6447 0f2b 01       		.byte	0x1
 6448 0f2c 51       		.byte	0x51
 6449 0f2d 02       		.byte	0x2
 6450 0f2e 75       		.byte	0x75
 6451 0f2f 00       		.sleb128 0
 6452 0f30 23       		.uleb128 0x23
 6453 0f31 01       		.byte	0x1
 6454 0f32 50       		.byte	0x50
 6455 0f33 02       		.byte	0x2
 6456 0f34 79       		.byte	0x79
 6457 0f35 00       		.sleb128 0
 6458 0f36 00       		.byte	0
 6459 0f37 22       		.uleb128 0x22
 6460 0f38 B8000000 		.4byte	.LVL295
 6461 0f3c AD060000 		.4byte	0x6ad
 6462 0f40 23       		.uleb128 0x23
 6463 0f41 01       		.byte	0x1
 6464 0f42 51       		.byte	0x51
 6465 0f43 01       		.byte	0x1
 6466 0f44 30       		.byte	0x30
 6467 0f45 00       		.byte	0
 6468 0f46 00       		.byte	0
 6469 0f47 1E       		.uleb128 0x1e
 6470 0f48 42000000 		.4byte	.LVL281
 6471 0f4c C50B0000 		.4byte	0xbc5
 6472 0f50 22       		.uleb128 0x22
 6473 0f51 DA000000 		.4byte	.LVL299
 6474 0f55 870B0000 		.4byte	0xb87
 6475 0f59 23       		.uleb128 0x23
 6476 0f5a 01       		.byte	0x1
 6477 0f5b 51       		.byte	0x51
 6478 0f5c 02       		.byte	0x2
 6479 0f5d 75       		.byte	0x75
 6480 0f5e 00       		.sleb128 0
 6481 0f5f 00       		.byte	0
 6482 0f60 00       		.byte	0
 6483 0f61 1D       		.uleb128 0x1d
 6484 0f62 27050000 		.4byte	.LASF104
 6485 0f66 01       		.byte	0x1
 6486 0f67 8605     		.2byte	0x586
 6487 0f69 01       		.byte	0x1
 6488 0f6a F3030000 		.4byte	0x3f3
 6489 0f6e 00000000 		.4byte	.LFB14
 6490 0f72 4E000000 		.4byte	.LFE14
 6491 0f76 36140000 		.4byte	.LLST92
 6492 0f7a 01       		.byte	0x1
 6493 0f7b DB0F0000 		.4byte	0xfdb
 6494 0f7f 18       		.uleb128 0x18
 6495 0f80 646A00   		.ascii	"dj\000"
 6496 0f83 01       		.byte	0x1
 6497 0f84 8705     		.2byte	0x587
 6498 0f86 19050000 		.4byte	0x519
 6499 0f8a 56140000 		.4byte	.LLST93
 6500 0f8e 19       		.uleb128 0x19
 6501 0f8f 72657300 		.ascii	"res\000"
 6502 0f93 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 179


 6503 0f94 8A05     		.2byte	0x58a
 6504 0f96 F3030000 		.4byte	0x3f3
 6505 0f9a 74140000 		.4byte	.LLST94
 6506 0f9e 19       		.uleb128 0x19
 6507 0f9f 6300     		.ascii	"c\000"
 6508 0fa1 01       		.byte	0x1
 6509 0fa2 8B05     		.2byte	0x58b
 6510 0fa4 50000000 		.4byte	0x50
 6511 0fa8 B4140000 		.4byte	.LLST95
 6512 0fac 19       		.uleb128 0x19
 6513 0fad 64697200 		.ascii	"dir\000"
 6514 0fb1 01       		.byte	0x1
 6515 0fb2 8B05     		.2byte	0x58b
 6516 0fb4 76020000 		.4byte	0x276
 6517 0fb8 E1140000 		.4byte	.LLST96
 6518 0fbc 1E       		.uleb128 0x1e
 6519 0fbd 10000000 		.4byte	.LVL305
 6520 0fc1 AD060000 		.4byte	0x6ad
 6521 0fc5 22       		.uleb128 0x22
 6522 0fc6 32000000 		.4byte	.LVL310
 6523 0fca 740E0000 		.4byte	0xe74
 6524 0fce 23       		.uleb128 0x23
 6525 0fcf 01       		.byte	0x1
 6526 0fd0 51       		.byte	0x51
 6527 0fd1 01       		.byte	0x1
 6528 0fd2 30       		.byte	0x30
 6529 0fd3 23       		.uleb128 0x23
 6530 0fd4 01       		.byte	0x1
 6531 0fd5 50       		.byte	0x50
 6532 0fd6 02       		.byte	0x2
 6533 0fd7 74       		.byte	0x74
 6534 0fd8 00       		.sleb128 0
 6535 0fd9 00       		.byte	0
 6536 0fda 00       		.byte	0
 6537 0fdb 1D       		.uleb128 0x1d
 6538 0fdc 93010000 		.4byte	.LASF105
 6539 0fe0 01       		.byte	0x1
 6540 0fe1 4905     		.2byte	0x549
 6541 0fe3 01       		.byte	0x1
 6542 0fe4 F3030000 		.4byte	0x3f3
 6543 0fe8 00000000 		.4byte	.LFB13
 6544 0fec 40000000 		.4byte	.LFE13
 6545 0ff0 0B150000 		.4byte	.LLST97
 6546 0ff4 01       		.byte	0x1
 6547 0ff5 72100000 		.4byte	0x1072
 6548 0ff9 18       		.uleb128 0x18
 6549 0ffa 646A00   		.ascii	"dj\000"
 6550 0ffd 01       		.byte	0x1
 6551 0ffe 4A05     		.2byte	0x54a
 6552 1000 19050000 		.4byte	0x519
 6553 1004 2B150000 		.4byte	.LLST98
 6554 1008 19       		.uleb128 0x19
 6555 1009 72657300 		.ascii	"res\000"
 6556 100d 01       		.byte	0x1
 6557 100e 4D05     		.2byte	0x54d
 6558 1010 F3030000 		.4byte	0x3f3
 6559 1014 49150000 		.4byte	.LLST99
ARM GAS  /tmp/ccKU0f2P.s 			page 180


 6560 1018 19       		.uleb128 0x19
 6561 1019 6300     		.ascii	"c\000"
 6562 101b 01       		.byte	0x1
 6563 101c 4E05     		.2byte	0x54e
 6564 101e 50000000 		.4byte	0x50
 6565 1022 67150000 		.4byte	.LLST100
 6566 1026 19       		.uleb128 0x19
 6567 1027 64697200 		.ascii	"dir\000"
 6568 102b 01       		.byte	0x1
 6569 102c 4E05     		.2byte	0x54e
 6570 102e 76020000 		.4byte	0x276
 6571 1032 87150000 		.4byte	.LLST101
 6572 1036 24       		.uleb128 0x24
 6573 1037 08000000 		.4byte	.LVL319
 6574 103b 7C0C0000 		.4byte	0xc7c
 6575 103f 4A100000 		.4byte	0x104a
 6576 1043 23       		.uleb128 0x23
 6577 1044 01       		.byte	0x1
 6578 1045 50       		.byte	0x50
 6579 1046 02       		.byte	0x2
 6580 1047 75       		.byte	0x75
 6581 1048 00       		.sleb128 0
 6582 1049 00       		.byte	0
 6583 104a 1E       		.uleb128 0x1e
 6584 104b 14000000 		.4byte	.LVL321
 6585 104f AD060000 		.4byte	0x6ad
 6586 1053 1E       		.uleb128 0x1e
 6587 1054 2E000000 		.4byte	.LVL323
 6588 1058 480B0000 		.4byte	0xb48
 6589 105c 22       		.uleb128 0x22
 6590 105d 38000000 		.4byte	.LVL324
 6591 1061 740E0000 		.4byte	0xe74
 6592 1065 23       		.uleb128 0x23
 6593 1066 01       		.byte	0x1
 6594 1067 51       		.byte	0x51
 6595 1068 01       		.byte	0x1
 6596 1069 30       		.byte	0x30
 6597 106a 23       		.uleb128 0x23
 6598 106b 01       		.byte	0x1
 6599 106c 50       		.byte	0x50
 6600 106d 02       		.byte	0x2
 6601 106e 75       		.byte	0x75
 6602 106f 00       		.sleb128 0
 6603 1070 00       		.byte	0
 6604 1071 00       		.byte	0
 6605 1072 1D       		.uleb128 0x1d
 6606 1073 DB030000 		.4byte	.LASF106
 6607 1077 01       		.byte	0x1
 6608 1078 7F07     		.2byte	0x77f
 6609 107a 01       		.byte	0x1
 6610 107b F3030000 		.4byte	0x3f3
 6611 107f 00000000 		.4byte	.LFB18
 6612 1083 86000000 		.4byte	.LFE18
 6613 1087 A5150000 		.4byte	.LLST102
 6614 108b 01       		.byte	0x1
 6615 108c 1D110000 		.4byte	0x111d
 6616 1090 18       		.uleb128 0x18
ARM GAS  /tmp/ccKU0f2P.s 			page 181


 6617 1091 646A00   		.ascii	"dj\000"
 6618 1094 01       		.byte	0x1
 6619 1095 8007     		.2byte	0x780
 6620 1097 19050000 		.4byte	0x519
 6621 109b C5150000 		.4byte	.LLST103
 6622 109f 1F       		.uleb128 0x1f
 6623 10a0 6D000000 		.4byte	.LASF85
 6624 10a4 01       		.byte	0x1
 6625 10a5 8107     		.2byte	0x781
 6626 10a7 68090000 		.4byte	0x968
 6627 10ab E3150000 		.4byte	.LLST104
 6628 10af 19       		.uleb128 0x19
 6629 10b0 72657300 		.ascii	"res\000"
 6630 10b4 01       		.byte	0x1
 6631 10b5 8407     		.2byte	0x784
 6632 10b7 F3030000 		.4byte	0x3f3
 6633 10bb 0D160000 		.4byte	.LLST105
 6634 10bf 19       		.uleb128 0x19
 6635 10c0 64697200 		.ascii	"dir\000"
 6636 10c4 01       		.byte	0x1
 6637 10c5 8507     		.2byte	0x785
 6638 10c7 76020000 		.4byte	0x276
 6639 10cb 41160000 		.4byte	.LLST106
 6640 10cf 19       		.uleb128 0x19
 6641 10d0 6E7300   		.ascii	"ns\000"
 6642 10d3 01       		.byte	0x1
 6643 10d4 8507     		.2byte	0x785
 6644 10d6 50000000 		.4byte	0x50
 6645 10da 6B160000 		.4byte	.LLST107
 6646 10de 24       		.uleb128 0x24
 6647 10df 26000000 		.4byte	.LVL331
 6648 10e3 7C0C0000 		.4byte	0xc7c
 6649 10e7 F2100000 		.4byte	0x10f2
 6650 10eb 23       		.uleb128 0x23
 6651 10ec 01       		.byte	0x1
 6652 10ed 50       		.byte	0x50
 6653 10ee 02       		.byte	0x2
 6654 10ef 74       		.byte	0x74
 6655 10f0 00       		.sleb128 0
 6656 10f1 00       		.byte	0
 6657 10f2 24       		.uleb128 0x24
 6658 10f3 30000000 		.4byte	.LVL333
 6659 10f7 DB0F0000 		.4byte	0xfdb
 6660 10fb 06110000 		.4byte	0x1106
 6661 10ff 23       		.uleb128 0x23
 6662 1100 01       		.byte	0x1
 6663 1101 50       		.byte	0x50
 6664 1102 02       		.byte	0x2
 6665 1103 74       		.byte	0x74
 6666 1104 00       		.sleb128 0
 6667 1105 00       		.byte	0
 6668 1106 22       		.uleb128 0x22
 6669 1107 68000000 		.4byte	.LVL339
 6670 110b 460A0000 		.4byte	0xa46
 6671 110f 23       		.uleb128 0x23
 6672 1110 01       		.byte	0x1
 6673 1111 51       		.byte	0x51
ARM GAS  /tmp/ccKU0f2P.s 			page 182


 6674 1112 02       		.byte	0x2
 6675 1113 91       		.byte	0x91
 6676 1114 6C       		.sleb128 -20
 6677 1115 23       		.uleb128 0x23
 6678 1116 01       		.byte	0x1
 6679 1117 50       		.byte	0x50
 6680 1118 02       		.byte	0x2
 6681 1119 74       		.byte	0x74
 6682 111a 00       		.sleb128 0
 6683 111b 00       		.byte	0
 6684 111c 00       		.byte	0
 6685 111d 1D       		.uleb128 0x1d
 6686 111e 14040000 		.4byte	.LASF107
 6687 1122 01       		.byte	0x1
 6688 1123 BF05     		.2byte	0x5bf
 6689 1125 01       		.byte	0x1
 6690 1126 F3030000 		.4byte	0x3f3
 6691 112a 00000000 		.4byte	.LFB15
 6692 112e 58000000 		.4byte	.LFE15
 6693 1132 A9160000 		.4byte	.LLST108
 6694 1136 01       		.byte	0x1
 6695 1137 ED110000 		.4byte	0x11ed
 6696 113b 18       		.uleb128 0x18
 6697 113c 646A00   		.ascii	"dj\000"
 6698 113f 01       		.byte	0x1
 6699 1140 C005     		.2byte	0x5c0
 6700 1142 19050000 		.4byte	0x519
 6701 1146 C9160000 		.4byte	.LLST109
 6702 114a 19       		.uleb128 0x19
 6703 114b 72657300 		.ascii	"res\000"
 6704 114f 01       		.byte	0x1
 6705 1150 C305     		.2byte	0x5c3
 6706 1152 F3030000 		.4byte	0x3f3
 6707 1156 E7160000 		.4byte	.LLST110
 6708 115a 19       		.uleb128 0x19
 6709 115b 6300     		.ascii	"c\000"
 6710 115d 01       		.byte	0x1
 6711 115e C405     		.2byte	0x5c4
 6712 1160 50000000 		.4byte	0x50
 6713 1164 1C170000 		.4byte	.LLST111
 6714 1168 19       		.uleb128 0x19
 6715 1169 64697200 		.ascii	"dir\000"
 6716 116d 01       		.byte	0x1
 6717 116e C405     		.2byte	0x5c4
 6718 1170 76020000 		.4byte	0x276
 6719 1174 3C170000 		.4byte	.LLST112
 6720 1178 24       		.uleb128 0x24
 6721 1179 08000000 		.4byte	.LVL345
 6722 117d 7C0C0000 		.4byte	0xc7c
 6723 1181 8C110000 		.4byte	0x118c
 6724 1185 23       		.uleb128 0x23
 6725 1186 01       		.byte	0x1
 6726 1187 50       		.byte	0x50
 6727 1188 02       		.byte	0x2
 6728 1189 74       		.byte	0x74
 6729 118a 00       		.sleb128 0
 6730 118b 00       		.byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 183


 6731 118c 1E       		.uleb128 0x1e
 6732 118d 14000000 		.4byte	.LVL347
 6733 1191 AD060000 		.4byte	0x6ad
 6734 1195 24       		.uleb128 0x24
 6735 1196 2A000000 		.4byte	.LVL349
 6736 119a 740E0000 		.4byte	0xe74
 6737 119e AE110000 		.4byte	0x11ae
 6738 11a2 23       		.uleb128 0x23
 6739 11a3 01       		.byte	0x1
 6740 11a4 51       		.byte	0x51
 6741 11a5 01       		.byte	0x1
 6742 11a6 31       		.byte	0x31
 6743 11a7 23       		.uleb128 0x23
 6744 11a8 01       		.byte	0x1
 6745 11a9 50       		.byte	0x50
 6746 11aa 02       		.byte	0x2
 6747 11ab 74       		.byte	0x74
 6748 11ac 00       		.sleb128 0
 6749 11ad 00       		.byte	0
 6750 11ae 1E       		.uleb128 0x1e
 6751 11af 34000000 		.4byte	.LVL351
 6752 11b3 AD060000 		.4byte	0x6ad
 6753 11b7 24       		.uleb128 0x24
 6754 11b8 44000000 		.4byte	.LVL354
 6755 11bc 84050000 		.4byte	0x584
 6756 11c0 D7110000 		.4byte	0x11d7
 6757 11c4 23       		.uleb128 0x23
 6758 11c5 01       		.byte	0x1
 6759 11c6 52       		.byte	0x52
 6760 11c7 02       		.byte	0x2
 6761 11c8 08       		.byte	0x8
 6762 11c9 20       		.byte	0x20
 6763 11ca 23       		.uleb128 0x23
 6764 11cb 01       		.byte	0x1
 6765 11cc 51       		.byte	0x51
 6766 11cd 02       		.byte	0x2
 6767 11ce 75       		.byte	0x75
 6768 11cf 00       		.sleb128 0
 6769 11d0 23       		.uleb128 0x23
 6770 11d1 01       		.byte	0x1
 6771 11d2 50       		.byte	0x50
 6772 11d3 02       		.byte	0x2
 6773 11d4 76       		.byte	0x76
 6774 11d5 00       		.sleb128 0
 6775 11d6 00       		.byte	0
 6776 11d7 22       		.uleb128 0x22
 6777 11d8 4E000000 		.4byte	.LVL355
 6778 11dc 1F050000 		.4byte	0x51f
 6779 11e0 23       		.uleb128 0x23
 6780 11e1 01       		.byte	0x1
 6781 11e2 52       		.byte	0x52
 6782 11e3 01       		.byte	0x1
 6783 11e4 3B       		.byte	0x3b
 6784 11e5 23       		.uleb128 0x23
 6785 11e6 01       		.byte	0x1
 6786 11e7 50       		.byte	0x50
 6787 11e8 02       		.byte	0x2
ARM GAS  /tmp/ccKU0f2P.s 			page 184


 6788 11e9 76       		.byte	0x76
 6789 11ea 00       		.sleb128 0
 6790 11eb 00       		.byte	0
 6791 11ec 00       		.byte	0
 6792 11ed 1D       		.uleb128 0x1d
 6793 11ee 6E040000 		.4byte	.LASF108
 6794 11f2 01       		.byte	0x1
 6795 11f3 9D03     		.2byte	0x39d
 6796 11f5 01       		.byte	0x1
 6797 11f6 F3030000 		.4byte	0x3f3
 6798 11fa 00000000 		.4byte	.LFB9
 6799 11fe 54000000 		.4byte	.LFE9
 6800 1202 4F170000 		.4byte	.LLST113
 6801 1206 01       		.byte	0x1
 6802 1207 80120000 		.4byte	0x1280
 6803 120b 18       		.uleb128 0x18
 6804 120c 667300   		.ascii	"fs\000"
 6805 120f 01       		.byte	0x1
 6806 1210 9E03     		.2byte	0x39e
 6807 1212 70020000 		.4byte	0x270
 6808 1216 6F170000 		.4byte	.LLST114
 6809 121a 1F       		.uleb128 0x1f
 6810 121b 33020000 		.4byte	.LASF75
 6811 121f 01       		.byte	0x1
 6812 1220 9F03     		.2byte	0x39f
 6813 1222 82000000 		.4byte	0x82
 6814 1226 A3170000 		.4byte	.LLST115
 6815 122a 19       		.uleb128 0x19
 6816 122b 72657300 		.ascii	"res\000"
 6817 122f 01       		.byte	0x1
 6818 1230 A203     		.2byte	0x3a2
 6819 1232 F3030000 		.4byte	0x3f3
 6820 1236 E2170000 		.4byte	.LLST116
 6821 123a 19       		.uleb128 0x19
 6822 123b 6E787400 		.ascii	"nxt\000"
 6823 123f 01       		.byte	0x1
 6824 1240 A303     		.2byte	0x3a3
 6825 1242 82000000 		.4byte	0x82
 6826 1246 18180000 		.4byte	.LLST117
 6827 124a 24       		.uleb128 0x24
 6828 124b 22000000 		.4byte	.LVL361
 6829 124f C50B0000 		.4byte	0xbc5
 6830 1253 64120000 		.4byte	0x1264
 6831 1257 23       		.uleb128 0x23
 6832 1258 01       		.byte	0x1
 6833 1259 51       		.byte	0x51
 6834 125a 02       		.byte	0x2
 6835 125b 75       		.byte	0x75
 6836 125c 00       		.sleb128 0
 6837 125d 23       		.uleb128 0x23
 6838 125e 01       		.byte	0x1
 6839 125f 50       		.byte	0x50
 6840 1260 02       		.byte	0x2
 6841 1261 74       		.byte	0x74
 6842 1262 00       		.sleb128 0
 6843 1263 00       		.byte	0
 6844 1264 22       		.uleb128 0x22
ARM GAS  /tmp/ccKU0f2P.s 			page 185


 6845 1265 3C000000 		.4byte	.LVL365
 6846 1269 CD0C0000 		.4byte	0xccd
 6847 126d 23       		.uleb128 0x23
 6848 126e 01       		.byte	0x1
 6849 126f 52       		.byte	0x52
 6850 1270 01       		.byte	0x1
 6851 1271 30       		.byte	0x30
 6852 1272 23       		.uleb128 0x23
 6853 1273 01       		.byte	0x1
 6854 1274 51       		.byte	0x51
 6855 1275 02       		.byte	0x2
 6856 1276 75       		.byte	0x75
 6857 1277 00       		.sleb128 0
 6858 1278 23       		.uleb128 0x23
 6859 1279 01       		.byte	0x1
 6860 127a 50       		.byte	0x50
 6861 127b 02       		.byte	0x2
 6862 127c 74       		.byte	0x74
 6863 127d 00       		.sleb128 0
 6864 127e 00       		.byte	0
 6865 127f 00       		.byte	0
 6866 1280 2D       		.uleb128 0x2d
 6867 1281 01       		.byte	0x1
 6868 1282 95030000 		.4byte	.LASF109
 6869 1286 01       		.byte	0x1
 6870 1287 9B08     		.2byte	0x89b
 6871 1289 01       		.byte	0x1
 6872 128a F3030000 		.4byte	0x3f3
 6873 128e 00000000 		.4byte	.LFB22
 6874 1292 20000000 		.4byte	.LFE22
 6875 1296 02       		.byte	0x2
 6876 1297 7D       		.byte	0x7d
 6877 1298 00       		.sleb128 0
 6878 1299 01       		.byte	0x1
 6879 129a CC120000 		.4byte	0x12cc
 6880 129e 18       		.uleb128 0x18
 6881 129f 766F6C00 		.ascii	"vol\000"
 6882 12a3 01       		.byte	0x1
 6883 12a4 9C08     		.2byte	0x89c
 6884 12a6 50000000 		.4byte	0x50
 6885 12aa 57180000 		.4byte	.LLST118
 6886 12ae 17       		.uleb128 0x17
 6887 12af 667300   		.ascii	"fs\000"
 6888 12b2 01       		.byte	0x1
 6889 12b3 9D08     		.2byte	0x89d
 6890 12b5 70020000 		.4byte	0x270
 6891 12b9 01       		.byte	0x1
 6892 12ba 51       		.byte	0x51
 6893 12bb 19       		.uleb128 0x19
 6894 12bc 72667300 		.ascii	"rfs\000"
 6895 12c0 01       		.byte	0x1
 6896 12c1 A008     		.2byte	0x8a0
 6897 12c3 70020000 		.4byte	0x270
 6898 12c7 91180000 		.4byte	.LLST119
 6899 12cb 00       		.byte	0
 6900 12cc 2E       		.uleb128 0x2e
 6901 12cd 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 186


 6902 12ce 30050000 		.4byte	.LASF110
 6903 12d2 01       		.byte	0x1
 6904 12d3 C308     		.2byte	0x8c3
 6905 12d5 01       		.byte	0x1
 6906 12d6 F3030000 		.4byte	0x3f3
 6907 12da 00000000 		.4byte	.LFB23
 6908 12de 52010000 		.4byte	.LFE23
 6909 12e2 A4180000 		.4byte	.LLST120
 6910 12e6 01       		.byte	0x1
 6911 12e7 F4130000 		.4byte	0x13f4
 6912 12eb 18       		.uleb128 0x18
 6913 12ec 667000   		.ascii	"fp\000"
 6914 12ef 01       		.byte	0x1
 6915 12f0 C408     		.2byte	0x8c4
 6916 12f2 F4130000 		.4byte	0x13f4
 6917 12f6 D1180000 		.4byte	.LLST121
 6918 12fa 1F       		.uleb128 0x1f
 6919 12fb 6D000000 		.4byte	.LASF85
 6920 12ff 01       		.byte	0x1
 6921 1300 C508     		.2byte	0x8c5
 6922 1302 68090000 		.4byte	0x968
 6923 1306 EF180000 		.4byte	.LLST122
 6924 130a 1F       		.uleb128 0x1f
 6925 130b C7010000 		.4byte	.LASF111
 6926 130f 01       		.byte	0x1
 6927 1310 C608     		.2byte	0x8c6
 6928 1312 50000000 		.4byte	0x50
 6929 1316 1B190000 		.4byte	.LLST123
 6930 131a 19       		.uleb128 0x19
 6931 131b 72657300 		.ascii	"res\000"
 6932 131f 01       		.byte	0x1
 6933 1320 C908     		.2byte	0x8c9
 6934 1322 F3030000 		.4byte	0x3f3
 6935 1326 5A190000 		.4byte	.LLST124
 6936 132a 1C       		.uleb128 0x1c
 6937 132b 646A00   		.ascii	"dj\000"
 6938 132e 01       		.byte	0x1
 6939 132f CA08     		.2byte	0x8ca
 6940 1331 FD020000 		.4byte	0x2fd
 6941 1335 02       		.byte	0x2
 6942 1336 91       		.byte	0x91
 6943 1337 4C       		.sleb128 -52
 6944 1338 19       		.uleb128 0x19
 6945 1339 64697200 		.ascii	"dir\000"
 6946 133d 01       		.byte	0x1
 6947 133e CB08     		.2byte	0x8cb
 6948 1340 76020000 		.4byte	0x276
 6949 1344 A5190000 		.4byte	.LLST125
 6950 1348 1C       		.uleb128 0x1c
 6951 1349 73666E00 		.ascii	"sfn\000"
 6952 134d 01       		.byte	0x1
 6953 134e CC08     		.2byte	0x8cc
 6954 1350 FA130000 		.4byte	0x13fa
 6955 1354 02       		.byte	0x2
 6956 1355 91       		.byte	0x91
 6957 1356 40       		.sleb128 -64
 6958 1357 30       		.uleb128 0x30
ARM GAS  /tmp/ccKU0f2P.s 			page 187


 6959 1358 20000000 		.4byte	.Ldebug_ranges0+0x20
 6960 135c C0130000 		.4byte	0x13c0
 6961 1360 19       		.uleb128 0x19
 6962 1361 647700   		.ascii	"dw\000"
 6963 1364 01       		.byte	0x1
 6964 1365 E808     		.2byte	0x8e8
 6965 1367 82000000 		.4byte	0x82
 6966 136b C3190000 		.4byte	.LLST126
 6967 136f 19       		.uleb128 0x19
 6968 1370 636C00   		.ascii	"cl\000"
 6969 1373 01       		.byte	0x1
 6970 1374 E808     		.2byte	0x8e8
 6971 1376 82000000 		.4byte	0x82
 6972 137a E1190000 		.4byte	.LLST127
 6973 137e 24       		.uleb128 0x24
 6974 137f 4E000000 		.4byte	.LVL385
 6975 1383 1D110000 		.4byte	0x111d
 6976 1387 92130000 		.4byte	0x1392
 6977 138b 23       		.uleb128 0x23
 6978 138c 01       		.byte	0x1
 6979 138d 50       		.byte	0x50
 6980 138e 02       		.byte	0x2
 6981 138f 91       		.byte	0x91
 6982 1390 4C       		.sleb128 -52
 6983 1391 00       		.byte	0
 6984 1392 1E       		.uleb128 0x1e
 6985 1393 78000000 		.4byte	.LVL390
 6986 1397 471B0000 		.4byte	0x1b47
 6987 139b 24       		.uleb128 0x24
 6988 139c C2000000 		.4byte	.LVL395
 6989 13a0 ED110000 		.4byte	0x11ed
 6990 13a4 AF130000 		.4byte	0x13af
 6991 13a8 23       		.uleb128 0x23
 6992 13a9 01       		.byte	0x1
 6993 13aa 51       		.byte	0x51
 6994 13ab 02       		.byte	0x2
 6995 13ac 77       		.byte	0x77
 6996 13ad 00       		.sleb128 0
 6997 13ae 00       		.byte	0
 6998 13af 22       		.uleb128 0x22
 6999 13b0 D2000000 		.4byte	.LVL398
 7000 13b4 AD060000 		.4byte	0x6ad
 7001 13b8 23       		.uleb128 0x23
 7002 13b9 01       		.byte	0x1
 7003 13ba 51       		.byte	0x51
 7004 13bb 02       		.byte	0x2
 7005 13bc 78       		.byte	0x78
 7006 13bd 00       		.sleb128 0
 7007 13be 00       		.byte	0
 7008 13bf 00       		.byte	0
 7009 13c0 24       		.uleb128 0x24
 7010 13c1 22000000 		.4byte	.LVL379
 7011 13c5 C5070000 		.4byte	0x7c5
 7012 13c9 E3130000 		.4byte	0x13e3
 7013 13cd 23       		.uleb128 0x23
 7014 13ce 01       		.byte	0x1
 7015 13cf 52       		.byte	0x52
ARM GAS  /tmp/ccKU0f2P.s 			page 188


 7016 13d0 04       		.byte	0x4
 7017 13d1 77       		.byte	0x77
 7018 13d2 00       		.sleb128 0
 7019 13d3 4E       		.byte	0x4e
 7020 13d4 1A       		.byte	0x1a
 7021 13d5 23       		.uleb128 0x23
 7022 13d6 01       		.byte	0x1
 7023 13d7 51       		.byte	0x51
 7024 13d8 02       		.byte	0x2
 7025 13d9 91       		.byte	0x91
 7026 13da 4C       		.sleb128 -52
 7027 13db 23       		.uleb128 0x23
 7028 13dc 01       		.byte	0x1
 7029 13dd 50       		.byte	0x50
 7030 13de 03       		.byte	0x3
 7031 13df 91       		.byte	0x91
 7032 13e0 BC7F     		.sleb128 -68
 7033 13e2 00       		.byte	0
 7034 13e3 22       		.uleb128 0x22
 7035 13e4 30000000 		.4byte	.LVL381
 7036 13e8 72100000 		.4byte	0x1072
 7037 13ec 23       		.uleb128 0x23
 7038 13ed 01       		.byte	0x1
 7039 13ee 50       		.byte	0x50
 7040 13ef 02       		.byte	0x2
 7041 13f0 91       		.byte	0x91
 7042 13f1 4C       		.sleb128 -52
 7043 13f2 00       		.byte	0
 7044 13f3 00       		.byte	0
 7045 13f4 0A       		.uleb128 0xa
 7046 13f5 04       		.byte	0x4
 7047 13f6 7C020000 		.4byte	0x27c
 7048 13fa 08       		.uleb128 0x8
 7049 13fb 50000000 		.4byte	0x50
 7050 13ff 0A140000 		.4byte	0x140a
 7051 1403 0D       		.uleb128 0xd
 7052 1404 AE010000 		.4byte	0x1ae
 7053 1408 0B       		.byte	0xb
 7054 1409 00       		.byte	0
 7055 140a 2E       		.uleb128 0x2e
 7056 140b 01       		.byte	0x1
 7057 140c 51000000 		.4byte	.LASF112
 7058 1410 01       		.byte	0x1
 7059 1411 4509     		.2byte	0x945
 7060 1413 01       		.byte	0x1
 7061 1414 F3030000 		.4byte	0x3f3
 7062 1418 00000000 		.4byte	.LFB24
 7063 141c 68010000 		.4byte	.LFE24
 7064 1420 131A0000 		.4byte	.LLST128
 7065 1424 01       		.byte	0x1
 7066 1425 A1150000 		.4byte	0x15a1
 7067 1429 18       		.uleb128 0x18
 7068 142a 667000   		.ascii	"fp\000"
 7069 142d 01       		.byte	0x1
 7070 142e 4609     		.2byte	0x946
 7071 1430 F4130000 		.4byte	0x13f4
 7072 1434 331A0000 		.4byte	.LLST129
ARM GAS  /tmp/ccKU0f2P.s 			page 189


 7073 1438 1F       		.uleb128 0x1f
 7074 1439 B2000000 		.4byte	.LASF113
 7075 143d 01       		.byte	0x1
 7076 143e 4709     		.2byte	0x947
 7077 1440 82050000 		.4byte	0x582
 7078 1444 511A0000 		.4byte	.LLST130
 7079 1448 18       		.uleb128 0x18
 7080 1449 62747200 		.ascii	"btr\000"
 7081 144d 01       		.byte	0x1
 7082 144e 4809     		.2byte	0x948
 7083 1450 30000000 		.4byte	0x30
 7084 1454 961A0000 		.4byte	.LLST131
 7085 1458 18       		.uleb128 0x18
 7086 1459 627200   		.ascii	"br\000"
 7087 145c 01       		.byte	0x1
 7088 145d 4909     		.2byte	0x949
 7089 145f A1150000 		.4byte	0x15a1
 7090 1463 CA1A0000 		.4byte	.LLST132
 7091 1467 19       		.uleb128 0x19
 7092 1468 72657300 		.ascii	"res\000"
 7093 146c 01       		.byte	0x1
 7094 146d 4C09     		.2byte	0x94c
 7095 146f F3030000 		.4byte	0x3f3
 7096 1473 E81A0000 		.4byte	.LLST133
 7097 1477 25       		.uleb128 0x25
 7098 1478 33020000 		.4byte	.LASF75
 7099 147c 01       		.byte	0x1
 7100 147d 4D09     		.2byte	0x94d
 7101 147f 82000000 		.4byte	0x82
 7102 1483 FB1A0000 		.4byte	.LLST134
 7103 1487 25       		.uleb128 0x25
 7104 1488 78000000 		.4byte	.LASF38
 7105 148c 01       		.byte	0x1
 7106 148d 4D09     		.2byte	0x94d
 7107 148f 82000000 		.4byte	0x82
 7108 1493 191B0000 		.4byte	.LLST135
 7109 1497 25       		.uleb128 0x25
 7110 1498 D1040000 		.4byte	.LASF114
 7111 149c 01       		.byte	0x1
 7112 149d 4D09     		.2byte	0x94d
 7113 149f 82000000 		.4byte	0x82
 7114 14a3 581B0000 		.4byte	.LLST136
 7115 14a7 25       		.uleb128 0x25
 7116 14a8 FB040000 		.4byte	.LASF115
 7117 14ac 01       		.byte	0x1
 7118 14ad 4E09     		.2byte	0x94e
 7119 14af 30000000 		.4byte	0x30
 7120 14b3 7D1B0000 		.4byte	.LLST137
 7121 14b7 19       		.uleb128 0x19
 7122 14b8 636300   		.ascii	"cc\000"
 7123 14bb 01       		.byte	0x1
 7124 14bc 4E09     		.2byte	0x94e
 7125 14be 30000000 		.4byte	0x30
 7126 14c2 9B1B0000 		.4byte	.LLST138
 7127 14c6 25       		.uleb128 0x25
 7128 14c7 3E000000 		.4byte	.LASF116
 7129 14cb 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 190


 7130 14cc 4F09     		.2byte	0x94f
 7131 14ce 50000000 		.4byte	0x50
 7132 14d2 B91B0000 		.4byte	.LLST139
 7133 14d6 25       		.uleb128 0x25
 7134 14d7 72000000 		.4byte	.LASF117
 7135 14db 01       		.byte	0x1
 7136 14dc 4F09     		.2byte	0x94f
 7137 14de 76020000 		.4byte	0x276
 7138 14e2 CC1B0000 		.4byte	.LLST140
 7139 14e6 1E       		.uleb128 0x1e
 7140 14e7 1A000000 		.4byte	.LVL411
 7141 14eb 67060000 		.4byte	0x667
 7142 14ef 1E       		.uleb128 0x1e
 7143 14f0 66000000 		.4byte	.LVL419
 7144 14f4 C50B0000 		.4byte	0xbc5
 7145 14f8 24       		.uleb128 0x24
 7146 14f9 80000000 		.4byte	.LVL421
 7147 14fd 870B0000 		.4byte	0xb87
 7148 1501 0C150000 		.4byte	0x150c
 7149 1505 23       		.uleb128 0x23
 7150 1506 01       		.byte	0x1
 7151 1507 50       		.byte	0x50
 7152 1508 02       		.byte	0x2
 7153 1509 7B       		.byte	0x7b
 7154 150a 00       		.sleb128 0
 7155 150b 00       		.byte	0
 7156 150c 24       		.uleb128 0x24
 7157 150d B8000000 		.4byte	.LVL426
 7158 1511 E61A0000 		.4byte	0x1ae6
 7159 1515 2C150000 		.4byte	0x152c
 7160 1519 23       		.uleb128 0x23
 7161 151a 01       		.byte	0x1
 7162 151b 53       		.byte	0x53
 7163 151c 02       		.byte	0x2
 7164 151d 79       		.byte	0x79
 7165 151e 00       		.sleb128 0
 7166 151f 23       		.uleb128 0x23
 7167 1520 01       		.byte	0x1
 7168 1521 52       		.byte	0x52
 7169 1522 02       		.byte	0x2
 7170 1523 77       		.byte	0x77
 7171 1524 00       		.sleb128 0
 7172 1525 23       		.uleb128 0x23
 7173 1526 01       		.byte	0x1
 7174 1527 51       		.byte	0x51
 7175 1528 02       		.byte	0x2
 7176 1529 78       		.byte	0x78
 7177 152a 00       		.sleb128 0
 7178 152b 00       		.byte	0
 7179 152c 24       		.uleb128 0x24
 7180 152d DC000000 		.4byte	.LVL428
 7181 1531 1F050000 		.4byte	0x51f
 7182 1535 52150000 		.4byte	0x1552
 7183 1539 23       		.uleb128 0x23
 7184 153a 01       		.byte	0x1
 7185 153b 52       		.byte	0x52
 7186 153c 03       		.byte	0x3
ARM GAS  /tmp/ccKU0f2P.s 			page 191


 7187 153d 0A       		.byte	0xa
 7188 153e 0002     		.2byte	0x200
 7189 1540 23       		.uleb128 0x23
 7190 1541 01       		.byte	0x1
 7191 1542 51       		.byte	0x51
 7192 1543 02       		.byte	0x2
 7193 1544 74       		.byte	0x74
 7194 1545 24       		.sleb128 36
 7195 1546 23       		.uleb128 0x23
 7196 1547 01       		.byte	0x1
 7197 1548 50       		.byte	0x50
 7198 1549 07       		.byte	0x7
 7199 154a 77       		.byte	0x77
 7200 154b 00       		.sleb128 0
 7201 154c 39       		.byte	0x39
 7202 154d 24       		.byte	0x24
 7203 154e 78       		.byte	0x78
 7204 154f 00       		.sleb128 0
 7205 1550 22       		.byte	0x22
 7206 1551 00       		.byte	0
 7207 1552 24       		.uleb128 0x24
 7208 1553 00010000 		.4byte	.LVL431
 7209 1557 BF1A0000 		.4byte	0x1abf
 7210 155b 6B150000 		.4byte	0x156b
 7211 155f 23       		.uleb128 0x23
 7212 1560 01       		.byte	0x1
 7213 1561 53       		.byte	0x53
 7214 1562 01       		.byte	0x1
 7215 1563 31       		.byte	0x31
 7216 1564 23       		.uleb128 0x23
 7217 1565 01       		.byte	0x1
 7218 1566 51       		.byte	0x51
 7219 1567 02       		.byte	0x2
 7220 1568 74       		.byte	0x74
 7221 1569 24       		.sleb128 36
 7222 156a 00       		.byte	0
 7223 156b 24       		.uleb128 0x24
 7224 156c 1A010000 		.4byte	.LVL432
 7225 1570 E61A0000 		.4byte	0x1ae6
 7226 1574 8A150000 		.4byte	0x158a
 7227 1578 23       		.uleb128 0x23
 7228 1579 01       		.byte	0x1
 7229 157a 53       		.byte	0x53
 7230 157b 01       		.byte	0x1
 7231 157c 31       		.byte	0x31
 7232 157d 23       		.uleb128 0x23
 7233 157e 01       		.byte	0x1
 7234 157f 52       		.byte	0x52
 7235 1580 02       		.byte	0x2
 7236 1581 77       		.byte	0x77
 7237 1582 00       		.sleb128 0
 7238 1583 23       		.uleb128 0x23
 7239 1584 01       		.byte	0x1
 7240 1585 51       		.byte	0x51
 7241 1586 02       		.byte	0x2
 7242 1587 74       		.byte	0x74
 7243 1588 24       		.sleb128 36
ARM GAS  /tmp/ccKU0f2P.s 			page 192


 7244 1589 00       		.byte	0
 7245 158a 22       		.uleb128 0x22
 7246 158b 46010000 		.4byte	.LVL438
 7247 158f 1F050000 		.4byte	0x51f
 7248 1593 23       		.uleb128 0x23
 7249 1594 01       		.byte	0x1
 7250 1595 52       		.byte	0x52
 7251 1596 02       		.byte	0x2
 7252 1597 77       		.byte	0x77
 7253 1598 00       		.sleb128 0
 7254 1599 23       		.uleb128 0x23
 7255 159a 01       		.byte	0x1
 7256 159b 50       		.byte	0x50
 7257 159c 02       		.byte	0x2
 7258 159d 78       		.byte	0x78
 7259 159e 00       		.sleb128 0
 7260 159f 00       		.byte	0
 7261 15a0 00       		.byte	0
 7262 15a1 0A       		.uleb128 0xa
 7263 15a2 04       		.byte	0x4
 7264 15a3 30000000 		.4byte	0x30
 7265 15a7 2E       		.uleb128 0x2e
 7266 15a8 01       		.byte	0x1
 7267 15a9 8B010000 		.4byte	.LASF118
 7268 15ad 01       		.byte	0x1
 7269 15ae AA09     		.2byte	0x9aa
 7270 15b0 01       		.byte	0x1
 7271 15b1 F3030000 		.4byte	0x3f3
 7272 15b5 00000000 		.4byte	.LFB25
 7273 15b9 96010000 		.4byte	.LFE25
 7274 15bd EA1B0000 		.4byte	.LLST141
 7275 15c1 01       		.byte	0x1
 7276 15c2 2C170000 		.4byte	0x172c
 7277 15c6 18       		.uleb128 0x18
 7278 15c7 667000   		.ascii	"fp\000"
 7279 15ca 01       		.byte	0x1
 7280 15cb AB09     		.2byte	0x9ab
 7281 15cd F4130000 		.4byte	0x13f4
 7282 15d1 0A1C0000 		.4byte	.LLST142
 7283 15d5 1F       		.uleb128 0x1f
 7284 15d6 B2000000 		.4byte	.LASF113
 7285 15da 01       		.byte	0x1
 7286 15db AC09     		.2byte	0x9ac
 7287 15dd 90040000 		.4byte	0x490
 7288 15e1 281C0000 		.4byte	.LLST143
 7289 15e5 18       		.uleb128 0x18
 7290 15e6 62747700 		.ascii	"btw\000"
 7291 15ea 01       		.byte	0x1
 7292 15eb AD09     		.2byte	0x9ad
 7293 15ed 30000000 		.4byte	0x30
 7294 15f1 6D1C0000 		.4byte	.LLST144
 7295 15f5 18       		.uleb128 0x18
 7296 15f6 627700   		.ascii	"bw\000"
 7297 15f9 01       		.byte	0x1
 7298 15fa AE09     		.2byte	0x9ae
 7299 15fc A1150000 		.4byte	0x15a1
 7300 1600 A41C0000 		.4byte	.LLST145
ARM GAS  /tmp/ccKU0f2P.s 			page 193


 7301 1604 19       		.uleb128 0x19
 7302 1605 72657300 		.ascii	"res\000"
 7303 1609 01       		.byte	0x1
 7304 160a B109     		.2byte	0x9b1
 7305 160c F3030000 		.4byte	0x3f3
 7306 1610 C21C0000 		.4byte	.LLST146
 7307 1614 25       		.uleb128 0x25
 7308 1615 33020000 		.4byte	.LASF75
 7309 1619 01       		.byte	0x1
 7310 161a B209     		.2byte	0x9b2
 7311 161c 82000000 		.4byte	0x82
 7312 1620 D51C0000 		.4byte	.LLST147
 7313 1624 25       		.uleb128 0x25
 7314 1625 78000000 		.4byte	.LASF38
 7315 1629 01       		.byte	0x1
 7316 162a B209     		.2byte	0x9b2
 7317 162c 82000000 		.4byte	0x82
 7318 1630 141D0000 		.4byte	.LLST148
 7319 1634 25       		.uleb128 0x25
 7320 1635 BB020000 		.4byte	.LASF119
 7321 1639 01       		.byte	0x1
 7322 163a B309     		.2byte	0x9b3
 7323 163c 30000000 		.4byte	0x30
 7324 1640 531D0000 		.4byte	.LLST149
 7325 1644 19       		.uleb128 0x19
 7326 1645 636300   		.ascii	"cc\000"
 7327 1648 01       		.byte	0x1
 7328 1649 B309     		.2byte	0x9b3
 7329 164b 30000000 		.4byte	0x30
 7330 164f 711D0000 		.4byte	.LLST150
 7331 1653 25       		.uleb128 0x25
 7332 1654 C6030000 		.4byte	.LASF120
 7333 1658 01       		.byte	0x1
 7334 1659 B409     		.2byte	0x9b4
 7335 165b 97040000 		.4byte	0x497
 7336 165f 9A1D0000 		.4byte	.LLST151
 7337 1663 25       		.uleb128 0x25
 7338 1664 3E000000 		.4byte	.LASF116
 7339 1668 01       		.byte	0x1
 7340 1669 B509     		.2byte	0x9b5
 7341 166b 50000000 		.4byte	0x50
 7342 166f B81D0000 		.4byte	.LLST152
 7343 1673 1E       		.uleb128 0x1e
 7344 1674 1A000000 		.4byte	.LVL449
 7345 1678 67060000 		.4byte	0x667
 7346 167c 24       		.uleb128 0x24
 7347 167d 64000000 		.4byte	.LVL455
 7348 1681 BF1A0000 		.4byte	0x1abf
 7349 1685 9C160000 		.4byte	0x169c
 7350 1689 23       		.uleb128 0x23
 7351 168a 01       		.byte	0x1
 7352 168b 53       		.byte	0x53
 7353 168c 02       		.byte	0x2
 7354 168d 7B       		.byte	0x7b
 7355 168e 00       		.sleb128 0
 7356 168f 23       		.uleb128 0x23
 7357 1690 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 194


 7358 1691 52       		.byte	0x52
 7359 1692 02       		.byte	0x2
 7360 1693 76       		.byte	0x76
 7361 1694 00       		.sleb128 0
 7362 1695 23       		.uleb128 0x23
 7363 1696 01       		.byte	0x1
 7364 1697 51       		.byte	0x51
 7365 1698 02       		.byte	0x2
 7366 1699 78       		.byte	0x78
 7367 169a 00       		.sleb128 0
 7368 169b 00       		.byte	0
 7369 169c 24       		.uleb128 0x24
 7370 169d 80000000 		.4byte	.LVL457
 7371 16a1 1F050000 		.4byte	0x51f
 7372 16a5 C2160000 		.4byte	0x16c2
 7373 16a9 23       		.uleb128 0x23
 7374 16aa 01       		.byte	0x1
 7375 16ab 52       		.byte	0x52
 7376 16ac 03       		.byte	0x3
 7377 16ad 0A       		.byte	0xa
 7378 16ae 0002     		.2byte	0x200
 7379 16b0 23       		.uleb128 0x23
 7380 16b1 01       		.byte	0x1
 7381 16b2 51       		.byte	0x51
 7382 16b3 07       		.byte	0x7
 7383 16b4 76       		.byte	0x76
 7384 16b5 00       		.sleb128 0
 7385 16b6 39       		.byte	0x39
 7386 16b7 24       		.byte	0x24
 7387 16b8 78       		.byte	0x78
 7388 16b9 00       		.sleb128 0
 7389 16ba 22       		.byte	0x22
 7390 16bb 23       		.uleb128 0x23
 7391 16bc 01       		.byte	0x1
 7392 16bd 50       		.byte	0x50
 7393 16be 02       		.byte	0x2
 7394 16bf 74       		.byte	0x74
 7395 16c0 24       		.sleb128 36
 7396 16c1 00       		.byte	0
 7397 16c2 1E       		.uleb128 0x1e
 7398 16c3 C6000000 		.4byte	.LVL463
 7399 16c7 950D0000 		.4byte	0xd95
 7400 16cb 1E       		.uleb128 0x1e
 7401 16cc E2000000 		.4byte	.LVL468
 7402 16d0 950D0000 		.4byte	0xd95
 7403 16d4 24       		.uleb128 0x24
 7404 16d5 12010000 		.4byte	.LVL473
 7405 16d9 BF1A0000 		.4byte	0x1abf
 7406 16dd ED160000 		.4byte	0x16ed
 7407 16e1 23       		.uleb128 0x23
 7408 16e2 01       		.byte	0x1
 7409 16e3 53       		.byte	0x53
 7410 16e4 01       		.byte	0x1
 7411 16e5 31       		.byte	0x31
 7412 16e6 23       		.uleb128 0x23
 7413 16e7 01       		.byte	0x1
 7414 16e8 51       		.byte	0x51
ARM GAS  /tmp/ccKU0f2P.s 			page 195


 7415 16e9 02       		.byte	0x2
 7416 16ea 74       		.byte	0x74
 7417 16eb 24       		.sleb128 36
 7418 16ec 00       		.byte	0
 7419 16ed 1E       		.uleb128 0x1e
 7420 16ee 28010000 		.4byte	.LVL474
 7421 16f2 870B0000 		.4byte	0xb87
 7422 16f6 24       		.uleb128 0x24
 7423 16f7 4E010000 		.4byte	.LVL476
 7424 16fb E61A0000 		.4byte	0x1ae6
 7425 16ff 15170000 		.4byte	0x1715
 7426 1703 23       		.uleb128 0x23
 7427 1704 01       		.byte	0x1
 7428 1705 53       		.byte	0x53
 7429 1706 01       		.byte	0x1
 7430 1707 31       		.byte	0x31
 7431 1708 23       		.uleb128 0x23
 7432 1709 01       		.byte	0x1
 7433 170a 52       		.byte	0x52
 7434 170b 02       		.byte	0x2
 7435 170c 76       		.byte	0x76
 7436 170d 00       		.sleb128 0
 7437 170e 23       		.uleb128 0x23
 7438 170f 01       		.byte	0x1
 7439 1710 51       		.byte	0x51
 7440 1711 02       		.byte	0x2
 7441 1712 74       		.byte	0x74
 7442 1713 24       		.sleb128 36
 7443 1714 00       		.byte	0
 7444 1715 22       		.uleb128 0x22
 7445 1716 7A010000 		.4byte	.LVL482
 7446 171a 1F050000 		.4byte	0x51f
 7447 171e 23       		.uleb128 0x23
 7448 171f 01       		.byte	0x1
 7449 1720 52       		.byte	0x52
 7450 1721 02       		.byte	0x2
 7451 1722 76       		.byte	0x76
 7452 1723 00       		.sleb128 0
 7453 1724 23       		.uleb128 0x23
 7454 1725 01       		.byte	0x1
 7455 1726 51       		.byte	0x51
 7456 1727 02       		.byte	0x2
 7457 1728 78       		.byte	0x78
 7458 1729 00       		.sleb128 0
 7459 172a 00       		.byte	0
 7460 172b 00       		.byte	0
 7461 172c 2E       		.uleb128 0x2e
 7462 172d 01       		.byte	0x1
 7463 172e B4020000 		.4byte	.LASF121
 7464 1732 01       		.byte	0x1
 7465 1733 210A     		.2byte	0xa21
 7466 1735 01       		.byte	0x1
 7467 1736 F3030000 		.4byte	0x3f3
 7468 173a 00000000 		.4byte	.LFB26
 7469 173e AC000000 		.4byte	.LFE26
 7470 1742 D61D0000 		.4byte	.LLST153
 7471 1746 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 196


 7472 1747 C9170000 		.4byte	0x17c9
 7473 174b 18       		.uleb128 0x18
 7474 174c 667000   		.ascii	"fp\000"
 7475 174f 01       		.byte	0x1
 7476 1750 220A     		.2byte	0xa22
 7477 1752 F4130000 		.4byte	0x13f4
 7478 1756 F61D0000 		.4byte	.LLST154
 7479 175a 19       		.uleb128 0x19
 7480 175b 72657300 		.ascii	"res\000"
 7481 175f 01       		.byte	0x1
 7482 1760 250A     		.2byte	0xa25
 7483 1762 F3030000 		.4byte	0x3f3
 7484 1766 141E0000 		.4byte	.LLST155
 7485 176a 19       		.uleb128 0x19
 7486 176b 74696D00 		.ascii	"tim\000"
 7487 176f 01       		.byte	0x1
 7488 1770 260A     		.2byte	0xa26
 7489 1772 82000000 		.4byte	0x82
 7490 1776 321E0000 		.4byte	.LLST156
 7491 177a 19       		.uleb128 0x19
 7492 177b 64697200 		.ascii	"dir\000"
 7493 177f 01       		.byte	0x1
 7494 1780 270A     		.2byte	0xa27
 7495 1782 76020000 		.4byte	0x276
 7496 1786 451E0000 		.4byte	.LLST157
 7497 178a 1E       		.uleb128 0x1e
 7498 178b 0C000000 		.4byte	.LVL488
 7499 178f 67060000 		.4byte	0x667
 7500 1793 24       		.uleb128 0x24
 7501 1794 34000000 		.4byte	.LVL490
 7502 1798 BF1A0000 		.4byte	0x1abf
 7503 179c AC170000 		.4byte	0x17ac
 7504 17a0 23       		.uleb128 0x23
 7505 17a1 01       		.byte	0x1
 7506 17a2 53       		.byte	0x53
 7507 17a3 01       		.byte	0x1
 7508 17a4 31       		.byte	0x31
 7509 17a5 23       		.uleb128 0x23
 7510 17a6 01       		.byte	0x1
 7511 17a7 51       		.byte	0x51
 7512 17a8 02       		.byte	0x2
 7513 17a9 74       		.byte	0x74
 7514 17aa 24       		.sleb128 36
 7515 17ab 00       		.byte	0
 7516 17ac 1E       		.uleb128 0x1e
 7517 17ad 48000000 		.4byte	.LVL491
 7518 17b1 AD060000 		.4byte	0x6ad
 7519 17b5 1E       		.uleb128 0x1e
 7520 17b6 80000000 		.4byte	.LVL494
 7521 17ba 471B0000 		.4byte	0x1b47
 7522 17be 31       		.uleb128 0x31
 7523 17bf A8000000 		.4byte	.LVL496
 7524 17c3 01       		.byte	0x1
 7525 17c4 79090000 		.4byte	0x979
 7526 17c8 00       		.byte	0
 7527 17c9 2E       		.uleb128 0x2e
 7528 17ca 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 197


 7529 17cb 02020000 		.4byte	.LASF122
 7530 17cf 01       		.byte	0x1
 7531 17d0 500A     		.2byte	0xa50
 7532 17d2 01       		.byte	0x1
 7533 17d3 F3030000 		.4byte	0x3f3
 7534 17d7 00000000 		.4byte	.LFB27
 7535 17db 0E000000 		.4byte	.LFE27
 7536 17df 581E0000 		.4byte	.LLST158
 7537 17e3 01       		.byte	0x1
 7538 17e4 16180000 		.4byte	0x1816
 7539 17e8 18       		.uleb128 0x18
 7540 17e9 667000   		.ascii	"fp\000"
 7541 17ec 01       		.byte	0x1
 7542 17ed 510A     		.2byte	0xa51
 7543 17ef F4130000 		.4byte	0x13f4
 7544 17f3 781E0000 		.4byte	.LLST159
 7545 17f7 1C       		.uleb128 0x1c
 7546 17f8 72657300 		.ascii	"res\000"
 7547 17fc 01       		.byte	0x1
 7548 17fd 540A     		.2byte	0xa54
 7549 17ff F3030000 		.4byte	0x3f3
 7550 1803 01       		.byte	0x1
 7551 1804 50       		.byte	0x50
 7552 1805 22       		.uleb128 0x22
 7553 1806 08000000 		.4byte	.LVL498
 7554 180a 2C170000 		.4byte	0x172c
 7555 180e 23       		.uleb128 0x23
 7556 180f 01       		.byte	0x1
 7557 1810 50       		.byte	0x50
 7558 1811 02       		.byte	0x2
 7559 1812 74       		.byte	0x74
 7560 1813 00       		.sleb128 0
 7561 1814 00       		.byte	0
 7562 1815 00       		.byte	0
 7563 1816 2E       		.uleb128 0x2e
 7564 1817 01       		.byte	0x1
 7565 1818 43020000 		.4byte	.LASF123
 7566 181c 01       		.byte	0x1
 7567 181d F40A     		.2byte	0xaf4
 7568 181f 01       		.byte	0x1
 7569 1820 F3030000 		.4byte	0x3f3
 7570 1824 00000000 		.4byte	.LFB28
 7571 1828 40010000 		.4byte	.LFE28
 7572 182c 961E0000 		.4byte	.LLST160
 7573 1830 01       		.byte	0x1
 7574 1831 14190000 		.4byte	0x1914
 7575 1835 18       		.uleb128 0x18
 7576 1836 667000   		.ascii	"fp\000"
 7577 1839 01       		.byte	0x1
 7578 183a F50A     		.2byte	0xaf5
 7579 183c F4130000 		.4byte	0x13f4
 7580 1840 B61E0000 		.4byte	.LLST161
 7581 1844 18       		.uleb128 0x18
 7582 1845 6F667300 		.ascii	"ofs\000"
 7583 1849 01       		.byte	0x1
 7584 184a F60A     		.2byte	0xaf6
 7585 184c 82000000 		.4byte	0x82
ARM GAS  /tmp/ccKU0f2P.s 			page 198


 7586 1850 D41E0000 		.4byte	.LLST162
 7587 1854 19       		.uleb128 0x19
 7588 1855 72657300 		.ascii	"res\000"
 7589 1859 01       		.byte	0x1
 7590 185a F90A     		.2byte	0xaf9
 7591 185c F3030000 		.4byte	0x3f3
 7592 1860 131F0000 		.4byte	.LLST163
 7593 1864 21       		.uleb128 0x21
 7594 1865 1E000000 		.4byte	.LBB8
 7595 1869 3A010000 		.4byte	.LBE8
 7596 186d 0A190000 		.4byte	0x190a
 7597 1871 25       		.uleb128 0x25
 7598 1872 33020000 		.4byte	.LASF75
 7599 1876 01       		.byte	0x1
 7600 1877 3C0B     		.2byte	0xb3c
 7601 1879 82000000 		.4byte	0x82
 7602 187d 261F0000 		.4byte	.LLST164
 7603 1881 19       		.uleb128 0x19
 7604 1882 62637300 		.ascii	"bcs\000"
 7605 1886 01       		.byte	0x1
 7606 1887 3C0B     		.2byte	0xb3c
 7607 1889 82000000 		.4byte	0x82
 7608 188d 9C1F0000 		.4byte	.LLST165
 7609 1891 25       		.uleb128 0x25
 7610 1892 4B040000 		.4byte	.LASF124
 7611 1896 01       		.byte	0x1
 7612 1897 3C0B     		.2byte	0xb3c
 7613 1899 82000000 		.4byte	0x82
 7614 189d AF1F0000 		.4byte	.LLST166
 7615 18a1 25       		.uleb128 0x25
 7616 18a2 84020000 		.4byte	.LASF125
 7617 18a6 01       		.byte	0x1
 7618 18a7 3C0B     		.2byte	0xb3c
 7619 18a9 82000000 		.4byte	0x82
 7620 18ad EF1F0000 		.4byte	.LLST167
 7621 18b1 1E       		.uleb128 0x1e
 7622 18b2 68000000 		.4byte	.LVL515
 7623 18b6 950D0000 		.4byte	0xd95
 7624 18ba 1E       		.uleb128 0x1e
 7625 18bb 8E000000 		.4byte	.LVL519
 7626 18bf 950D0000 		.4byte	0xd95
 7627 18c3 1E       		.uleb128 0x1e
 7628 18c4 98000000 		.4byte	.LVL521
 7629 18c8 C50B0000 		.4byte	0xbc5
 7630 18cc 1E       		.uleb128 0x1e
 7631 18cd C8000000 		.4byte	.LVL527
 7632 18d1 870B0000 		.4byte	0xb87
 7633 18d5 24       		.uleb128 0x24
 7634 18d6 FC000000 		.4byte	.LVL531
 7635 18da BF1A0000 		.4byte	0x1abf
 7636 18de EE180000 		.4byte	0x18ee
 7637 18e2 23       		.uleb128 0x23
 7638 18e3 01       		.byte	0x1
 7639 18e4 53       		.byte	0x53
 7640 18e5 01       		.byte	0x1
 7641 18e6 31       		.byte	0x31
 7642 18e7 23       		.uleb128 0x23
ARM GAS  /tmp/ccKU0f2P.s 			page 199


 7643 18e8 01       		.byte	0x1
 7644 18e9 51       		.byte	0x51
 7645 18ea 02       		.byte	0x2
 7646 18eb 74       		.byte	0x74
 7647 18ec 24       		.sleb128 36
 7648 18ed 00       		.byte	0
 7649 18ee 22       		.uleb128 0x22
 7650 18ef 16010000 		.4byte	.LVL532
 7651 18f3 E61A0000 		.4byte	0x1ae6
 7652 18f7 23       		.uleb128 0x23
 7653 18f8 01       		.byte	0x1
 7654 18f9 53       		.byte	0x53
 7655 18fa 01       		.byte	0x1
 7656 18fb 31       		.byte	0x31
 7657 18fc 23       		.uleb128 0x23
 7658 18fd 01       		.byte	0x1
 7659 18fe 52       		.byte	0x52
 7660 18ff 02       		.byte	0x2
 7661 1900 75       		.byte	0x75
 7662 1901 00       		.sleb128 0
 7663 1902 23       		.uleb128 0x23
 7664 1903 01       		.byte	0x1
 7665 1904 51       		.byte	0x51
 7666 1905 02       		.byte	0x2
 7667 1906 74       		.byte	0x74
 7668 1907 24       		.sleb128 36
 7669 1908 00       		.byte	0
 7670 1909 00       		.byte	0
 7671 190a 1E       		.uleb128 0x1e
 7672 190b 0E000000 		.4byte	.LVL502
 7673 190f 67060000 		.4byte	0x667
 7674 1913 00       		.byte	0
 7675 1914 2E       		.uleb128 0x2e
 7676 1915 01       		.byte	0x1
 7677 1916 8A040000 		.4byte	.LASF126
 7678 191a 01       		.byte	0x1
 7679 191b 920B     		.2byte	0xb92
 7680 191d 01       		.byte	0x1
 7681 191e F3030000 		.4byte	0x3f3
 7682 1922 00000000 		.4byte	.LFB29
 7683 1926 62000000 		.4byte	.LFE29
 7684 192a 19200000 		.4byte	.LLST168
 7685 192e 01       		.byte	0x1
 7686 192f B5190000 		.4byte	0x19b5
 7687 1933 18       		.uleb128 0x18
 7688 1934 646A00   		.ascii	"dj\000"
 7689 1937 01       		.byte	0x1
 7690 1938 930B     		.2byte	0xb93
 7691 193a 19050000 		.4byte	0x519
 7692 193e 45200000 		.4byte	.LLST169
 7693 1942 1F       		.uleb128 0x1f
 7694 1943 6D000000 		.4byte	.LASF85
 7695 1947 01       		.byte	0x1
 7696 1948 940B     		.2byte	0xb94
 7697 194a 68090000 		.4byte	0x968
 7698 194e 63200000 		.4byte	.LLST170
 7699 1952 19       		.uleb128 0x19
ARM GAS  /tmp/ccKU0f2P.s 			page 200


 7700 1953 72657300 		.ascii	"res\000"
 7701 1957 01       		.byte	0x1
 7702 1958 970B     		.2byte	0xb97
 7703 195a F3030000 		.4byte	0x3f3
 7704 195e 8E200000 		.4byte	.LLST171
 7705 1962 1C       		.uleb128 0x1c
 7706 1963 73666E00 		.ascii	"sfn\000"
 7707 1967 01       		.byte	0x1
 7708 1968 980B     		.2byte	0xb98
 7709 196a FA130000 		.4byte	0x13fa
 7710 196e 02       		.byte	0x2
 7711 196f 91       		.byte	0x91
 7712 1970 6C       		.sleb128 -20
 7713 1971 24       		.uleb128 0x24
 7714 1972 14000000 		.4byte	.LVL540
 7715 1976 C5070000 		.4byte	0x7c5
 7716 197a 90190000 		.4byte	0x1990
 7717 197e 23       		.uleb128 0x23
 7718 197f 01       		.byte	0x1
 7719 1980 52       		.byte	0x52
 7720 1981 01       		.byte	0x1
 7721 1982 30       		.byte	0x30
 7722 1983 23       		.uleb128 0x23
 7723 1984 01       		.byte	0x1
 7724 1985 51       		.byte	0x51
 7725 1986 02       		.byte	0x2
 7726 1987 74       		.byte	0x74
 7727 1988 00       		.sleb128 0
 7728 1989 23       		.uleb128 0x23
 7729 198a 01       		.byte	0x1
 7730 198b 50       		.byte	0x50
 7731 198c 02       		.byte	0x2
 7732 198d 91       		.byte	0x91
 7733 198e 64       		.sleb128 -28
 7734 198f 00       		.byte	0
 7735 1990 24       		.uleb128 0x24
 7736 1991 22000000 		.4byte	.LVL542
 7737 1995 72100000 		.4byte	0x1072
 7738 1999 A4190000 		.4byte	0x19a4
 7739 199d 23       		.uleb128 0x23
 7740 199e 01       		.byte	0x1
 7741 199f 50       		.byte	0x50
 7742 19a0 02       		.byte	0x2
 7743 19a1 74       		.byte	0x74
 7744 19a2 00       		.sleb128 0
 7745 19a3 00       		.byte	0
 7746 19a4 22       		.uleb128 0x22
 7747 19a5 54000000 		.4byte	.LVL544
 7748 19a9 7C0C0000 		.4byte	0xc7c
 7749 19ad 23       		.uleb128 0x23
 7750 19ae 01       		.byte	0x1
 7751 19af 50       		.byte	0x50
 7752 19b0 02       		.byte	0x2
 7753 19b1 74       		.byte	0x74
 7754 19b2 00       		.sleb128 0
 7755 19b3 00       		.byte	0
 7756 19b4 00       		.byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 201


 7757 19b5 2E       		.uleb128 0x2e
 7758 19b6 01       		.byte	0x1
 7759 19b7 31040000 		.4byte	.LASF127
 7760 19bb 01       		.byte	0x1
 7761 19bc BA0B     		.2byte	0xbba
 7762 19be 01       		.byte	0x1
 7763 19bf F3030000 		.4byte	0x3f3
 7764 19c3 00000000 		.4byte	.LFB30
 7765 19c7 52000000 		.4byte	.LFE30
 7766 19cb AD200000 		.4byte	.LLST172
 7767 19cf 01       		.byte	0x1
 7768 19d0 731A0000 		.4byte	0x1a73
 7769 19d4 18       		.uleb128 0x18
 7770 19d5 646A00   		.ascii	"dj\000"
 7771 19d8 01       		.byte	0x1
 7772 19d9 BB0B     		.2byte	0xbbb
 7773 19db 19050000 		.4byte	0x519
 7774 19df CD200000 		.4byte	.LLST173
 7775 19e3 18       		.uleb128 0x18
 7776 19e4 666E6F00 		.ascii	"fno\000"
 7777 19e8 01       		.byte	0x1
 7778 19e9 BC0B     		.2byte	0xbbc
 7779 19eb 5B060000 		.4byte	0x65b
 7780 19ef EB200000 		.4byte	.LLST174
 7781 19f3 19       		.uleb128 0x19
 7782 19f4 72657300 		.ascii	"res\000"
 7783 19f8 01       		.byte	0x1
 7784 19f9 BF0B     		.2byte	0xbbf
 7785 19fb F3030000 		.4byte	0x3f3
 7786 19ff 09210000 		.4byte	.LLST175
 7787 1a03 1C       		.uleb128 0x1c
 7788 1a04 73666E00 		.ascii	"sfn\000"
 7789 1a08 01       		.byte	0x1
 7790 1a09 C00B     		.2byte	0xbc0
 7791 1a0b FA130000 		.4byte	0x13fa
 7792 1a0f 02       		.byte	0x2
 7793 1a10 91       		.byte	0x91
 7794 1a11 64       		.sleb128 -28
 7795 1a12 1E       		.uleb128 0x1e
 7796 1a13 0E000000 		.4byte	.LVL548
 7797 1a17 67060000 		.4byte	0x667
 7798 1a1b 24       		.uleb128 0x24
 7799 1a1c 1A000000 		.4byte	.LVL550
 7800 1a20 7C0C0000 		.4byte	0xc7c
 7801 1a24 2F1A0000 		.4byte	0x1a2f
 7802 1a28 23       		.uleb128 0x23
 7803 1a29 01       		.byte	0x1
 7804 1a2a 50       		.byte	0x50
 7805 1a2b 02       		.byte	0x2
 7806 1a2c 74       		.byte	0x74
 7807 1a2d 00       		.sleb128 0
 7808 1a2e 00       		.byte	0
 7809 1a2f 24       		.uleb128 0x24
 7810 1a30 26000000 		.4byte	.LVL553
 7811 1a34 610F0000 		.4byte	0xf61
 7812 1a38 431A0000 		.4byte	0x1a43
 7813 1a3c 23       		.uleb128 0x23
ARM GAS  /tmp/ccKU0f2P.s 			page 202


 7814 1a3d 01       		.byte	0x1
 7815 1a3e 50       		.byte	0x50
 7816 1a3f 02       		.byte	0x2
 7817 1a40 74       		.byte	0x74
 7818 1a41 00       		.sleb128 0
 7819 1a42 00       		.byte	0
 7820 1a43 24       		.uleb128 0x24
 7821 1a44 38000000 		.4byte	.LVL557
 7822 1a48 D8050000 		.4byte	0x5d8
 7823 1a4c 5D1A0000 		.4byte	0x1a5d
 7824 1a50 23       		.uleb128 0x23
 7825 1a51 01       		.byte	0x1
 7826 1a52 51       		.byte	0x51
 7827 1a53 02       		.byte	0x2
 7828 1a54 76       		.byte	0x76
 7829 1a55 00       		.sleb128 0
 7830 1a56 23       		.uleb128 0x23
 7831 1a57 01       		.byte	0x1
 7832 1a58 50       		.byte	0x50
 7833 1a59 02       		.byte	0x2
 7834 1a5a 74       		.byte	0x74
 7835 1a5b 00       		.sleb128 0
 7836 1a5c 00       		.byte	0
 7837 1a5d 22       		.uleb128 0x22
 7838 1a5e 40000000 		.4byte	.LVL558
 7839 1a62 740E0000 		.4byte	0xe74
 7840 1a66 23       		.uleb128 0x23
 7841 1a67 01       		.byte	0x1
 7842 1a68 51       		.byte	0x51
 7843 1a69 01       		.byte	0x1
 7844 1a6a 30       		.byte	0x30
 7845 1a6b 23       		.uleb128 0x23
 7846 1a6c 01       		.byte	0x1
 7847 1a6d 50       		.byte	0x50
 7848 1a6e 02       		.byte	0x2
 7849 1a6f 74       		.byte	0x74
 7850 1a70 00       		.sleb128 0
 7851 1a71 00       		.byte	0
 7852 1a72 00       		.byte	0
 7853 1a73 08       		.uleb128 0x8
 7854 1a74 70020000 		.4byte	0x270
 7855 1a78 831A0000 		.4byte	0x1a83
 7856 1a7c 0D       		.uleb128 0xd
 7857 1a7d AE010000 		.4byte	0x1ae
 7858 1a81 00       		.byte	0
 7859 1a82 00       		.byte	0
 7860 1a83 20       		.uleb128 0x20
 7861 1a84 3F010000 		.4byte	.LASF128
 7862 1a88 01       		.byte	0x1
 7863 1a89 D401     		.2byte	0x1d4
 7864 1a8b 731A0000 		.4byte	0x1a73
 7865 1a8f 05       		.byte	0x5
 7866 1a90 03       		.byte	0x3
 7867 1a91 00000000 		.4byte	FatFs
 7868 1a95 20       		.uleb128 0x20
 7869 1a96 54050000 		.4byte	.LASF129
 7870 1a9a 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 203


 7871 1a9b DA01     		.2byte	0x1da
 7872 1a9d 69000000 		.4byte	0x69
 7873 1aa1 05       		.byte	0x5
 7874 1aa2 03       		.byte	0x3
 7875 1aa3 00000000 		.4byte	Fsid
 7876 1aa7 32       		.uleb128 0x32
 7877 1aa8 01       		.byte	0x1
 7878 1aa9 F6010000 		.4byte	.LASF130
 7879 1aad 04       		.byte	0x4
 7880 1aae 1F       		.byte	0x1f
 7881 1aaf 01       		.byte	0x1
 7882 1ab0 FE030000 		.4byte	0x3fe
 7883 1ab4 01       		.byte	0x1
 7884 1ab5 BF1A0000 		.4byte	0x1abf
 7885 1ab9 33       		.uleb128 0x33
 7886 1aba 50000000 		.4byte	0x50
 7887 1abe 00       		.byte	0
 7888 1abf 32       		.uleb128 0x32
 7889 1ac0 01       		.byte	0x1
 7890 1ac1 A9040000 		.4byte	.LASF131
 7891 1ac5 04       		.byte	0x4
 7892 1ac6 22       		.byte	0x22
 7893 1ac7 01       		.byte	0x1
 7894 1ac8 30040000 		.4byte	0x430
 7895 1acc 01       		.byte	0x1
 7896 1acd E61A0000 		.4byte	0x1ae6
 7897 1ad1 33       		.uleb128 0x33
 7898 1ad2 50000000 		.4byte	0x50
 7899 1ad6 33       		.uleb128 0x33
 7900 1ad7 97040000 		.4byte	0x497
 7901 1adb 33       		.uleb128 0x33
 7902 1adc 82000000 		.4byte	0x82
 7903 1ae0 33       		.uleb128 0x33
 7904 1ae1 50000000 		.4byte	0x50
 7905 1ae5 00       		.byte	0
 7906 1ae6 32       		.uleb128 0x32
 7907 1ae7 01       		.byte	0x1
 7908 1ae8 42050000 		.4byte	.LASF132
 7909 1aec 04       		.byte	0x4
 7910 1aed 20       		.byte	0x20
 7911 1aee 01       		.byte	0x1
 7912 1aef 30040000 		.4byte	0x430
 7913 1af3 01       		.byte	0x1
 7914 1af4 0D1B0000 		.4byte	0x1b0d
 7915 1af8 33       		.uleb128 0x33
 7916 1af9 50000000 		.4byte	0x50
 7917 1afd 33       		.uleb128 0x33
 7918 1afe 76020000 		.4byte	0x276
 7919 1b02 33       		.uleb128 0x33
 7920 1b03 82000000 		.4byte	0x82
 7921 1b07 33       		.uleb128 0x33
 7922 1b08 50000000 		.4byte	0x50
 7923 1b0c 00       		.byte	0
 7924 1b0d 32       		.uleb128 0x32
 7925 1b0e 01       		.byte	0x1
 7926 1b0f A2010000 		.4byte	.LASF133
 7927 1b13 04       		.byte	0x4
ARM GAS  /tmp/ccKU0f2P.s 			page 204


 7928 1b14 1E       		.byte	0x1e
 7929 1b15 01       		.byte	0x1
 7930 1b16 FE030000 		.4byte	0x3fe
 7931 1b1a 01       		.byte	0x1
 7932 1b1b 251B0000 		.4byte	0x1b25
 7933 1b1f 33       		.uleb128 0x33
 7934 1b20 50000000 		.4byte	0x50
 7935 1b24 00       		.byte	0
 7936 1b25 32       		.uleb128 0x32
 7937 1b26 01       		.byte	0x1
 7938 1b27 9D020000 		.4byte	.LASF134
 7939 1b2b 04       		.byte	0x4
 7940 1b2c 24       		.byte	0x24
 7941 1b2d 01       		.byte	0x1
 7942 1b2e 30040000 		.4byte	0x430
 7943 1b32 01       		.byte	0x1
 7944 1b33 471B0000 		.4byte	0x1b47
 7945 1b37 33       		.uleb128 0x33
 7946 1b38 50000000 		.4byte	0x50
 7947 1b3c 33       		.uleb128 0x33
 7948 1b3d 50000000 		.4byte	0x50
 7949 1b41 33       		.uleb128 0x33
 7950 1b42 82050000 		.4byte	0x582
 7951 1b46 00       		.byte	0
 7952 1b47 34       		.uleb128 0x34
 7953 1b48 01       		.byte	0x1
 7954 1b49 83030000 		.4byte	.LASF138
 7955 1b4d 03       		.byte	0x3
 7956 1b4e FA       		.byte	0xfa
 7957 1b4f 01       		.byte	0x1
 7958 1b50 82000000 		.4byte	0x82
 7959 1b54 01       		.byte	0x1
 7960 1b55 00       		.byte	0
 7961              		.section	.debug_abbrev,"",%progbits
 7962              	.Ldebug_abbrev0:
 7963 0000 01       		.uleb128 0x1
 7964 0001 11       		.uleb128 0x11
 7965 0002 01       		.byte	0x1
 7966 0003 25       		.uleb128 0x25
 7967 0004 0E       		.uleb128 0xe
 7968 0005 13       		.uleb128 0x13
 7969 0006 0B       		.uleb128 0xb
 7970 0007 03       		.uleb128 0x3
 7971 0008 0E       		.uleb128 0xe
 7972 0009 1B       		.uleb128 0x1b
 7973 000a 0E       		.uleb128 0xe
 7974 000b 55       		.uleb128 0x55
 7975 000c 06       		.uleb128 0x6
 7976 000d 11       		.uleb128 0x11
 7977 000e 01       		.uleb128 0x1
 7978 000f 52       		.uleb128 0x52
 7979 0010 01       		.uleb128 0x1
 7980 0011 10       		.uleb128 0x10
 7981 0012 06       		.uleb128 0x6
 7982 0013 00       		.byte	0
 7983 0014 00       		.byte	0
 7984 0015 02       		.uleb128 0x2
ARM GAS  /tmp/ccKU0f2P.s 			page 205


 7985 0016 24       		.uleb128 0x24
 7986 0017 00       		.byte	0
 7987 0018 0B       		.uleb128 0xb
 7988 0019 0B       		.uleb128 0xb
 7989 001a 3E       		.uleb128 0x3e
 7990 001b 0B       		.uleb128 0xb
 7991 001c 03       		.uleb128 0x3
 7992 001d 08       		.uleb128 0x8
 7993 001e 00       		.byte	0
 7994 001f 00       		.byte	0
 7995 0020 03       		.uleb128 0x3
 7996 0021 16       		.uleb128 0x16
 7997 0022 00       		.byte	0
 7998 0023 03       		.uleb128 0x3
 7999 0024 0E       		.uleb128 0xe
 8000 0025 3A       		.uleb128 0x3a
 8001 0026 0B       		.uleb128 0xb
 8002 0027 3B       		.uleb128 0x3b
 8003 0028 0B       		.uleb128 0xb
 8004 0029 49       		.uleb128 0x49
 8005 002a 13       		.uleb128 0x13
 8006 002b 00       		.byte	0
 8007 002c 00       		.byte	0
 8008 002d 04       		.uleb128 0x4
 8009 002e 24       		.uleb128 0x24
 8010 002f 00       		.byte	0
 8011 0030 0B       		.uleb128 0xb
 8012 0031 0B       		.uleb128 0xb
 8013 0032 3E       		.uleb128 0x3e
 8014 0033 0B       		.uleb128 0xb
 8015 0034 03       		.uleb128 0x3
 8016 0035 0E       		.uleb128 0xe
 8017 0036 00       		.byte	0
 8018 0037 00       		.byte	0
 8019 0038 05       		.uleb128 0x5
 8020 0039 13       		.uleb128 0x13
 8021 003a 01       		.byte	0x1
 8022 003b 0B       		.uleb128 0xb
 8023 003c 05       		.uleb128 0x5
 8024 003d 3A       		.uleb128 0x3a
 8025 003e 0B       		.uleb128 0xb
 8026 003f 3B       		.uleb128 0x3b
 8027 0040 0B       		.uleb128 0xb
 8028 0041 01       		.uleb128 0x1
 8029 0042 13       		.uleb128 0x13
 8030 0043 00       		.byte	0
 8031 0044 00       		.byte	0
 8032 0045 06       		.uleb128 0x6
 8033 0046 0D       		.uleb128 0xd
 8034 0047 00       		.byte	0
 8035 0048 03       		.uleb128 0x3
 8036 0049 0E       		.uleb128 0xe
 8037 004a 3A       		.uleb128 0x3a
 8038 004b 0B       		.uleb128 0xb
 8039 004c 3B       		.uleb128 0x3b
 8040 004d 0B       		.uleb128 0xb
 8041 004e 49       		.uleb128 0x49
ARM GAS  /tmp/ccKU0f2P.s 			page 206


 8042 004f 13       		.uleb128 0x13
 8043 0050 38       		.uleb128 0x38
 8044 0051 0A       		.uleb128 0xa
 8045 0052 00       		.byte	0
 8046 0053 00       		.byte	0
 8047 0054 07       		.uleb128 0x7
 8048 0055 0D       		.uleb128 0xd
 8049 0056 00       		.byte	0
 8050 0057 03       		.uleb128 0x3
 8051 0058 08       		.uleb128 0x8
 8052 0059 3A       		.uleb128 0x3a
 8053 005a 0B       		.uleb128 0xb
 8054 005b 3B       		.uleb128 0x3b
 8055 005c 0B       		.uleb128 0xb
 8056 005d 49       		.uleb128 0x49
 8057 005e 13       		.uleb128 0x13
 8058 005f 38       		.uleb128 0x38
 8059 0060 0A       		.uleb128 0xa
 8060 0061 00       		.byte	0
 8061 0062 00       		.byte	0
 8062 0063 08       		.uleb128 0x8
 8063 0064 01       		.uleb128 0x1
 8064 0065 01       		.byte	0x1
 8065 0066 49       		.uleb128 0x49
 8066 0067 13       		.uleb128 0x13
 8067 0068 01       		.uleb128 0x1
 8068 0069 13       		.uleb128 0x13
 8069 006a 00       		.byte	0
 8070 006b 00       		.byte	0
 8071 006c 09       		.uleb128 0x9
 8072 006d 21       		.uleb128 0x21
 8073 006e 00       		.byte	0
 8074 006f 49       		.uleb128 0x49
 8075 0070 13       		.uleb128 0x13
 8076 0071 2F       		.uleb128 0x2f
 8077 0072 05       		.uleb128 0x5
 8078 0073 00       		.byte	0
 8079 0074 00       		.byte	0
 8080 0075 0A       		.uleb128 0xa
 8081 0076 0F       		.uleb128 0xf
 8082 0077 00       		.byte	0
 8083 0078 0B       		.uleb128 0xb
 8084 0079 0B       		.uleb128 0xb
 8085 007a 49       		.uleb128 0x49
 8086 007b 13       		.uleb128 0x13
 8087 007c 00       		.byte	0
 8088 007d 00       		.byte	0
 8089 007e 0B       		.uleb128 0xb
 8090 007f 16       		.uleb128 0x16
 8091 0080 00       		.byte	0
 8092 0081 03       		.uleb128 0x3
 8093 0082 08       		.uleb128 0x8
 8094 0083 3A       		.uleb128 0x3a
 8095 0084 0B       		.uleb128 0xb
 8096 0085 3B       		.uleb128 0x3b
 8097 0086 0B       		.uleb128 0xb
 8098 0087 49       		.uleb128 0x49
ARM GAS  /tmp/ccKU0f2P.s 			page 207


 8099 0088 13       		.uleb128 0x13
 8100 0089 00       		.byte	0
 8101 008a 00       		.byte	0
 8102 008b 0C       		.uleb128 0xc
 8103 008c 13       		.uleb128 0x13
 8104 008d 01       		.byte	0x1
 8105 008e 0B       		.uleb128 0xb
 8106 008f 0B       		.uleb128 0xb
 8107 0090 3A       		.uleb128 0x3a
 8108 0091 0B       		.uleb128 0xb
 8109 0092 3B       		.uleb128 0x3b
 8110 0093 0B       		.uleb128 0xb
 8111 0094 01       		.uleb128 0x1
 8112 0095 13       		.uleb128 0x13
 8113 0096 00       		.byte	0
 8114 0097 00       		.byte	0
 8115 0098 0D       		.uleb128 0xd
 8116 0099 21       		.uleb128 0x21
 8117 009a 00       		.byte	0
 8118 009b 49       		.uleb128 0x49
 8119 009c 13       		.uleb128 0x13
 8120 009d 2F       		.uleb128 0x2f
 8121 009e 0B       		.uleb128 0xb
 8122 009f 00       		.byte	0
 8123 00a0 00       		.byte	0
 8124 00a1 0E       		.uleb128 0xe
 8125 00a2 04       		.uleb128 0x4
 8126 00a3 01       		.byte	0x1
 8127 00a4 0B       		.uleb128 0xb
 8128 00a5 0B       		.uleb128 0xb
 8129 00a6 3A       		.uleb128 0x3a
 8130 00a7 0B       		.uleb128 0xb
 8131 00a8 3B       		.uleb128 0x3b
 8132 00a9 0B       		.uleb128 0xb
 8133 00aa 01       		.uleb128 0x1
 8134 00ab 13       		.uleb128 0x13
 8135 00ac 00       		.byte	0
 8136 00ad 00       		.byte	0
 8137 00ae 0F       		.uleb128 0xf
 8138 00af 28       		.uleb128 0x28
 8139 00b0 00       		.byte	0
 8140 00b1 03       		.uleb128 0x3
 8141 00b2 0E       		.uleb128 0xe
 8142 00b3 1C       		.uleb128 0x1c
 8143 00b4 0D       		.uleb128 0xd
 8144 00b5 00       		.byte	0
 8145 00b6 00       		.byte	0
 8146 00b7 10       		.uleb128 0x10
 8147 00b8 2E       		.uleb128 0x2e
 8148 00b9 01       		.byte	0x1
 8149 00ba 03       		.uleb128 0x3
 8150 00bb 0E       		.uleb128 0xe
 8151 00bc 3A       		.uleb128 0x3a
 8152 00bd 0B       		.uleb128 0xb
 8153 00be 3B       		.uleb128 0x3b
 8154 00bf 05       		.uleb128 0x5
 8155 00c0 27       		.uleb128 0x27
ARM GAS  /tmp/ccKU0f2P.s 			page 208


 8156 00c1 0C       		.uleb128 0xc
 8157 00c2 49       		.uleb128 0x49
 8158 00c3 13       		.uleb128 0x13
 8159 00c4 20       		.uleb128 0x20
 8160 00c5 0B       		.uleb128 0xb
 8161 00c6 01       		.uleb128 0x1
 8162 00c7 13       		.uleb128 0x13
 8163 00c8 00       		.byte	0
 8164 00c9 00       		.byte	0
 8165 00ca 11       		.uleb128 0x11
 8166 00cb 05       		.uleb128 0x5
 8167 00cc 00       		.byte	0
 8168 00cd 03       		.uleb128 0x3
 8169 00ce 08       		.uleb128 0x8
 8170 00cf 3A       		.uleb128 0x3a
 8171 00d0 0B       		.uleb128 0xb
 8172 00d1 3B       		.uleb128 0x3b
 8173 00d2 05       		.uleb128 0x5
 8174 00d3 49       		.uleb128 0x49
 8175 00d4 13       		.uleb128 0x13
 8176 00d5 00       		.byte	0
 8177 00d6 00       		.byte	0
 8178 00d7 12       		.uleb128 0x12
 8179 00d8 34       		.uleb128 0x34
 8180 00d9 00       		.byte	0
 8181 00da 03       		.uleb128 0x3
 8182 00db 08       		.uleb128 0x8
 8183 00dc 3A       		.uleb128 0x3a
 8184 00dd 0B       		.uleb128 0xb
 8185 00de 3B       		.uleb128 0x3b
 8186 00df 05       		.uleb128 0x5
 8187 00e0 49       		.uleb128 0x49
 8188 00e1 13       		.uleb128 0x13
 8189 00e2 00       		.byte	0
 8190 00e3 00       		.byte	0
 8191 00e4 13       		.uleb128 0x13
 8192 00e5 26       		.uleb128 0x26
 8193 00e6 00       		.byte	0
 8194 00e7 00       		.byte	0
 8195 00e8 00       		.byte	0
 8196 00e9 14       		.uleb128 0x14
 8197 00ea 26       		.uleb128 0x26
 8198 00eb 00       		.byte	0
 8199 00ec 49       		.uleb128 0x49
 8200 00ed 13       		.uleb128 0x13
 8201 00ee 00       		.byte	0
 8202 00ef 00       		.byte	0
 8203 00f0 15       		.uleb128 0x15
 8204 00f1 34       		.uleb128 0x34
 8205 00f2 00       		.byte	0
 8206 00f3 03       		.uleb128 0x3
 8207 00f4 0E       		.uleb128 0xe
 8208 00f5 3A       		.uleb128 0x3a
 8209 00f6 0B       		.uleb128 0xb
 8210 00f7 3B       		.uleb128 0x3b
 8211 00f8 05       		.uleb128 0x5
 8212 00f9 49       		.uleb128 0x49
ARM GAS  /tmp/ccKU0f2P.s 			page 209


 8213 00fa 13       		.uleb128 0x13
 8214 00fb 00       		.byte	0
 8215 00fc 00       		.byte	0
 8216 00fd 16       		.uleb128 0x16
 8217 00fe 2E       		.uleb128 0x2e
 8218 00ff 01       		.byte	0x1
 8219 0100 03       		.uleb128 0x3
 8220 0101 0E       		.uleb128 0xe
 8221 0102 3A       		.uleb128 0x3a
 8222 0103 0B       		.uleb128 0xb
 8223 0104 3B       		.uleb128 0x3b
 8224 0105 05       		.uleb128 0x5
 8225 0106 27       		.uleb128 0x27
 8226 0107 0C       		.uleb128 0xc
 8227 0108 11       		.uleb128 0x11
 8228 0109 01       		.uleb128 0x1
 8229 010a 12       		.uleb128 0x12
 8230 010b 01       		.uleb128 0x1
 8231 010c 40       		.uleb128 0x40
 8232 010d 06       		.uleb128 0x6
 8233 010e 9742     		.uleb128 0x2117
 8234 0110 0C       		.uleb128 0xc
 8235 0111 01       		.uleb128 0x1
 8236 0112 13       		.uleb128 0x13
 8237 0113 00       		.byte	0
 8238 0114 00       		.byte	0
 8239 0115 17       		.uleb128 0x17
 8240 0116 05       		.uleb128 0x5
 8241 0117 00       		.byte	0
 8242 0118 03       		.uleb128 0x3
 8243 0119 08       		.uleb128 0x8
 8244 011a 3A       		.uleb128 0x3a
 8245 011b 0B       		.uleb128 0xb
 8246 011c 3B       		.uleb128 0x3b
 8247 011d 05       		.uleb128 0x5
 8248 011e 49       		.uleb128 0x49
 8249 011f 13       		.uleb128 0x13
 8250 0120 02       		.uleb128 0x2
 8251 0121 0A       		.uleb128 0xa
 8252 0122 00       		.byte	0
 8253 0123 00       		.byte	0
 8254 0124 18       		.uleb128 0x18
 8255 0125 05       		.uleb128 0x5
 8256 0126 00       		.byte	0
 8257 0127 03       		.uleb128 0x3
 8258 0128 08       		.uleb128 0x8
 8259 0129 3A       		.uleb128 0x3a
 8260 012a 0B       		.uleb128 0xb
 8261 012b 3B       		.uleb128 0x3b
 8262 012c 05       		.uleb128 0x5
 8263 012d 49       		.uleb128 0x49
 8264 012e 13       		.uleb128 0x13
 8265 012f 02       		.uleb128 0x2
 8266 0130 06       		.uleb128 0x6
 8267 0131 00       		.byte	0
 8268 0132 00       		.byte	0
 8269 0133 19       		.uleb128 0x19
ARM GAS  /tmp/ccKU0f2P.s 			page 210


 8270 0134 34       		.uleb128 0x34
 8271 0135 00       		.byte	0
 8272 0136 03       		.uleb128 0x3
 8273 0137 08       		.uleb128 0x8
 8274 0138 3A       		.uleb128 0x3a
 8275 0139 0B       		.uleb128 0xb
 8276 013a 3B       		.uleb128 0x3b
 8277 013b 05       		.uleb128 0x5
 8278 013c 49       		.uleb128 0x49
 8279 013d 13       		.uleb128 0x13
 8280 013e 02       		.uleb128 0x2
 8281 013f 06       		.uleb128 0x6
 8282 0140 00       		.byte	0
 8283 0141 00       		.byte	0
 8284 0142 1A       		.uleb128 0x1a
 8285 0143 0F       		.uleb128 0xf
 8286 0144 00       		.byte	0
 8287 0145 0B       		.uleb128 0xb
 8288 0146 0B       		.uleb128 0xb
 8289 0147 00       		.byte	0
 8290 0148 00       		.byte	0
 8291 0149 1B       		.uleb128 0x1b
 8292 014a 2E       		.uleb128 0x2e
 8293 014b 01       		.byte	0x1
 8294 014c 03       		.uleb128 0x3
 8295 014d 0E       		.uleb128 0xe
 8296 014e 3A       		.uleb128 0x3a
 8297 014f 0B       		.uleb128 0xb
 8298 0150 3B       		.uleb128 0x3b
 8299 0151 05       		.uleb128 0x5
 8300 0152 27       		.uleb128 0x27
 8301 0153 0C       		.uleb128 0xc
 8302 0154 11       		.uleb128 0x11
 8303 0155 01       		.uleb128 0x1
 8304 0156 12       		.uleb128 0x12
 8305 0157 01       		.uleb128 0x1
 8306 0158 40       		.uleb128 0x40
 8307 0159 0A       		.uleb128 0xa
 8308 015a 9742     		.uleb128 0x2117
 8309 015c 0C       		.uleb128 0xc
 8310 015d 01       		.uleb128 0x1
 8311 015e 13       		.uleb128 0x13
 8312 015f 00       		.byte	0
 8313 0160 00       		.byte	0
 8314 0161 1C       		.uleb128 0x1c
 8315 0162 34       		.uleb128 0x34
 8316 0163 00       		.byte	0
 8317 0164 03       		.uleb128 0x3
 8318 0165 08       		.uleb128 0x8
 8319 0166 3A       		.uleb128 0x3a
 8320 0167 0B       		.uleb128 0xb
 8321 0168 3B       		.uleb128 0x3b
 8322 0169 05       		.uleb128 0x5
 8323 016a 49       		.uleb128 0x49
 8324 016b 13       		.uleb128 0x13
 8325 016c 02       		.uleb128 0x2
 8326 016d 0A       		.uleb128 0xa
ARM GAS  /tmp/ccKU0f2P.s 			page 211


 8327 016e 00       		.byte	0
 8328 016f 00       		.byte	0
 8329 0170 1D       		.uleb128 0x1d
 8330 0171 2E       		.uleb128 0x2e
 8331 0172 01       		.byte	0x1
 8332 0173 03       		.uleb128 0x3
 8333 0174 0E       		.uleb128 0xe
 8334 0175 3A       		.uleb128 0x3a
 8335 0176 0B       		.uleb128 0xb
 8336 0177 3B       		.uleb128 0x3b
 8337 0178 05       		.uleb128 0x5
 8338 0179 27       		.uleb128 0x27
 8339 017a 0C       		.uleb128 0xc
 8340 017b 49       		.uleb128 0x49
 8341 017c 13       		.uleb128 0x13
 8342 017d 11       		.uleb128 0x11
 8343 017e 01       		.uleb128 0x1
 8344 017f 12       		.uleb128 0x12
 8345 0180 01       		.uleb128 0x1
 8346 0181 40       		.uleb128 0x40
 8347 0182 06       		.uleb128 0x6
 8348 0183 9742     		.uleb128 0x2117
 8349 0185 0C       		.uleb128 0xc
 8350 0186 01       		.uleb128 0x1
 8351 0187 13       		.uleb128 0x13
 8352 0188 00       		.byte	0
 8353 0189 00       		.byte	0
 8354 018a 1E       		.uleb128 0x1e
 8355 018b 898201   		.uleb128 0x4109
 8356 018e 00       		.byte	0
 8357 018f 11       		.uleb128 0x11
 8358 0190 01       		.uleb128 0x1
 8359 0191 31       		.uleb128 0x31
 8360 0192 13       		.uleb128 0x13
 8361 0193 00       		.byte	0
 8362 0194 00       		.byte	0
 8363 0195 1F       		.uleb128 0x1f
 8364 0196 05       		.uleb128 0x5
 8365 0197 00       		.byte	0
 8366 0198 03       		.uleb128 0x3
 8367 0199 0E       		.uleb128 0xe
 8368 019a 3A       		.uleb128 0x3a
 8369 019b 0B       		.uleb128 0xb
 8370 019c 3B       		.uleb128 0x3b
 8371 019d 05       		.uleb128 0x5
 8372 019e 49       		.uleb128 0x49
 8373 019f 13       		.uleb128 0x13
 8374 01a0 02       		.uleb128 0x2
 8375 01a1 06       		.uleb128 0x6
 8376 01a2 00       		.byte	0
 8377 01a3 00       		.byte	0
 8378 01a4 20       		.uleb128 0x20
 8379 01a5 34       		.uleb128 0x34
 8380 01a6 00       		.byte	0
 8381 01a7 03       		.uleb128 0x3
 8382 01a8 0E       		.uleb128 0xe
 8383 01a9 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccKU0f2P.s 			page 212


 8384 01aa 0B       		.uleb128 0xb
 8385 01ab 3B       		.uleb128 0x3b
 8386 01ac 05       		.uleb128 0x5
 8387 01ad 49       		.uleb128 0x49
 8388 01ae 13       		.uleb128 0x13
 8389 01af 02       		.uleb128 0x2
 8390 01b0 0A       		.uleb128 0xa
 8391 01b1 00       		.byte	0
 8392 01b2 00       		.byte	0
 8393 01b3 21       		.uleb128 0x21
 8394 01b4 0B       		.uleb128 0xb
 8395 01b5 01       		.byte	0x1
 8396 01b6 11       		.uleb128 0x11
 8397 01b7 01       		.uleb128 0x1
 8398 01b8 12       		.uleb128 0x12
 8399 01b9 01       		.uleb128 0x1
 8400 01ba 01       		.uleb128 0x1
 8401 01bb 13       		.uleb128 0x13
 8402 01bc 00       		.byte	0
 8403 01bd 00       		.byte	0
 8404 01be 22       		.uleb128 0x22
 8405 01bf 898201   		.uleb128 0x4109
 8406 01c2 01       		.byte	0x1
 8407 01c3 11       		.uleb128 0x11
 8408 01c4 01       		.uleb128 0x1
 8409 01c5 31       		.uleb128 0x31
 8410 01c6 13       		.uleb128 0x13
 8411 01c7 00       		.byte	0
 8412 01c8 00       		.byte	0
 8413 01c9 23       		.uleb128 0x23
 8414 01ca 8A8201   		.uleb128 0x410a
 8415 01cd 00       		.byte	0
 8416 01ce 02       		.uleb128 0x2
 8417 01cf 0A       		.uleb128 0xa
 8418 01d0 9142     		.uleb128 0x2111
 8419 01d2 0A       		.uleb128 0xa
 8420 01d3 00       		.byte	0
 8421 01d4 00       		.byte	0
 8422 01d5 24       		.uleb128 0x24
 8423 01d6 898201   		.uleb128 0x4109
 8424 01d9 01       		.byte	0x1
 8425 01da 11       		.uleb128 0x11
 8426 01db 01       		.uleb128 0x1
 8427 01dc 31       		.uleb128 0x31
 8428 01dd 13       		.uleb128 0x13
 8429 01de 01       		.uleb128 0x1
 8430 01df 13       		.uleb128 0x13
 8431 01e0 00       		.byte	0
 8432 01e1 00       		.byte	0
 8433 01e2 25       		.uleb128 0x25
 8434 01e3 34       		.uleb128 0x34
 8435 01e4 00       		.byte	0
 8436 01e5 03       		.uleb128 0x3
 8437 01e6 0E       		.uleb128 0xe
 8438 01e7 3A       		.uleb128 0x3a
 8439 01e8 0B       		.uleb128 0xb
 8440 01e9 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccKU0f2P.s 			page 213


 8441 01ea 05       		.uleb128 0x5
 8442 01eb 49       		.uleb128 0x49
 8443 01ec 13       		.uleb128 0x13
 8444 01ed 02       		.uleb128 0x2
 8445 01ee 06       		.uleb128 0x6
 8446 01ef 00       		.byte	0
 8447 01f0 00       		.byte	0
 8448 01f1 26       		.uleb128 0x26
 8449 01f2 2E       		.uleb128 0x2e
 8450 01f3 01       		.byte	0x1
 8451 01f4 31       		.uleb128 0x31
 8452 01f5 13       		.uleb128 0x13
 8453 01f6 11       		.uleb128 0x11
 8454 01f7 01       		.uleb128 0x1
 8455 01f8 12       		.uleb128 0x12
 8456 01f9 01       		.uleb128 0x1
 8457 01fa 40       		.uleb128 0x40
 8458 01fb 0A       		.uleb128 0xa
 8459 01fc 9742     		.uleb128 0x2117
 8460 01fe 0C       		.uleb128 0xc
 8461 01ff 01       		.uleb128 0x1
 8462 0200 13       		.uleb128 0x13
 8463 0201 00       		.byte	0
 8464 0202 00       		.byte	0
 8465 0203 27       		.uleb128 0x27
 8466 0204 05       		.uleb128 0x5
 8467 0205 00       		.byte	0
 8468 0206 31       		.uleb128 0x31
 8469 0207 13       		.uleb128 0x13
 8470 0208 02       		.uleb128 0x2
 8471 0209 06       		.uleb128 0x6
 8472 020a 00       		.byte	0
 8473 020b 00       		.byte	0
 8474 020c 28       		.uleb128 0x28
 8475 020d 2E       		.uleb128 0x2e
 8476 020e 01       		.byte	0x1
 8477 020f 31       		.uleb128 0x31
 8478 0210 13       		.uleb128 0x13
 8479 0211 11       		.uleb128 0x11
 8480 0212 01       		.uleb128 0x1
 8481 0213 12       		.uleb128 0x12
 8482 0214 01       		.uleb128 0x1
 8483 0215 40       		.uleb128 0x40
 8484 0216 06       		.uleb128 0x6
 8485 0217 9742     		.uleb128 0x2117
 8486 0219 0C       		.uleb128 0xc
 8487 021a 01       		.uleb128 0x1
 8488 021b 13       		.uleb128 0x13
 8489 021c 00       		.byte	0
 8490 021d 00       		.byte	0
 8491 021e 29       		.uleb128 0x29
 8492 021f 05       		.uleb128 0x5
 8493 0220 00       		.byte	0
 8494 0221 31       		.uleb128 0x31
 8495 0222 13       		.uleb128 0x13
 8496 0223 02       		.uleb128 0x2
 8497 0224 0A       		.uleb128 0xa
ARM GAS  /tmp/ccKU0f2P.s 			page 214


 8498 0225 00       		.byte	0
 8499 0226 00       		.byte	0
 8500 0227 2A       		.uleb128 0x2a
 8501 0228 34       		.uleb128 0x34
 8502 0229 00       		.byte	0
 8503 022a 31       		.uleb128 0x31
 8504 022b 13       		.uleb128 0x13
 8505 022c 00       		.byte	0
 8506 022d 00       		.byte	0
 8507 022e 2B       		.uleb128 0x2b
 8508 022f 34       		.uleb128 0x34
 8509 0230 00       		.byte	0
 8510 0231 31       		.uleb128 0x31
 8511 0232 13       		.uleb128 0x13
 8512 0233 02       		.uleb128 0x2
 8513 0234 06       		.uleb128 0x6
 8514 0235 00       		.byte	0
 8515 0236 00       		.byte	0
 8516 0237 2C       		.uleb128 0x2c
 8517 0238 05       		.uleb128 0x5
 8518 0239 00       		.byte	0
 8519 023a 31       		.uleb128 0x31
 8520 023b 13       		.uleb128 0x13
 8521 023c 00       		.byte	0
 8522 023d 00       		.byte	0
 8523 023e 2D       		.uleb128 0x2d
 8524 023f 2E       		.uleb128 0x2e
 8525 0240 01       		.byte	0x1
 8526 0241 3F       		.uleb128 0x3f
 8527 0242 0C       		.uleb128 0xc
 8528 0243 03       		.uleb128 0x3
 8529 0244 0E       		.uleb128 0xe
 8530 0245 3A       		.uleb128 0x3a
 8531 0246 0B       		.uleb128 0xb
 8532 0247 3B       		.uleb128 0x3b
 8533 0248 05       		.uleb128 0x5
 8534 0249 27       		.uleb128 0x27
 8535 024a 0C       		.uleb128 0xc
 8536 024b 49       		.uleb128 0x49
 8537 024c 13       		.uleb128 0x13
 8538 024d 11       		.uleb128 0x11
 8539 024e 01       		.uleb128 0x1
 8540 024f 12       		.uleb128 0x12
 8541 0250 01       		.uleb128 0x1
 8542 0251 40       		.uleb128 0x40
 8543 0252 0A       		.uleb128 0xa
 8544 0253 9742     		.uleb128 0x2117
 8545 0255 0C       		.uleb128 0xc
 8546 0256 01       		.uleb128 0x1
 8547 0257 13       		.uleb128 0x13
 8548 0258 00       		.byte	0
 8549 0259 00       		.byte	0
 8550 025a 2E       		.uleb128 0x2e
 8551 025b 2E       		.uleb128 0x2e
 8552 025c 01       		.byte	0x1
 8553 025d 3F       		.uleb128 0x3f
 8554 025e 0C       		.uleb128 0xc
ARM GAS  /tmp/ccKU0f2P.s 			page 215


 8555 025f 03       		.uleb128 0x3
 8556 0260 0E       		.uleb128 0xe
 8557 0261 3A       		.uleb128 0x3a
 8558 0262 0B       		.uleb128 0xb
 8559 0263 3B       		.uleb128 0x3b
 8560 0264 05       		.uleb128 0x5
 8561 0265 27       		.uleb128 0x27
 8562 0266 0C       		.uleb128 0xc
 8563 0267 49       		.uleb128 0x49
 8564 0268 13       		.uleb128 0x13
 8565 0269 11       		.uleb128 0x11
 8566 026a 01       		.uleb128 0x1
 8567 026b 12       		.uleb128 0x12
 8568 026c 01       		.uleb128 0x1
 8569 026d 40       		.uleb128 0x40
 8570 026e 06       		.uleb128 0x6
 8571 026f 9742     		.uleb128 0x2117
 8572 0271 0C       		.uleb128 0xc
 8573 0272 01       		.uleb128 0x1
 8574 0273 13       		.uleb128 0x13
 8575 0274 00       		.byte	0
 8576 0275 00       		.byte	0
 8577 0276 2F       		.uleb128 0x2f
 8578 0277 05       		.uleb128 0x5
 8579 0278 00       		.byte	0
 8580 0279 31       		.uleb128 0x31
 8581 027a 13       		.uleb128 0x13
 8582 027b 1C       		.uleb128 0x1c
 8583 027c 0B       		.uleb128 0xb
 8584 027d 00       		.byte	0
 8585 027e 00       		.byte	0
 8586 027f 30       		.uleb128 0x30
 8587 0280 0B       		.uleb128 0xb
 8588 0281 01       		.byte	0x1
 8589 0282 55       		.uleb128 0x55
 8590 0283 06       		.uleb128 0x6
 8591 0284 01       		.uleb128 0x1
 8592 0285 13       		.uleb128 0x13
 8593 0286 00       		.byte	0
 8594 0287 00       		.byte	0
 8595 0288 31       		.uleb128 0x31
 8596 0289 898201   		.uleb128 0x4109
 8597 028c 00       		.byte	0
 8598 028d 11       		.uleb128 0x11
 8599 028e 01       		.uleb128 0x1
 8600 028f 9542     		.uleb128 0x2115
 8601 0291 0C       		.uleb128 0xc
 8602 0292 31       		.uleb128 0x31
 8603 0293 13       		.uleb128 0x13
 8604 0294 00       		.byte	0
 8605 0295 00       		.byte	0
 8606 0296 32       		.uleb128 0x32
 8607 0297 2E       		.uleb128 0x2e
 8608 0298 01       		.byte	0x1
 8609 0299 3F       		.uleb128 0x3f
 8610 029a 0C       		.uleb128 0xc
 8611 029b 03       		.uleb128 0x3
ARM GAS  /tmp/ccKU0f2P.s 			page 216


 8612 029c 0E       		.uleb128 0xe
 8613 029d 3A       		.uleb128 0x3a
 8614 029e 0B       		.uleb128 0xb
 8615 029f 3B       		.uleb128 0x3b
 8616 02a0 0B       		.uleb128 0xb
 8617 02a1 27       		.uleb128 0x27
 8618 02a2 0C       		.uleb128 0xc
 8619 02a3 49       		.uleb128 0x49
 8620 02a4 13       		.uleb128 0x13
 8621 02a5 3C       		.uleb128 0x3c
 8622 02a6 0C       		.uleb128 0xc
 8623 02a7 01       		.uleb128 0x1
 8624 02a8 13       		.uleb128 0x13
 8625 02a9 00       		.byte	0
 8626 02aa 00       		.byte	0
 8627 02ab 33       		.uleb128 0x33
 8628 02ac 05       		.uleb128 0x5
 8629 02ad 00       		.byte	0
 8630 02ae 49       		.uleb128 0x49
 8631 02af 13       		.uleb128 0x13
 8632 02b0 00       		.byte	0
 8633 02b1 00       		.byte	0
 8634 02b2 34       		.uleb128 0x34
 8635 02b3 2E       		.uleb128 0x2e
 8636 02b4 00       		.byte	0
 8637 02b5 3F       		.uleb128 0x3f
 8638 02b6 0C       		.uleb128 0xc
 8639 02b7 03       		.uleb128 0x3
 8640 02b8 0E       		.uleb128 0xe
 8641 02b9 3A       		.uleb128 0x3a
 8642 02ba 0B       		.uleb128 0xb
 8643 02bb 3B       		.uleb128 0x3b
 8644 02bc 0B       		.uleb128 0xb
 8645 02bd 27       		.uleb128 0x27
 8646 02be 0C       		.uleb128 0xc
 8647 02bf 49       		.uleb128 0x49
 8648 02c0 13       		.uleb128 0x13
 8649 02c1 3C       		.uleb128 0x3c
 8650 02c2 0C       		.uleb128 0xc
 8651 02c3 00       		.byte	0
 8652 02c4 00       		.byte	0
 8653 02c5 00       		.byte	0
 8654              		.section	.debug_loc,"",%progbits
 8655              	.Ldebug_loc0:
 8656              	.LLST0:
 8657 0000 00000000 		.4byte	.LFB0
 8658 0004 02000000 		.4byte	.LCFI0
 8659 0008 0200     		.2byte	0x2
 8660 000a 7D       		.byte	0x7d
 8661 000b 00       		.sleb128 0
 8662 000c 02000000 		.4byte	.LCFI0
 8663 0010 12000000 		.4byte	.LFE0
 8664 0014 0200     		.2byte	0x2
 8665 0016 7D       		.byte	0x7d
 8666 0017 08       		.sleb128 8
 8667 0018 00000000 		.4byte	0
 8668 001c 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 217


 8669              	.LLST1:
 8670 0020 00000000 		.4byte	.LVL0
 8671 0024 04000000 		.4byte	.LVL1
 8672 0028 0100     		.2byte	0x1
 8673 002a 52       		.byte	0x52
 8674 002b 00000000 		.4byte	0
 8675 002f 00000000 		.4byte	0
 8676              	.LLST2:
 8677 0033 00000000 		.4byte	.LVL0
 8678 0037 04000000 		.4byte	.LVL1
 8679 003b 0100     		.2byte	0x1
 8680 003d 50       		.byte	0x50
 8681 003e 00000000 		.4byte	0
 8682 0042 00000000 		.4byte	0
 8683              	.LLST3:
 8684 0046 00000000 		.4byte	.LVL0
 8685 004a 04000000 		.4byte	.LVL1
 8686 004e 0100     		.2byte	0x1
 8687 0050 51       		.byte	0x51
 8688 0051 00000000 		.4byte	0
 8689 0055 00000000 		.4byte	0
 8690              	.LLST4:
 8691 0059 00000000 		.4byte	.LVL2
 8692 005d 02000000 		.4byte	.LVL3
 8693 0061 0100     		.2byte	0x1
 8694 0063 50       		.byte	0x50
 8695 0064 02000000 		.4byte	.LVL3
 8696 0068 0E000000 		.4byte	.LFE1
 8697 006c 0400     		.2byte	0x4
 8698 006e F3       		.byte	0xf3
 8699 006f 01       		.uleb128 0x1
 8700 0070 50       		.byte	0x50
 8701 0071 9F       		.byte	0x9f
 8702 0072 00000000 		.4byte	0
 8703 0076 00000000 		.4byte	0
 8704              	.LLST5:
 8705 007a 00000000 		.4byte	.LVL2
 8706 007e 02000000 		.4byte	.LVL3
 8707 0082 0100     		.2byte	0x1
 8708 0084 52       		.byte	0x52
 8709 0085 00000000 		.4byte	0
 8710 0089 00000000 		.4byte	0
 8711              	.LLST6:
 8712 008d 00000000 		.4byte	.LFB17
 8713 0091 04000000 		.4byte	.LCFI1
 8714 0095 0200     		.2byte	0x2
 8715 0097 7D       		.byte	0x7d
 8716 0098 00       		.sleb128 0
 8717 0099 04000000 		.4byte	.LCFI1
 8718 009d 82000000 		.4byte	.LFE17
 8719 00a1 0200     		.2byte	0x2
 8720 00a3 7D       		.byte	0x7d
 8721 00a4 0C       		.sleb128 12
 8722 00a5 00000000 		.4byte	0
 8723 00a9 00000000 		.4byte	0
 8724              	.LLST7:
 8725 00ad 00000000 		.4byte	.LVL5
ARM GAS  /tmp/ccKU0f2P.s 			page 218


 8726 00b1 12000000 		.4byte	.LVL8
 8727 00b5 0100     		.2byte	0x1
 8728 00b7 50       		.byte	0x50
 8729 00b8 12000000 		.4byte	.LVL8
 8730 00bc 82000000 		.4byte	.LFE17
 8731 00c0 0400     		.2byte	0x4
 8732 00c2 F3       		.byte	0xf3
 8733 00c3 01       		.uleb128 0x1
 8734 00c4 50       		.byte	0x50
 8735 00c5 9F       		.byte	0x9f
 8736 00c6 00000000 		.4byte	0
 8737 00ca 00000000 		.4byte	0
 8738              	.LLST8:
 8739 00ce 00000000 		.4byte	.LVL5
 8740 00d2 7E000000 		.4byte	.LVL22
 8741 00d6 0100     		.2byte	0x1
 8742 00d8 51       		.byte	0x51
 8743 00d9 7E000000 		.4byte	.LVL22
 8744 00dd 82000000 		.4byte	.LFE17
 8745 00e1 0400     		.2byte	0x4
 8746 00e3 F3       		.byte	0xf3
 8747 00e4 01       		.uleb128 0x1
 8748 00e5 51       		.byte	0x51
 8749 00e6 9F       		.byte	0x9f
 8750 00e7 00000000 		.4byte	0
 8751 00eb 00000000 		.4byte	0
 8752              	.LLST9:
 8753 00ef 0E000000 		.4byte	.LVL7
 8754 00f3 12000000 		.4byte	.LVL8
 8755 00f7 0200     		.2byte	0x2
 8756 00f9 30       		.byte	0x30
 8757 00fa 9F       		.byte	0x9f
 8758 00fb 2A000000 		.4byte	.LVL12
 8759 00ff 2C000000 		.4byte	.LVL13
 8760 0103 0100     		.2byte	0x1
 8761 0105 54       		.byte	0x54
 8762 0106 38000000 		.4byte	.LVL14
 8763 010a 3A000000 		.4byte	.LVL15
 8764 010e 0200     		.2byte	0x2
 8765 0110 38       		.byte	0x38
 8766 0111 9F       		.byte	0x9f
 8767 0112 4C000000 		.4byte	.LVL18
 8768 0116 4E000000 		.4byte	.LVL19
 8769 011a 0100     		.2byte	0x1
 8770 011c 54       		.byte	0x54
 8771 011d 00000000 		.4byte	0
 8772 0121 00000000 		.4byte	0
 8773              	.LLST10:
 8774 0125 0E000000 		.4byte	.LVL7
 8775 0129 76000000 		.4byte	.LVL20
 8776 012d 0200     		.2byte	0x2
 8777 012f 73       		.byte	0x73
 8778 0130 0C       		.sleb128 12
 8779 0131 76000000 		.4byte	.LVL20
 8780 0135 7C000000 		.4byte	.LVL21
 8781 0139 0800     		.2byte	0x8
 8782 013b F3       		.byte	0xf3
ARM GAS  /tmp/ccKU0f2P.s 			page 219


 8783 013c 01       		.uleb128 0x1
 8784 013d 50       		.byte	0x50
 8785 013e 23       		.byte	0x23
 8786 013f 14       		.uleb128 0x14
 8787 0140 06       		.byte	0x6
 8788 0141 23       		.byte	0x23
 8789 0142 0C       		.uleb128 0xc
 8790 0143 00000000 		.4byte	0
 8791 0147 00000000 		.4byte	0
 8792              	.LLST11:
 8793 014b 0E000000 		.4byte	.LVL7
 8794 014f 76000000 		.4byte	.LVL20
 8795 0153 0100     		.2byte	0x1
 8796 0155 53       		.byte	0x53
 8797 0156 76000000 		.4byte	.LVL20
 8798 015a 7C000000 		.4byte	.LVL21
 8799 015e 0500     		.2byte	0x5
 8800 0160 F3       		.byte	0xf3
 8801 0161 01       		.uleb128 0x1
 8802 0162 50       		.byte	0x50
 8803 0163 23       		.byte	0x23
 8804 0164 14       		.uleb128 0x14
 8805 0165 00000000 		.4byte	0
 8806 0169 00000000 		.4byte	0
 8807              	.LLST12:
 8808 016d 08000000 		.4byte	.LVL6
 8809 0171 12000000 		.4byte	.LVL8
 8810 0175 0100     		.2byte	0x1
 8811 0177 52       		.byte	0x52
 8812 0178 12000000 		.4byte	.LVL8
 8813 017c 24000000 		.4byte	.LVL10
 8814 0180 0100     		.2byte	0x1
 8815 0182 50       		.byte	0x50
 8816 0183 24000000 		.4byte	.LVL10
 8817 0187 2A000000 		.4byte	.LVL12
 8818 018b 0100     		.2byte	0x1
 8819 018d 52       		.byte	0x52
 8820 018e 2A000000 		.4byte	.LVL12
 8821 0192 3A000000 		.4byte	.LVL15
 8822 0196 0100     		.2byte	0x1
 8823 0198 50       		.byte	0x50
 8824 0199 4C000000 		.4byte	.LVL18
 8825 019d 4E000000 		.4byte	.LVL19
 8826 01a1 0100     		.2byte	0x1
 8827 01a3 50       		.byte	0x50
 8828 01a4 4E000000 		.4byte	.LVL19
 8829 01a8 82000000 		.4byte	.LFE17
 8830 01ac 0100     		.2byte	0x1
 8831 01ae 52       		.byte	0x52
 8832 01af 00000000 		.4byte	0
 8833 01b3 00000000 		.4byte	0
 8834              	.LLST13:
 8835 01b7 14000000 		.4byte	.LVL9
 8836 01bb 26000000 		.4byte	.LVL11
 8837 01bf 0500     		.2byte	0x5
 8838 01c1 73       		.byte	0x73
 8839 01c2 00       		.sleb128 0
ARM GAS  /tmp/ccKU0f2P.s 			page 220


 8840 01c3 74       		.byte	0x74
 8841 01c4 00       		.sleb128 0
 8842 01c5 22       		.byte	0x22
 8843 01c6 26000000 		.4byte	.LVL11
 8844 01ca 2C000000 		.4byte	.LVL13
 8845 01ce 0700     		.2byte	0x7
 8846 01d0 73       		.byte	0x73
 8847 01d1 00       		.sleb128 0
 8848 01d2 74       		.byte	0x74
 8849 01d3 00       		.sleb128 0
 8850 01d4 22       		.byte	0x22
 8851 01d5 31       		.byte	0x31
 8852 01d6 1C       		.byte	0x1c
 8853 01d7 3C000000 		.4byte	.LVL16
 8854 01db 48000000 		.4byte	.LVL17
 8855 01df 0500     		.2byte	0x5
 8856 01e1 73       		.byte	0x73
 8857 01e2 00       		.sleb128 0
 8858 01e3 74       		.byte	0x74
 8859 01e4 00       		.sleb128 0
 8860 01e5 22       		.byte	0x22
 8861 01e6 48000000 		.4byte	.LVL17
 8862 01ea 4E000000 		.4byte	.LVL19
 8863 01ee 0700     		.2byte	0x7
 8864 01f0 73       		.byte	0x73
 8865 01f1 00       		.sleb128 0
 8866 01f2 74       		.byte	0x74
 8867 01f3 00       		.sleb128 0
 8868 01f4 22       		.byte	0x22
 8869 01f5 31       		.byte	0x31
 8870 01f6 1C       		.byte	0x1c
 8871 01f7 00000000 		.4byte	0
 8872 01fb 00000000 		.4byte	0
 8873              	.LLST14:
 8874 01ff 00000000 		.4byte	.LFB21
 8875 0203 02000000 		.4byte	.LCFI2
 8876 0207 0200     		.2byte	0x2
 8877 0209 7D       		.byte	0x7d
 8878 020a 00       		.sleb128 0
 8879 020b 02000000 		.4byte	.LCFI2
 8880 020f 24000000 		.4byte	.LFE21
 8881 0213 0200     		.2byte	0x2
 8882 0215 7D       		.byte	0x7d
 8883 0216 08       		.sleb128 8
 8884 0217 00000000 		.4byte	0
 8885 021b 00000000 		.4byte	0
 8886              	.LLST15:
 8887 021f 00000000 		.4byte	.LVL23
 8888 0223 10000000 		.4byte	.LVL24
 8889 0227 0100     		.2byte	0x1
 8890 0229 50       		.byte	0x50
 8891 022a 10000000 		.4byte	.LVL24
 8892 022e 20000000 		.4byte	.LVL26
 8893 0232 0400     		.2byte	0x4
 8894 0234 F3       		.byte	0xf3
 8895 0235 01       		.uleb128 0x1
 8896 0236 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 221


 8897 0237 9F       		.byte	0x9f
 8898 0238 20000000 		.4byte	.LVL26
 8899 023c 22000000 		.4byte	.LVL27
 8900 0240 0100     		.2byte	0x1
 8901 0242 50       		.byte	0x50
 8902 0243 22000000 		.4byte	.LVL27
 8903 0247 24000000 		.4byte	.LFE21
 8904 024b 0400     		.2byte	0x4
 8905 024d F3       		.byte	0xf3
 8906 024e 01       		.uleb128 0x1
 8907 024f 50       		.byte	0x50
 8908 0250 9F       		.byte	0x9f
 8909 0251 00000000 		.4byte	0
 8910 0255 00000000 		.4byte	0
 8911              	.LLST16:
 8912 0259 00000000 		.4byte	.LVL23
 8913 025d 13000000 		.4byte	.LVL25-1
 8914 0261 0100     		.2byte	0x1
 8915 0263 51       		.byte	0x51
 8916 0264 13000000 		.4byte	.LVL25-1
 8917 0268 20000000 		.4byte	.LVL26
 8918 026c 0400     		.2byte	0x4
 8919 026e F3       		.byte	0xf3
 8920 026f 01       		.uleb128 0x1
 8921 0270 51       		.byte	0x51
 8922 0271 9F       		.byte	0x9f
 8923 0272 20000000 		.4byte	.LVL26
 8924 0276 24000000 		.4byte	.LFE21
 8925 027a 0100     		.2byte	0x1
 8926 027c 51       		.byte	0x51
 8927 027d 00000000 		.4byte	0
 8928 0281 00000000 		.4byte	0
 8929              	.LLST17:
 8930 0285 00000000 		.4byte	.LFB4
 8931 0289 04000000 		.4byte	.LCFI3
 8932 028d 0200     		.2byte	0x2
 8933 028f 7D       		.byte	0x7d
 8934 0290 00       		.sleb128 0
 8935 0291 04000000 		.4byte	.LCFI3
 8936 0295 76000000 		.4byte	.LFE4
 8937 0299 0200     		.2byte	0x2
 8938 029b 7D       		.byte	0x7d
 8939 029c 18       		.sleb128 24
 8940 029d 00000000 		.4byte	0
 8941 02a1 00000000 		.4byte	0
 8942              	.LLST18:
 8943 02a5 00000000 		.4byte	.LVL28
 8944 02a9 0E000000 		.4byte	.LVL30
 8945 02ad 0100     		.2byte	0x1
 8946 02af 50       		.byte	0x50
 8947 02b0 0E000000 		.4byte	.LVL30
 8948 02b4 14000000 		.4byte	.LVL31
 8949 02b8 0100     		.2byte	0x1
 8950 02ba 54       		.byte	0x54
 8951 02bb 14000000 		.4byte	.LVL31
 8952 02bf 18000000 		.4byte	.LVL32
 8953 02c3 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 222


 8954 02c5 50       		.byte	0x50
 8955 02c6 18000000 		.4byte	.LVL32
 8956 02ca 1E000000 		.4byte	.LVL33
 8957 02ce 0100     		.2byte	0x1
 8958 02d0 54       		.byte	0x54
 8959 02d1 1E000000 		.4byte	.LVL33
 8960 02d5 26000000 		.4byte	.LVL35
 8961 02d9 0100     		.2byte	0x1
 8962 02db 50       		.byte	0x50
 8963 02dc 26000000 		.4byte	.LVL35
 8964 02e0 76000000 		.4byte	.LFE4
 8965 02e4 0100     		.2byte	0x1
 8966 02e6 54       		.byte	0x54
 8967 02e7 00000000 		.4byte	0
 8968 02eb 00000000 		.4byte	0
 8969              	.LLST19:
 8970 02ef 00000000 		.4byte	.LVL28
 8971 02f3 0E000000 		.4byte	.LVL30
 8972 02f7 0100     		.2byte	0x1
 8973 02f9 51       		.byte	0x51
 8974 02fa 0E000000 		.4byte	.LVL30
 8975 02fe 14000000 		.4byte	.LVL31
 8976 0302 0100     		.2byte	0x1
 8977 0304 56       		.byte	0x56
 8978 0305 14000000 		.4byte	.LVL31
 8979 0309 18000000 		.4byte	.LVL32
 8980 030d 0100     		.2byte	0x1
 8981 030f 51       		.byte	0x51
 8982 0310 18000000 		.4byte	.LVL32
 8983 0314 1E000000 		.4byte	.LVL33
 8984 0318 0100     		.2byte	0x1
 8985 031a 56       		.byte	0x56
 8986 031b 1E000000 		.4byte	.LVL33
 8987 031f 24000000 		.4byte	.LVL34
 8988 0323 0100     		.2byte	0x1
 8989 0325 51       		.byte	0x51
 8990 0326 24000000 		.4byte	.LVL34
 8991 032a 76000000 		.4byte	.LFE4
 8992 032e 0100     		.2byte	0x1
 8993 0330 56       		.byte	0x56
 8994 0331 00000000 		.4byte	0
 8995 0335 00000000 		.4byte	0
 8996              	.LLST20:
 8997 0339 44000000 		.4byte	.LVL37
 8998 033d 56000000 		.4byte	.LVL39
 8999 0341 0100     		.2byte	0x1
 9000 0343 57       		.byte	0x57
 9001 0344 56000000 		.4byte	.LVL39
 9002 0348 5C000000 		.4byte	.LVL41
 9003 034c 0300     		.2byte	0x3
 9004 034e 77       		.byte	0x77
 9005 034f 01       		.sleb128 1
 9006 0350 9F       		.byte	0x9f
 9007 0351 5C000000 		.4byte	.LVL41
 9008 0355 5E000000 		.4byte	.LVL42
 9009 0359 0100     		.2byte	0x1
 9010 035b 57       		.byte	0x57
ARM GAS  /tmp/ccKU0f2P.s 			page 223


 9011 035c 00000000 		.4byte	0
 9012 0360 00000000 		.4byte	0
 9013              	.LLST21:
 9014 0364 00000000 		.4byte	.LFB19
 9015 0368 02000000 		.4byte	.LCFI4
 9016 036c 0200     		.2byte	0x2
 9017 036e 7D       		.byte	0x7d
 9018 036f 00       		.sleb128 0
 9019 0370 02000000 		.4byte	.LCFI4
 9020 0374 88000000 		.4byte	.LFE19
 9021 0378 0200     		.2byte	0x2
 9022 037a 7D       		.byte	0x7d
 9023 037b 08       		.sleb128 8
 9024 037c 00000000 		.4byte	0
 9025 0380 00000000 		.4byte	0
 9026              	.LLST22:
 9027 0384 00000000 		.4byte	.LVL44
 9028 0388 08000000 		.4byte	.LVL45
 9029 038c 0100     		.2byte	0x1
 9030 038e 50       		.byte	0x50
 9031 038f 08000000 		.4byte	.LVL45
 9032 0393 88000000 		.4byte	.LFE19
 9033 0397 0100     		.2byte	0x1
 9034 0399 54       		.byte	0x54
 9035 039a 00000000 		.4byte	0
 9036 039e 00000000 		.4byte	0
 9037              	.LLST23:
 9038 03a2 00000000 		.4byte	.LVL44
 9039 03a6 0C000000 		.4byte	.LVL46
 9040 03aa 0100     		.2byte	0x1
 9041 03ac 51       		.byte	0x51
 9042 03ad 0C000000 		.4byte	.LVL46
 9043 03b1 11000000 		.4byte	.LVL47-1
 9044 03b5 0100     		.2byte	0x1
 9045 03b7 52       		.byte	0x52
 9046 03b8 11000000 		.4byte	.LVL47-1
 9047 03bc 88000000 		.4byte	.LFE19
 9048 03c0 0400     		.2byte	0x4
 9049 03c2 F3       		.byte	0xf3
 9050 03c3 01       		.uleb128 0x1
 9051 03c4 51       		.byte	0x51
 9052 03c5 9F       		.byte	0x9f
 9053 03c6 00000000 		.4byte	0
 9054 03ca 00000000 		.4byte	0
 9055              	.LLST24:
 9056 03ce 00000000 		.4byte	.LFB20
 9057 03d2 04000000 		.4byte	.LCFI5
 9058 03d6 0200     		.2byte	0x2
 9059 03d8 7D       		.byte	0x7d
 9060 03d9 00       		.sleb128 0
 9061 03da 04000000 		.4byte	.LCFI5
 9062 03de 08030000 		.4byte	.LFE20
 9063 03e2 0200     		.2byte	0x2
 9064 03e4 7D       		.byte	0x7d
 9065 03e5 18       		.sleb128 24
 9066 03e6 00000000 		.4byte	0
 9067 03ea 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 224


 9068              	.LLST25:
 9069 03ee 00000000 		.4byte	.LVL48
 9070 03f2 12000000 		.4byte	.LVL52
 9071 03f6 0100     		.2byte	0x1
 9072 03f8 50       		.byte	0x50
 9073 03f9 12000000 		.4byte	.LVL52
 9074 03fd 1A000000 		.4byte	.LVL54
 9075 0401 0400     		.2byte	0x4
 9076 0403 F3       		.byte	0xf3
 9077 0404 01       		.uleb128 0x1
 9078 0405 50       		.byte	0x50
 9079 0406 9F       		.byte	0x9f
 9080 0407 1A000000 		.4byte	.LVL54
 9081 040b 2A000000 		.4byte	.LVL57
 9082 040f 0100     		.2byte	0x1
 9083 0411 50       		.byte	0x50
 9084 0412 2A000000 		.4byte	.LVL57
 9085 0416 08030000 		.4byte	.LFE20
 9086 041a 0400     		.2byte	0x4
 9087 041c F3       		.byte	0xf3
 9088 041d 01       		.uleb128 0x1
 9089 041e 50       		.byte	0x50
 9090 041f 9F       		.byte	0x9f
 9091 0420 00000000 		.4byte	0
 9092 0424 00000000 		.4byte	0
 9093              	.LLST26:
 9094 0428 00000000 		.4byte	.LVL48
 9095 042c 30000000 		.4byte	.LVL59
 9096 0430 0100     		.2byte	0x1
 9097 0432 51       		.byte	0x51
 9098 0433 30000000 		.4byte	.LVL59
 9099 0437 D4020000 		.4byte	.LVL111
 9100 043b 0400     		.2byte	0x4
 9101 043d F3       		.byte	0xf3
 9102 043e 01       		.uleb128 0x1
 9103 043f 51       		.byte	0x51
 9104 0440 9F       		.byte	0x9f
 9105 0441 D4020000 		.4byte	.LVL111
 9106 0445 DA020000 		.4byte	.LVL112
 9107 0449 0100     		.2byte	0x1
 9108 044b 51       		.byte	0x51
 9109 044c DA020000 		.4byte	.LVL112
 9110 0450 08030000 		.4byte	.LFE20
 9111 0454 0400     		.2byte	0x4
 9112 0456 F3       		.byte	0xf3
 9113 0457 01       		.uleb128 0x1
 9114 0458 51       		.byte	0x51
 9115 0459 9F       		.byte	0x9f
 9116 045a 00000000 		.4byte	0
 9117 045e 00000000 		.4byte	0
 9118              	.LLST27:
 9119 0462 00000000 		.4byte	.LVL48
 9120 0466 0A000000 		.4byte	.LVL50
 9121 046a 0100     		.2byte	0x1
 9122 046c 52       		.byte	0x52
 9123 046d 0A000000 		.4byte	.LVL50
 9124 0471 08030000 		.4byte	.LFE20
ARM GAS  /tmp/ccKU0f2P.s 			page 225


 9125 0475 0400     		.2byte	0x4
 9126 0477 F3       		.byte	0xf3
 9127 0478 01       		.uleb128 0x1
 9128 0479 52       		.byte	0x52
 9129 047a 9F       		.byte	0x9f
 9130 047b 00000000 		.4byte	0
 9131 047f 00000000 		.4byte	0
 9132              	.LLST28:
 9133 0483 7A000000 		.4byte	.LVL65
 9134 0487 82000000 		.4byte	.LVL67
 9135 048b 0100     		.2byte	0x1
 9136 048d 50       		.byte	0x50
 9137 048e AE000000 		.4byte	.LVL71
 9138 0492 C4000000 		.4byte	.LVL74
 9139 0496 0100     		.2byte	0x1
 9140 0498 50       		.byte	0x50
 9141 0499 7A010000 		.4byte	.LVL94
 9142 049d 82010000 		.4byte	.LVL96
 9143 04a1 0200     		.2byte	0x2
 9144 04a3 31       		.byte	0x31
 9145 04a4 9F       		.byte	0x9f
 9146 04a5 82010000 		.4byte	.LVL96
 9147 04a9 90010000 		.4byte	.LVL97
 9148 04ad 0200     		.2byte	0x2
 9149 04af 32       		.byte	0x32
 9150 04b0 9F       		.byte	0x9f
 9151 04b1 90010000 		.4byte	.LVL97
 9152 04b5 92010000 		.4byte	.LVL98
 9153 04b9 0200     		.2byte	0x2
 9154 04bb 31       		.byte	0x31
 9155 04bc 9F       		.byte	0x9f
 9156 04bd 92010000 		.4byte	.LVL98
 9157 04c1 D4020000 		.4byte	.LVL111
 9158 04c5 0100     		.2byte	0x1
 9159 04c7 55       		.byte	0x55
 9160 04c8 EC020000 		.4byte	.LVL118
 9161 04cc EE020000 		.4byte	.LVL119
 9162 04d0 0100     		.2byte	0x1
 9163 04d2 50       		.byte	0x50
 9164 04d3 00000000 		.4byte	0
 9165 04d7 00000000 		.4byte	0
 9166              	.LLST29:
 9167 04db FC000000 		.4byte	.LVL80
 9168 04df 0A010000 		.4byte	.LVL82
 9169 04e3 0300     		.2byte	0x3
 9170 04e5 74       		.byte	0x74
 9171 04e6 C000     		.sleb128 64
 9172 04e8 0A010000 		.4byte	.LVL82
 9173 04ec 23020000 		.4byte	.LVL110-1
 9174 04f0 0200     		.2byte	0x2
 9175 04f2 74       		.byte	0x74
 9176 04f3 3D       		.sleb128 61
 9177 04f4 00000000 		.4byte	0
 9178 04f8 00000000 		.4byte	0
 9179              	.LLST30:
 9180 04fc 7E000000 		.4byte	.LVL66
 9181 0500 84000000 		.4byte	.LVL68
ARM GAS  /tmp/ccKU0f2P.s 			page 226


 9182 0504 0200     		.2byte	0x2
 9183 0506 30       		.byte	0x30
 9184 0507 9F       		.byte	0x9f
 9185 0508 8A000000 		.4byte	.LVL69
 9186 050c B0000000 		.4byte	.LVL72
 9187 0510 0200     		.2byte	0x2
 9188 0512 30       		.byte	0x30
 9189 0513 9F       		.byte	0x9f
 9190 0514 00000000 		.4byte	0
 9191 0518 00000000 		.4byte	0
 9192              	.LLST31:
 9193 051c 7E000000 		.4byte	.LVL66
 9194 0520 84000000 		.4byte	.LVL68
 9195 0524 0400     		.2byte	0x4
 9196 0526 74       		.byte	0x74
 9197 0527 EE03     		.sleb128 494
 9198 0529 9F       		.byte	0x9f
 9199 052a 8A000000 		.4byte	.LVL69
 9200 052e B0000000 		.4byte	.LVL72
 9201 0532 0400     		.2byte	0x4
 9202 0534 74       		.byte	0x74
 9203 0535 EE03     		.sleb128 494
 9204 0537 9F       		.byte	0x9f
 9205 0538 00000000 		.4byte	0
 9206 053c 00000000 		.4byte	0
 9207              	.LLST32:
 9208 0540 0C000000 		.4byte	.LVL51
 9209 0544 37000000 		.4byte	.LVL60-1
 9210 0548 0100     		.2byte	0x1
 9211 054a 52       		.byte	0x52
 9212 054b D4020000 		.4byte	.LVL111
 9213 054f DA020000 		.4byte	.LVL112
 9214 0553 0100     		.2byte	0x1
 9215 0555 52       		.byte	0x52
 9216 0556 00000000 		.4byte	0
 9217 055a 00000000 		.4byte	0
 9218              	.LLST33:
 9219 055e 38000000 		.4byte	.LVL60
 9220 0562 48000000 		.4byte	.LVL61
 9221 0566 0100     		.2byte	0x1
 9222 0568 50       		.byte	0x50
 9223 0569 5E000000 		.4byte	.LVL62
 9224 056d 76000000 		.4byte	.LVL64
 9225 0571 0100     		.2byte	0x1
 9226 0573 50       		.byte	0x50
 9227 0574 DA020000 		.4byte	.LVL112
 9228 0578 DC020000 		.4byte	.LVL113
 9229 057c 0100     		.2byte	0x1
 9230 057e 50       		.byte	0x50
 9231 057f E0020000 		.4byte	.LVL114
 9232 0583 E2020000 		.4byte	.LVL115
 9233 0587 0100     		.2byte	0x1
 9234 0589 50       		.byte	0x50
 9235 058a E6020000 		.4byte	.LVL116
 9236 058e E8020000 		.4byte	.LVL117
 9237 0592 0100     		.2byte	0x1
 9238 0594 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 227


 9239 0595 00000000 		.4byte	0
 9240 0599 00000000 		.4byte	0
 9241              	.LLST34:
 9242 059d 72000000 		.4byte	.LVL63
 9243 05a1 84000000 		.4byte	.LVL68
 9244 05a5 0200     		.2byte	0x2
 9245 05a7 30       		.byte	0x30
 9246 05a8 9F       		.byte	0x9f
 9247 05a9 8A000000 		.4byte	.LVL69
 9248 05ad A6000000 		.4byte	.LVL70
 9249 05b1 0200     		.2byte	0x2
 9250 05b3 30       		.byte	0x30
 9251 05b4 9F       		.byte	0x9f
 9252 05b5 A6000000 		.4byte	.LVL70
 9253 05b9 B0000000 		.4byte	.LVL72
 9254 05bd 0100     		.2byte	0x1
 9255 05bf 56       		.byte	0x56
 9256 05c0 B0000000 		.4byte	.LVL72
 9257 05c4 B2000000 		.4byte	.LVL73
 9258 05c8 0200     		.2byte	0x2
 9259 05ca 30       		.byte	0x30
 9260 05cb 9F       		.byte	0x9f
 9261 05cc B2000000 		.4byte	.LVL73
 9262 05d0 D4020000 		.4byte	.LVL111
 9263 05d4 0100     		.2byte	0x1
 9264 05d6 56       		.byte	0x56
 9265 05d7 EC020000 		.4byte	.LVL118
 9266 05db 08030000 		.4byte	.LFE20
 9267 05df 0100     		.2byte	0x1
 9268 05e1 56       		.byte	0x56
 9269 05e2 00000000 		.4byte	0
 9270 05e6 00000000 		.4byte	0
 9271              	.LLST35:
 9272 05ea D6000000 		.4byte	.LVL75
 9273 05ee DA000000 		.4byte	.LVL76
 9274 05f2 0800     		.2byte	0x8
 9275 05f4 75       		.byte	0x75
 9276 05f5 00       		.sleb128 0
 9277 05f6 38       		.byte	0x38
 9278 05f7 24       		.byte	0x24
 9279 05f8 71       		.byte	0x71
 9280 05f9 00       		.sleb128 0
 9281 05fa 21       		.byte	0x21
 9282 05fb 9F       		.byte	0x9f
 9283 05fc DA000000 		.4byte	.LVL76
 9284 0600 E8000000 		.4byte	.LVL77
 9285 0604 0100     		.2byte	0x1
 9286 0606 51       		.byte	0x51
 9287 0607 E8000000 		.4byte	.LVL77
 9288 060b EE000000 		.4byte	.LVL78
 9289 060f 0E00     		.2byte	0xe
 9290 0611 75       		.byte	0x75
 9291 0612 00       		.sleb128 0
 9292 0613 38       		.byte	0x38
 9293 0614 24       		.byte	0x24
 9294 0615 74       		.byte	0x74
 9295 0616 C600     		.sleb128 70
ARM GAS  /tmp/ccKU0f2P.s 			page 228


 9296 0618 94       		.byte	0x94
 9297 0619 01       		.byte	0x1
 9298 061a 08       		.byte	0x8
 9299 061b FF       		.byte	0xff
 9300 061c 1A       		.byte	0x1a
 9301 061d 21       		.byte	0x21
 9302 061e 9F       		.byte	0x9f
 9303 061f EE000000 		.4byte	.LVL78
 9304 0623 F8000000 		.4byte	.LVL79
 9305 0627 1400     		.2byte	0x14
 9306 0629 74       		.byte	0x74
 9307 062a C700     		.sleb128 71
 9308 062c 94       		.byte	0x94
 9309 062d 01       		.byte	0x1
 9310 062e 08       		.byte	0x8
 9311 062f FF       		.byte	0xff
 9312 0630 1A       		.byte	0x1a
 9313 0631 38       		.byte	0x38
 9314 0632 24       		.byte	0x24
 9315 0633 74       		.byte	0x74
 9316 0634 C600     		.sleb128 70
 9317 0636 94       		.byte	0x94
 9318 0637 01       		.byte	0x1
 9319 0638 08       		.byte	0x8
 9320 0639 FF       		.byte	0xff
 9321 063a 1A       		.byte	0x1a
 9322 063b 21       		.byte	0x21
 9323 063c 9F       		.byte	0x9f
 9324 063d F8000000 		.4byte	.LVL79
 9325 0641 06010000 		.4byte	.LVL81
 9326 0645 0100     		.2byte	0x1
 9327 0647 51       		.byte	0x51
 9328 0648 06010000 		.4byte	.LVL81
 9329 064c 7E010000 		.4byte	.LVL95
 9330 0650 0900     		.2byte	0x9
 9331 0652 75       		.byte	0x75
 9332 0653 00       		.sleb128 0
 9333 0654 08       		.byte	0x8
 9334 0655 FF       		.byte	0xff
 9335 0656 1A       		.byte	0x1a
 9336 0657 71       		.byte	0x71
 9337 0658 00       		.sleb128 0
 9338 0659 1E       		.byte	0x1e
 9339 065a 9F       		.byte	0x9f
 9340 065b 7E010000 		.4byte	.LVL95
 9341 065f FE010000 		.4byte	.LVL108
 9342 0663 0C00     		.2byte	0xc
 9343 0665 74       		.byte	0x74
 9344 0666 C000     		.sleb128 64
 9345 0668 94       		.byte	0x94
 9346 0669 01       		.byte	0x1
 9347 066a 08       		.byte	0x8
 9348 066b FF       		.byte	0xff
 9349 066c 1A       		.byte	0x1a
 9350 066d 71       		.byte	0x71
 9351 066e 00       		.sleb128 0
 9352 066f 1E       		.byte	0x1e
ARM GAS  /tmp/ccKU0f2P.s 			page 229


 9353 0670 9F       		.byte	0x9f
 9354 0671 FE010000 		.4byte	.LVL108
 9355 0675 23020000 		.4byte	.LVL110-1
 9356 0679 0D00     		.2byte	0xd
 9357 067b 74       		.byte	0x74
 9358 067c C000     		.sleb128 64
 9359 067e 94       		.byte	0x94
 9360 067f 01       		.byte	0x1
 9361 0680 08       		.byte	0x8
 9362 0681 FF       		.byte	0xff
 9363 0682 1A       		.byte	0x1a
 9364 0683 74       		.byte	0x74
 9365 0684 1C       		.sleb128 28
 9366 0685 06       		.byte	0x6
 9367 0686 1E       		.byte	0x1e
 9368 0687 9F       		.byte	0x9f
 9369 0688 00000000 		.4byte	0
 9370 068c 00000000 		.4byte	0
 9371              	.LLST36:
 9372 0690 32010000 		.4byte	.LVL83
 9373 0694 36010000 		.4byte	.LVL84
 9374 0698 0800     		.2byte	0x8
 9375 069a 77       		.byte	0x77
 9376 069b 00       		.sleb128 0
 9377 069c 38       		.byte	0x38
 9378 069d 24       		.byte	0x24
 9379 069e 73       		.byte	0x73
 9380 069f 00       		.sleb128 0
 9381 06a0 21       		.byte	0x21
 9382 06a1 9F       		.byte	0x9f
 9383 06a2 36010000 		.4byte	.LVL84
 9384 06a6 3C010000 		.4byte	.LVL85
 9385 06aa 0100     		.2byte	0x1
 9386 06ac 53       		.byte	0x53
 9387 06ad 3C010000 		.4byte	.LVL85
 9388 06b1 40010000 		.4byte	.LVL86
 9389 06b5 0E00     		.2byte	0xe
 9390 06b7 77       		.byte	0x77
 9391 06b8 00       		.sleb128 0
 9392 06b9 38       		.byte	0x38
 9393 06ba 24       		.byte	0x24
 9394 06bb 74       		.byte	0x74
 9395 06bc C300     		.sleb128 67
 9396 06be 94       		.byte	0x94
 9397 06bf 01       		.byte	0x1
 9398 06c0 08       		.byte	0x8
 9399 06c1 FF       		.byte	0xff
 9400 06c2 1A       		.byte	0x1a
 9401 06c3 21       		.byte	0x21
 9402 06c4 9F       		.byte	0x9f
 9403 06c5 40010000 		.4byte	.LVL86
 9404 06c9 54010000 		.4byte	.LVL87
 9405 06cd 1400     		.2byte	0x14
 9406 06cf 74       		.byte	0x74
 9407 06d0 C400     		.sleb128 68
 9408 06d2 94       		.byte	0x94
 9409 06d3 01       		.byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 230


 9410 06d4 08       		.byte	0x8
 9411 06d5 FF       		.byte	0xff
 9412 06d6 1A       		.byte	0x1a
 9413 06d7 38       		.byte	0x38
 9414 06d8 24       		.byte	0x24
 9415 06d9 74       		.byte	0x74
 9416 06da C300     		.sleb128 67
 9417 06dc 94       		.byte	0x94
 9418 06dd 01       		.byte	0x1
 9419 06de 08       		.byte	0x8
 9420 06df FF       		.byte	0xff
 9421 06e0 1A       		.byte	0x1a
 9422 06e1 21       		.byte	0x21
 9423 06e2 9F       		.byte	0x9f
 9424 06e3 54010000 		.4byte	.LVL87
 9425 06e7 72010000 		.4byte	.LVL92
 9426 06eb 0100     		.2byte	0x1
 9427 06ed 53       		.byte	0x53
 9428 06ee 00000000 		.4byte	0
 9429 06f2 00000000 		.4byte	0
 9430              	.LLST37:
 9431 06f6 6C010000 		.4byte	.LVL91
 9432 06fa 96010000 		.4byte	.LVL100
 9433 06fe 0100     		.2byte	0x1
 9434 0700 57       		.byte	0x57
 9435 0701 96010000 		.4byte	.LVL100
 9436 0705 B2010000 		.4byte	.LVL101
 9437 0709 0B00     		.2byte	0xb
 9438 070b 70       		.byte	0x70
 9439 070c 00       		.sleb128 0
 9440 070d 34       		.byte	0x34
 9441 070e 25       		.byte	0x25
 9442 070f 78       		.byte	0x78
 9443 0710 00       		.sleb128 0
 9444 0711 22       		.byte	0x22
 9445 0712 7C       		.byte	0x7c
 9446 0713 00       		.sleb128 0
 9447 0714 22       		.byte	0x22
 9448 0715 9F       		.byte	0x9f
 9449 0716 B2010000 		.4byte	.LVL101
 9450 071a CC010000 		.4byte	.LVL103
 9451 071e 2000     		.2byte	0x20
 9452 0720 74       		.byte	0x74
 9453 0721 C200     		.sleb128 66
 9454 0723 94       		.byte	0x94
 9455 0724 01       		.byte	0x1
 9456 0725 08       		.byte	0x8
 9457 0726 FF       		.byte	0xff
 9458 0727 1A       		.byte	0x1a
 9459 0728 38       		.byte	0x38
 9460 0729 24       		.byte	0x24
 9461 072a 74       		.byte	0x74
 9462 072b C100     		.sleb128 65
 9463 072d 94       		.byte	0x94
 9464 072e 01       		.byte	0x1
 9465 072f 08       		.byte	0x8
 9466 0730 FF       		.byte	0xff
ARM GAS  /tmp/ccKU0f2P.s 			page 231


 9467 0731 1A       		.byte	0x1a
 9468 0732 21       		.byte	0x21
 9469 0733 0A       		.byte	0xa
 9470 0734 FFFF     		.2byte	0xffff
 9471 0736 1A       		.byte	0x1a
 9472 0737 34       		.byte	0x34
 9473 0738 25       		.byte	0x25
 9474 0739 78       		.byte	0x78
 9475 073a 00       		.sleb128 0
 9476 073b 22       		.byte	0x22
 9477 073c 7C       		.byte	0x7c
 9478 073d 00       		.sleb128 0
 9479 073e 22       		.byte	0x22
 9480 073f 9F       		.byte	0x9f
 9481 0740 CC010000 		.4byte	.LVL103
 9482 0744 D6010000 		.4byte	.LVL104
 9483 0748 0B00     		.2byte	0xb
 9484 074a 70       		.byte	0x70
 9485 074b 00       		.sleb128 0
 9486 074c 34       		.byte	0x34
 9487 074d 25       		.byte	0x25
 9488 074e 78       		.byte	0x78
 9489 074f 00       		.sleb128 0
 9490 0750 22       		.byte	0x22
 9491 0751 7C       		.byte	0x7c
 9492 0752 00       		.sleb128 0
 9493 0753 22       		.byte	0x22
 9494 0754 9F       		.byte	0x9f
 9495 0755 D6010000 		.4byte	.LVL104
 9496 0759 23020000 		.4byte	.LVL110-1
 9497 075d 2000     		.2byte	0x20
 9498 075f 74       		.byte	0x74
 9499 0760 C200     		.sleb128 66
 9500 0762 94       		.byte	0x94
 9501 0763 01       		.byte	0x1
 9502 0764 08       		.byte	0x8
 9503 0765 FF       		.byte	0xff
 9504 0766 1A       		.byte	0x1a
 9505 0767 38       		.byte	0x38
 9506 0768 24       		.byte	0x24
 9507 0769 74       		.byte	0x74
 9508 076a C100     		.sleb128 65
 9509 076c 94       		.byte	0x94
 9510 076d 01       		.byte	0x1
 9511 076e 08       		.byte	0x8
 9512 076f FF       		.byte	0xff
 9513 0770 1A       		.byte	0x1a
 9514 0771 21       		.byte	0x21
 9515 0772 0A       		.byte	0xa
 9516 0773 FFFF     		.2byte	0xffff
 9517 0775 1A       		.byte	0x1a
 9518 0776 34       		.byte	0x34
 9519 0777 25       		.byte	0x25
 9520 0778 78       		.byte	0x78
 9521 0779 00       		.sleb128 0
 9522 077a 22       		.byte	0x22
 9523 077b 7C       		.byte	0x7c
ARM GAS  /tmp/ccKU0f2P.s 			page 232


 9524 077c 00       		.sleb128 0
 9525 077d 22       		.byte	0x22
 9526 077e 9F       		.byte	0x9f
 9527 077f 00000000 		.4byte	0
 9528 0783 00000000 		.4byte	0
 9529              	.LLST38:
 9530 0787 76010000 		.4byte	.LVL93
 9531 078b 94010000 		.4byte	.LVL99
 9532 078f 0100     		.2byte	0x1
 9533 0791 53       		.byte	0x53
 9534 0792 94010000 		.4byte	.LVL99
 9535 0796 E8010000 		.4byte	.LVL105
 9536 079a 0300     		.2byte	0x3
 9537 079c 73       		.byte	0x73
 9538 079d 7E       		.sleb128 -2
 9539 079e 9F       		.byte	0x9f
 9540 079f E8010000 		.4byte	.LVL105
 9541 07a3 23020000 		.4byte	.LVL110-1
 9542 07a7 0600     		.2byte	0x6
 9543 07a9 74       		.byte	0x74
 9544 07aa 18       		.sleb128 24
 9545 07ab 06       		.byte	0x6
 9546 07ac 32       		.byte	0x32
 9547 07ad 1C       		.byte	0x1c
 9548 07ae 9F       		.byte	0x9f
 9549 07af 00000000 		.4byte	0
 9550 07b3 00000000 		.4byte	0
 9551              	.LLST39:
 9552 07b7 CA010000 		.4byte	.LVL102
 9553 07bb CC010000 		.4byte	.LVL103
 9554 07bf 0100     		.2byte	0x1
 9555 07c1 50       		.byte	0x50
 9556 07c2 EC010000 		.4byte	.LVL106
 9557 07c6 FA010000 		.4byte	.LVL107
 9558 07ca 0100     		.2byte	0x1
 9559 07cc 50       		.byte	0x50
 9560 07cd FA010000 		.4byte	.LVL107
 9561 07d1 0E020000 		.4byte	.LVL109
 9562 07d5 0400     		.2byte	0x4
 9563 07d7 73       		.byte	0x73
 9564 07d8 817C     		.sleb128 -511
 9565 07da 9F       		.byte	0x9f
 9566 07db 00000000 		.4byte	0
 9567 07df 00000000 		.4byte	0
 9568              	.LLST40:
 9569 07e3 5C010000 		.4byte	.LVL88
 9570 07e7 60010000 		.4byte	.LVL89
 9571 07eb 0800     		.2byte	0x8
 9572 07ed 78       		.byte	0x78
 9573 07ee 00       		.sleb128 0
 9574 07ef 38       		.byte	0x38
 9575 07f0 24       		.byte	0x24
 9576 07f1 77       		.byte	0x77
 9577 07f2 00       		.sleb128 0
 9578 07f3 21       		.byte	0x21
 9579 07f4 9F       		.byte	0x9f
 9580 07f5 60010000 		.4byte	.LVL89
ARM GAS  /tmp/ccKU0f2P.s 			page 233


 9581 07f9 6A010000 		.4byte	.LVL90
 9582 07fd 0D00     		.2byte	0xd
 9583 07ff 74       		.byte	0x74
 9584 0800 3F       		.sleb128 63
 9585 0801 94       		.byte	0x94
 9586 0802 01       		.byte	0x1
 9587 0803 08       		.byte	0x8
 9588 0804 FF       		.byte	0xff
 9589 0805 1A       		.byte	0x1a
 9590 0806 38       		.byte	0x38
 9591 0807 24       		.byte	0x24
 9592 0808 77       		.byte	0x77
 9593 0809 00       		.sleb128 0
 9594 080a 21       		.byte	0x21
 9595 080b 9F       		.byte	0x9f
 9596 080c 6A010000 		.4byte	.LVL90
 9597 0810 23020000 		.4byte	.LVL110-1
 9598 0814 1200     		.2byte	0x12
 9599 0816 74       		.byte	0x74
 9600 0817 3F       		.sleb128 63
 9601 0818 94       		.byte	0x94
 9602 0819 01       		.byte	0x1
 9603 081a 08       		.byte	0x8
 9604 081b FF       		.byte	0xff
 9605 081c 1A       		.byte	0x1a
 9606 081d 38       		.byte	0x38
 9607 081e 24       		.byte	0x24
 9608 081f 74       		.byte	0x74
 9609 0820 3E       		.sleb128 62
 9610 0821 94       		.byte	0x94
 9611 0822 01       		.byte	0x1
 9612 0823 08       		.byte	0x8
 9613 0824 FF       		.byte	0xff
 9614 0825 1A       		.byte	0x1a
 9615 0826 21       		.byte	0x21
 9616 0827 9F       		.byte	0x9f
 9617 0828 00000000 		.4byte	0
 9618 082c 00000000 		.4byte	0
 9619              	.LLST41:
 9620 0830 06000000 		.4byte	.LVL49
 9621 0834 20000000 		.4byte	.LVL55
 9622 0838 0100     		.2byte	0x1
 9623 083a 53       		.byte	0x53
 9624 083b 20000000 		.4byte	.LVL55
 9625 083f 22000000 		.4byte	.LVL56
 9626 0843 0300     		.2byte	0x3
 9627 0845 73       		.byte	0x73
 9628 0846 02       		.sleb128 2
 9629 0847 9F       		.byte	0x9f
 9630 0848 22000000 		.4byte	.LVL56
 9631 084c 37000000 		.4byte	.LVL60-1
 9632 0850 0100     		.2byte	0x1
 9633 0852 53       		.byte	0x53
 9634 0853 D4020000 		.4byte	.LVL111
 9635 0857 DA020000 		.4byte	.LVL112
 9636 085b 0100     		.2byte	0x1
 9637 085d 53       		.byte	0x53
ARM GAS  /tmp/ccKU0f2P.s 			page 234


 9638 085e 00000000 		.4byte	0
 9639 0862 00000000 		.4byte	0
 9640              	.LLST42:
 9641 0866 14000000 		.4byte	.LVL53
 9642 086a 1A000000 		.4byte	.LVL54
 9643 086e 0100     		.2byte	0x1
 9644 0870 54       		.byte	0x54
 9645 0871 2E000000 		.4byte	.LVL58
 9646 0875 08030000 		.4byte	.LFE20
 9647 0879 0100     		.2byte	0x1
 9648 087b 54       		.byte	0x54
 9649 087c 00000000 		.4byte	0
 9650 0880 00000000 		.4byte	0
 9651              	.LLST43:
 9652 0884 00000000 		.4byte	.LFB5
 9653 0888 02000000 		.4byte	.LCFI6
 9654 088c 0200     		.2byte	0x2
 9655 088e 7D       		.byte	0x7d
 9656 088f 00       		.sleb128 0
 9657 0890 02000000 		.4byte	.LCFI6
 9658 0894 B6000000 		.4byte	.LFE5
 9659 0898 0200     		.2byte	0x2
 9660 089a 7D       		.byte	0x7d
 9661 089b 10       		.sleb128 16
 9662 089c 00000000 		.4byte	0
 9663 08a0 00000000 		.4byte	0
 9664              	.LLST44:
 9665 08a4 00000000 		.4byte	.LVL120
 9666 08a8 09000000 		.4byte	.LVL121-1
 9667 08ac 0100     		.2byte	0x1
 9668 08ae 50       		.byte	0x50
 9669 08af 09000000 		.4byte	.LVL121-1
 9670 08b3 B6000000 		.4byte	.LFE5
 9671 08b7 0100     		.2byte	0x1
 9672 08b9 54       		.byte	0x54
 9673 08ba 00000000 		.4byte	0
 9674 08be 00000000 		.4byte	0
 9675              	.LLST45:
 9676 08c2 0C000000 		.4byte	.LVL122
 9677 08c6 18000000 		.4byte	.LVL123
 9678 08ca 0100     		.2byte	0x1
 9679 08cc 50       		.byte	0x50
 9680 08cd 18000000 		.4byte	.LVL123
 9681 08d1 B4000000 		.4byte	.LVL127
 9682 08d5 0100     		.2byte	0x1
 9683 08d7 55       		.byte	0x55
 9684 08d8 B4000000 		.4byte	.LVL127
 9685 08dc B6000000 		.4byte	.LFE5
 9686 08e0 0100     		.2byte	0x1
 9687 08e2 50       		.byte	0x50
 9688 08e3 00000000 		.4byte	0
 9689 08e7 00000000 		.4byte	0
 9690              	.LLST46:
 9691 08eb 00000000 		.4byte	.LVL128
 9692 08ef 0E000000 		.4byte	.LVL130
 9693 08f3 0100     		.2byte	0x1
 9694 08f5 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 235


 9695 08f6 0E000000 		.4byte	.LVL130
 9696 08fa 14000000 		.4byte	.LFE32
 9697 08fe 0400     		.2byte	0x4
 9698 0900 F3       		.byte	0xf3
 9699 0901 01       		.uleb128 0x1
 9700 0902 50       		.byte	0x50
 9701 0903 9F       		.byte	0x9f
 9702 0904 00000000 		.4byte	0
 9703 0908 00000000 		.4byte	0
 9704              	.LLST47:
 9705 090c 00000000 		.4byte	.LVL128
 9706 0910 02000000 		.4byte	.LVL129
 9707 0914 0600     		.2byte	0x6
 9708 0916 03       		.byte	0x3
 9709 0917 00000000 		.4byte	.LC0
 9710 091b 9F       		.byte	0x9f
 9711 091c 00000000 		.4byte	0
 9712 0920 00000000 		.4byte	0
 9713              	.LLST48:
 9714 0924 00000000 		.4byte	.LFB16
 9715 0928 06000000 		.4byte	.LCFI7
 9716 092c 0200     		.2byte	0x2
 9717 092e 7D       		.byte	0x7d
 9718 092f 00       		.sleb128 0
 9719 0930 06000000 		.4byte	.LCFI7
 9720 0934 EC000000 		.4byte	.LFE16
 9721 0938 0200     		.2byte	0x2
 9722 093a 7D       		.byte	0x7d
 9723 093b 28       		.sleb128 40
 9724 093c 00000000 		.4byte	0
 9725 0940 00000000 		.4byte	0
 9726              	.LLST49:
 9727 0944 00000000 		.4byte	.LVL131
 9728 0948 1E000000 		.4byte	.LVL137
 9729 094c 0100     		.2byte	0x1
 9730 094e 50       		.byte	0x50
 9731 094f 1E000000 		.4byte	.LVL137
 9732 0953 EC000000 		.4byte	.LFE16
 9733 0957 0400     		.2byte	0x4
 9734 0959 F3       		.byte	0xf3
 9735 095a 01       		.uleb128 0x1
 9736 095b 50       		.byte	0x50
 9737 095c 9F       		.byte	0x9f
 9738 095d 00000000 		.4byte	0
 9739 0961 00000000 		.4byte	0
 9740              	.LLST50:
 9741 0965 00000000 		.4byte	.LVL131
 9742 0969 1C000000 		.4byte	.LVL136
 9743 096d 0100     		.2byte	0x1
 9744 096f 51       		.byte	0x51
 9745 0970 1C000000 		.4byte	.LVL136
 9746 0974 EC000000 		.4byte	.LFE16
 9747 0978 0100     		.2byte	0x1
 9748 097a 5B       		.byte	0x5b
 9749 097b 00000000 		.4byte	0
 9750 097f 00000000 		.4byte	0
 9751              	.LLST51:
ARM GAS  /tmp/ccKU0f2P.s 			page 236


 9752 0983 24000000 		.4byte	.LVL138
 9753 0987 2E000000 		.4byte	.LVL139
 9754 098b 0200     		.2byte	0x2
 9755 098d 30       		.byte	0x30
 9756 098e 9F       		.byte	0x9f
 9757 098f 2E000000 		.4byte	.LVL139
 9758 0993 4A000000 		.4byte	.LVL142
 9759 0997 0100     		.2byte	0x1
 9760 0999 55       		.byte	0x55
 9761 099a 50000000 		.4byte	.LVL143
 9762 099e BE000000 		.4byte	.LVL154
 9763 09a2 0100     		.2byte	0x1
 9764 09a4 55       		.byte	0x55
 9765 09a5 D4000000 		.4byte	.LVL157
 9766 09a9 DC000000 		.4byte	.LVL159
 9767 09ad 0100     		.2byte	0x1
 9768 09af 55       		.byte	0x55
 9769 09b0 E0000000 		.4byte	.LVL160
 9770 09b4 EC000000 		.4byte	.LFE16
 9771 09b8 0100     		.2byte	0x1
 9772 09ba 55       		.byte	0x55
 9773 09bb 00000000 		.4byte	0
 9774 09bf 00000000 		.4byte	0
 9775              	.LLST52:
 9776 09c3 32000000 		.4byte	.LVL140
 9777 09c7 38000000 		.4byte	.LVL141
 9778 09cb 0500     		.2byte	0x5
 9779 09cd 79       		.byte	0x79
 9780 09ce 00       		.sleb128 0
 9781 09cf 7A       		.byte	0x7a
 9782 09d0 00       		.sleb128 0
 9783 09d1 22       		.byte	0x22
 9784 09d2 38000000 		.4byte	.LVL141
 9785 09d6 4A000000 		.4byte	.LVL142
 9786 09da 0700     		.2byte	0x7
 9787 09dc 79       		.byte	0x79
 9788 09dd 00       		.sleb128 0
 9789 09de 7A       		.byte	0x7a
 9790 09df 00       		.sleb128 0
 9791 09e0 22       		.byte	0x22
 9792 09e1 31       		.byte	0x31
 9793 09e2 1C       		.byte	0x1c
 9794 09e3 50000000 		.4byte	.LVL143
 9795 09e7 5E000000 		.4byte	.LVL144
 9796 09eb 0700     		.2byte	0x7
 9797 09ed 79       		.byte	0x79
 9798 09ee 00       		.sleb128 0
 9799 09ef 7A       		.byte	0x7a
 9800 09f0 00       		.sleb128 0
 9801 09f1 22       		.byte	0x22
 9802 09f2 31       		.byte	0x31
 9803 09f3 1C       		.byte	0x1c
 9804 09f4 5E000000 		.4byte	.LVL144
 9805 09f8 80000000 		.4byte	.LVL147
 9806 09fc 0100     		.2byte	0x1
 9807 09fe 54       		.byte	0x54
 9808 09ff 80000000 		.4byte	.LVL147
ARM GAS  /tmp/ccKU0f2P.s 			page 237


 9809 0a03 86000000 		.4byte	.LVL149
 9810 0a07 0300     		.2byte	0x3
 9811 0a09 74       		.byte	0x74
 9812 0a0a 20       		.sleb128 32
 9813 0a0b 9F       		.byte	0x9f
 9814 0a0c 86000000 		.4byte	.LVL149
 9815 0a10 8C000000 		.4byte	.LVL151
 9816 0a14 0100     		.2byte	0x1
 9817 0a16 54       		.byte	0x54
 9818 0a17 8C000000 		.4byte	.LVL151
 9819 0a1b 9C000000 		.4byte	.LVL152
 9820 0a1f 0700     		.2byte	0x7
 9821 0a21 79       		.byte	0x79
 9822 0a22 00       		.sleb128 0
 9823 0a23 7A       		.byte	0x7a
 9824 0a24 00       		.sleb128 0
 9825 0a25 22       		.byte	0x22
 9826 0a26 31       		.byte	0x31
 9827 0a27 1C       		.byte	0x1c
 9828 0a28 9C000000 		.4byte	.LVL152
 9829 0a2c D4000000 		.4byte	.LVL157
 9830 0a30 0100     		.2byte	0x1
 9831 0a32 54       		.byte	0x54
 9832 0a33 D4000000 		.4byte	.LVL157
 9833 0a37 EC000000 		.4byte	.LFE16
 9834 0a3b 0700     		.2byte	0x7
 9835 0a3d 79       		.byte	0x79
 9836 0a3e 00       		.sleb128 0
 9837 0a3f 7A       		.byte	0x7a
 9838 0a40 00       		.sleb128 0
 9839 0a41 22       		.byte	0x22
 9840 0a42 31       		.byte	0x31
 9841 0a43 1C       		.byte	0x1c
 9842 0a44 00000000 		.4byte	0
 9843 0a48 00000000 		.4byte	0
 9844              	.LLST53:
 9845 0a4c 24000000 		.4byte	.LVL138
 9846 0a50 2E000000 		.4byte	.LVL139
 9847 0a54 0200     		.2byte	0x2
 9848 0a56 38       		.byte	0x38
 9849 0a57 9F       		.byte	0x9f
 9850 0a58 2E000000 		.4byte	.LVL139
 9851 0a5c DA000000 		.4byte	.LVL158
 9852 0a60 0100     		.2byte	0x1
 9853 0a62 58       		.byte	0x58
 9854 0a63 DA000000 		.4byte	.LVL158
 9855 0a67 EC000000 		.4byte	.LFE16
 9856 0a6b 0200     		.2byte	0x2
 9857 0a6d 3B       		.byte	0x3b
 9858 0a6e 9F       		.byte	0x9f
 9859 0a6f 00000000 		.4byte	0
 9860 0a73 00000000 		.4byte	0
 9861              	.LLST54:
 9862 0a77 24000000 		.4byte	.LVL138
 9863 0a7b 2E000000 		.4byte	.LVL139
 9864 0a7f 0200     		.2byte	0x2
 9865 0a81 30       		.byte	0x30
ARM GAS  /tmp/ccKU0f2P.s 			page 238


 9866 0a82 9F       		.byte	0x9f
 9867 0a83 2E000000 		.4byte	.LVL139
 9868 0a87 EC000000 		.4byte	.LFE16
 9869 0a8b 0100     		.2byte	0x1
 9870 0a8d 5A       		.byte	0x5a
 9871 0a8e 00000000 		.4byte	0
 9872 0a92 00000000 		.4byte	0
 9873              	.LLST55:
 9874 0a96 24000000 		.4byte	.LVL138
 9875 0a9a 2E000000 		.4byte	.LVL139
 9876 0a9e 0200     		.2byte	0x2
 9877 0aa0 30       		.byte	0x30
 9878 0aa1 9F       		.byte	0x9f
 9879 0aa2 2E000000 		.4byte	.LVL139
 9880 0aa6 DA000000 		.4byte	.LVL158
 9881 0aaa 0100     		.2byte	0x1
 9882 0aac 56       		.byte	0x56
 9883 0aad DA000000 		.4byte	.LVL158
 9884 0ab1 EC000000 		.4byte	.LFE16
 9885 0ab5 0200     		.2byte	0x2
 9886 0ab7 38       		.byte	0x38
 9887 0ab8 9F       		.byte	0x9f
 9888 0ab9 00000000 		.4byte	0
 9889 0abd 00000000 		.4byte	0
 9890              	.LLST56:
 9891 0ac1 00000000 		.4byte	.LVL131
 9892 0ac5 08000000 		.4byte	.LVL132
 9893 0ac9 0200     		.2byte	0x2
 9894 0acb 71       		.byte	0x71
 9895 0acc 00       		.sleb128 0
 9896 0acd 0E000000 		.4byte	.LVL133
 9897 0ad1 12000000 		.4byte	.LVL134
 9898 0ad5 0100     		.2byte	0x1
 9899 0ad7 52       		.byte	0x52
 9900 0ad8 12000000 		.4byte	.LVL134
 9901 0adc EC000000 		.4byte	.LFE16
 9902 0ae0 0100     		.2byte	0x1
 9903 0ae2 59       		.byte	0x59
 9904 0ae3 00000000 		.4byte	0
 9905 0ae7 00000000 		.4byte	0
 9906              	.LLST57:
 9907 0aeb 00000000 		.4byte	.LFB31
 9908 0aef 02000000 		.4byte	.LCFI8
 9909 0af3 0200     		.2byte	0x2
 9910 0af5 7D       		.byte	0x7d
 9911 0af6 00       		.sleb128 0
 9912 0af7 02000000 		.4byte	.LCFI8
 9913 0afb 16000000 		.4byte	.LFE31
 9914 0aff 0200     		.2byte	0x2
 9915 0b01 7D       		.byte	0x7d
 9916 0b02 08       		.sleb128 8
 9917 0b03 00000000 		.4byte	0
 9918 0b07 00000000 		.4byte	0
 9919              	.LLST58:
 9920 0b0b 00000000 		.4byte	.LVL161
 9921 0b0f 14000000 		.4byte	.LVL166
 9922 0b13 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 239


 9923 0b15 50       		.byte	0x50
 9924 0b16 14000000 		.4byte	.LVL166
 9925 0b1a 16000000 		.4byte	.LFE31
 9926 0b1e 0400     		.2byte	0x4
 9927 0b20 F3       		.byte	0xf3
 9928 0b21 01       		.uleb128 0x1
 9929 0b22 50       		.byte	0x50
 9930 0b23 9F       		.byte	0x9f
 9931 0b24 00000000 		.4byte	0
 9932 0b28 00000000 		.4byte	0
 9933              	.LLST59:
 9934 0b2c 00000000 		.4byte	.LVL161
 9935 0b30 08000000 		.4byte	.LVL162
 9936 0b34 0200     		.2byte	0x2
 9937 0b36 30       		.byte	0x30
 9938 0b37 9F       		.byte	0x9f
 9939 0b38 08000000 		.4byte	.LVL162
 9940 0b3c 0C000000 		.4byte	.LVL163
 9941 0b40 0600     		.2byte	0x6
 9942 0b42 74       		.byte	0x74
 9943 0b43 00       		.sleb128 0
 9944 0b44 72       		.byte	0x72
 9945 0b45 00       		.sleb128 0
 9946 0b46 1C       		.byte	0x1c
 9947 0b47 9F       		.byte	0x9f
 9948 0b48 0C000000 		.4byte	.LVL163
 9949 0b4c 0E000000 		.4byte	.LVL164
 9950 0b50 0100     		.2byte	0x1
 9951 0b52 52       		.byte	0x52
 9952 0b53 0E000000 		.4byte	.LVL164
 9953 0b57 12000000 		.4byte	.LVL165
 9954 0b5b 0200     		.2byte	0x2
 9955 0b5d 30       		.byte	0x30
 9956 0b5e 9F       		.byte	0x9f
 9957 0b5f 12000000 		.4byte	.LVL165
 9958 0b63 16000000 		.4byte	.LFE31
 9959 0b67 0100     		.2byte	0x1
 9960 0b69 52       		.byte	0x52
 9961 0b6a 00000000 		.4byte	0
 9962 0b6e 00000000 		.4byte	0
 9963              	.LLST60:
 9964 0b72 00000000 		.4byte	.LVL167
 9965 0b76 0E000000 		.4byte	.LVL169
 9966 0b7a 0100     		.2byte	0x1
 9967 0b7c 50       		.byte	0x50
 9968 0b7d 0E000000 		.4byte	.LVL169
 9969 0b81 14000000 		.4byte	.LVL170
 9970 0b85 0400     		.2byte	0x4
 9971 0b87 F3       		.byte	0xf3
 9972 0b88 01       		.uleb128 0x1
 9973 0b89 50       		.byte	0x50
 9974 0b8a 9F       		.byte	0x9f
 9975 0b8b 14000000 		.4byte	.LVL170
 9976 0b8f 16000000 		.4byte	.LVL171
 9977 0b93 0100     		.2byte	0x1
 9978 0b95 50       		.byte	0x50
 9979 0b96 16000000 		.4byte	.LVL171
ARM GAS  /tmp/ccKU0f2P.s 			page 240


 9980 0b9a 18000000 		.4byte	.LFE6
 9981 0b9e 0400     		.2byte	0x4
 9982 0ba0 F3       		.byte	0xf3
 9983 0ba1 01       		.uleb128 0x1
 9984 0ba2 50       		.byte	0x50
 9985 0ba3 9F       		.byte	0x9f
 9986 0ba4 00000000 		.4byte	0
 9987 0ba8 00000000 		.4byte	0
 9988              	.LLST61:
 9989 0bac 00000000 		.4byte	.LVL167
 9990 0bb0 04000000 		.4byte	.LVL168
 9991 0bb4 0100     		.2byte	0x1
 9992 0bb6 51       		.byte	0x51
 9993 0bb7 04000000 		.4byte	.LVL168
 9994 0bbb 18000000 		.4byte	.LFE6
 9995 0bbf 0100     		.2byte	0x1
 9996 0bc1 51       		.byte	0x51
 9997 0bc2 00000000 		.4byte	0
 9998 0bc6 00000000 		.4byte	0
 9999              	.LLST62:
 10000 0bca 00000000 		.4byte	.LFB7
 10001 0bce 04000000 		.4byte	.LCFI9
 10002 0bd2 0200     		.2byte	0x2
 10003 0bd4 7D       		.byte	0x7d
 10004 0bd5 00       		.sleb128 0
 10005 0bd6 04000000 		.4byte	.LCFI9
 10006 0bda C8000000 		.4byte	.LFE7
 10007 0bde 0200     		.2byte	0x2
 10008 0be0 7D       		.byte	0x7d
 10009 0be1 18       		.sleb128 24
 10010 0be2 00000000 		.4byte	0
 10011 0be6 00000000 		.4byte	0
 10012              	.LLST63:
 10013 0bea 00000000 		.4byte	.LVL172
 10014 0bee 2B000000 		.4byte	.LVL176-1
 10015 0bf2 0100     		.2byte	0x1
 10016 0bf4 50       		.byte	0x50
 10017 0bf5 2B000000 		.4byte	.LVL176-1
 10018 0bf9 52000000 		.4byte	.LVL181
 10019 0bfd 0100     		.2byte	0x1
 10020 0bff 54       		.byte	0x54
 10021 0c00 52000000 		.4byte	.LVL181
 10022 0c04 68000000 		.4byte	.LVL183
 10023 0c08 0400     		.2byte	0x4
 10024 0c0a F3       		.byte	0xf3
 10025 0c0b 01       		.uleb128 0x1
 10026 0c0c 50       		.byte	0x50
 10027 0c0d 9F       		.byte	0x9f
 10028 0c0e 68000000 		.4byte	.LVL183
 10029 0c12 71000000 		.4byte	.LVL184-1
 10030 0c16 0100     		.2byte	0x1
 10031 0c18 50       		.byte	0x50
 10032 0c19 71000000 		.4byte	.LVL184-1
 10033 0c1d 7C000000 		.4byte	.LVL187
 10034 0c21 0100     		.2byte	0x1
 10035 0c23 54       		.byte	0x54
 10036 0c24 7C000000 		.4byte	.LVL187
ARM GAS  /tmp/ccKU0f2P.s 			page 241


 10037 0c28 8A000000 		.4byte	.LVL188
 10038 0c2c 0400     		.2byte	0x4
 10039 0c2e F3       		.byte	0xf3
 10040 0c2f 01       		.uleb128 0x1
 10041 0c30 50       		.byte	0x50
 10042 0c31 9F       		.byte	0x9f
 10043 0c32 8A000000 		.4byte	.LVL188
 10044 0c36 93000000 		.4byte	.LVL189-1
 10045 0c3a 0100     		.2byte	0x1
 10046 0c3c 50       		.byte	0x50
 10047 0c3d 93000000 		.4byte	.LVL189-1
 10048 0c41 A2000000 		.4byte	.LVL192
 10049 0c45 0100     		.2byte	0x1
 10050 0c47 54       		.byte	0x54
 10051 0c48 A2000000 		.4byte	.LVL192
 10052 0c4c BE000000 		.4byte	.LVL195
 10053 0c50 0400     		.2byte	0x4
 10054 0c52 F3       		.byte	0xf3
 10055 0c53 01       		.uleb128 0x1
 10056 0c54 50       		.byte	0x50
 10057 0c55 9F       		.byte	0x9f
 10058 0c56 BE000000 		.4byte	.LVL195
 10059 0c5a C0000000 		.4byte	.LVL196
 10060 0c5e 0100     		.2byte	0x1
 10061 0c60 50       		.byte	0x50
 10062 0c61 C0000000 		.4byte	.LVL196
 10063 0c65 C8000000 		.4byte	.LFE7
 10064 0c69 0100     		.2byte	0x1
 10065 0c6b 54       		.byte	0x54
 10066 0c6c 00000000 		.4byte	0
 10067 0c70 00000000 		.4byte	0
 10068              	.LLST64:
 10069 0c74 00000000 		.4byte	.LVL172
 10070 0c78 12000000 		.4byte	.LVL173
 10071 0c7c 0100     		.2byte	0x1
 10072 0c7e 51       		.byte	0x51
 10073 0c7f 12000000 		.4byte	.LVL173
 10074 0c83 76000000 		.4byte	.LVL185
 10075 0c87 0100     		.2byte	0x1
 10076 0c89 55       		.byte	0x55
 10077 0c8a 76000000 		.4byte	.LVL185
 10078 0c8e 8A000000 		.4byte	.LVL188
 10079 0c92 0400     		.2byte	0x4
 10080 0c94 F3       		.byte	0xf3
 10081 0c95 01       		.uleb128 0x1
 10082 0c96 51       		.byte	0x51
 10083 0c97 9F       		.byte	0x9f
 10084 0c98 8A000000 		.4byte	.LVL188
 10085 0c9c 98000000 		.4byte	.LVL190
 10086 0ca0 0100     		.2byte	0x1
 10087 0ca2 55       		.byte	0x55
 10088 0ca3 98000000 		.4byte	.LVL190
 10089 0ca7 BE000000 		.4byte	.LVL195
 10090 0cab 0400     		.2byte	0x4
 10091 0cad F3       		.byte	0xf3
 10092 0cae 01       		.uleb128 0x1
 10093 0caf 51       		.byte	0x51
ARM GAS  /tmp/ccKU0f2P.s 			page 242


 10094 0cb0 9F       		.byte	0x9f
 10095 0cb1 BE000000 		.4byte	.LVL195
 10096 0cb5 C2000000 		.4byte	.LVL197
 10097 0cb9 0100     		.2byte	0x1
 10098 0cbb 51       		.byte	0x51
 10099 0cbc C2000000 		.4byte	.LVL197
 10100 0cc0 C8000000 		.4byte	.LFE7
 10101 0cc4 0100     		.2byte	0x1
 10102 0cc6 55       		.byte	0x55
 10103 0cc7 00000000 		.4byte	0
 10104 0ccb 00000000 		.4byte	0
 10105              	.LLST65:
 10106 0ccf 44000000 		.4byte	.LVL178
 10107 0cd3 5C000000 		.4byte	.LVL182
 10108 0cd7 0600     		.2byte	0x6
 10109 0cd9 77       		.byte	0x77
 10110 0cda 00       		.sleb128 0
 10111 0cdb 08       		.byte	0x8
 10112 0cdc FF       		.byte	0xff
 10113 0cdd 1A       		.byte	0x1a
 10114 0cde 9F       		.byte	0x9f
 10115 0cdf 5C000000 		.4byte	.LVL182
 10116 0ce3 68000000 		.4byte	.LVL183
 10117 0ce7 0100     		.2byte	0x1
 10118 0ce9 52       		.byte	0x52
 10119 0cea 00000000 		.4byte	0
 10120 0cee 00000000 		.4byte	0
 10121              	.LLST66:
 10122 0cf2 1E000000 		.4byte	.LVL174
 10123 0cf6 24000000 		.4byte	.LVL175
 10124 0cfa 0100     		.2byte	0x1
 10125 0cfc 55       		.byte	0x55
 10126 0cfd 24000000 		.4byte	.LVL175
 10127 0d01 3A000000 		.4byte	.LVL177
 10128 0d05 0100     		.2byte	0x1
 10129 0d07 56       		.byte	0x56
 10130 0d08 3A000000 		.4byte	.LVL177
 10131 0d0c 44000000 		.4byte	.LVL178
 10132 0d10 0300     		.2byte	0x3
 10133 0d12 76       		.byte	0x76
 10134 0d13 7F       		.sleb128 -1
 10135 0d14 9F       		.byte	0x9f
 10136 0d15 44000000 		.4byte	.LVL178
 10137 0d19 4E000000 		.4byte	.LVL180
 10138 0d1d 0100     		.2byte	0x1
 10139 0d1f 56       		.byte	0x56
 10140 0d20 4E000000 		.4byte	.LVL180
 10141 0d24 68000000 		.4byte	.LVL183
 10142 0d28 0A00     		.2byte	0xa
 10143 0d2a 75       		.byte	0x75
 10144 0d2b 00       		.sleb128 0
 10145 0d2c 31       		.byte	0x31
 10146 0d2d 25       		.byte	0x25
 10147 0d2e 75       		.byte	0x75
 10148 0d2f 00       		.sleb128 0
 10149 0d30 22       		.byte	0x22
 10150 0d31 23       		.byte	0x23
ARM GAS  /tmp/ccKU0f2P.s 			page 243


 10151 0d32 01       		.uleb128 0x1
 10152 0d33 9F       		.byte	0x9f
 10153 0d34 00000000 		.4byte	0
 10154 0d38 00000000 		.4byte	0
 10155              	.LLST67:
 10156 0d3c 78000000 		.4byte	.LVL186
 10157 0d40 7C000000 		.4byte	.LVL187
 10158 0d44 0800     		.2byte	0x8
 10159 0d46 74       		.byte	0x74
 10160 0d47 00       		.sleb128 0
 10161 0d48 75       		.byte	0x75
 10162 0d49 00       		.sleb128 0
 10163 0d4a 22       		.byte	0x22
 10164 0d4b 23       		.byte	0x23
 10165 0d4c 30       		.uleb128 0x30
 10166 0d4d 9F       		.byte	0x9f
 10167 0d4e 7C000000 		.4byte	.LVL187
 10168 0d52 8A000000 		.4byte	.LVL188
 10169 0d56 0900     		.2byte	0x9
 10170 0d58 F3       		.byte	0xf3
 10171 0d59 01       		.uleb128 0x1
 10172 0d5a 50       		.byte	0x50
 10173 0d5b 75       		.byte	0x75
 10174 0d5c 00       		.sleb128 0
 10175 0d5d 22       		.byte	0x22
 10176 0d5e 23       		.byte	0x23
 10177 0d5f 30       		.uleb128 0x30
 10178 0d60 9F       		.byte	0x9f
 10179 0d61 A0000000 		.4byte	.LVL191
 10180 0d65 A8000000 		.4byte	.LVL193
 10181 0d69 0100     		.2byte	0x1
 10182 0d6b 53       		.byte	0x53
 10183 0d6c A8000000 		.4byte	.LVL193
 10184 0d70 AA000000 		.4byte	.LVL194
 10185 0d74 0700     		.2byte	0x7
 10186 0d76 F3       		.byte	0xf3
 10187 0d77 01       		.uleb128 0x1
 10188 0d78 50       		.byte	0x50
 10189 0d79 71       		.byte	0x71
 10190 0d7a 00       		.sleb128 0
 10191 0d7b 22       		.byte	0x22
 10192 0d7c 9F       		.byte	0x9f
 10193 0d7d AA000000 		.4byte	.LVL194
 10194 0d81 BE000000 		.4byte	.LVL195
 10195 0d85 0900     		.2byte	0x9
 10196 0d87 75       		.byte	0x75
 10197 0d88 00       		.sleb128 0
 10198 0d89 F3       		.byte	0xf3
 10199 0d8a 01       		.uleb128 0x1
 10200 0d8b 50       		.byte	0x50
 10201 0d8c 22       		.byte	0x22
 10202 0d8d 23       		.byte	0x23
 10203 0d8e 30       		.uleb128 0x30
 10204 0d8f 9F       		.byte	0x9f
 10205 0d90 00000000 		.4byte	0
 10206 0d94 00000000 		.4byte	0
 10207              	.LLST68:
ARM GAS  /tmp/ccKU0f2P.s 			page 244


 10208 0d98 00000000 		.4byte	.LFB33
 10209 0d9c 04000000 		.4byte	.LCFI10
 10210 0da0 0200     		.2byte	0x2
 10211 0da2 7D       		.byte	0x7d
 10212 0da3 00       		.sleb128 0
 10213 0da4 04000000 		.4byte	.LCFI10
 10214 0da8 6A000000 		.4byte	.LFE33
 10215 0dac 0200     		.2byte	0x2
 10216 0dae 7D       		.byte	0x7d
 10217 0daf 10       		.sleb128 16
 10218 0db0 00000000 		.4byte	0
 10219 0db4 00000000 		.4byte	0
 10220              	.LLST69:
 10221 0db8 00000000 		.4byte	.LVL198
 10222 0dbc 0E000000 		.4byte	.LVL200
 10223 0dc0 0100     		.2byte	0x1
 10224 0dc2 50       		.byte	0x50
 10225 0dc3 0E000000 		.4byte	.LVL200
 10226 0dc7 12000000 		.4byte	.LVL201
 10227 0dcb 0100     		.2byte	0x1
 10228 0dcd 54       		.byte	0x54
 10229 0dce 12000000 		.4byte	.LVL201
 10230 0dd2 16000000 		.4byte	.LVL202
 10231 0dd6 0100     		.2byte	0x1
 10232 0dd8 50       		.byte	0x50
 10233 0dd9 16000000 		.4byte	.LVL202
 10234 0ddd 6A000000 		.4byte	.LFE33
 10235 0de1 0100     		.2byte	0x1
 10236 0de3 54       		.byte	0x54
 10237 0de4 00000000 		.4byte	0
 10238 0de8 00000000 		.4byte	0
 10239              	.LLST70:
 10240 0dec 02000000 		.4byte	.LVL199
 10241 0df0 0E000000 		.4byte	.LVL200
 10242 0df4 0100     		.2byte	0x1
 10243 0df6 51       		.byte	0x51
 10244 0df7 12000000 		.4byte	.LVL201
 10245 0dfb 1E000000 		.4byte	.LVL203
 10246 0dff 0100     		.2byte	0x1
 10247 0e01 51       		.byte	0x51
 10248 0e02 1E000000 		.4byte	.LVL203
 10249 0e06 24000000 		.4byte	.LVL204
 10250 0e0a 0200     		.2byte	0x2
 10251 0e0c 74       		.byte	0x74
 10252 0e0d 08       		.sleb128 8
 10253 0e0e 24000000 		.4byte	.LVL204
 10254 0e12 26000000 		.4byte	.LVL205
 10255 0e16 0100     		.2byte	0x1
 10256 0e18 51       		.byte	0x51
 10257 0e19 36000000 		.4byte	.LVL206
 10258 0e1d 3F000000 		.4byte	.LVL208-1
 10259 0e21 0100     		.2byte	0x1
 10260 0e23 51       		.byte	0x51
 10261 0e24 44000000 		.4byte	.LVL209
 10262 0e28 4E000000 		.4byte	.LVL210
 10263 0e2c 0100     		.2byte	0x1
 10264 0e2e 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 245


 10265 0e2f 4E000000 		.4byte	.LVL210
 10266 0e33 5B000000 		.4byte	.LVL212-1
 10267 0e37 0100     		.2byte	0x1
 10268 0e39 51       		.byte	0x51
 10269 0e3a 66000000 		.4byte	.LVL213
 10270 0e3e 68000000 		.4byte	.LVL214
 10271 0e42 0100     		.2byte	0x1
 10272 0e44 50       		.byte	0x50
 10273 0e45 68000000 		.4byte	.LVL214
 10274 0e49 6A000000 		.4byte	.LFE33
 10275 0e4d 0100     		.2byte	0x1
 10276 0e4f 51       		.byte	0x51
 10277 0e50 00000000 		.4byte	0
 10278 0e54 00000000 		.4byte	0
 10279              	.LLST71:
 10280 0e58 36000000 		.4byte	.LVL206
 10281 0e5c 3A000000 		.4byte	.LVL207
 10282 0e60 0A00     		.2byte	0xa
 10283 0e62 75       		.byte	0x75
 10284 0e63 02       		.sleb128 2
 10285 0e64 94       		.byte	0x94
 10286 0e65 01       		.byte	0x1
 10287 0e66 08       		.byte	0x8
 10288 0e67 FF       		.byte	0xff
 10289 0e68 1A       		.byte	0x1a
 10290 0e69 34       		.byte	0x34
 10291 0e6a 24       		.byte	0x24
 10292 0e6b 9F       		.byte	0x9f
 10293 0e6c 54000000 		.4byte	.LVL211
 10294 0e70 5B000000 		.4byte	.LVL212-1
 10295 0e74 0A00     		.2byte	0xa
 10296 0e76 75       		.byte	0x75
 10297 0e77 02       		.sleb128 2
 10298 0e78 94       		.byte	0x94
 10299 0e79 01       		.byte	0x1
 10300 0e7a 08       		.byte	0x8
 10301 0e7b FF       		.byte	0xff
 10302 0e7c 1A       		.byte	0x1a
 10303 0e7d 34       		.byte	0x34
 10304 0e7e 24       		.byte	0x24
 10305 0e7f 9F       		.byte	0x9f
 10306 0e80 00000000 		.4byte	0
 10307 0e84 00000000 		.4byte	0
 10308              	.LLST72:
 10309 0e88 00000000 		.4byte	.LFB8
 10310 0e8c 04000000 		.4byte	.LCFI11
 10311 0e90 0200     		.2byte	0x2
 10312 0e92 7D       		.byte	0x7d
 10313 0e93 00       		.sleb128 0
 10314 0e94 04000000 		.4byte	.LCFI11
 10315 0e98 F2000000 		.4byte	.LFE8
 10316 0e9c 0200     		.2byte	0x2
 10317 0e9e 7D       		.byte	0x7d
 10318 0e9f 18       		.sleb128 24
 10319 0ea0 00000000 		.4byte	0
 10320 0ea4 00000000 		.4byte	0
 10321              	.LLST73:
ARM GAS  /tmp/ccKU0f2P.s 			page 246


 10322 0ea8 00000000 		.4byte	.LVL215
 10323 0eac 2D000000 		.4byte	.LVL220-1
 10324 0eb0 0100     		.2byte	0x1
 10325 0eb2 50       		.byte	0x50
 10326 0eb3 2D000000 		.4byte	.LVL220-1
 10327 0eb7 8E000000 		.4byte	.LVL232
 10328 0ebb 0100     		.2byte	0x1
 10329 0ebd 54       		.byte	0x54
 10330 0ebe 8E000000 		.4byte	.LVL232
 10331 0ec2 97000000 		.4byte	.LVL233-1
 10332 0ec6 0100     		.2byte	0x1
 10333 0ec8 50       		.byte	0x50
 10334 0ec9 97000000 		.4byte	.LVL233-1
 10335 0ecd B0000000 		.4byte	.LVL237
 10336 0ed1 0100     		.2byte	0x1
 10337 0ed3 54       		.byte	0x54
 10338 0ed4 B0000000 		.4byte	.LVL237
 10339 0ed8 B9000000 		.4byte	.LVL239-1
 10340 0edc 0100     		.2byte	0x1
 10341 0ede 50       		.byte	0x50
 10342 0edf B9000000 		.4byte	.LVL239-1
 10343 0ee3 E6000000 		.4byte	.LVL244
 10344 0ee7 0100     		.2byte	0x1
 10345 0ee9 54       		.byte	0x54
 10346 0eea E6000000 		.4byte	.LVL244
 10347 0eee E8000000 		.4byte	.LVL245
 10348 0ef2 0100     		.2byte	0x1
 10349 0ef4 50       		.byte	0x50
 10350 0ef5 E8000000 		.4byte	.LVL245
 10351 0ef9 EE000000 		.4byte	.LVL246
 10352 0efd 0100     		.2byte	0x1
 10353 0eff 54       		.byte	0x54
 10354 0f00 EE000000 		.4byte	.LVL246
 10355 0f04 F0000000 		.4byte	.LVL247
 10356 0f08 0100     		.2byte	0x1
 10357 0f0a 50       		.byte	0x50
 10358 0f0b F0000000 		.4byte	.LVL247
 10359 0f0f F2000000 		.4byte	.LFE8
 10360 0f13 0100     		.2byte	0x1
 10361 0f15 54       		.byte	0x54
 10362 0f16 00000000 		.4byte	0
 10363 0f1a 00000000 		.4byte	0
 10364              	.LLST74:
 10365 0f1e 00000000 		.4byte	.LVL215
 10366 0f22 14000000 		.4byte	.LVL216
 10367 0f26 0100     		.2byte	0x1
 10368 0f28 51       		.byte	0x51
 10369 0f29 14000000 		.4byte	.LVL216
 10370 0f2d 3A000000 		.4byte	.LVL223
 10371 0f31 0100     		.2byte	0x1
 10372 0f33 55       		.byte	0x55
 10373 0f34 3A000000 		.4byte	.LVL223
 10374 0f38 8E000000 		.4byte	.LVL232
 10375 0f3c 0400     		.2byte	0x4
 10376 0f3e F3       		.byte	0xf3
 10377 0f3f 01       		.uleb128 0x1
 10378 0f40 51       		.byte	0x51
ARM GAS  /tmp/ccKU0f2P.s 			page 247


 10379 0f41 9F       		.byte	0x9f
 10380 0f42 8E000000 		.4byte	.LVL232
 10381 0f46 9C000000 		.4byte	.LVL234
 10382 0f4a 0100     		.2byte	0x1
 10383 0f4c 55       		.byte	0x55
 10384 0f4d 9C000000 		.4byte	.LVL234
 10385 0f51 B0000000 		.4byte	.LVL237
 10386 0f55 0400     		.2byte	0x4
 10387 0f57 F3       		.byte	0xf3
 10388 0f58 01       		.uleb128 0x1
 10389 0f59 51       		.byte	0x51
 10390 0f5a 9F       		.byte	0x9f
 10391 0f5b B0000000 		.4byte	.LVL237
 10392 0f5f BE000000 		.4byte	.LVL240
 10393 0f63 0100     		.2byte	0x1
 10394 0f65 55       		.byte	0x55
 10395 0f66 BE000000 		.4byte	.LVL240
 10396 0f6a E6000000 		.4byte	.LVL244
 10397 0f6e 0400     		.2byte	0x4
 10398 0f70 F3       		.byte	0xf3
 10399 0f71 01       		.uleb128 0x1
 10400 0f72 51       		.byte	0x51
 10401 0f73 9F       		.byte	0x9f
 10402 0f74 E6000000 		.4byte	.LVL244
 10403 0f78 E8000000 		.4byte	.LVL245
 10404 0f7c 0100     		.2byte	0x1
 10405 0f7e 55       		.byte	0x55
 10406 0f7f E8000000 		.4byte	.LVL245
 10407 0f83 EE000000 		.4byte	.LVL246
 10408 0f87 0400     		.2byte	0x4
 10409 0f89 F3       		.byte	0xf3
 10410 0f8a 01       		.uleb128 0x1
 10411 0f8b 51       		.byte	0x51
 10412 0f8c 9F       		.byte	0x9f
 10413 0f8d EE000000 		.4byte	.LVL246
 10414 0f91 F2000000 		.4byte	.LFE8
 10415 0f95 0100     		.2byte	0x1
 10416 0f97 51       		.byte	0x51
 10417 0f98 00000000 		.4byte	0
 10418 0f9c 00000000 		.4byte	0
 10419              	.LLST75:
 10420 0fa0 00000000 		.4byte	.LVL215
 10421 0fa4 22000000 		.4byte	.LVL218
 10422 0fa8 0100     		.2byte	0x1
 10423 0faa 52       		.byte	0x52
 10424 0fab 22000000 		.4byte	.LVL218
 10425 0faf 74000000 		.4byte	.LVL229
 10426 0fb3 0100     		.2byte	0x1
 10427 0fb5 56       		.byte	0x56
 10428 0fb6 74000000 		.4byte	.LVL229
 10429 0fba 76000000 		.4byte	.LVL230
 10430 0fbe 0400     		.2byte	0x4
 10431 0fc0 F3       		.byte	0xf3
 10432 0fc1 01       		.uleb128 0x1
 10433 0fc2 52       		.byte	0x52
 10434 0fc3 9F       		.byte	0x9f
 10435 0fc4 76000000 		.4byte	.LVL230
ARM GAS  /tmp/ccKU0f2P.s 			page 248


 10436 0fc8 7C000000 		.4byte	.LVL231
 10437 0fcc 0100     		.2byte	0x1
 10438 0fce 56       		.byte	0x56
 10439 0fcf 7C000000 		.4byte	.LVL231
 10440 0fd3 8E000000 		.4byte	.LVL232
 10441 0fd7 0400     		.2byte	0x4
 10442 0fd9 F3       		.byte	0xf3
 10443 0fda 01       		.uleb128 0x1
 10444 0fdb 52       		.byte	0x52
 10445 0fdc 9F       		.byte	0x9f
 10446 0fdd 8E000000 		.4byte	.LVL232
 10447 0fe1 97000000 		.4byte	.LVL233-1
 10448 0fe5 0100     		.2byte	0x1
 10449 0fe7 52       		.byte	0x52
 10450 0fe8 97000000 		.4byte	.LVL233-1
 10451 0fec AA000000 		.4byte	.LVL236
 10452 0ff0 0100     		.2byte	0x1
 10453 0ff2 56       		.byte	0x56
 10454 0ff3 AA000000 		.4byte	.LVL236
 10455 0ff7 B0000000 		.4byte	.LVL237
 10456 0ffb 0400     		.2byte	0x4
 10457 0ffd F3       		.byte	0xf3
 10458 0ffe 01       		.uleb128 0x1
 10459 0fff 52       		.byte	0x52
 10460 1000 9F       		.byte	0x9f
 10461 1001 B0000000 		.4byte	.LVL237
 10462 1005 B2000000 		.4byte	.LVL238
 10463 1009 0100     		.2byte	0x1
 10464 100b 52       		.byte	0x52
 10465 100c B2000000 		.4byte	.LVL238
 10466 1010 DE000000 		.4byte	.LVL243
 10467 1014 0100     		.2byte	0x1
 10468 1016 56       		.byte	0x56
 10469 1017 DE000000 		.4byte	.LVL243
 10470 101b E6000000 		.4byte	.LVL244
 10471 101f 1300     		.2byte	0x13
 10472 1021 73       		.byte	0x73
 10473 1022 03       		.sleb128 3
 10474 1023 94       		.byte	0x94
 10475 1024 01       		.byte	0x1
 10476 1025 08       		.byte	0x8
 10477 1026 FF       		.byte	0xff
 10478 1027 1A       		.byte	0x1a
 10479 1028 48       		.byte	0x48
 10480 1029 24       		.byte	0x24
 10481 102a 40       		.byte	0x40
 10482 102b 48       		.byte	0x48
 10483 102c 24       		.byte	0x24
 10484 102d 1F       		.byte	0x1f
 10485 102e 1A       		.byte	0x1a
 10486 102f F3       		.byte	0xf3
 10487 1030 01       		.uleb128 0x1
 10488 1031 52       		.byte	0x52
 10489 1032 21       		.byte	0x21
 10490 1033 9F       		.byte	0x9f
 10491 1034 E6000000 		.4byte	.LVL244
 10492 1038 E8000000 		.4byte	.LVL245
ARM GAS  /tmp/ccKU0f2P.s 			page 249


 10493 103c 0100     		.2byte	0x1
 10494 103e 52       		.byte	0x52
 10495 103f EE000000 		.4byte	.LVL246
 10496 1043 F2000000 		.4byte	.LFE8
 10497 1047 0100     		.2byte	0x1
 10498 1049 52       		.byte	0x52
 10499 104a 00000000 		.4byte	0
 10500 104e 00000000 		.4byte	0
 10501              	.LLST76:
 10502 1052 20000000 		.4byte	.LVL217
 10503 1056 26000000 		.4byte	.LVL219
 10504 105a 0100     		.2byte	0x1
 10505 105c 55       		.byte	0x55
 10506 105d 26000000 		.4byte	.LVL219
 10507 1061 6C000000 		.4byte	.LVL227
 10508 1065 0100     		.2byte	0x1
 10509 1067 57       		.byte	0x57
 10510 1068 6C000000 		.4byte	.LVL227
 10511 106c 8E000000 		.4byte	.LVL232
 10512 1070 0C00     		.2byte	0xc
 10513 1072 F3       		.byte	0xf3
 10514 1073 01       		.uleb128 0x1
 10515 1074 51       		.byte	0x51
 10516 1075 31       		.byte	0x31
 10517 1076 25       		.byte	0x25
 10518 1077 F3       		.byte	0xf3
 10519 1078 01       		.uleb128 0x1
 10520 1079 51       		.byte	0x51
 10521 107a 22       		.byte	0x22
 10522 107b 23       		.byte	0x23
 10523 107c 01       		.uleb128 0x1
 10524 107d 9F       		.byte	0x9f
 10525 107e 00000000 		.4byte	0
 10526 1082 00000000 		.4byte	0
 10527              	.LLST77:
 10528 1086 36000000 		.4byte	.LVL222
 10529 108a 50000000 		.4byte	.LVL224
 10530 108e 0800     		.2byte	0x8
 10531 1090 74       		.byte	0x74
 10532 1091 00       		.sleb128 0
 10533 1092 72       		.byte	0x72
 10534 1093 00       		.sleb128 0
 10535 1094 22       		.byte	0x22
 10536 1095 23       		.byte	0x23
 10537 1096 30       		.uleb128 0x30
 10538 1097 9F       		.byte	0x9f
 10539 1098 50000000 		.4byte	.LVL224
 10540 109c 5A000000 		.4byte	.LVL225
 10541 10a0 0C00     		.2byte	0xc
 10542 10a2 77       		.byte	0x77
 10543 10a3 00       		.sleb128 0
 10544 10a4 47       		.byte	0x47
 10545 10a5 24       		.byte	0x24
 10546 10a6 47       		.byte	0x47
 10547 10a7 25       		.byte	0x25
 10548 10a8 74       		.byte	0x74
 10549 10a9 00       		.sleb128 0
ARM GAS  /tmp/ccKU0f2P.s 			page 250


 10550 10aa 22       		.byte	0x22
 10551 10ab 23       		.byte	0x23
 10552 10ac 30       		.uleb128 0x30
 10553 10ad 9F       		.byte	0x9f
 10554 10ae 5A000000 		.4byte	.LVL225
 10555 10b2 6C000000 		.4byte	.LVL227
 10556 10b6 0C00     		.2byte	0xc
 10557 10b8 77       		.byte	0x77
 10558 10b9 7F       		.sleb128 -1
 10559 10ba 47       		.byte	0x47
 10560 10bb 24       		.byte	0x24
 10561 10bc 47       		.byte	0x47
 10562 10bd 25       		.byte	0x25
 10563 10be 74       		.byte	0x74
 10564 10bf 00       		.sleb128 0
 10565 10c0 22       		.byte	0x22
 10566 10c1 23       		.byte	0x23
 10567 10c2 30       		.uleb128 0x30
 10568 10c3 9F       		.byte	0x9f
 10569 10c4 6C000000 		.4byte	.LVL227
 10570 10c8 6E000000 		.4byte	.LVL228
 10571 10cc 1300     		.2byte	0x13
 10572 10ce F3       		.byte	0xf3
 10573 10cf 01       		.uleb128 0x1
 10574 10d0 51       		.byte	0x51
 10575 10d1 31       		.byte	0x31
 10576 10d2 25       		.byte	0x25
 10577 10d3 F3       		.byte	0xf3
 10578 10d4 01       		.uleb128 0x1
 10579 10d5 51       		.byte	0x51
 10580 10d6 22       		.byte	0x22
 10581 10d7 47       		.byte	0x47
 10582 10d8 24       		.byte	0x24
 10583 10d9 47       		.byte	0x47
 10584 10da 25       		.byte	0x25
 10585 10db 74       		.byte	0x74
 10586 10dc 00       		.sleb128 0
 10587 10dd 22       		.byte	0x22
 10588 10de 23       		.byte	0x23
 10589 10df 30       		.uleb128 0x30
 10590 10e0 9F       		.byte	0x9f
 10591 10e1 6E000000 		.4byte	.LVL228
 10592 10e5 8E000000 		.4byte	.LVL232
 10593 10e9 0800     		.2byte	0x8
 10594 10eb 74       		.byte	0x74
 10595 10ec 00       		.sleb128 0
 10596 10ed 72       		.byte	0x72
 10597 10ee 00       		.sleb128 0
 10598 10ef 22       		.byte	0x22
 10599 10f0 23       		.byte	0x23
 10600 10f1 30       		.uleb128 0x30
 10601 10f2 9F       		.byte	0x9f
 10602 10f3 9E000000 		.4byte	.LVL235
 10603 10f7 B0000000 		.4byte	.LVL237
 10604 10fb 0800     		.2byte	0x8
 10605 10fd 74       		.byte	0x74
 10606 10fe 00       		.sleb128 0
ARM GAS  /tmp/ccKU0f2P.s 			page 251


 10607 10ff 72       		.byte	0x72
 10608 1100 00       		.sleb128 0
 10609 1101 22       		.byte	0x22
 10610 1102 23       		.byte	0x23
 10611 1103 30       		.uleb128 0x30
 10612 1104 9F       		.byte	0x9f
 10613 1105 C6000000 		.4byte	.LVL241
 10614 1109 E6000000 		.4byte	.LVL244
 10615 110d 0100     		.2byte	0x1
 10616 110f 53       		.byte	0x53
 10617 1110 00000000 		.4byte	0
 10618 1114 00000000 		.4byte	0
 10619              	.LLST78:
 10620 1118 2E000000 		.4byte	.LVL220
 10621 111c 34000000 		.4byte	.LVL221
 10622 1120 0100     		.2byte	0x1
 10623 1122 50       		.byte	0x50
 10624 1123 66000000 		.4byte	.LVL226
 10625 1127 8E000000 		.4byte	.LVL232
 10626 112b 0100     		.2byte	0x1
 10627 112d 50       		.byte	0x50
 10628 112e 98000000 		.4byte	.LVL233
 10629 1132 B0000000 		.4byte	.LVL237
 10630 1136 0100     		.2byte	0x1
 10631 1138 50       		.byte	0x50
 10632 1139 BA000000 		.4byte	.LVL239
 10633 113d E6000000 		.4byte	.LVL244
 10634 1141 0100     		.2byte	0x1
 10635 1143 50       		.byte	0x50
 10636 1144 E8000000 		.4byte	.LVL245
 10637 1148 EE000000 		.4byte	.LVL246
 10638 114c 0100     		.2byte	0x1
 10639 114e 50       		.byte	0x50
 10640 114f F0000000 		.4byte	.LVL247
 10641 1153 F2000000 		.4byte	.LFE8
 10642 1157 0100     		.2byte	0x1
 10643 1159 50       		.byte	0x50
 10644 115a 00000000 		.4byte	0
 10645 115e 00000000 		.4byte	0
 10646              	.LLST79:
 10647 1162 00000000 		.4byte	.LFB10
 10648 1166 02000000 		.4byte	.LCFI12
 10649 116a 0200     		.2byte	0x2
 10650 116c 7D       		.byte	0x7d
 10651 116d 00       		.sleb128 0
 10652 116e 02000000 		.4byte	.LCFI12
 10653 1172 9A000000 		.4byte	.LFE10
 10654 1176 0200     		.2byte	0x2
 10655 1178 7D       		.byte	0x7d
 10656 1179 18       		.sleb128 24
 10657 117a 00000000 		.4byte	0
 10658 117e 00000000 		.4byte	0
 10659              	.LLST80:
 10660 1182 00000000 		.4byte	.LVL248
 10661 1186 0E000000 		.4byte	.LVL250
 10662 118a 0100     		.2byte	0x1
 10663 118c 50       		.byte	0x50
ARM GAS  /tmp/ccKU0f2P.s 			page 252


 10664 118d 0E000000 		.4byte	.LVL250
 10665 1191 16000000 		.4byte	.LVL252
 10666 1195 0100     		.2byte	0x1
 10667 1197 55       		.byte	0x55
 10668 1198 16000000 		.4byte	.LVL252
 10669 119c 19000000 		.4byte	.LVL253-1
 10670 11a0 0100     		.2byte	0x1
 10671 11a2 50       		.byte	0x50
 10672 11a3 19000000 		.4byte	.LVL253-1
 10673 11a7 28000000 		.4byte	.LVL254
 10674 11ab 0100     		.2byte	0x1
 10675 11ad 55       		.byte	0x55
 10676 11ae 28000000 		.4byte	.LVL254
 10677 11b2 2A000000 		.4byte	.LVL255
 10678 11b6 0100     		.2byte	0x1
 10679 11b8 50       		.byte	0x50
 10680 11b9 2A000000 		.4byte	.LVL255
 10681 11bd 9A000000 		.4byte	.LFE10
 10682 11c1 0100     		.2byte	0x1
 10683 11c3 55       		.byte	0x55
 10684 11c4 00000000 		.4byte	0
 10685 11c8 00000000 		.4byte	0
 10686              	.LLST81:
 10687 11cc 00000000 		.4byte	.LVL248
 10688 11d0 19000000 		.4byte	.LVL253-1
 10689 11d4 0100     		.2byte	0x1
 10690 11d6 51       		.byte	0x51
 10691 11d7 19000000 		.4byte	.LVL253-1
 10692 11db 28000000 		.4byte	.LVL254
 10693 11df 0100     		.2byte	0x1
 10694 11e1 57       		.byte	0x57
 10695 11e2 28000000 		.4byte	.LVL254
 10696 11e6 2A000000 		.4byte	.LVL255
 10697 11ea 0100     		.2byte	0x1
 10698 11ec 51       		.byte	0x51
 10699 11ed 2A000000 		.4byte	.LVL255
 10700 11f1 9A000000 		.4byte	.LFE10
 10701 11f5 0100     		.2byte	0x1
 10702 11f7 57       		.byte	0x57
 10703 11f8 00000000 		.4byte	0
 10704 11fc 00000000 		.4byte	0
 10705              	.LLST82:
 10706 1200 1A000000 		.4byte	.LVL253
 10707 1204 28000000 		.4byte	.LVL254
 10708 1208 0100     		.2byte	0x1
 10709 120a 50       		.byte	0x50
 10710 120b 46000000 		.4byte	.LVL262
 10711 120f 4C000000 		.4byte	.LVL263
 10712 1213 0100     		.2byte	0x1
 10713 1215 50       		.byte	0x50
 10714 1216 52000000 		.4byte	.LVL264
 10715 121a 5E000000 		.4byte	.LVL265
 10716 121e 0100     		.2byte	0x1
 10717 1220 50       		.byte	0x50
 10718 1221 00000000 		.4byte	0
 10719 1225 00000000 		.4byte	0
 10720              	.LLST83:
ARM GAS  /tmp/ccKU0f2P.s 			page 253


 10721 1229 2C000000 		.4byte	.LVL256
 10722 122d 34000000 		.4byte	.LVL258
 10723 1231 0100     		.2byte	0x1
 10724 1233 54       		.byte	0x54
 10725 1234 34000000 		.4byte	.LVL258
 10726 1238 38000000 		.4byte	.LVL259
 10727 123c 0200     		.2byte	0x2
 10728 123e 32       		.byte	0x32
 10729 123f 9F       		.byte	0x9f
 10730 1240 3C000000 		.4byte	.LVL260
 10731 1244 3E000000 		.4byte	.LVL261
 10732 1248 0200     		.2byte	0x2
 10733 124a 32       		.byte	0x32
 10734 124b 9F       		.byte	0x9f
 10735 124c 3E000000 		.4byte	.LVL261
 10736 1250 96000000 		.4byte	.LVL273
 10737 1254 0100     		.2byte	0x1
 10738 1256 54       		.byte	0x54
 10739 1257 00000000 		.4byte	0
 10740 125b 00000000 		.4byte	0
 10741              	.LLST84:
 10742 125f 0A000000 		.4byte	.LVL249
 10743 1263 14000000 		.4byte	.LVL251
 10744 1267 0100     		.2byte	0x1
 10745 1269 56       		.byte	0x56
 10746 126a 14000000 		.4byte	.LVL251
 10747 126e 16000000 		.4byte	.LVL252
 10748 1272 0200     		.2byte	0x2
 10749 1274 75       		.byte	0x75
 10750 1275 0C       		.sleb128 12
 10751 1276 28000000 		.4byte	.LVL254
 10752 127a 2A000000 		.4byte	.LVL255
 10753 127e 0100     		.2byte	0x1
 10754 1280 56       		.byte	0x56
 10755 1281 00000000 		.4byte	0
 10756 1285 00000000 		.4byte	0
 10757              	.LLST85:
 10758 1289 68000000 		.4byte	.LVL266
 10759 128d 78000000 		.4byte	.LVL267
 10760 1291 0100     		.2byte	0x1
 10761 1293 50       		.byte	0x50
 10762 1294 7E000000 		.4byte	.LVL268
 10763 1298 80000000 		.4byte	.LVL269
 10764 129c 0100     		.2byte	0x1
 10765 129e 50       		.byte	0x50
 10766 129f 88000000 		.4byte	.LVL270
 10767 12a3 8E000000 		.4byte	.LVL271
 10768 12a7 0100     		.2byte	0x1
 10769 12a9 50       		.byte	0x50
 10770 12aa 92000000 		.4byte	.LVL272
 10771 12ae 96000000 		.4byte	.LVL273
 10772 12b2 0100     		.2byte	0x1
 10773 12b4 50       		.byte	0x50
 10774 12b5 00000000 		.4byte	0
 10775 12b9 00000000 		.4byte	0
 10776              	.LLST86:
 10777 12bd 00000000 		.4byte	.LFB12
ARM GAS  /tmp/ccKU0f2P.s 			page 254


 10778 12c1 04000000 		.4byte	.LCFI13
 10779 12c5 0200     		.2byte	0x2
 10780 12c7 7D       		.byte	0x7d
 10781 12c8 00       		.sleb128 0
 10782 12c9 04000000 		.4byte	.LCFI13
 10783 12cd FA000000 		.4byte	.LFE12
 10784 12d1 0200     		.2byte	0x2
 10785 12d3 7D       		.byte	0x7d
 10786 12d4 20       		.sleb128 32
 10787 12d5 00000000 		.4byte	0
 10788 12d9 00000000 		.4byte	0
 10789              	.LLST87:
 10790 12dd 00000000 		.4byte	.LVL274
 10791 12e1 0A000000 		.4byte	.LVL275
 10792 12e5 0100     		.2byte	0x1
 10793 12e7 50       		.byte	0x50
 10794 12e8 0A000000 		.4byte	.LVL275
 10795 12ec FA000000 		.4byte	.LFE12
 10796 12f0 0100     		.2byte	0x1
 10797 12f2 54       		.byte	0x54
 10798 12f3 00000000 		.4byte	0
 10799 12f7 00000000 		.4byte	0
 10800              	.LLST88:
 10801 12fb 00000000 		.4byte	.LVL274
 10802 12ff 10000000 		.4byte	.LVL277
 10803 1303 0100     		.2byte	0x1
 10804 1305 51       		.byte	0x51
 10805 1306 10000000 		.4byte	.LVL277
 10806 130a 16000000 		.4byte	.LVL278
 10807 130e 0100     		.2byte	0x1
 10808 1310 57       		.byte	0x57
 10809 1311 16000000 		.4byte	.LVL278
 10810 1315 24000000 		.4byte	.LVL279
 10811 1319 0100     		.2byte	0x1
 10812 131b 51       		.byte	0x51
 10813 131c 24000000 		.4byte	.LVL279
 10814 1320 52000000 		.4byte	.LVL285
 10815 1324 0100     		.2byte	0x1
 10816 1326 57       		.byte	0x57
 10817 1327 52000000 		.4byte	.LVL285
 10818 132b 58000000 		.4byte	.LVL286
 10819 132f 0400     		.2byte	0x4
 10820 1331 F3       		.byte	0xf3
 10821 1332 01       		.uleb128 0x1
 10822 1333 51       		.byte	0x51
 10823 1334 9F       		.byte	0x9f
 10824 1335 58000000 		.4byte	.LVL286
 10825 1339 82000000 		.4byte	.LVL291
 10826 133d 0100     		.2byte	0x1
 10827 133f 57       		.byte	0x57
 10828 1340 82000000 		.4byte	.LVL291
 10829 1344 F4000000 		.4byte	.LVL301
 10830 1348 0400     		.2byte	0x4
 10831 134a F3       		.byte	0xf3
 10832 134b 01       		.uleb128 0x1
 10833 134c 51       		.byte	0x51
 10834 134d 9F       		.byte	0x9f
ARM GAS  /tmp/ccKU0f2P.s 			page 255


 10835 134e F4000000 		.4byte	.LVL301
 10836 1352 FA000000 		.4byte	.LFE12
 10837 1356 0100     		.2byte	0x1
 10838 1358 57       		.byte	0x57
 10839 1359 00000000 		.4byte	0
 10840 135d 00000000 		.4byte	0
 10841              	.LLST89:
 10842 1361 46000000 		.4byte	.LVL282
 10843 1365 4A000000 		.4byte	.LVL283
 10844 1369 0100     		.2byte	0x1
 10845 136b 50       		.byte	0x50
 10846 136c 4A000000 		.4byte	.LVL283
 10847 1370 4E000000 		.4byte	.LVL284
 10848 1374 0100     		.2byte	0x1
 10849 1376 55       		.byte	0x55
 10850 1377 4E000000 		.4byte	.LVL284
 10851 137b 52000000 		.4byte	.LVL285
 10852 137f 0100     		.2byte	0x1
 10853 1381 50       		.byte	0x50
 10854 1382 52000000 		.4byte	.LVL285
 10855 1386 58000000 		.4byte	.LVL286
 10856 138a 0100     		.2byte	0x1
 10857 138c 55       		.byte	0x55
 10858 138d 58000000 		.4byte	.LVL286
 10859 1391 5A000000 		.4byte	.LVL287
 10860 1395 0100     		.2byte	0x1
 10861 1397 50       		.byte	0x50
 10862 1398 5A000000 		.4byte	.LVL287
 10863 139c 6A000000 		.4byte	.LVL288
 10864 13a0 0100     		.2byte	0x1
 10865 13a2 55       		.byte	0x55
 10866 13a3 6A000000 		.4byte	.LVL288
 10867 13a7 7A000000 		.4byte	.LVL289
 10868 13ab 0100     		.2byte	0x1
 10869 13ad 50       		.byte	0x50
 10870 13ae 7A000000 		.4byte	.LVL289
 10871 13b2 DC000000 		.4byte	.LVL300
 10872 13b6 0100     		.2byte	0x1
 10873 13b8 55       		.byte	0x55
 10874 13b9 F4000000 		.4byte	.LVL301
 10875 13bd F6000000 		.4byte	.LVL302
 10876 13c1 0100     		.2byte	0x1
 10877 13c3 50       		.byte	0x50
 10878 13c4 F6000000 		.4byte	.LVL302
 10879 13c8 FA000000 		.4byte	.LFE12
 10880 13cc 0100     		.2byte	0x1
 10881 13ce 55       		.byte	0x55
 10882 13cf 00000000 		.4byte	0
 10883 13d3 00000000 		.4byte	0
 10884              	.LLST90:
 10885 13d7 0E000000 		.4byte	.LVL276
 10886 13db 10000000 		.4byte	.LVL277
 10887 13df 0100     		.2byte	0x1
 10888 13e1 50       		.byte	0x50
 10889 13e2 10000000 		.4byte	.LVL277
 10890 13e6 16000000 		.4byte	.LVL278
 10891 13ea 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 256


 10892 13ec 56       		.byte	0x56
 10893 13ed 16000000 		.4byte	.LVL278
 10894 13f1 2A000000 		.4byte	.LVL280
 10895 13f5 0100     		.2byte	0x1
 10896 13f7 50       		.byte	0x50
 10897 13f8 2A000000 		.4byte	.LVL280
 10898 13fc FA000000 		.4byte	.LFE12
 10899 1400 0100     		.2byte	0x1
 10900 1402 56       		.byte	0x56
 10901 1403 00000000 		.4byte	0
 10902 1407 00000000 		.4byte	0
 10903              	.LLST91:
 10904 140b A4000000 		.4byte	.LVL294
 10905 140f C2000000 		.4byte	.LVL296
 10906 1413 0100     		.2byte	0x1
 10907 1415 57       		.byte	0x57
 10908 1416 C2000000 		.4byte	.LVL296
 10909 141a C8000000 		.4byte	.LVL297
 10910 141e 0300     		.2byte	0x3
 10911 1420 77       		.byte	0x77
 10912 1421 7F       		.sleb128 -1
 10913 1422 9F       		.byte	0x9f
 10914 1423 C8000000 		.4byte	.LVL297
 10915 1427 CE000000 		.4byte	.LVL298
 10916 142b 0100     		.2byte	0x1
 10917 142d 57       		.byte	0x57
 10918 142e 00000000 		.4byte	0
 10919 1432 00000000 		.4byte	0
 10920              	.LLST92:
 10921 1436 00000000 		.4byte	.LFB14
 10922 143a 02000000 		.4byte	.LCFI14
 10923 143e 0200     		.2byte	0x2
 10924 1440 7D       		.byte	0x7d
 10925 1441 00       		.sleb128 0
 10926 1442 02000000 		.4byte	.LCFI14
 10927 1446 4E000000 		.4byte	.LFE14
 10928 144a 0200     		.2byte	0x2
 10929 144c 7D       		.byte	0x7d
 10930 144d 08       		.sleb128 8
 10931 144e 00000000 		.4byte	0
 10932 1452 00000000 		.4byte	0
 10933              	.LLST93:
 10934 1456 00000000 		.4byte	.LVL303
 10935 145a 06000000 		.4byte	.LVL304
 10936 145e 0100     		.2byte	0x1
 10937 1460 50       		.byte	0x50
 10938 1461 06000000 		.4byte	.LVL304
 10939 1465 4E000000 		.4byte	.LFE14
 10940 1469 0100     		.2byte	0x1
 10941 146b 54       		.byte	0x54
 10942 146c 00000000 		.4byte	0
 10943 1470 00000000 		.4byte	0
 10944              	.LLST94:
 10945 1474 00000000 		.4byte	.LVL303
 10946 1478 06000000 		.4byte	.LVL304
 10947 147c 0200     		.2byte	0x2
 10948 147e 34       		.byte	0x34
ARM GAS  /tmp/ccKU0f2P.s 			page 257


 10949 147f 9F       		.byte	0x9f
 10950 1480 10000000 		.4byte	.LVL305
 10951 1484 2C000000 		.4byte	.LVL309
 10952 1488 0100     		.2byte	0x1
 10953 148a 50       		.byte	0x50
 10954 148b 34000000 		.4byte	.LVL311
 10955 148f 3A000000 		.4byte	.LVL312
 10956 1493 0100     		.2byte	0x1
 10957 1495 50       		.byte	0x50
 10958 1496 3C000000 		.4byte	.LVL313
 10959 149a 3E000000 		.4byte	.LVL314
 10960 149e 0100     		.2byte	0x1
 10961 14a0 50       		.byte	0x50
 10962 14a1 46000000 		.4byte	.LVL315
 10963 14a5 4C000000 		.4byte	.LVL317
 10964 14a9 0100     		.2byte	0x1
 10965 14ab 50       		.byte	0x50
 10966 14ac 00000000 		.4byte	0
 10967 14b0 00000000 		.4byte	0
 10968              	.LLST95:
 10969 14b4 16000000 		.4byte	.LVL307
 10970 14b8 26000000 		.4byte	.LVL308
 10971 14bc 0200     		.2byte	0x2
 10972 14be 72       		.byte	0x72
 10973 14bf 00       		.sleb128 0
 10974 14c0 26000000 		.4byte	.LVL308
 10975 14c4 31000000 		.4byte	.LVL310-1
 10976 14c8 0300     		.2byte	0x3
 10977 14ca 74       		.byte	0x74
 10978 14cb 14       		.sleb128 20
 10979 14cc 06       		.byte	0x6
 10980 14cd 46000000 		.4byte	.LVL315
 10981 14d1 48000000 		.4byte	.LVL316
 10982 14d5 0200     		.2byte	0x2
 10983 14d7 72       		.byte	0x72
 10984 14d8 00       		.sleb128 0
 10985 14d9 00000000 		.4byte	0
 10986 14dd 00000000 		.4byte	0
 10987              	.LLST96:
 10988 14e1 14000000 		.4byte	.LVL306
 10989 14e5 26000000 		.4byte	.LVL308
 10990 14e9 0100     		.2byte	0x1
 10991 14eb 52       		.byte	0x52
 10992 14ec 26000000 		.4byte	.LVL308
 10993 14f0 31000000 		.4byte	.LVL310-1
 10994 14f4 0200     		.2byte	0x2
 10995 14f6 74       		.byte	0x74
 10996 14f7 14       		.sleb128 20
 10997 14f8 46000000 		.4byte	.LVL315
 10998 14fc 48000000 		.4byte	.LVL316
 10999 1500 0100     		.2byte	0x1
 11000 1502 52       		.byte	0x52
 11001 1503 00000000 		.4byte	0
 11002 1507 00000000 		.4byte	0
 11003              	.LLST97:
 11004 150b 00000000 		.4byte	.LFB13
 11005 150f 02000000 		.4byte	.LCFI15
ARM GAS  /tmp/ccKU0f2P.s 			page 258


 11006 1513 0200     		.2byte	0x2
 11007 1515 7D       		.byte	0x7d
 11008 1516 00       		.sleb128 0
 11009 1517 02000000 		.4byte	.LCFI15
 11010 151b 40000000 		.4byte	.LFE13
 11011 151f 0200     		.2byte	0x2
 11012 1521 7D       		.byte	0x7d
 11013 1522 10       		.sleb128 16
 11014 1523 00000000 		.4byte	0
 11015 1527 00000000 		.4byte	0
 11016              	.LLST98:
 11017 152b 00000000 		.4byte	.LVL318
 11018 152f 07000000 		.4byte	.LVL319-1
 11019 1533 0100     		.2byte	0x1
 11020 1535 50       		.byte	0x50
 11021 1536 07000000 		.4byte	.LVL319-1
 11022 153a 40000000 		.4byte	.LFE13
 11023 153e 0100     		.2byte	0x1
 11024 1540 55       		.byte	0x55
 11025 1541 00000000 		.4byte	0
 11026 1545 00000000 		.4byte	0
 11027              	.LLST99:
 11028 1549 08000000 		.4byte	.LVL319
 11029 154d 0E000000 		.4byte	.LVL320
 11030 1551 0100     		.2byte	0x1
 11031 1553 50       		.byte	0x50
 11032 1554 14000000 		.4byte	.LVL321
 11033 1558 1A000000 		.4byte	.LVL322
 11034 155c 0100     		.2byte	0x1
 11035 155e 50       		.byte	0x50
 11036 155f 00000000 		.4byte	0
 11037 1563 00000000 		.4byte	0
 11038              	.LLST100:
 11039 1567 1A000000 		.4byte	.LVL322
 11040 156b 2D000000 		.4byte	.LVL323-1
 11041 156f 0200     		.2byte	0x2
 11042 1571 70       		.byte	0x70
 11043 1572 00       		.sleb128 0
 11044 1573 3A000000 		.4byte	.LVL325
 11045 1577 3C000000 		.4byte	.LVL326
 11046 157b 0200     		.2byte	0x2
 11047 157d 70       		.byte	0x70
 11048 157e 00       		.sleb128 0
 11049 157f 00000000 		.4byte	0
 11050 1583 00000000 		.4byte	0
 11051              	.LLST101:
 11052 1587 1A000000 		.4byte	.LVL322
 11053 158b 2D000000 		.4byte	.LVL323-1
 11054 158f 0100     		.2byte	0x1
 11055 1591 50       		.byte	0x50
 11056 1592 3A000000 		.4byte	.LVL325
 11057 1596 3C000000 		.4byte	.LVL326
 11058 159a 0100     		.2byte	0x1
 11059 159c 50       		.byte	0x50
 11060 159d 00000000 		.4byte	0
 11061 15a1 00000000 		.4byte	0
 11062              	.LLST102:
ARM GAS  /tmp/ccKU0f2P.s 			page 259


 11063 15a5 00000000 		.4byte	.LFB18
 11064 15a9 02000000 		.4byte	.LCFI16
 11065 15ad 0200     		.2byte	0x2
 11066 15af 7D       		.byte	0x7d
 11067 15b0 00       		.sleb128 0
 11068 15b1 02000000 		.4byte	.LCFI16
 11069 15b5 86000000 		.4byte	.LFE18
 11070 15b9 0200     		.2byte	0x2
 11071 15bb 7D       		.byte	0x7d
 11072 15bc 18       		.sleb128 24
 11073 15bd 00000000 		.4byte	0
 11074 15c1 00000000 		.4byte	0
 11075              	.LLST103:
 11076 15c5 00000000 		.4byte	.LVL327
 11077 15c9 18000000 		.4byte	.LVL330
 11078 15cd 0100     		.2byte	0x1
 11079 15cf 50       		.byte	0x50
 11080 15d0 18000000 		.4byte	.LVL330
 11081 15d4 86000000 		.4byte	.LFE18
 11082 15d8 0100     		.2byte	0x1
 11083 15da 54       		.byte	0x54
 11084 15db 00000000 		.4byte	0
 11085 15df 00000000 		.4byte	0
 11086              	.LLST104:
 11087 15e3 00000000 		.4byte	.LVL327
 11088 15e7 02000000 		.4byte	.LVL328
 11089 15eb 0100     		.2byte	0x1
 11090 15ed 51       		.byte	0x51
 11091 15ee 02000000 		.4byte	.LVL328
 11092 15f2 06000000 		.4byte	.LVL329
 11093 15f6 0100     		.2byte	0x1
 11094 15f8 51       		.byte	0x51
 11095 15f9 06000000 		.4byte	.LVL329
 11096 15fd 86000000 		.4byte	.LFE18
 11097 1601 0200     		.2byte	0x2
 11098 1603 91       		.byte	0x91
 11099 1604 6C       		.sleb128 -20
 11100 1605 00000000 		.4byte	0
 11101 1609 00000000 		.4byte	0
 11102              	.LLST105:
 11103 160d 26000000 		.4byte	.LVL331
 11104 1611 2C000000 		.4byte	.LVL332
 11105 1615 0100     		.2byte	0x1
 11106 1617 50       		.byte	0x50
 11107 1618 30000000 		.4byte	.LVL333
 11108 161c 40000000 		.4byte	.LVL336
 11109 1620 0100     		.2byte	0x1
 11110 1622 50       		.byte	0x50
 11111 1623 68000000 		.4byte	.LVL339
 11112 1627 78000000 		.4byte	.LVL341
 11113 162b 0100     		.2byte	0x1
 11114 162d 50       		.byte	0x50
 11115 162e 84000000 		.4byte	.LVL343
 11116 1632 86000000 		.4byte	.LFE18
 11117 1636 0100     		.2byte	0x1
 11118 1638 50       		.byte	0x50
 11119 1639 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 260


 11120 163d 00000000 		.4byte	0
 11121              	.LLST106:
 11122 1641 40000000 		.4byte	.LVL336
 11123 1645 56000000 		.4byte	.LVL337
 11124 1649 0100     		.2byte	0x1
 11125 164b 50       		.byte	0x50
 11126 164c 56000000 		.4byte	.LVL337
 11127 1650 60000000 		.4byte	.LVL338
 11128 1654 0200     		.2byte	0x2
 11129 1656 74       		.byte	0x74
 11130 1657 14       		.sleb128 20
 11131 1658 82000000 		.4byte	.LVL342
 11132 165c 84000000 		.4byte	.LVL343
 11133 1660 0100     		.2byte	0x1
 11134 1662 50       		.byte	0x50
 11135 1663 00000000 		.4byte	0
 11136 1667 00000000 		.4byte	0
 11137              	.LLST107:
 11138 166b 34000000 		.4byte	.LVL334
 11139 166f 3C000000 		.4byte	.LVL335
 11140 1673 0200     		.2byte	0x2
 11141 1675 73       		.byte	0x73
 11142 1676 0B       		.sleb128 11
 11143 1677 3C000000 		.4byte	.LVL335
 11144 167b 60000000 		.4byte	.LVL338
 11145 167f 0500     		.2byte	0x5
 11146 1681 74       		.byte	0x74
 11147 1682 18       		.sleb128 24
 11148 1683 06       		.byte	0x6
 11149 1684 23       		.byte	0x23
 11150 1685 0B       		.uleb128 0xb
 11151 1686 6E000000 		.4byte	.LVL340
 11152 168a 82000000 		.4byte	.LVL342
 11153 168e 0200     		.2byte	0x2
 11154 1690 73       		.byte	0x73
 11155 1691 0B       		.sleb128 11
 11156 1692 82000000 		.4byte	.LVL342
 11157 1696 84000000 		.4byte	.LVL343
 11158 169a 0500     		.2byte	0x5
 11159 169c 74       		.byte	0x74
 11160 169d 18       		.sleb128 24
 11161 169e 06       		.byte	0x6
 11162 169f 23       		.byte	0x23
 11163 16a0 0B       		.uleb128 0xb
 11164 16a1 00000000 		.4byte	0
 11165 16a5 00000000 		.4byte	0
 11166              	.LLST108:
 11167 16a9 00000000 		.4byte	.LFB15
 11168 16ad 02000000 		.4byte	.LCFI17
 11169 16b1 0200     		.2byte	0x2
 11170 16b3 7D       		.byte	0x7d
 11171 16b4 00       		.sleb128 0
 11172 16b5 02000000 		.4byte	.LCFI17
 11173 16b9 58000000 		.4byte	.LFE15
 11174 16bd 0200     		.2byte	0x2
 11175 16bf 7D       		.byte	0x7d
 11176 16c0 10       		.sleb128 16
ARM GAS  /tmp/ccKU0f2P.s 			page 261


 11177 16c1 00000000 		.4byte	0
 11178 16c5 00000000 		.4byte	0
 11179              	.LLST109:
 11180 16c9 00000000 		.4byte	.LVL344
 11181 16cd 07000000 		.4byte	.LVL345-1
 11182 16d1 0100     		.2byte	0x1
 11183 16d3 50       		.byte	0x50
 11184 16d4 07000000 		.4byte	.LVL345-1
 11185 16d8 58000000 		.4byte	.LFE15
 11186 16dc 0100     		.2byte	0x1
 11187 16de 54       		.byte	0x54
 11188 16df 00000000 		.4byte	0
 11189 16e3 00000000 		.4byte	0
 11190              	.LLST110:
 11191 16e7 08000000 		.4byte	.LVL345
 11192 16eb 0E000000 		.4byte	.LVL346
 11193 16ef 0100     		.2byte	0x1
 11194 16f1 50       		.byte	0x50
 11195 16f2 14000000 		.4byte	.LVL347
 11196 16f6 1C000000 		.4byte	.LVL348
 11197 16fa 0100     		.2byte	0x1
 11198 16fc 50       		.byte	0x50
 11199 16fd 2C000000 		.4byte	.LVL350
 11200 1701 34000000 		.4byte	.LVL351
 11201 1705 0200     		.2byte	0x2
 11202 1707 30       		.byte	0x30
 11203 1708 9F       		.byte	0x9f
 11204 1709 34000000 		.4byte	.LVL351
 11205 170d 3E000000 		.4byte	.LVL353
 11206 1711 0100     		.2byte	0x1
 11207 1713 50       		.byte	0x50
 11208 1714 00000000 		.4byte	0
 11209 1718 00000000 		.4byte	0
 11210              	.LLST111:
 11211 171c 1C000000 		.4byte	.LVL348
 11212 1720 29000000 		.4byte	.LVL349-1
 11213 1724 0200     		.2byte	0x2
 11214 1726 73       		.byte	0x73
 11215 1727 00       		.sleb128 0
 11216 1728 2C000000 		.4byte	.LVL350
 11217 172c 33000000 		.4byte	.LVL351-1
 11218 1730 0200     		.2byte	0x2
 11219 1732 73       		.byte	0x73
 11220 1733 00       		.sleb128 0
 11221 1734 00000000 		.4byte	0
 11222 1738 00000000 		.4byte	0
 11223              	.LLST112:
 11224 173c 3A000000 		.4byte	.LVL352
 11225 1740 54000000 		.4byte	.LVL356
 11226 1744 0100     		.2byte	0x1
 11227 1746 56       		.byte	0x56
 11228 1747 00000000 		.4byte	0
 11229 174b 00000000 		.4byte	0
 11230              	.LLST113:
 11231 174f 00000000 		.4byte	.LFB9
 11232 1753 04000000 		.4byte	.LCFI18
 11233 1757 0200     		.2byte	0x2
ARM GAS  /tmp/ccKU0f2P.s 			page 262


 11234 1759 7D       		.byte	0x7d
 11235 175a 00       		.sleb128 0
 11236 175b 04000000 		.4byte	.LCFI18
 11237 175f 54000000 		.4byte	.LFE9
 11238 1763 0200     		.2byte	0x2
 11239 1765 7D       		.byte	0x7d
 11240 1766 10       		.sleb128 16
 11241 1767 00000000 		.4byte	0
 11242 176b 00000000 		.4byte	0
 11243              	.LLST114:
 11244 176f 00000000 		.4byte	.LVL357
 11245 1773 0A000000 		.4byte	.LVL358
 11246 1777 0100     		.2byte	0x1
 11247 1779 50       		.byte	0x50
 11248 177a 0A000000 		.4byte	.LVL358
 11249 177e 0E000000 		.4byte	.LVL359
 11250 1782 0100     		.2byte	0x1
 11251 1784 54       		.byte	0x54
 11252 1785 0E000000 		.4byte	.LVL359
 11253 1789 14000000 		.4byte	.LVL360
 11254 178d 0100     		.2byte	0x1
 11255 178f 50       		.byte	0x50
 11256 1790 14000000 		.4byte	.LVL360
 11257 1794 54000000 		.4byte	.LFE9
 11258 1798 0100     		.2byte	0x1
 11259 179a 54       		.byte	0x54
 11260 179b 00000000 		.4byte	0
 11261 179f 00000000 		.4byte	0
 11262              	.LLST115:
 11263 17a3 00000000 		.4byte	.LVL357
 11264 17a7 0A000000 		.4byte	.LVL358
 11265 17ab 0100     		.2byte	0x1
 11266 17ad 51       		.byte	0x51
 11267 17ae 0A000000 		.4byte	.LVL358
 11268 17b2 0E000000 		.4byte	.LVL359
 11269 17b6 0100     		.2byte	0x1
 11270 17b8 55       		.byte	0x55
 11271 17b9 0E000000 		.4byte	.LVL359
 11272 17bd 14000000 		.4byte	.LVL360
 11273 17c1 0100     		.2byte	0x1
 11274 17c3 51       		.byte	0x51
 11275 17c4 14000000 		.4byte	.LVL360
 11276 17c8 48000000 		.4byte	.LVL367
 11277 17cc 0100     		.2byte	0x1
 11278 17ce 55       		.byte	0x55
 11279 17cf 50000000 		.4byte	.LVL368
 11280 17d3 54000000 		.4byte	.LFE9
 11281 17d7 0100     		.2byte	0x1
 11282 17d9 55       		.byte	0x55
 11283 17da 00000000 		.4byte	0
 11284 17de 00000000 		.4byte	0
 11285              	.LLST116:
 11286 17e2 14000000 		.4byte	.LVL360
 11287 17e6 3C000000 		.4byte	.LVL365
 11288 17ea 0200     		.2byte	0x2
 11289 17ec 30       		.byte	0x30
 11290 17ed 9F       		.byte	0x9f
ARM GAS  /tmp/ccKU0f2P.s 			page 263


 11291 17ee 3C000000 		.4byte	.LVL365
 11292 17f2 42000000 		.4byte	.LVL366
 11293 17f6 0100     		.2byte	0x1
 11294 17f8 50       		.byte	0x50
 11295 17f9 50000000 		.4byte	.LVL368
 11296 17fd 52000000 		.4byte	.LVL369
 11297 1801 0200     		.2byte	0x2
 11298 1803 30       		.byte	0x30
 11299 1804 9F       		.byte	0x9f
 11300 1805 52000000 		.4byte	.LVL369
 11301 1809 54000000 		.4byte	.LFE9
 11302 180d 0100     		.2byte	0x1
 11303 180f 50       		.byte	0x50
 11304 1810 00000000 		.4byte	0
 11305 1814 00000000 		.4byte	0
 11306              	.LLST117:
 11307 1818 22000000 		.4byte	.LVL361
 11308 181c 26000000 		.4byte	.LVL362
 11309 1820 0100     		.2byte	0x1
 11310 1822 50       		.byte	0x50
 11311 1823 2A000000 		.4byte	.LVL363
 11312 1827 34000000 		.4byte	.LVL364
 11313 182b 0100     		.2byte	0x1
 11314 182d 50       		.byte	0x50
 11315 182e 34000000 		.4byte	.LVL364
 11316 1832 50000000 		.4byte	.LVL368
 11317 1836 0100     		.2byte	0x1
 11318 1838 56       		.byte	0x56
 11319 1839 50000000 		.4byte	.LVL368
 11320 183d 52000000 		.4byte	.LVL369
 11321 1841 0100     		.2byte	0x1
 11322 1843 50       		.byte	0x50
 11323 1844 52000000 		.4byte	.LVL369
 11324 1848 54000000 		.4byte	.LFE9
 11325 184c 0100     		.2byte	0x1
 11326 184e 56       		.byte	0x56
 11327 184f 00000000 		.4byte	0
 11328 1853 00000000 		.4byte	0
 11329              	.LLST118:
 11330 1857 00000000 		.4byte	.LVL370
 11331 185b 0E000000 		.4byte	.LVL372
 11332 185f 0100     		.2byte	0x1
 11333 1861 50       		.byte	0x50
 11334 1862 0E000000 		.4byte	.LVL372
 11335 1866 16000000 		.4byte	.LVL373
 11336 186a 0400     		.2byte	0x4
 11337 186c F3       		.byte	0xf3
 11338 186d 01       		.uleb128 0x1
 11339 186e 50       		.byte	0x50
 11340 186f 9F       		.byte	0x9f
 11341 1870 16000000 		.4byte	.LVL373
 11342 1874 18000000 		.4byte	.LVL374
 11343 1878 0100     		.2byte	0x1
 11344 187a 50       		.byte	0x50
 11345 187b 18000000 		.4byte	.LVL374
 11346 187f 20000000 		.4byte	.LFE22
 11347 1883 0400     		.2byte	0x4
ARM GAS  /tmp/ccKU0f2P.s 			page 264


 11348 1885 F3       		.byte	0xf3
 11349 1886 01       		.uleb128 0x1
 11350 1887 50       		.byte	0x50
 11351 1888 9F       		.byte	0x9f
 11352 1889 00000000 		.4byte	0
 11353 188d 00000000 		.4byte	0
 11354              	.LLST119:
 11355 1891 06000000 		.4byte	.LVL371
 11356 1895 16000000 		.4byte	.LVL373
 11357 1899 0100     		.2byte	0x1
 11358 189b 53       		.byte	0x53
 11359 189c 00000000 		.4byte	0
 11360 18a0 00000000 		.4byte	0
 11361              	.LLST120:
 11362 18a4 00000000 		.4byte	.LFB23
 11363 18a8 04000000 		.4byte	.LCFI19
 11364 18ac 0200     		.2byte	0x2
 11365 18ae 7D       		.byte	0x7d
 11366 18af 00       		.sleb128 0
 11367 18b0 04000000 		.4byte	.LCFI19
 11368 18b4 06000000 		.4byte	.LCFI20
 11369 18b8 0200     		.2byte	0x2
 11370 18ba 7D       		.byte	0x7d
 11371 18bb 18       		.sleb128 24
 11372 18bc 06000000 		.4byte	.LCFI20
 11373 18c0 52010000 		.4byte	.LFE23
 11374 18c4 0300     		.2byte	0x3
 11375 18c6 7D       		.byte	0x7d
 11376 18c7 C800     		.sleb128 72
 11377 18c9 00000000 		.4byte	0
 11378 18cd 00000000 		.4byte	0
 11379              	.LLST121:
 11380 18d1 00000000 		.4byte	.LVL375
 11381 18d5 0A000000 		.4byte	.LVL376
 11382 18d9 0100     		.2byte	0x1
 11383 18db 50       		.byte	0x50
 11384 18dc 0A000000 		.4byte	.LVL376
 11385 18e0 52010000 		.4byte	.LFE23
 11386 18e4 0100     		.2byte	0x1
 11387 18e6 55       		.byte	0x55
 11388 18e7 00000000 		.4byte	0
 11389 18eb 00000000 		.4byte	0
 11390              	.LLST122:
 11391 18ef 00000000 		.4byte	.LVL375
 11392 18f3 14000000 		.4byte	.LVL377
 11393 18f7 0100     		.2byte	0x1
 11394 18f9 51       		.byte	0x51
 11395 18fa 14000000 		.4byte	.LVL377
 11396 18fe 2A000000 		.4byte	.LVL380
 11397 1902 0200     		.2byte	0x2
 11398 1904 70       		.byte	0x70
 11399 1905 54       		.sleb128 -44
 11400 1906 2A000000 		.4byte	.LVL380
 11401 190a 52010000 		.4byte	.LFE23
 11402 190e 0300     		.2byte	0x3
 11403 1910 91       		.byte	0x91
 11404 1911 BC7F     		.sleb128 -68
ARM GAS  /tmp/ccKU0f2P.s 			page 265


 11405 1913 00000000 		.4byte	0
 11406 1917 00000000 		.4byte	0
 11407              	.LLST123:
 11408 191b 00000000 		.4byte	.LVL375
 11409 191f 1A000000 		.4byte	.LVL378
 11410 1923 0100     		.2byte	0x1
 11411 1925 52       		.byte	0x52
 11412 1926 1A000000 		.4byte	.LVL378
 11413 192a 6A000000 		.4byte	.LVL389
 11414 192e 0100     		.2byte	0x1
 11415 1930 56       		.byte	0x56
 11416 1931 D2000000 		.4byte	.LVL398
 11417 1935 F2000000 		.4byte	.LVL401
 11418 1939 0100     		.2byte	0x1
 11419 193b 56       		.byte	0x56
 11420 193c FE000000 		.4byte	.LVL402
 11421 1940 44010000 		.4byte	.LVL403
 11422 1944 0100     		.2byte	0x1
 11423 1946 56       		.byte	0x56
 11424 1947 46010000 		.4byte	.LVL404
 11425 194b 4C010000 		.4byte	.LVL405
 11426 194f 0100     		.2byte	0x1
 11427 1951 56       		.byte	0x56
 11428 1952 00000000 		.4byte	0
 11429 1956 00000000 		.4byte	0
 11430              	.LLST124:
 11431 195a 22000000 		.4byte	.LVL379
 11432 195e 2A000000 		.4byte	.LVL380
 11433 1962 0100     		.2byte	0x1
 11434 1964 50       		.byte	0x50
 11435 1965 30000000 		.4byte	.LVL381
 11436 1969 4A000000 		.4byte	.LVL384
 11437 196d 0100     		.2byte	0x1
 11438 196f 50       		.byte	0x50
 11439 1970 4E000000 		.4byte	.LVL385
 11440 1974 64000000 		.4byte	.LVL388
 11441 1978 0100     		.2byte	0x1
 11442 197a 50       		.byte	0x50
 11443 197b C2000000 		.4byte	.LVL395
 11444 197f C8000000 		.4byte	.LVL396
 11445 1983 0100     		.2byte	0x1
 11446 1985 50       		.byte	0x50
 11447 1986 D2000000 		.4byte	.LVL398
 11448 198a DC000000 		.4byte	.LVL400
 11449 198e 0100     		.2byte	0x1
 11450 1990 50       		.byte	0x50
 11451 1991 44010000 		.4byte	.LVL403
 11452 1995 46010000 		.4byte	.LVL404
 11453 1999 0200     		.2byte	0x2
 11454 199b 38       		.byte	0x38
 11455 199c 9F       		.byte	0x9f
 11456 199d 00000000 		.4byte	0
 11457 19a1 00000000 		.4byte	0
 11458              	.LLST125:
 11459 19a5 32000000 		.4byte	.LVL382
 11460 19a9 44010000 		.4byte	.LVL403
 11461 19ad 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 266


 11462 19af 54       		.byte	0x54
 11463 19b0 46010000 		.4byte	.LVL404
 11464 19b4 4C010000 		.4byte	.LVL405
 11465 19b8 0100     		.2byte	0x1
 11466 19ba 54       		.byte	0x54
 11467 19bb 00000000 		.4byte	0
 11468 19bf 00000000 		.4byte	0
 11469              	.LLST126:
 11470 19c3 78000000 		.4byte	.LVL390
 11471 19c7 82000000 		.4byte	.LVL391
 11472 19cb 0100     		.2byte	0x1
 11473 19cd 50       		.byte	0x50
 11474 19ce BE000000 		.4byte	.LVL394
 11475 19d2 D6000000 		.4byte	.LVL399
 11476 19d6 0100     		.2byte	0x1
 11477 19d8 58       		.byte	0x58
 11478 19d9 00000000 		.4byte	0
 11479 19dd 00000000 		.4byte	0
 11480              	.LLST127:
 11481 19e1 9A000000 		.4byte	.LVL392
 11482 19e5 B4000000 		.4byte	.LVL393
 11483 19e9 0800     		.2byte	0x8
 11484 19eb 77       		.byte	0x77
 11485 19ec 00       		.sleb128 0
 11486 19ed 40       		.byte	0x40
 11487 19ee 24       		.byte	0x24
 11488 19ef 72       		.byte	0x72
 11489 19f0 00       		.sleb128 0
 11490 19f1 21       		.byte	0x21
 11491 19f2 9F       		.byte	0x9f
 11492 19f3 B4000000 		.4byte	.LVL393
 11493 19f7 CA000000 		.4byte	.LVL397
 11494 19fb 0100     		.2byte	0x1
 11495 19fd 57       		.byte	0x57
 11496 19fe CA000000 		.4byte	.LVL397
 11497 1a02 D6000000 		.4byte	.LVL399
 11498 1a06 0300     		.2byte	0x3
 11499 1a08 77       		.byte	0x77
 11500 1a09 01       		.sleb128 1
 11501 1a0a 9F       		.byte	0x9f
 11502 1a0b 00000000 		.4byte	0
 11503 1a0f 00000000 		.4byte	0
 11504              	.LLST128:
 11505 1a13 00000000 		.4byte	.LFB24
 11506 1a17 04000000 		.4byte	.LCFI21
 11507 1a1b 0200     		.2byte	0x2
 11508 1a1d 7D       		.byte	0x7d
 11509 1a1e 00       		.sleb128 0
 11510 1a1f 04000000 		.4byte	.LCFI21
 11511 1a23 68010000 		.4byte	.LFE24
 11512 1a27 0200     		.2byte	0x2
 11513 1a29 7D       		.byte	0x7d
 11514 1a2a 30       		.sleb128 48
 11515 1a2b 00000000 		.4byte	0
 11516 1a2f 00000000 		.4byte	0
 11517              	.LLST129:
 11518 1a33 00000000 		.4byte	.LVL406
ARM GAS  /tmp/ccKU0f2P.s 			page 267


 11519 1a37 12000000 		.4byte	.LVL409
 11520 1a3b 0100     		.2byte	0x1
 11521 1a3d 50       		.byte	0x50
 11522 1a3e 12000000 		.4byte	.LVL409
 11523 1a42 68010000 		.4byte	.LFE24
 11524 1a46 0100     		.2byte	0x1
 11525 1a48 54       		.byte	0x54
 11526 1a49 00000000 		.4byte	0
 11527 1a4d 00000000 		.4byte	0
 11528              	.LLST130:
 11529 1a51 00000000 		.4byte	.LVL406
 11530 1a55 14000000 		.4byte	.LVL410
 11531 1a59 0100     		.2byte	0x1
 11532 1a5b 51       		.byte	0x51
 11533 1a5c 14000000 		.4byte	.LVL410
 11534 1a60 3C000000 		.4byte	.LVL415
 11535 1a64 0100     		.2byte	0x1
 11536 1a66 58       		.byte	0x58
 11537 1a67 3C000000 		.4byte	.LVL415
 11538 1a6b 60010000 		.4byte	.LVL442
 11539 1a6f 0400     		.2byte	0x4
 11540 1a71 F3       		.byte	0xf3
 11541 1a72 01       		.uleb128 0x1
 11542 1a73 51       		.byte	0x51
 11543 1a74 9F       		.byte	0x9f
 11544 1a75 60010000 		.4byte	.LVL442
 11545 1a79 62010000 		.4byte	.LVL443
 11546 1a7d 0100     		.2byte	0x1
 11547 1a7f 58       		.byte	0x58
 11548 1a80 62010000 		.4byte	.LVL443
 11549 1a84 68010000 		.4byte	.LFE24
 11550 1a88 0400     		.2byte	0x4
 11551 1a8a F3       		.byte	0xf3
 11552 1a8b 01       		.uleb128 0x1
 11553 1a8c 51       		.byte	0x51
 11554 1a8d 9F       		.byte	0x9f
 11555 1a8e 00000000 		.4byte	0
 11556 1a92 00000000 		.4byte	0
 11557              	.LLST131:
 11558 1a96 00000000 		.4byte	.LVL406
 11559 1a9a 19000000 		.4byte	.LVL411-1
 11560 1a9e 0100     		.2byte	0x1
 11561 1aa0 52       		.byte	0x52
 11562 1aa1 19000000 		.4byte	.LVL411-1
 11563 1aa5 3C000000 		.4byte	.LVL415
 11564 1aa9 0100     		.2byte	0x1
 11565 1aab 57       		.byte	0x57
 11566 1aac 3C000000 		.4byte	.LVL415
 11567 1ab0 5C010000 		.4byte	.LVL441
 11568 1ab4 0100     		.2byte	0x1
 11569 1ab6 56       		.byte	0x56
 11570 1ab7 60010000 		.4byte	.LVL442
 11571 1abb 62010000 		.4byte	.LVL443
 11572 1abf 0100     		.2byte	0x1
 11573 1ac1 57       		.byte	0x57
 11574 1ac2 00000000 		.4byte	0
 11575 1ac6 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 268


 11576              	.LLST132:
 11577 1aca 00000000 		.4byte	.LVL406
 11578 1ace 0A000000 		.4byte	.LVL407
 11579 1ad2 0100     		.2byte	0x1
 11580 1ad4 53       		.byte	0x53
 11581 1ad5 0A000000 		.4byte	.LVL407
 11582 1ad9 68010000 		.4byte	.LFE24
 11583 1add 0100     		.2byte	0x1
 11584 1adf 5A       		.byte	0x5a
 11585 1ae0 00000000 		.4byte	0
 11586 1ae4 00000000 		.4byte	0
 11587              	.LLST133:
 11588 1ae8 1A000000 		.4byte	.LVL411
 11589 1aec 24000000 		.4byte	.LVL412
 11590 1af0 0100     		.2byte	0x1
 11591 1af2 50       		.byte	0x50
 11592 1af3 00000000 		.4byte	0
 11593 1af7 00000000 		.4byte	0
 11594              	.LLST134:
 11595 1afb 5C000000 		.4byte	.LVL417
 11596 1aff 5E000000 		.4byte	.LVL418
 11597 1b03 0100     		.2byte	0x1
 11598 1b05 50       		.byte	0x50
 11599 1b06 66000000 		.4byte	.LVL419
 11600 1b0a 72000000 		.4byte	.LVL420
 11601 1b0e 0100     		.2byte	0x1
 11602 1b10 50       		.byte	0x50
 11603 1b11 00000000 		.4byte	0
 11604 1b15 00000000 		.4byte	0
 11605              	.LLST135:
 11606 1b19 80000000 		.4byte	.LVL421
 11607 1b1d 84000000 		.4byte	.LVL422
 11608 1b21 0100     		.2byte	0x1
 11609 1b23 50       		.byte	0x50
 11610 1b24 8E000000 		.4byte	.LVL423
 11611 1b28 96000000 		.4byte	.LVL424
 11612 1b2c 0100     		.2byte	0x1
 11613 1b2e 50       		.byte	0x50
 11614 1b2f 96000000 		.4byte	.LVL424
 11615 1b33 C8000000 		.4byte	.LVL427
 11616 1b37 0100     		.2byte	0x1
 11617 1b39 57       		.byte	0x57
 11618 1b3a E2000000 		.4byte	.LVL430
 11619 1b3e 1C010000 		.4byte	.LVL433
 11620 1b42 0100     		.2byte	0x1
 11621 1b44 57       		.byte	0x57
 11622 1b45 28010000 		.4byte	.LVL434
 11623 1b49 2A010000 		.4byte	.LVL435
 11624 1b4d 0100     		.2byte	0x1
 11625 1b4f 57       		.byte	0x57
 11626 1b50 00000000 		.4byte	0
 11627 1b54 00000000 		.4byte	0
 11628              	.LLST136:
 11629 1b58 30000000 		.4byte	.LVL413
 11630 1b5c 36000000 		.4byte	.LVL414
 11631 1b60 0800     		.2byte	0x8
 11632 1b62 74       		.byte	0x74
ARM GAS  /tmp/ccKU0f2P.s 			page 269


 11633 1b63 0C       		.sleb128 12
 11634 1b64 06       		.byte	0x6
 11635 1b65 74       		.byte	0x74
 11636 1b66 08       		.sleb128 8
 11637 1b67 06       		.byte	0x6
 11638 1b68 1C       		.byte	0x1c
 11639 1b69 9F       		.byte	0x9f
 11640 1b6a 36000000 		.4byte	.LVL414
 11641 1b6e 3C000000 		.4byte	.LVL415
 11642 1b72 0100     		.2byte	0x1
 11643 1b74 56       		.byte	0x56
 11644 1b75 00000000 		.4byte	0
 11645 1b79 00000000 		.4byte	0
 11646              	.LLST137:
 11647 1b7d E0000000 		.4byte	.LVL429
 11648 1b81 E2000000 		.4byte	.LVL430
 11649 1b85 0100     		.2byte	0x1
 11650 1b87 57       		.byte	0x57
 11651 1b88 34010000 		.4byte	.LVL436
 11652 1b8c 5C010000 		.4byte	.LVL441
 11653 1b90 0100     		.2byte	0x1
 11654 1b92 57       		.byte	0x57
 11655 1b93 00000000 		.4byte	0
 11656 1b97 00000000 		.4byte	0
 11657              	.LLST138:
 11658 1b9b 96000000 		.4byte	.LVL424
 11659 1b9f 1C010000 		.4byte	.LVL433
 11660 1ba3 0100     		.2byte	0x1
 11661 1ba5 59       		.byte	0x59
 11662 1ba6 28010000 		.4byte	.LVL434
 11663 1baa 2A010000 		.4byte	.LVL435
 11664 1bae 0100     		.2byte	0x1
 11665 1bb0 59       		.byte	0x59
 11666 1bb1 00000000 		.4byte	0
 11667 1bb5 00000000 		.4byte	0
 11668              	.LLST139:
 11669 1bb9 52000000 		.4byte	.LVL416
 11670 1bbd 65000000 		.4byte	.LVL419-1
 11671 1bc1 0100     		.2byte	0x1
 11672 1bc3 53       		.byte	0x53
 11673 1bc4 00000000 		.4byte	0
 11674 1bc8 00000000 		.4byte	0
 11675              	.LLST140:
 11676 1bcc 0C000000 		.4byte	.LVL408
 11677 1bd0 14000000 		.4byte	.LVL410
 11678 1bd4 0100     		.2byte	0x1
 11679 1bd6 51       		.byte	0x51
 11680 1bd7 14000000 		.4byte	.LVL410
 11681 1bdb 68010000 		.4byte	.LFE24
 11682 1bdf 0100     		.2byte	0x1
 11683 1be1 58       		.byte	0x58
 11684 1be2 00000000 		.4byte	0
 11685 1be6 00000000 		.4byte	0
 11686              	.LLST141:
 11687 1bea 00000000 		.4byte	.LFB25
 11688 1bee 04000000 		.4byte	.LCFI22
 11689 1bf2 0200     		.2byte	0x2
ARM GAS  /tmp/ccKU0f2P.s 			page 270


 11690 1bf4 7D       		.byte	0x7d
 11691 1bf5 00       		.sleb128 0
 11692 1bf6 04000000 		.4byte	.LCFI22
 11693 1bfa 96010000 		.4byte	.LFE25
 11694 1bfe 0200     		.2byte	0x2
 11695 1c00 7D       		.byte	0x7d
 11696 1c01 30       		.sleb128 48
 11697 1c02 00000000 		.4byte	0
 11698 1c06 00000000 		.4byte	0
 11699              	.LLST142:
 11700 1c0a 00000000 		.4byte	.LVL444
 11701 1c0e 12000000 		.4byte	.LVL447
 11702 1c12 0100     		.2byte	0x1
 11703 1c14 50       		.byte	0x50
 11704 1c15 12000000 		.4byte	.LVL447
 11705 1c19 96010000 		.4byte	.LFE25
 11706 1c1d 0100     		.2byte	0x1
 11707 1c1f 54       		.byte	0x54
 11708 1c20 00000000 		.4byte	0
 11709 1c24 00000000 		.4byte	0
 11710              	.LLST143:
 11711 1c28 00000000 		.4byte	.LVL444
 11712 1c2c 14000000 		.4byte	.LVL448
 11713 1c30 0100     		.2byte	0x1
 11714 1c32 51       		.byte	0x51
 11715 1c33 14000000 		.4byte	.LVL448
 11716 1c37 3E000000 		.4byte	.LVL452
 11717 1c3b 0100     		.2byte	0x1
 11718 1c3d 58       		.byte	0x58
 11719 1c3e 3E000000 		.4byte	.LVL452
 11720 1c42 8E010000 		.4byte	.LVL484
 11721 1c46 0400     		.2byte	0x4
 11722 1c48 F3       		.byte	0xf3
 11723 1c49 01       		.uleb128 0x1
 11724 1c4a 51       		.byte	0x51
 11725 1c4b 9F       		.byte	0x9f
 11726 1c4c 8E010000 		.4byte	.LVL484
 11727 1c50 90010000 		.4byte	.LVL485
 11728 1c54 0100     		.2byte	0x1
 11729 1c56 58       		.byte	0x58
 11730 1c57 90010000 		.4byte	.LVL485
 11731 1c5b 96010000 		.4byte	.LFE25
 11732 1c5f 0400     		.2byte	0x4
 11733 1c61 F3       		.byte	0xf3
 11734 1c62 01       		.uleb128 0x1
 11735 1c63 51       		.byte	0x51
 11736 1c64 9F       		.byte	0x9f
 11737 1c65 00000000 		.4byte	0
 11738 1c69 00000000 		.4byte	0
 11739              	.LLST144:
 11740 1c6d 00000000 		.4byte	.LVL444
 11741 1c71 19000000 		.4byte	.LVL449-1
 11742 1c75 0100     		.2byte	0x1
 11743 1c77 52       		.byte	0x52
 11744 1c78 19000000 		.4byte	.LVL449-1
 11745 1c7c 3C000000 		.4byte	.LVL451
 11746 1c80 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 271


 11747 1c82 57       		.byte	0x57
 11748 1c83 3C000000 		.4byte	.LVL451
 11749 1c87 3E000000 		.4byte	.LVL452
 11750 1c8b 0400     		.2byte	0x4
 11751 1c8d F3       		.byte	0xf3
 11752 1c8e 01       		.uleb128 0x1
 11753 1c8f 52       		.byte	0x52
 11754 1c90 9F       		.byte	0x9f
 11755 1c91 8E010000 		.4byte	.LVL484
 11756 1c95 90010000 		.4byte	.LVL485
 11757 1c99 0100     		.2byte	0x1
 11758 1c9b 57       		.byte	0x57
 11759 1c9c 00000000 		.4byte	0
 11760 1ca0 00000000 		.4byte	0
 11761              	.LLST145:
 11762 1ca4 00000000 		.4byte	.LVL444
 11763 1ca8 0A000000 		.4byte	.LVL445
 11764 1cac 0100     		.2byte	0x1
 11765 1cae 53       		.byte	0x53
 11766 1caf 0A000000 		.4byte	.LVL445
 11767 1cb3 96010000 		.4byte	.LFE25
 11768 1cb7 0100     		.2byte	0x1
 11769 1cb9 59       		.byte	0x59
 11770 1cba 00000000 		.4byte	0
 11771 1cbe 00000000 		.4byte	0
 11772              	.LLST146:
 11773 1cc2 1A000000 		.4byte	.LVL449
 11774 1cc6 24000000 		.4byte	.LVL450
 11775 1cca 0100     		.2byte	0x1
 11776 1ccc 50       		.byte	0x50
 11777 1ccd 00000000 		.4byte	0
 11778 1cd1 00000000 		.4byte	0
 11779              	.LLST147:
 11780 1cd5 C0000000 		.4byte	.LVL462
 11781 1cd9 C5000000 		.4byte	.LVL463-1
 11782 1cdd 0100     		.2byte	0x1
 11783 1cdf 51       		.byte	0x51
 11784 1ce0 C8000000 		.4byte	.LVL464
 11785 1ce4 CC000000 		.4byte	.LVL465
 11786 1ce8 0100     		.2byte	0x1
 11787 1cea 50       		.byte	0x50
 11788 1ceb CC000000 		.4byte	.LVL465
 11789 1cef D2000000 		.4byte	.LVL466
 11790 1cf3 0100     		.2byte	0x1
 11791 1cf5 51       		.byte	0x51
 11792 1cf6 E4000000 		.4byte	.LVL469
 11793 1cfa E6000000 		.4byte	.LVL470
 11794 1cfe 0100     		.2byte	0x1
 11795 1d00 50       		.byte	0x50
 11796 1d01 F2000000 		.4byte	.LVL471
 11797 1d05 F8000000 		.4byte	.LVL472
 11798 1d09 0100     		.2byte	0x1
 11799 1d0b 51       		.byte	0x51
 11800 1d0c 00000000 		.4byte	0
 11801 1d10 00000000 		.4byte	0
 11802              	.LLST148:
 11803 1d14 3E000000 		.4byte	.LVL452
ARM GAS  /tmp/ccKU0f2P.s 			page 272


 11804 1d18 46000000 		.4byte	.LVL453
 11805 1d1c 0100     		.2byte	0x1
 11806 1d1e 50       		.byte	0x50
 11807 1d1f 46000000 		.4byte	.LVL453
 11808 1d23 6C000000 		.4byte	.LVL456
 11809 1d27 0100     		.2byte	0x1
 11810 1d29 56       		.byte	0x56
 11811 1d2a 28010000 		.4byte	.LVL474
 11812 1d2e 32010000 		.4byte	.LVL475
 11813 1d32 0100     		.2byte	0x1
 11814 1d34 50       		.byte	0x50
 11815 1d35 32010000 		.4byte	.LVL475
 11816 1d39 52010000 		.4byte	.LVL477
 11817 1d3d 0100     		.2byte	0x1
 11818 1d3f 56       		.byte	0x56
 11819 1d40 5C010000 		.4byte	.LVL478
 11820 1d44 5E010000 		.4byte	.LVL479
 11821 1d48 0100     		.2byte	0x1
 11822 1d4a 56       		.byte	0x56
 11823 1d4b 00000000 		.4byte	0
 11824 1d4f 00000000 		.4byte	0
 11825              	.LLST149:
 11826 1d53 8C000000 		.4byte	.LVL458
 11827 1d57 A0000000 		.4byte	.LVL460
 11828 1d5b 0100     		.2byte	0x1
 11829 1d5d 56       		.byte	0x56
 11830 1d5e 68010000 		.4byte	.LVL480
 11831 1d62 84010000 		.4byte	.LVL483
 11832 1d66 0100     		.2byte	0x1
 11833 1d68 56       		.byte	0x56
 11834 1d69 00000000 		.4byte	0
 11835 1d6d 00000000 		.4byte	0
 11836              	.LLST150:
 11837 1d71 46000000 		.4byte	.LVL453
 11838 1d75 8C000000 		.4byte	.LVL458
 11839 1d79 0100     		.2byte	0x1
 11840 1d7b 5B       		.byte	0x5b
 11841 1d7c 32010000 		.4byte	.LVL475
 11842 1d80 52010000 		.4byte	.LVL477
 11843 1d84 0100     		.2byte	0x1
 11844 1d86 5B       		.byte	0x5b
 11845 1d87 5C010000 		.4byte	.LVL478
 11846 1d8b 5E010000 		.4byte	.LVL479
 11847 1d8f 0100     		.2byte	0x1
 11848 1d91 5B       		.byte	0x5b
 11849 1d92 00000000 		.4byte	0
 11850 1d96 00000000 		.4byte	0
 11851              	.LLST151:
 11852 1d9a 0C000000 		.4byte	.LVL446
 11853 1d9e 14000000 		.4byte	.LVL448
 11854 1da2 0100     		.2byte	0x1
 11855 1da4 51       		.byte	0x51
 11856 1da5 14000000 		.4byte	.LVL448
 11857 1da9 96010000 		.4byte	.LFE25
 11858 1dad 0100     		.2byte	0x1
 11859 1daf 58       		.byte	0x58
 11860 1db0 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 273


 11861 1db4 00000000 		.4byte	0
 11862              	.LLST152:
 11863 1db8 B6000000 		.4byte	.LVL461
 11864 1dbc C5000000 		.4byte	.LVL463-1
 11865 1dc0 0100     		.2byte	0x1
 11866 1dc2 53       		.byte	0x53
 11867 1dc3 DC000000 		.4byte	.LVL467
 11868 1dc7 E1000000 		.4byte	.LVL468-1
 11869 1dcb 0100     		.2byte	0x1
 11870 1dcd 53       		.byte	0x53
 11871 1dce 00000000 		.4byte	0
 11872 1dd2 00000000 		.4byte	0
 11873              	.LLST153:
 11874 1dd6 00000000 		.4byte	.LFB26
 11875 1dda 02000000 		.4byte	.LCFI23
 11876 1dde 0200     		.2byte	0x2
 11877 1de0 7D       		.byte	0x7d
 11878 1de1 00       		.sleb128 0
 11879 1de2 02000000 		.4byte	.LCFI23
 11880 1de6 AC000000 		.4byte	.LFE26
 11881 1dea 0200     		.2byte	0x2
 11882 1dec 7D       		.byte	0x7d
 11883 1ded 10       		.sleb128 16
 11884 1dee 00000000 		.4byte	0
 11885 1df2 00000000 		.4byte	0
 11886              	.LLST154:
 11887 1df6 00000000 		.4byte	.LVL486
 11888 1dfa 06000000 		.4byte	.LVL487
 11889 1dfe 0100     		.2byte	0x1
 11890 1e00 50       		.byte	0x50
 11891 1e01 06000000 		.4byte	.LVL487
 11892 1e05 AC000000 		.4byte	.LFE26
 11893 1e09 0100     		.2byte	0x1
 11894 1e0b 54       		.byte	0x54
 11895 1e0c 00000000 		.4byte	0
 11896 1e10 00000000 		.4byte	0
 11897              	.LLST155:
 11898 1e14 0C000000 		.4byte	.LVL488
 11899 1e18 20000000 		.4byte	.LVL489
 11900 1e1c 0100     		.2byte	0x1
 11901 1e1e 50       		.byte	0x50
 11902 1e1f 48000000 		.4byte	.LVL491
 11903 1e23 5C000000 		.4byte	.LVL493
 11904 1e27 0100     		.2byte	0x1
 11905 1e29 50       		.byte	0x50
 11906 1e2a 00000000 		.4byte	0
 11907 1e2e 00000000 		.4byte	0
 11908              	.LLST156:
 11909 1e32 80000000 		.4byte	.LVL494
 11910 1e36 8A000000 		.4byte	.LVL495
 11911 1e3a 0100     		.2byte	0x1
 11912 1e3c 50       		.byte	0x50
 11913 1e3d 00000000 		.4byte	0
 11914 1e41 00000000 		.4byte	0
 11915              	.LLST157:
 11916 1e45 4E000000 		.4byte	.LVL492
 11917 1e49 A8000000 		.4byte	.LVL496
ARM GAS  /tmp/ccKU0f2P.s 			page 274


 11918 1e4d 0100     		.2byte	0x1
 11919 1e4f 55       		.byte	0x55
 11920 1e50 00000000 		.4byte	0
 11921 1e54 00000000 		.4byte	0
 11922              	.LLST158:
 11923 1e58 00000000 		.4byte	.LFB27
 11924 1e5c 02000000 		.4byte	.LCFI24
 11925 1e60 0200     		.2byte	0x2
 11926 1e62 7D       		.byte	0x7d
 11927 1e63 00       		.sleb128 0
 11928 1e64 02000000 		.4byte	.LCFI24
 11929 1e68 0E000000 		.4byte	.LFE27
 11930 1e6c 0200     		.2byte	0x2
 11931 1e6e 7D       		.byte	0x7d
 11932 1e6f 08       		.sleb128 8
 11933 1e70 00000000 		.4byte	0
 11934 1e74 00000000 		.4byte	0
 11935              	.LLST159:
 11936 1e78 00000000 		.4byte	.LVL497
 11937 1e7c 07000000 		.4byte	.LVL498-1
 11938 1e80 0100     		.2byte	0x1
 11939 1e82 50       		.byte	0x50
 11940 1e83 07000000 		.4byte	.LVL498-1
 11941 1e87 0E000000 		.4byte	.LFE27
 11942 1e8b 0100     		.2byte	0x1
 11943 1e8d 54       		.byte	0x54
 11944 1e8e 00000000 		.4byte	0
 11945 1e92 00000000 		.4byte	0
 11946              	.LLST160:
 11947 1e96 00000000 		.4byte	.LFB28
 11948 1e9a 02000000 		.4byte	.LCFI25
 11949 1e9e 0200     		.2byte	0x2
 11950 1ea0 7D       		.byte	0x7d
 11951 1ea1 00       		.sleb128 0
 11952 1ea2 02000000 		.4byte	.LCFI25
 11953 1ea6 40010000 		.4byte	.LFE28
 11954 1eaa 0200     		.2byte	0x2
 11955 1eac 7D       		.byte	0x7d
 11956 1ead 18       		.sleb128 24
 11957 1eae 00000000 		.4byte	0
 11958 1eb2 00000000 		.4byte	0
 11959              	.LLST161:
 11960 1eb6 00000000 		.4byte	.LVL499
 11961 1eba 08000000 		.4byte	.LVL500
 11962 1ebe 0100     		.2byte	0x1
 11963 1ec0 50       		.byte	0x50
 11964 1ec1 08000000 		.4byte	.LVL500
 11965 1ec5 40010000 		.4byte	.LFE28
 11966 1ec9 0100     		.2byte	0x1
 11967 1ecb 54       		.byte	0x54
 11968 1ecc 00000000 		.4byte	0
 11969 1ed0 00000000 		.4byte	0
 11970              	.LLST162:
 11971 1ed4 00000000 		.4byte	.LVL499
 11972 1ed8 0A000000 		.4byte	.LVL501
 11973 1edc 0100     		.2byte	0x1
 11974 1ede 51       		.byte	0x51
ARM GAS  /tmp/ccKU0f2P.s 			page 275


 11975 1edf 0A000000 		.4byte	.LVL501
 11976 1ee3 3A000000 		.4byte	.LVL507
 11977 1ee7 0100     		.2byte	0x1
 11978 1ee9 55       		.byte	0x55
 11979 1eea 3C000000 		.4byte	.LVL508
 11980 1eee B4000000 		.4byte	.LVL524
 11981 1ef2 0100     		.2byte	0x1
 11982 1ef4 55       		.byte	0x55
 11983 1ef5 B6000000 		.4byte	.LVL525
 11984 1ef9 D8000000 		.4byte	.LVL530
 11985 1efd 0100     		.2byte	0x1
 11986 1eff 55       		.byte	0x55
 11987 1f00 3A010000 		.4byte	.LVL535
 11988 1f04 3C010000 		.4byte	.LVL536
 11989 1f08 0100     		.2byte	0x1
 11990 1f0a 55       		.byte	0x55
 11991 1f0b 00000000 		.4byte	0
 11992 1f0f 00000000 		.4byte	0
 11993              	.LLST163:
 11994 1f13 0E000000 		.4byte	.LVL502
 11995 1f17 28000000 		.4byte	.LVL503
 11996 1f1b 0100     		.2byte	0x1
 11997 1f1d 50       		.byte	0x50
 11998 1f1e 00000000 		.4byte	0
 11999 1f22 00000000 		.4byte	0
 12000              	.LLST164:
 12001 1f26 5E000000 		.4byte	.LVL512
 12002 1f2a 60000000 		.4byte	.LVL513
 12003 1f2e 0100     		.2byte	0x1
 12004 1f30 51       		.byte	0x51
 12005 1f31 62000000 		.4byte	.LVL514
 12006 1f35 67000000 		.4byte	.LVL515-1
 12007 1f39 0100     		.2byte	0x1
 12008 1f3b 51       		.byte	0x51
 12009 1f3c 6C000000 		.4byte	.LVL516
 12010 1f40 74000000 		.4byte	.LVL517
 12011 1f44 0100     		.2byte	0x1
 12012 1f46 50       		.byte	0x50
 12013 1f47 74000000 		.4byte	.LVL517
 12014 1f4b 8D000000 		.4byte	.LVL519-1
 12015 1f4f 0100     		.2byte	0x1
 12016 1f51 51       		.byte	0x51
 12017 1f52 8E000000 		.4byte	.LVL519
 12018 1f56 94000000 		.4byte	.LVL520
 12019 1f5a 0100     		.2byte	0x1
 12020 1f5c 50       		.byte	0x50
 12021 1f5d 94000000 		.4byte	.LVL520
 12022 1f61 97000000 		.4byte	.LVL521-1
 12023 1f65 0100     		.2byte	0x1
 12024 1f67 51       		.byte	0x51
 12025 1f68 9A000000 		.4byte	.LVL522
 12026 1f6c 9C000000 		.4byte	.LVL523
 12027 1f70 0100     		.2byte	0x1
 12028 1f72 50       		.byte	0x50
 12029 1f73 9C000000 		.4byte	.LVL523
 12030 1f77 B6000000 		.4byte	.LVL525
 12031 1f7b 0100     		.2byte	0x1
ARM GAS  /tmp/ccKU0f2P.s 			page 276


 12032 1f7d 51       		.byte	0x51
 12033 1f7e B6000000 		.4byte	.LVL525
 12034 1f82 B8000000 		.4byte	.LVL526
 12035 1f86 0100     		.2byte	0x1
 12036 1f88 50       		.byte	0x50
 12037 1f89 B8000000 		.4byte	.LVL526
 12038 1f8d C7000000 		.4byte	.LVL527-1
 12039 1f91 0100     		.2byte	0x1
 12040 1f93 51       		.byte	0x51
 12041 1f94 00000000 		.4byte	0
 12042 1f98 00000000 		.4byte	0
 12043              	.LLST165:
 12044 1f9c 42000000 		.4byte	.LVL509
 12045 1fa0 D8000000 		.4byte	.LVL530
 12046 1fa4 0100     		.2byte	0x1
 12047 1fa6 57       		.byte	0x57
 12048 1fa7 00000000 		.4byte	0
 12049 1fab 00000000 		.4byte	0
 12050              	.LLST166:
 12051 1faf 34000000 		.4byte	.LVL505
 12052 1fb3 C8000000 		.4byte	.LVL527
 12053 1fb7 0200     		.2byte	0x2
 12054 1fb9 30       		.byte	0x30
 12055 1fba 9F       		.byte	0x9f
 12056 1fbb C8000000 		.4byte	.LVL527
 12057 1fbf CA000000 		.4byte	.LVL528
 12058 1fc3 0100     		.2byte	0x1
 12059 1fc5 50       		.byte	0x50
 12060 1fc6 D4000000 		.4byte	.LVL529
 12061 1fca D8000000 		.4byte	.LVL530
 12062 1fce 0100     		.2byte	0x1
 12063 1fd0 50       		.byte	0x50
 12064 1fd1 D8000000 		.4byte	.LVL530
 12065 1fd5 18010000 		.4byte	.LVL533
 12066 1fd9 0100     		.2byte	0x1
 12067 1fdb 55       		.byte	0x55
 12068 1fdc 24010000 		.4byte	.LVL534
 12069 1fe0 3A010000 		.4byte	.LVL535
 12070 1fe4 0100     		.2byte	0x1
 12071 1fe6 55       		.byte	0x55
 12072 1fe7 00000000 		.4byte	0
 12073 1feb 00000000 		.4byte	0
 12074              	.LLST167:
 12075 1fef 34000000 		.4byte	.LVL505
 12076 1ff3 38000000 		.4byte	.LVL506
 12077 1ff7 0100     		.2byte	0x1
 12078 1ff9 53       		.byte	0x53
 12079 1ffa 3C000000 		.4byte	.LVL508
 12080 1ffe 46000000 		.4byte	.LVL510
 12081 2002 0100     		.2byte	0x1
 12082 2004 53       		.byte	0x53
 12083 2005 46000000 		.4byte	.LVL510
 12084 2009 67000000 		.4byte	.LVL515-1
 12085 200d 0200     		.2byte	0x2
 12086 200f 74       		.byte	0x74
 12087 2010 08       		.sleb128 8
 12088 2011 00000000 		.4byte	0
ARM GAS  /tmp/ccKU0f2P.s 			page 277


 12089 2015 00000000 		.4byte	0
 12090              	.LLST168:
 12091 2019 00000000 		.4byte	.LFB29
 12092 201d 02000000 		.4byte	.LCFI26
 12093 2021 0200     		.2byte	0x2
 12094 2023 7D       		.byte	0x7d
 12095 2024 00       		.sleb128 0
 12096 2025 02000000 		.4byte	.LCFI26
 12097 2029 04000000 		.4byte	.LCFI27
 12098 202d 0200     		.2byte	0x2
 12099 202f 7D       		.byte	0x7d
 12100 2030 08       		.sleb128 8
 12101 2031 04000000 		.4byte	.LCFI27
 12102 2035 62000000 		.4byte	.LFE29
 12103 2039 0200     		.2byte	0x2
 12104 203b 7D       		.byte	0x7d
 12105 203c 20       		.sleb128 32
 12106 203d 00000000 		.4byte	0
 12107 2041 00000000 		.4byte	0
 12108              	.LLST169:
 12109 2045 00000000 		.4byte	.LVL537
 12110 2049 08000000 		.4byte	.LVL538
 12111 204d 0100     		.2byte	0x1
 12112 204f 50       		.byte	0x50
 12113 2050 08000000 		.4byte	.LVL538
 12114 2054 62000000 		.4byte	.LFE29
 12115 2058 0100     		.2byte	0x1
 12116 205a 54       		.byte	0x54
 12117 205b 00000000 		.4byte	0
 12118 205f 00000000 		.4byte	0
 12119              	.LLST170:
 12120 2063 00000000 		.4byte	.LVL537
 12121 2067 10000000 		.4byte	.LVL539
 12122 206b 0100     		.2byte	0x1
 12123 206d 51       		.byte	0x51
 12124 206e 10000000 		.4byte	.LVL539
 12125 2072 1C000000 		.4byte	.LVL541
 12126 2076 0200     		.2byte	0x2
 12127 2078 70       		.byte	0x70
 12128 2079 6C       		.sleb128 -20
 12129 207a 1C000000 		.4byte	.LVL541
 12130 207e 62000000 		.4byte	.LFE29
 12131 2082 0200     		.2byte	0x2
 12132 2084 91       		.byte	0x91
 12133 2085 64       		.sleb128 -28
 12134 2086 00000000 		.4byte	0
 12135 208a 00000000 		.4byte	0
 12136              	.LLST171:
 12137 208e 14000000 		.4byte	.LVL540
 12138 2092 1C000000 		.4byte	.LVL541
 12139 2096 0100     		.2byte	0x1
 12140 2098 50       		.byte	0x50
 12141 2099 48000000 		.4byte	.LVL543
 12142 209d 54000000 		.4byte	.LVL544
 12143 20a1 0200     		.2byte	0x2
 12144 20a3 30       		.byte	0x30
 12145 20a4 9F       		.byte	0x9f
ARM GAS  /tmp/ccKU0f2P.s 			page 278


 12146 20a5 00000000 		.4byte	0
 12147 20a9 00000000 		.4byte	0
 12148              	.LLST172:
 12149 20ad 00000000 		.4byte	.LFB30
 12150 20b1 02000000 		.4byte	.LCFI28
 12151 20b5 0200     		.2byte	0x2
 12152 20b7 7D       		.byte	0x7d
 12153 20b8 00       		.sleb128 0
 12154 20b9 02000000 		.4byte	.LCFI28
 12155 20bd 52000000 		.4byte	.LFE30
 12156 20c1 0200     		.2byte	0x2
 12157 20c3 7D       		.byte	0x7d
 12158 20c4 20       		.sleb128 32
 12159 20c5 00000000 		.4byte	0
 12160 20c9 00000000 		.4byte	0
 12161              	.LLST173:
 12162 20cd 00000000 		.4byte	.LVL545
 12163 20d1 08000000 		.4byte	.LVL546
 12164 20d5 0100     		.2byte	0x1
 12165 20d7 50       		.byte	0x50
 12166 20d8 08000000 		.4byte	.LVL546
 12167 20dc 52000000 		.4byte	.LFE30
 12168 20e0 0100     		.2byte	0x1
 12169 20e2 54       		.byte	0x54
 12170 20e3 00000000 		.4byte	0
 12171 20e7 00000000 		.4byte	0
 12172              	.LLST174:
 12173 20eb 00000000 		.4byte	.LVL545
 12174 20ef 0A000000 		.4byte	.LVL547
 12175 20f3 0100     		.2byte	0x1
 12176 20f5 51       		.byte	0x51
 12177 20f6 0A000000 		.4byte	.LVL547
 12178 20fa 52000000 		.4byte	.LFE30
 12179 20fe 0100     		.2byte	0x1
 12180 2100 56       		.byte	0x56
 12181 2101 00000000 		.4byte	0
 12182 2105 00000000 		.4byte	0
 12183              	.LLST175:
 12184 2109 0E000000 		.4byte	.LVL548
 12185 210d 16000000 		.4byte	.LVL549
 12186 2111 0100     		.2byte	0x1
 12187 2113 50       		.byte	0x50
 12188 2114 1C000000 		.4byte	.LVL551
 12189 2118 22000000 		.4byte	.LVL552
 12190 211c 0100     		.2byte	0x1
 12191 211e 50       		.byte	0x50
 12192 211f 26000000 		.4byte	.LVL553
 12193 2123 2C000000 		.4byte	.LVL554
 12194 2127 0100     		.2byte	0x1
 12195 2129 50       		.byte	0x50
 12196 212a 2C000000 		.4byte	.LVL554
 12197 212e 2E000000 		.4byte	.LVL555
 12198 2132 0200     		.2byte	0x2
 12199 2134 30       		.byte	0x30
 12200 2135 9F       		.byte	0x9f
 12201 2136 2E000000 		.4byte	.LVL555
 12202 213a 30000000 		.4byte	.LVL556
ARM GAS  /tmp/ccKU0f2P.s 			page 279


 12203 213e 0100     		.2byte	0x1
 12204 2140 50       		.byte	0x50
 12205 2141 40000000 		.4byte	.LVL558
 12206 2145 46000000 		.4byte	.LVL559
 12207 2149 0100     		.2byte	0x1
 12208 214b 50       		.byte	0x50
 12209 214c 48000000 		.4byte	.LVL560
 12210 2150 4A000000 		.4byte	.LVL561
 12211 2154 0200     		.2byte	0x2
 12212 2156 30       		.byte	0x30
 12213 2157 9F       		.byte	0x9f
 12214 2158 4C000000 		.4byte	.LVL562
 12215 215c 52000000 		.4byte	.LFE30
 12216 2160 0100     		.2byte	0x1
 12217 2162 55       		.byte	0x55
 12218 2163 00000000 		.4byte	0
 12219 2167 00000000 		.4byte	0
 12220              		.section	.debug_aranges,"",%progbits
 12221 0000 0C010000 		.4byte	0x10c
 12222 0004 0200     		.2byte	0x2
 12223 0006 00000000 		.4byte	.Ldebug_info0
 12224 000a 04       		.byte	0x4
 12225 000b 00       		.byte	0
 12226 000c 0000     		.2byte	0
 12227 000e 0000     		.2byte	0
 12228 0010 00000000 		.4byte	.LFB0
 12229 0014 12000000 		.4byte	.LFE0-.LFB0
 12230 0018 00000000 		.4byte	.LFB1
 12231 001c 0E000000 		.4byte	.LFE1-.LFB1
 12232 0020 00000000 		.4byte	.LFB17
 12233 0024 82000000 		.4byte	.LFE17-.LFB17
 12234 0028 00000000 		.4byte	.LFB21
 12235 002c 24000000 		.4byte	.LFE21-.LFB21
 12236 0030 00000000 		.4byte	.LFB4
 12237 0034 76000000 		.4byte	.LFE4-.LFB4
 12238 0038 00000000 		.4byte	.LFB19
 12239 003c 88000000 		.4byte	.LFE19-.LFB19
 12240 0040 00000000 		.4byte	.LFB20
 12241 0044 08030000 		.4byte	.LFE20-.LFB20
 12242 0048 00000000 		.4byte	.LFB5
 12243 004c B6000000 		.4byte	.LFE5-.LFB5
 12244 0050 00000000 		.4byte	.LFB32
 12245 0054 14000000 		.4byte	.LFE32-.LFB32
 12246 0058 00000000 		.4byte	.LFB16
 12247 005c EC000000 		.4byte	.LFE16-.LFB16
 12248 0060 00000000 		.4byte	.LFB31
 12249 0064 16000000 		.4byte	.LFE31-.LFB31
 12250 0068 00000000 		.4byte	.LFB6
 12251 006c 18000000 		.4byte	.LFE6-.LFB6
 12252 0070 00000000 		.4byte	.LFB7
 12253 0074 C8000000 		.4byte	.LFE7-.LFB7
 12254 0078 00000000 		.4byte	.LFB33
 12255 007c 6A000000 		.4byte	.LFE33-.LFB33
 12256 0080 00000000 		.4byte	.LFB8
 12257 0084 F2000000 		.4byte	.LFE8-.LFB8
 12258 0088 00000000 		.4byte	.LFB10
 12259 008c 9A000000 		.4byte	.LFE10-.LFB10
ARM GAS  /tmp/ccKU0f2P.s 			page 280


 12260 0090 00000000 		.4byte	.LFB12
 12261 0094 FA000000 		.4byte	.LFE12-.LFB12
 12262 0098 00000000 		.4byte	.LFB14
 12263 009c 4E000000 		.4byte	.LFE14-.LFB14
 12264 00a0 00000000 		.4byte	.LFB13
 12265 00a4 40000000 		.4byte	.LFE13-.LFB13
 12266 00a8 00000000 		.4byte	.LFB18
 12267 00ac 86000000 		.4byte	.LFE18-.LFB18
 12268 00b0 00000000 		.4byte	.LFB15
 12269 00b4 58000000 		.4byte	.LFE15-.LFB15
 12270 00b8 00000000 		.4byte	.LFB9
 12271 00bc 54000000 		.4byte	.LFE9-.LFB9
 12272 00c0 00000000 		.4byte	.LFB22
 12273 00c4 20000000 		.4byte	.LFE22-.LFB22
 12274 00c8 00000000 		.4byte	.LFB23
 12275 00cc 52010000 		.4byte	.LFE23-.LFB23
 12276 00d0 00000000 		.4byte	.LFB24
 12277 00d4 68010000 		.4byte	.LFE24-.LFB24
 12278 00d8 00000000 		.4byte	.LFB25
 12279 00dc 96010000 		.4byte	.LFE25-.LFB25
 12280 00e0 00000000 		.4byte	.LFB26
 12281 00e4 AC000000 		.4byte	.LFE26-.LFB26
 12282 00e8 00000000 		.4byte	.LFB27
 12283 00ec 0E000000 		.4byte	.LFE27-.LFB27
 12284 00f0 00000000 		.4byte	.LFB28
 12285 00f4 40010000 		.4byte	.LFE28-.LFB28
 12286 00f8 00000000 		.4byte	.LFB29
 12287 00fc 62000000 		.4byte	.LFE29-.LFB29
 12288 0100 00000000 		.4byte	.LFB30
 12289 0104 52000000 		.4byte	.LFE30-.LFB30
 12290 0108 00000000 		.4byte	0
 12291 010c 00000000 		.4byte	0
 12292              		.section	.debug_ranges,"",%progbits
 12293              	.Ldebug_ranges0:
 12294 0000 10000000 		.4byte	.LBB3
 12295 0004 16000000 		.4byte	.LBE3
 12296 0008 60000000 		.4byte	.LBB4
 12297 000c D0000000 		.4byte	.LBE4
 12298 0010 F4000000 		.4byte	.LBB5
 12299 0014 F6000000 		.4byte	.LBE5
 12300 0018 00000000 		.4byte	0
 12301 001c 00000000 		.4byte	0
 12302 0020 42000000 		.4byte	.LBB6
 12303 0024 D2000000 		.4byte	.LBE6
 12304 0028 42010000 		.4byte	.LBB7
 12305 002c 46010000 		.4byte	.LBE7
 12306 0030 00000000 		.4byte	0
 12307 0034 00000000 		.4byte	0
 12308 0038 00000000 		.4byte	.LFB0
 12309 003c 12000000 		.4byte	.LFE0
 12310 0040 00000000 		.4byte	.LFB1
 12311 0044 0E000000 		.4byte	.LFE1
 12312 0048 00000000 		.4byte	.LFB17
 12313 004c 82000000 		.4byte	.LFE17
 12314 0050 00000000 		.4byte	.LFB21
 12315 0054 24000000 		.4byte	.LFE21
 12316 0058 00000000 		.4byte	.LFB4
ARM GAS  /tmp/ccKU0f2P.s 			page 281


 12317 005c 76000000 		.4byte	.LFE4
 12318 0060 00000000 		.4byte	.LFB19
 12319 0064 88000000 		.4byte	.LFE19
 12320 0068 00000000 		.4byte	.LFB20
 12321 006c 08030000 		.4byte	.LFE20
 12322 0070 00000000 		.4byte	.LFB5
 12323 0074 B6000000 		.4byte	.LFE5
 12324 0078 00000000 		.4byte	.LFB32
 12325 007c 14000000 		.4byte	.LFE32
 12326 0080 00000000 		.4byte	.LFB16
 12327 0084 EC000000 		.4byte	.LFE16
 12328 0088 00000000 		.4byte	.LFB31
 12329 008c 16000000 		.4byte	.LFE31
 12330 0090 00000000 		.4byte	.LFB6
 12331 0094 18000000 		.4byte	.LFE6
 12332 0098 00000000 		.4byte	.LFB7
 12333 009c C8000000 		.4byte	.LFE7
 12334 00a0 00000000 		.4byte	.LFB33
 12335 00a4 6A000000 		.4byte	.LFE33
 12336 00a8 00000000 		.4byte	.LFB8
 12337 00ac F2000000 		.4byte	.LFE8
 12338 00b0 00000000 		.4byte	.LFB10
 12339 00b4 9A000000 		.4byte	.LFE10
 12340 00b8 00000000 		.4byte	.LFB12
 12341 00bc FA000000 		.4byte	.LFE12
 12342 00c0 00000000 		.4byte	.LFB14
 12343 00c4 4E000000 		.4byte	.LFE14
 12344 00c8 00000000 		.4byte	.LFB13
 12345 00cc 40000000 		.4byte	.LFE13
 12346 00d0 00000000 		.4byte	.LFB18
 12347 00d4 86000000 		.4byte	.LFE18
 12348 00d8 00000000 		.4byte	.LFB15
 12349 00dc 58000000 		.4byte	.LFE15
 12350 00e0 00000000 		.4byte	.LFB9
 12351 00e4 54000000 		.4byte	.LFE9
 12352 00e8 00000000 		.4byte	.LFB22
 12353 00ec 20000000 		.4byte	.LFE22
 12354 00f0 00000000 		.4byte	.LFB23
 12355 00f4 52010000 		.4byte	.LFE23
 12356 00f8 00000000 		.4byte	.LFB24
 12357 00fc 68010000 		.4byte	.LFE24
 12358 0100 00000000 		.4byte	.LFB25
 12359 0104 96010000 		.4byte	.LFE25
 12360 0108 00000000 		.4byte	.LFB26
 12361 010c AC000000 		.4byte	.LFE26
 12362 0110 00000000 		.4byte	.LFB27
 12363 0114 0E000000 		.4byte	.LFE27
 12364 0118 00000000 		.4byte	.LFB28
 12365 011c 40010000 		.4byte	.LFE28
 12366 0120 00000000 		.4byte	.LFB29
 12367 0124 62000000 		.4byte	.LFE29
 12368 0128 00000000 		.4byte	.LFB30
 12369 012c 52000000 		.4byte	.LFE30
 12370 0130 00000000 		.4byte	0
 12371 0134 00000000 		.4byte	0
 12372              		.section	.debug_line,"",%progbits
 12373              	.Ldebug_line0:
ARM GAS  /tmp/ccKU0f2P.s 			page 282


 12374 0000 F9070000 		.section	.debug_str,"MS",%progbits,1
 12374      02003C00 
 12374      00000201 
 12374      FB0E0D00 
 12374      01010101 
 12375              	.LASF47:
 12376 0000 46525F4E 		.ascii	"FR_NOT_READY\000"
 12376      4F545F52 
 12376      45414459 
 12376      00
 12377              	.LASF68:
 12378 000d 5245535F 		.ascii	"RES_WRPRT\000"
 12378      57525052 
 12378      5400
 12379              	.LASF62:
 12380 0017 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 12380      4F4F5F4D 
 12380      414E595F 
 12380      4F50454E 
 12380      5F46494C 
 12381              	.LASF100:
 12382 002e 7075745F 		.ascii	"put_fat\000"
 12382      66617400 
 12383              	.LASF12:
 12384 0036 66735F74 		.ascii	"fs_type\000"
 12384      79706500 
 12385              	.LASF116:
 12386 003e 63736563 		.ascii	"csect\000"
 12386      7400
 12387              	.LASF73:
 12388 0044 63686B5F 		.ascii	"chk_chr\000"
 12388      63687200 
 12389              	.LASF136:
 12390 004c 66662E63 		.ascii	"ff.c\000"
 12390      00
 12391              	.LASF112:
 12392 0051 665F7265 		.ascii	"f_read\000"
 12392      616400
 12393              	.LASF69:
 12394 0058 5245535F 		.ascii	"RES_NOTRDY\000"
 12394      4E4F5452 
 12394      445900
 12395              	.LASF17:
 12396 0063 6E5F726F 		.ascii	"n_rootdir\000"
 12396      6F746469 
 12396      7200
 12397              	.LASF85:
 12398 006d 70617468 		.ascii	"path\000"
 12398      00
 12399              	.LASF117:
 12400 0072 72627566 		.ascii	"rbuff\000"
 12400      6600
 12401              	.LASF38:
 12402 0078 73656374 		.ascii	"sect\000"
 12402      00
 12403              	.LASF53:
 12404 007d 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 283


 12404      4E56414C 
 12404      49445F4F 
 12404      424A4543 
 12404      5400
 12405              	.LASF89:
 12406 008f 66617369 		.ascii	"fasize\000"
 12406      7A6500
 12407              	.LASF18:
 12408 0096 6C617374 		.ascii	"last_clust\000"
 12408      5F636C75 
 12408      737400
 12409              	.LASF35:
 12410 00a1 6469725F 		.ascii	"dir_sect\000"
 12410      73656374 
 12410      00
 12411              	.LASF24:
 12412 00aa 64697262 		.ascii	"dirbase\000"
 12412      61736500 
 12413              	.LASF113:
 12414 00b2 62756666 		.ascii	"buff\000"
 12414      00
 12415              	.LASF63:
 12416 00b7 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 12416      4E56414C 
 12416      49445F50 
 12416      4152414D 
 12416      45544552 
 12417              	.LASF22:
 12418 00cc 6673697A 		.ascii	"fsize\000"
 12418      6500
 12419              	.LASF21:
 12420 00d2 6E5F6661 		.ascii	"n_fatent\000"
 12420      74656E74 
 12420      00
 12421              	.LASF135:
 12422 00db 474E5520 		.ascii	"GNU C 4.7.4 20130913 (release) [ARM/embedded-4_7-br"
 12422      4320342E 
 12422      372E3420 
 12422      32303133 
 12422      30393133 
 12423 010e 616E6368 		.ascii	"anch revision 202601]\000"
 12423      20726576 
 12423      6973696F 
 12423      6E203230 
 12423      32363031 
 12424              	.LASF8:
 12425 0124 6C6F6E67 		.ascii	"long int\000"
 12425      20696E74 
 12425      00
 12426              	.LASF70:
 12427 012d 5245535F 		.ascii	"RES_PARERR\000"
 12427      50415245 
 12427      525200
 12428              	.LASF14:
 12429 0138 6E5F6661 		.ascii	"n_fats\000"
 12429      747300
 12430              	.LASF128:
ARM GAS  /tmp/ccKU0f2P.s 			page 284


 12431 013f 46617446 		.ascii	"FatFs\000"
 12431      7300
 12432              	.LASF19:
 12433 0145 66726565 		.ascii	"free_clust\000"
 12433      5F636C75 
 12433      737400
 12434              	.LASF57:
 12435 0150 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 12435      4F5F4649 
 12435      4C455359 
 12435      5354454D 
 12435      00
 12436              	.LASF61:
 12437 0161 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 12437      4F545F45 
 12437      4E4F5547 
 12437      485F434F 
 12437      524500
 12438              	.LASF52:
 12439 0174 46525F45 		.ascii	"FR_EXIST\000"
 12439      58495354 
 12439      00
 12440              	.LASF23:
 12441 017d 66617462 		.ascii	"fatbase\000"
 12441      61736500 
 12442              	.LASF10:
 12443 0185 44574F52 		.ascii	"DWORD\000"
 12443      4400
 12444              	.LASF118:
 12445 018b 665F7772 		.ascii	"f_write\000"
 12445      69746500 
 12446              	.LASF105:
 12447 0193 6469725F 		.ascii	"dir_find\000"
 12447      66696E64 
 12447      00
 12448              	.LASF13:
 12449 019c 6373697A 		.ascii	"csize\000"
 12449      6500
 12450              	.LASF133:
 12451 01a2 6469736B 		.ascii	"disk_initialize\000"
 12451      5F696E69 
 12451      7469616C 
 12451      697A6500 
 12452              	.LASF4:
 12453 01b2 42595445 		.ascii	"BYTE\000"
 12453      00
 12454              	.LASF36:
 12455 01b7 6469725F 		.ascii	"dir_ptr\000"
 12455      70747200 
 12456              	.LASF103:
 12457 01bf 73747265 		.ascii	"stretch\000"
 12457      74636800 
 12458              	.LASF111:
 12459 01c7 6D6F6465 		.ascii	"mode\000"
 12459      00
 12460              	.LASF0:
 12461 01cc 756E7369 		.ascii	"unsigned int\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 285


 12461      676E6564 
 12461      20696E74 
 12461      00
 12462              	.LASF3:
 12463 01d9 55494E54 		.ascii	"UINT\000"
 12463      00
 12464              	.LASF40:
 12465 01de 6674696D 		.ascii	"ftime\000"
 12465      6500
 12466              	.LASF9:
 12467 01e4 6C6F6E67 		.ascii	"long unsigned int\000"
 12467      20756E73 
 12467      69676E65 
 12467      6420696E 
 12467      7400
 12468              	.LASF130:
 12469 01f6 6469736B 		.ascii	"disk_status\000"
 12469      5F737461 
 12469      74757300 
 12470              	.LASF122:
 12471 0202 665F636C 		.ascii	"f_close\000"
 12471      6F736500 
 12472              	.LASF88:
 12473 020a 62736563 		.ascii	"bsect\000"
 12473      7400
 12474              	.LASF91:
 12475 0210 73797365 		.ascii	"sysect\000"
 12475      637400
 12476              	.LASF6:
 12477 0217 73686F72 		.ascii	"short unsigned int\000"
 12477      7420756E 
 12477      7369676E 
 12477      65642069 
 12477      6E7400
 12478              	.LASF25:
 12479 022a 64617461 		.ascii	"database\000"
 12479      62617365 
 12479      00
 12480              	.LASF75:
 12481 0233 636C7374 		.ascii	"clst\000"
 12481      00
 12482              	.LASF46:
 12483 0238 46525F49 		.ascii	"FR_INT_ERR\000"
 12483      4E545F45 
 12483      525200
 12484              	.LASF123:
 12485 0243 665F6C73 		.ascii	"f_lseek\000"
 12485      65656B00 
 12486              	.LASF45:
 12487 024b 46525F44 		.ascii	"FR_DISK_ERR\000"
 12487      49534B5F 
 12487      45525200 
 12488              	.LASF26:
 12489 0257 77696E73 		.ascii	"winsect\000"
 12489      65637400 
 12490              	.LASF72:
 12491 025f 6D656D5F 		.ascii	"mem_cmp\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 286


 12491      636D7000 
 12492              	.LASF81:
 12493 0267 73656374 		.ascii	"sector\000"
 12493      6F7200
 12494              	.LASF93:
 12495 026e 737A6266 		.ascii	"szbfat\000"
 12495      617400
 12496              	.LASF102:
 12497 0275 6469725F 		.ascii	"dir_next\000"
 12497      6E657874 
 12497      00
 12498              	.LASF42:
 12499 027e 666E616D 		.ascii	"fname\000"
 12499      6500
 12500              	.LASF125:
 12501 0284 69667074 		.ascii	"ifptr\000"
 12501      7200
 12502              	.LASF54:
 12503 028a 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 12503      52495445 
 12503      5F50524F 
 12503      54454354 
 12503      454400
 12504              	.LASF134:
 12505 029d 6469736B 		.ascii	"disk_ioctl\000"
 12505      5F696F63 
 12505      746C00
 12506              	.LASF28:
 12507 02a8 46415446 		.ascii	"FATFS\000"
 12507      5300
 12508              	.LASF39:
 12509 02ae 66646174 		.ascii	"fdate\000"
 12509      6500
 12510              	.LASF121:
 12511 02b4 665F7379 		.ascii	"f_sync\000"
 12511      6E6300
 12512              	.LASF119:
 12513 02bb 77636E74 		.ascii	"wcnt\000"
 12513      00
 12514              	.LASF31:
 12515 02c0 66707472 		.ascii	"fptr\000"
 12515      00
 12516              	.LASF98:
 12517 02c5 636C7573 		.ascii	"clust2sect\000"
 12517      74327365 
 12517      637400
 12518              	.LASF77:
 12519 02d0 6D656D5F 		.ascii	"mem_set\000"
 12519      73657400 
 12520              	.LASF27:
 12521 02d8 73697A65 		.ascii	"sizetype\000"
 12521      74797065 
 12521      00
 12522              	.LASF78:
 12523 02e1 6765745F 		.ascii	"get_fileinfo\000"
 12523      66696C65 
 12523      696E666F 
ARM GAS  /tmp/ccKU0f2P.s 			page 287


 12523      00
 12524              	.LASF84:
 12525 02ee 63686B5F 		.ascii	"chk_mounted\000"
 12525      6D6F756E 
 12525      74656400 
 12526              	.LASF92:
 12527 02fa 6E636C73 		.ascii	"nclst\000"
 12527      7400
 12528              	.LASF59:
 12529 0300 46525F54 		.ascii	"FR_TIMEOUT\000"
 12529      494D454F 
 12529      555400
 12530              	.LASF7:
 12531 030b 574F5244 		.ascii	"WORD\000"
 12531      00
 12532              	.LASF32:
 12533 0310 73636C75 		.ascii	"sclust\000"
 12533      737400
 12534              	.LASF66:
 12535 0317 5245535F 		.ascii	"RES_OK\000"
 12535      4F4B00
 12536              	.LASF137:
 12537 031e 2F686F6D 		.ascii	"/home/xavier/Documents/Xav/dev/stm32code/bitbox/boo"
 12537      652F7861 
 12537      76696572 
 12537      2F446F63 
 12537      756D656E 
 12538 0351 746C6F61 		.ascii	"tloader/FATFS-DBG\000"
 12538      6465722F 
 12538      46415446 
 12538      532D4442 
 12538      4700
 12539              	.LASF48:
 12540 0363 46525F4E 		.ascii	"FR_NO_FILE\000"
 12540      4F5F4649 
 12540      4C4500
 12541              	.LASF11:
 12542 036e 54434841 		.ascii	"TCHAR\000"
 12542      5200
 12543              	.LASF56:
 12544 0374 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 12544      4F545F45 
 12544      4E41424C 
 12544      454400
 12545              	.LASF138:
 12546 0383 6765745F 		.ascii	"get_fattime\000"
 12546      66617474 
 12546      696D6500 
 12547              	.LASF97:
 12548 038f 65786376 		.ascii	"excvt\000"
 12548      7400
 12549              	.LASF109:
 12550 0395 665F6D6F 		.ascii	"f_mount\000"
 12550      756E7400 
 12551              	.LASF99:
 12552 039d 6765745F 		.ascii	"get_fat\000"
 12552      66617400 
ARM GAS  /tmp/ccKU0f2P.s 			page 288


 12553              	.LASF101:
 12554 03a5 63726561 		.ascii	"create_chain\000"
 12554      74655F63 
 12554      6861696E 
 12554      00
 12555              	.LASF34:
 12556 03b2 64736563 		.ascii	"dsect\000"
 12556      7400
 12557              	.LASF2:
 12558 03b8 756E7369 		.ascii	"unsigned char\000"
 12558      676E6564 
 12558      20636861 
 12558      7200
 12559              	.LASF120:
 12560 03c6 77627566 		.ascii	"wbuff\000"
 12560      6600
 12561              	.LASF5:
 12562 03cc 73686F72 		.ascii	"short int\000"
 12562      7420696E 
 12562      7400
 12563              	.LASF29:
 12564 03d6 666C6167 		.ascii	"flag\000"
 12564      00
 12565              	.LASF106:
 12566 03db 666F6C6C 		.ascii	"follow_path\000"
 12566      6F775F70 
 12566      61746800 
 12567              	.LASF83:
 12568 03e7 63686563 		.ascii	"check_fs\000"
 12568      6B5F6673 
 12568      00
 12569              	.LASF55:
 12570 03f0 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 12570      4E56414C 
 12570      49445F44 
 12570      52495645 
 12570      00
 12571              	.LASF51:
 12572 0401 46525F44 		.ascii	"FR_DENIED\000"
 12572      454E4945 
 12572      4400
 12573              	.LASF79:
 12574 040b 76616C69 		.ascii	"validate\000"
 12574      64617465 
 12574      00
 12575              	.LASF107:
 12576 0414 6469725F 		.ascii	"dir_register\000"
 12576      72656769 
 12576      73746572 
 12576      00
 12577              	.LASF58:
 12578 0421 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 12578      4B46535F 
 12578      41424F52 
 12578      54454400 
 12579              	.LASF127:
 12580 0431 665F7265 		.ascii	"f_readdir\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 289


 12580      61646469 
 12580      7200
 12581              	.LASF60:
 12582 043b 46525F4C 		.ascii	"FR_LOCKED\000"
 12582      4F434B45 
 12582      4400
 12583              	.LASF15:
 12584 0445 77666C61 		.ascii	"wflag\000"
 12584      6700
 12585              	.LASF124:
 12586 044b 6E736563 		.ascii	"nsect\000"
 12586      7400
 12587              	.LASF1:
 12588 0451 63686172 		.ascii	"char\000"
 12588      00
 12589              	.LASF96:
 12590 0456 63726561 		.ascii	"create_name\000"
 12590      74655F6E 
 12590      616D6500 
 12591              	.LASF44:
 12592 0462 46525F4F 		.ascii	"FR_OK\000"
 12592      4B00
 12593              	.LASF37:
 12594 0468 696E6465 		.ascii	"index\000"
 12594      7800
 12595              	.LASF108:
 12596 046e 72656D6F 		.ascii	"remove_chain\000"
 12596      76655F63 
 12596      6861696E 
 12596      00
 12597              	.LASF65:
 12598 047b 44535441 		.ascii	"DSTATUS\000"
 12598      54555300 
 12599              	.LASF86:
 12600 0483 63686B5F 		.ascii	"chk_wp\000"
 12600      777000
 12601              	.LASF126:
 12602 048a 665F6F70 		.ascii	"f_opendir\000"
 12602      656E6469 
 12602      7200
 12603              	.LASF94:
 12604 0494 6E727376 		.ascii	"nrsv\000"
 12604      00
 12605              	.LASF50:
 12606 0499 46525F49 		.ascii	"FR_INVALID_NAME\000"
 12606      4E56414C 
 12606      49445F4E 
 12606      414D4500 
 12607              	.LASF131:
 12608 04a9 6469736B 		.ascii	"disk_write\000"
 12608      5F777269 
 12608      746500
 12609              	.LASF80:
 12610 04b4 6D6F7665 		.ascii	"move_window\000"
 12610      5F77696E 
 12610      646F7700 
 12611              	.LASF16:
ARM GAS  /tmp/ccKU0f2P.s 			page 290


 12612 04c0 6673695F 		.ascii	"fsi_flag\000"
 12612      666C6167 
 12612      00
 12613              	.LASF76:
 12614 04c9 6D656D5F 		.ascii	"mem_cpy\000"
 12614      63707900 
 12615              	.LASF114:
 12616 04d1 72656D61 		.ascii	"remain\000"
 12616      696E00
 12617              	.LASF30:
 12618 04d8 70616431 		.ascii	"pad1\000"
 12618      00
 12619              	.LASF41:
 12620 04dd 66617474 		.ascii	"fattrib\000"
 12620      72696200 
 12621              	.LASF82:
 12622 04e5 77736563 		.ascii	"wsect\000"
 12622      7400
 12623              	.LASF43:
 12624 04eb 46494C49 		.ascii	"FILINFO\000"
 12624      4E464F00 
 12625              	.LASF71:
 12626 04f3 44524553 		.ascii	"DRESULT\000"
 12626      554C5400 
 12627              	.LASF115:
 12628 04fb 72636E74 		.ascii	"rcnt\000"
 12628      00
 12629              	.LASF95:
 12630 0500 73796E63 		.ascii	"sync\000"
 12630      00
 12631              	.LASF20:
 12632 0505 6673695F 		.ascii	"fsi_sector\000"
 12632      73656374 
 12632      6F7200
 12633              	.LASF87:
 12634 0510 73746174 		.ascii	"stat\000"
 12634      00
 12635              	.LASF64:
 12636 0515 46524553 		.ascii	"FRESULT\000"
 12636      554C5400 
 12637              	.LASF67:
 12638 051d 5245535F 		.ascii	"RES_ERROR\000"
 12638      4552524F 
 12638      5200
 12639              	.LASF104:
 12640 0527 6469725F 		.ascii	"dir_read\000"
 12640      72656164 
 12640      00
 12641              	.LASF110:
 12642 0530 665F6F70 		.ascii	"f_open\000"
 12642      656E00
 12643              	.LASF49:
 12644 0537 46525F4E 		.ascii	"FR_NO_PATH\000"
 12644      4F5F5041 
 12644      544800
 12645              	.LASF132:
 12646 0542 6469736B 		.ascii	"disk_read\000"
ARM GAS  /tmp/ccKU0f2P.s 			page 291


 12646      5F726561 
 12646      6400
 12647              	.LASF74:
 12648 054c 6469725F 		.ascii	"dir_sdi\000"
 12648      73646900 
 12649              	.LASF129:
 12650 0554 46736964 		.ascii	"Fsid\000"
 12650      00
 12651              	.LASF33:
 12652 0559 636C7573 		.ascii	"clust\000"
 12652      7400
 12653              	.LASF90:
 12654 055f 74736563 		.ascii	"tsect\000"
 12654      7400
 12655              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.4 20130913 (release) [ARM/embedded-4_7-br
ARM GAS  /tmp/ccKU0f2P.s 			page 292


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/ccKU0f2P.s:68     .text.mem_cpy:0000000000000000 $t
     /tmp/ccKU0f2P.s:72     .text.mem_cpy:0000000000000000 mem_cpy
     /tmp/ccKU0f2P.s:105    .text.mem_set:0000000000000000 $t
     /tmp/ccKU0f2P.s:109    .text.mem_set:0000000000000000 mem_set
     /tmp/ccKU0f2P.s:136    .text.get_fileinfo:0000000000000000 $t
     /tmp/ccKU0f2P.s:140    .text.get_fileinfo:0000000000000000 get_fileinfo
     /tmp/ccKU0f2P.s:262    .text.validate:0000000000000000 $t
     /tmp/ccKU0f2P.s:266    .text.validate:0000000000000000 validate
     /tmp/ccKU0f2P.s:308    .text.move_window:0000000000000000 $t
     /tmp/ccKU0f2P.s:312    .text.move_window:0000000000000000 move_window
     /tmp/ccKU0f2P.s:430    .text.check_fs:0000000000000000 $t
     /tmp/ccKU0f2P.s:434    .text.check_fs:0000000000000000 check_fs
     /tmp/ccKU0f2P.s:506    .text.check_fs:0000000000000080 $d
     /tmp/ccKU0f2P.s:512    .text.chk_mounted:0000000000000000 $t
     /tmp/ccKU0f2P.s:516    .text.chk_mounted:0000000000000000 chk_mounted
     /tmp/ccKU0f2P.s:1009   .text.chk_mounted:00000000000002f4 $d
     /tmp/ccKU0f2P.s:1018   .text.sync:0000000000000000 $t
     /tmp/ccKU0f2P.s:1022   .text.sync:0000000000000000 sync
     /tmp/ccKU0f2P.s:1144   .text.chk_chr.constprop.1:0000000000000000 $t
     /tmp/ccKU0f2P.s:1148   .text.chk_chr.constprop.1:0000000000000000 chk_chr.constprop.1
     /tmp/ccKU0f2P.s:1172   .text.chk_chr.constprop.1:0000000000000010 $d
     /tmp/ccKU0f2P.s:1177   .text.create_name:0000000000000000 $t
     /tmp/ccKU0f2P.s:1181   .text.create_name:0000000000000000 create_name
     /tmp/ccKU0f2P.s:1378   .text.create_name:00000000000000e8 $d
     /tmp/ccKU0f2P.s:1383   .text.mem_cmp.constprop.2:0000000000000000 $t
     /tmp/ccKU0f2P.s:1387   .text.mem_cmp.constprop.2:0000000000000000 mem_cmp.constprop.2
     /tmp/ccKU0f2P.s:1424   .text.clust2sect:0000000000000000 $t
     /tmp/ccKU0f2P.s:1429   .text.clust2sect:0000000000000000 clust2sect
     /tmp/ccKU0f2P.s:1463   .text.get_fat:0000000000000000 $t
     /tmp/ccKU0f2P.s:1468   .text.get_fat:0000000000000000 get_fat
     /tmp/ccKU0f2P.s:1625   .text.dir_sdi.constprop.0:0000000000000000 $t
     /tmp/ccKU0f2P.s:1629   .text.dir_sdi.constprop.0:0000000000000000 dir_sdi.constprop.0
     /tmp/ccKU0f2P.s:1750   .text.put_fat:0000000000000000 $t
     /tmp/ccKU0f2P.s:1755   .text.put_fat:0000000000000000 put_fat
     /tmp/ccKU0f2P.s:1951   .text.create_chain:0000000000000000 $t
     /tmp/ccKU0f2P.s:1955   .text.create_chain:0000000000000000 create_chain
     /tmp/ccKU0f2P.s:2123   .text.dir_next:0000000000000000 $t
     /tmp/ccKU0f2P.s:2127   .text.dir_next:0000000000000000 dir_next
     /tmp/ccKU0f2P.s:2341   .text.dir_read:0000000000000000 $t
     /tmp/ccKU0f2P.s:2345   .text.dir_read:0000000000000000 dir_read
     /tmp/ccKU0f2P.s:2436   .text.dir_find:0000000000000000 $t
     /tmp/ccKU0f2P.s:2440   .text.dir_find:0000000000000000 dir_find
     /tmp/ccKU0f2P.s:2508   .text.follow_path:0000000000000000 $t
     /tmp/ccKU0f2P.s:2512   .text.follow_path:0000000000000000 follow_path
     /tmp/ccKU0f2P.s:2638   .text.dir_register:0000000000000000 $t
     /tmp/ccKU0f2P.s:2642   .text.dir_register:0000000000000000 dir_register
     /tmp/ccKU0f2P.s:2729   .text.remove_chain:0000000000000000 $t
     /tmp/ccKU0f2P.s:2733   .text.remove_chain:0000000000000000 remove_chain
     /tmp/ccKU0f2P.s:2832   .text.f_mount:0000000000000000 $t
     /tmp/ccKU0f2P.s:2837   .text.f_mount:0000000000000000 f_mount
     /tmp/ccKU0f2P.s:2878   .text.f_mount:000000000000001c $d
     /tmp/ccKU0f2P.s:2883   .text.f_open:0000000000000000 $t
     /tmp/ccKU0f2P.s:2888   .text.f_open:0000000000000000 f_open
     /tmp/ccKU0f2P.s:3164   .text.f_read:0000000000000000 $t
     /tmp/ccKU0f2P.s:3169   .text.f_read:0000000000000000 f_read
ARM GAS  /tmp/ccKU0f2P.s 			page 293


     /tmp/ccKU0f2P.s:3441   .text.f_write:0000000000000000 $t
     /tmp/ccKU0f2P.s:3446   .text.f_write:0000000000000000 f_write
     /tmp/ccKU0f2P.s:3758   .text.f_sync:0000000000000000 $t
     /tmp/ccKU0f2P.s:3763   .text.f_sync:0000000000000000 f_sync
     /tmp/ccKU0f2P.s:3890   .text.f_close:0000000000000000 $t
     /tmp/ccKU0f2P.s:3895   .text.f_close:0000000000000000 f_close
     /tmp/ccKU0f2P.s:3923   .text.f_lseek:0000000000000000 $t
     /tmp/ccKU0f2P.s:3928   .text.f_lseek:0000000000000000 f_lseek
     /tmp/ccKU0f2P.s:4215   .text.f_opendir:0000000000000000 $t
     /tmp/ccKU0f2P.s:4220   .text.f_opendir:0000000000000000 f_opendir
     /tmp/ccKU0f2P.s:4305   .text.f_readdir:0000000000000000 $t
     /tmp/ccKU0f2P.s:4310   .text.f_readdir:0000000000000000 f_readdir
     /tmp/ccKU0f2P.s:4405   .rodata.str1.1:0000000000000000 .LC0
     /tmp/ccKU0f2P.s:4408   .bss.Fsid:0000000000000000 $d
     /tmp/ccKU0f2P.s:4412   .bss.Fsid:0000000000000000 Fsid
     /tmp/ccKU0f2P.s:4418   .rodata.excvt.4406:0000000000000000 excvt.4406
     /tmp/ccKU0f2P.s:4548   .bss.FatFs:0000000000000000 $d
     /tmp/ccKU0f2P.s:4552   .bss.FatFs:0000000000000000 FatFs
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
disk_status
disk_write
disk_read
disk_initialize
disk_ioctl
get_fattime
