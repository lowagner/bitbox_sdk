ARM GAS  /tmp/ccyhuBN5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3	@ Tag_ABI_HardFP_use
   4              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   7              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   8              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   9              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
  10              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
  11              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  12              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  13              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  14              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  15              		.file	"stm32f4xx_usart.c"
  16              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.7.4 20130913 (release) [ARM/embedded-4_7-
  17              	@	compiled by GNU C version 4.7.3, GMP version 5.0.5, MPFR version 3.1.1-p2, MPC version 0.9
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed:  -I . -I ../ -I cmsis/ -imultilib armv7e-m/fpu
  20              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/4.7.4/
  21              	@ -isysroot /usr/bin/../arm-none-eabi -MD stm32f4xx_usart.d
  22              	@ -MF .dep/stm32f4xx_usart.o.d -MP -MQ stm32f4xx_usart.o
  23              	@ -D__USES_INITFINI__ -D __FPU_USED=1 -D __arm__ -D __ASSEMBLY__
  24              	@ -D USE_STDPERIPH_DRIVER -D STM32F4XX -D HSE_VALUE=8000000
  25              	@ -D __FPU_PRESENT=1 -D __FPU_USED=1 -D STM32F405VG -D USE_USB_OTG_FS
  26              	@ -D RUN_FROM_FLASH=1 stm32f4xx_usart.c -mthumb -mcpu=cortex-m4
  27              	@ -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb
  28              	@ -auxbase-strip stm32f4xx_usart.o -gdwarf-2 -Os -Wall -Wstrict-prototypes
  29              	@ -std=gnu99 -falign-functions=16 -fno-inline -fomit-frame-pointer
  30              	@ -fverbose-asm -ffunction-sections -fdata-sections
  31              	@ options enabled:  -fauto-inc-dec -fbranch-count-reg -fcaller-saves
  32              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  33              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdebug-types-section
  34              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize -fdwarf2-cfi-asm
  35              	@ -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  36              	@ -fforward-propagate -ffunction-cse -ffunction-sections -fgcse -fgcse-lm
  37              	@ -fgnu-runtime -fguess-branch-probability -fident -fif-conversion
  38              	@ -fif-conversion2 -findirect-inlining -finline-atomics -finline-functions
  39              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  40              	@ -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
  41              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  42              	@ -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
  43              	@ -fmerge-debug-strings -fomit-frame-pointer -foptimize-register-move
  44              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  45              	@ -fprefetch-loop-arrays -freg-struct-return -fregmove -frename-registers
  46              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  47              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  48              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  49              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  50              	@ -fsched-stalled-insns-dep -fschedule-insns2 -fsection-anchors
  51              	@ -fshow-column -fshrink-wrap -fsigned-zeros -fsplit-ivs-in-unroller
  52              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  53              	@ -fstrict-volatile-bitfields -fthread-jumps -ftoplevel-reorder
  54              	@ -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp
  55              	@ -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-cselim -ftree-dce
  56              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  57              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
ARM GAS  /tmp/ccyhuBN5.s 			page 2


  58              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
  59              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  60              	@ -ftree-slp-vectorize -ftree-sra -ftree-switch-conversion
  61              	@ -ftree-tail-merge -ftree-ter -ftree-vect-loop-version -ftree-vrp
  62              	@ -funit-at-a-time -funroll-loops -fvar-tracking -fvar-tracking-assignments
  63              	@ -fverbose-asm -fweb -fzero-initialized-in-bss -mlittle-endian
  64              	@ -msched-prolog -mthumb -munaligned-access -mvectorize-with-neon-quad
  65              	
  66              		.text
  67              	.Ltext0:
  68              		.cfi_sections	.debug_frame
  69              		.section	.text.USART_DeInit,"ax",%progbits
  70              		.align	1
  71              		.global	USART_DeInit
  72              		.thumb
  73              		.thumb_func
  74              		.type	USART_DeInit, %function
  75              	USART_DeInit:
  76              	.LFB110:
  77              		.file 1 "stm32f4xx_usart.c"
   1:stm32f4xx_usart.c **** /**
   2:stm32f4xx_usart.c ****   ******************************************************************************
   3:stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:stm32f4xx_usart.c ****   * @version V1.1.0
   6:stm32f4xx_usart.c ****   * @date    11-January-2013
   7:stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:stm32f4xx_usart.c ****   *           + Data transfers
  12:stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:stm32f4xx_usart.c ****   *           + LIN mode
  14:stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:stm32f4xx_usart.c ****   *           + Smartcard mode
  16:stm32f4xx_usart.c ****   *           + IrDA mode
  17:stm32f4xx_usart.c ****   *           + DMA transfers management
  18:stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:stm32f4xx_usart.c ****   *           
  20:stm32f4xx_usart.c ****   @verbatim       
  21:stm32f4xx_usart.c ****  ===============================================================================
  22:stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:stm32f4xx_usart.c ****  ===============================================================================
  24:stm32f4xx_usart.c ****     [..]
  25:stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:stm32f4xx_usart.c ****           UART4 or UART5.
  29:stm32f4xx_usart.c ****   
  30:stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:stm32f4xx_usart.c ****           or/and SCLK). 
  33:stm32f4xx_usart.c ****   
  34:stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
ARM GAS  /tmp/ccyhuBN5.s 			page 3


  38:stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:stm32f4xx_usart.c ****           
  43:stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:stm32f4xx_usart.c ****           function.
  46:stm32f4xx_usart.c ****   
  47:stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:stm32f4xx_usart.c ****   
  50:stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:stm32f4xx_usart.c ****   
  53:stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:stm32f4xx_usart.c ****    
  57:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:stm32f4xx_usart.c ****    
  59:stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:stm32f4xx_usart.c ****     
  61:stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:stm32f4xx_usart.c ****           for more details
  63:stm32f4xx_usart.c ****     
  64:stm32f4xx_usart.c ****     [..]        
  65:stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:stm32f4xx_usart.c ****             
  70:stm32f4xx_usart.c ****     @endverbatim        
  71:stm32f4xx_usart.c ****   ******************************************************************************
  72:stm32f4xx_usart.c ****   * @attention
  73:stm32f4xx_usart.c ****   *
  74:stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  75:stm32f4xx_usart.c ****   *
  76:stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:stm32f4xx_usart.c ****   *
  80:stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:stm32f4xx_usart.c ****   *
  82:stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:stm32f4xx_usart.c ****   * limitations under the License.
  87:stm32f4xx_usart.c ****   *
  88:stm32f4xx_usart.c ****   ******************************************************************************  
  89:stm32f4xx_usart.c ****   */ 
  90:stm32f4xx_usart.c **** 
  91:stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:stm32f4xx_usart.c **** 
ARM GAS  /tmp/ccyhuBN5.s 			page 4


  95:stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:stm32f4xx_usart.c ****   * @{
  97:stm32f4xx_usart.c ****   */
  98:stm32f4xx_usart.c **** 
  99:stm32f4xx_usart.c **** /** @defgroup USART 
 100:stm32f4xx_usart.c ****   * @brief USART driver modules
 101:stm32f4xx_usart.c ****   * @{
 102:stm32f4xx_usart.c ****   */
 103:stm32f4xx_usart.c **** 
 104:stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:stm32f4xx_usart.c **** 
 107:stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:stm32f4xx_usart.c **** 
 112:stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:stm32f4xx_usart.c **** 
 116:stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:stm32f4xx_usart.c **** 
 119:stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:stm32f4xx_usart.c **** 
 122:stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:stm32f4xx_usart.c **** 
 127:stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:stm32f4xx_usart.c ****   * @{
 129:stm32f4xx_usart.c ****   */
 130:stm32f4xx_usart.c **** 
 131:stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:stm32f4xx_usart.c ****  *
 134:stm32f4xx_usart.c **** @verbatim   
 135:stm32f4xx_usart.c ****  ===============================================================================
 136:stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:stm32f4xx_usart.c ****  ===============================================================================  
 138:stm32f4xx_usart.c ****     [..]
 139:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:stm32f4xx_usart.c ****         (++) Baud Rate
 143:stm32f4xx_usart.c ****         (++) Word Length 
 144:stm32f4xx_usart.c ****         (++) Stop Bit
 145:stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 146:stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
ARM GAS  /tmp/ccyhuBN5.s 			page 5


 152:stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:stm32f4xx_usart.c ****         (++) Hardware flow control
 161:stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:stm32f4xx_usart.c **** 
 163:stm32f4xx_usart.c ****     [..]
 164:stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:stm32f4xx_usart.c **** 
 167:stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:stm32f4xx_usart.c ****          parameters should be also configured:
 169:stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:stm32f4xx_usart.c ****         (++) USART polarity
 171:stm32f4xx_usart.c ****         (++) USART phase
 172:stm32f4xx_usart.c ****         (++) USART LastBit
 173:stm32f4xx_usart.c ****   
 174:stm32f4xx_usart.c ****     [..]
 175:stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:stm32f4xx_usart.c **** 
 177:stm32f4xx_usart.c **** @endverbatim
 178:stm32f4xx_usart.c ****   * @{
 179:stm32f4xx_usart.c ****   */
 180:stm32f4xx_usart.c ****   
 181:stm32f4xx_usart.c **** /**
 182:stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:stm32f4xx_usart.c ****   *         UART peripheral.
 185:stm32f4xx_usart.c ****   * @retval None
 186:stm32f4xx_usart.c ****   */
 187:stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:stm32f4xx_usart.c **** {
  78              		.loc 1 188 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              	.LVL0:
  83 0000 08B5     		push	{r3, lr}	@
  84              	.LCFI0:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 3, -8
  87              		.cfi_offset 14, -4
 189:stm32f4xx_usart.c ****   /* Check the parameters */
 190:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 191:stm32f4xx_usart.c **** 
 192:stm32f4xx_usart.c ****   if (USARTx == USART1)
  88              		.loc 1 192 0
  89 0002 234B     		ldr	r3, .L11	@ tmp135,
  90 0004 9842     		cmp	r0, r3	@ USARTx, tmp135
  91 0006 05D1     		bne	.L2	@,
 193:stm32f4xx_usart.c ****   {
 194:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
ARM GAS  /tmp/ccyhuBN5.s 			page 6


  92              		.loc 1 194 0
  93 0008 1020     		movs	r0, #16	@,
  94              	.LVL1:
  95 000a 0121     		movs	r1, #1	@,
  96 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd	@
  97              	.LVL2:
 195:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  98              		.loc 1 195 0
  99 0010 1020     		movs	r0, #16	@,
 100 0012 37E0     		b	.L8	@
 101              	.LVL3:
 102              	.L2:
 196:stm32f4xx_usart.c ****   }
 197:stm32f4xx_usart.c ****   else if (USARTx == USART2)
 103              		.loc 1 197 0
 104 0014 1F49     		ldr	r1, .L11+4	@ tmp136,
 105 0016 8842     		cmp	r0, r1	@ USARTx, tmp136
 106 0018 07D1     		bne	.L3	@,
 198:stm32f4xx_usart.c ****   {
 199:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 107              		.loc 1 199 0
 108 001a 4FF40030 		mov	r0, #131072	@,
 109              	.LVL4:
 110 001e 0121     		movs	r1, #1	@,
 111 0020 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd	@
 112              	.LVL5:
 200:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 113              		.loc 1 200 0
 114 0024 4FF40030 		mov	r0, #131072	@,
 115 0028 09E0     		b	.L9	@
 116              	.LVL6:
 117              	.L3:
 201:stm32f4xx_usart.c ****   }
 202:stm32f4xx_usart.c ****   else if (USARTx == USART3)
 118              		.loc 1 202 0
 119 002a 1B4A     		ldr	r2, .L11+8	@ tmp137,
 120 002c 9042     		cmp	r0, r2	@ USARTx, tmp137
 121 002e 0BD1     		bne	.L4	@,
 203:stm32f4xx_usart.c ****   {
 204:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 122              		.loc 1 204 0
 123 0030 4FF48020 		mov	r0, #262144	@,
 124              	.LVL7:
 125 0034 0121     		movs	r1, #1	@,
 126 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd	@
 127              	.LVL8:
 205:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 128              		.loc 1 205 0
 129 003a 4FF48020 		mov	r0, #262144	@,
 130              	.L9:
 131 003e 0021     		movs	r1, #0	@,
 206:stm32f4xx_usart.c ****   }    
 207:stm32f4xx_usart.c ****   else if (USARTx == UART4)
 208:stm32f4xx_usart.c ****   {
 209:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:stm32f4xx_usart.c ****   }
ARM GAS  /tmp/ccyhuBN5.s 			page 7


 212:stm32f4xx_usart.c ****   else if (USARTx == UART5)
 213:stm32f4xx_usart.c ****   {
 214:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:stm32f4xx_usart.c ****   }  
 217:stm32f4xx_usart.c ****   else if (USARTx == USART6)
 218:stm32f4xx_usart.c ****   {
 219:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:stm32f4xx_usart.c ****   }
 222:stm32f4xx_usart.c ****   /*else if (USARTx == UART7)
 223:stm32f4xx_usart.c ****   {
 224:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:stm32f4xx_usart.c ****   }     
 227:stm32f4xx_usart.c ****   else
 228:stm32f4xx_usart.c ****   {
 229:stm32f4xx_usart.c ****     if (USARTx == UART8)
 230:stm32f4xx_usart.c ****     { 
 231:stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 232:stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 233:stm32f4xx_usart.c ****     }
 234:stm32f4xx_usart.c ****   }*/
 235:stm32f4xx_usart.c **** }
 132              		.loc 1 235 0
 133 0040 BDE80840 		pop	{r3, lr}	@
 205:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 134              		.loc 1 205 0
 135 0044 FFF7FEBF 		b	RCC_APB1PeriphResetCmd	@
 136              	.LVL9:
 137              	.L4:
 207:stm32f4xx_usart.c ****   else if (USARTx == UART4)
 138              		.loc 1 207 0
 139 0048 144B     		ldr	r3, .L11+12	@ tmp138,
 140 004a 9842     		cmp	r0, r3	@ USARTx, tmp138
 141 004c 07D1     		bne	.L5	@,
 209:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 142              		.loc 1 209 0
 143 004e 4FF40020 		mov	r0, #524288	@,
 144              	.LVL10:
 145 0052 0121     		movs	r1, #1	@,
 146 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd	@
 147              	.LVL11:
 210:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 148              		.loc 1 210 0
 149 0058 4FF40020 		mov	r0, #524288	@,
 150 005c EFE7     		b	.L9	@
 151              	.LVL12:
 152              	.L5:
 212:stm32f4xx_usart.c ****   else if (USARTx == UART5)
 153              		.loc 1 212 0
 154 005e 1049     		ldr	r1, .L11+16	@ tmp139,
 155 0060 8842     		cmp	r0, r1	@ USARTx, tmp139
 156 0062 07D1     		bne	.L6	@,
 214:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 157              		.loc 1 214 0
 158 0064 4FF48010 		mov	r0, #1048576	@,
ARM GAS  /tmp/ccyhuBN5.s 			page 8


 159              	.LVL13:
 160 0068 0121     		movs	r1, #1	@,
 161 006a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd	@
 162              	.LVL14:
 215:stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 163              		.loc 1 215 0
 164 006e 4FF48010 		mov	r0, #1048576	@,
 165 0072 E4E7     		b	.L9	@
 166              	.LVL15:
 167              	.L6:
 217:stm32f4xx_usart.c ****   else if (USARTx == USART6)
 168              		.loc 1 217 0
 169 0074 0B4A     		ldr	r2, .L11+20	@ tmp140,
 170 0076 9042     		cmp	r0, r2	@ USARTx, tmp140
 171 0078 09D1     		bne	.L1	@,
 219:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 172              		.loc 1 219 0
 173 007a 2020     		movs	r0, #32	@,
 174              	.LVL16:
 175 007c 0121     		movs	r1, #1	@,
 176 007e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd	@
 177              	.LVL17:
 220:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 178              		.loc 1 220 0
 179 0082 2020     		movs	r0, #32	@,
 180              	.L8:
 181 0084 0021     		movs	r1, #0	@,
 182              		.loc 1 235 0
 183 0086 BDE80840 		pop	{r3, lr}	@
 220:stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 184              		.loc 1 220 0
 185 008a FFF7FEBF 		b	RCC_APB2PeriphResetCmd	@
 186              	.LVL18:
 187              	.L1:
 188 008e 08BD     		pop	{r3, pc}	@
 189              	.L12:
 190              		.align	2
 191              	.L11:
 192 0090 00100140 		.word	1073811456
 193 0094 00440040 		.word	1073759232
 194 0098 00480040 		.word	1073760256
 195 009c 004C0040 		.word	1073761280
 196 00a0 00500040 		.word	1073762304
 197 00a4 00140140 		.word	1073812480
 198              		.cfi_endproc
 199              	.LFE110:
 200              		.size	USART_DeInit, .-USART_DeInit
 201              		.section	.text.USART_Init,"ax",%progbits
 202              		.align	1
 203              		.global	USART_Init
 204              		.thumb
 205              		.thumb_func
 206              		.type	USART_Init, %function
 207              	USART_Init:
 208              	.LFB111:
 236:stm32f4xx_usart.c **** 
 237:stm32f4xx_usart.c **** /**
ARM GAS  /tmp/ccyhuBN5.s 			page 9


 238:stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:stm32f4xx_usart.c ****   *         UART peripheral.
 242:stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:stm32f4xx_usart.c ****   * @retval None
 245:stm32f4xx_usart.c ****   */
 246:stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:stm32f4xx_usart.c **** {
 209              		.loc 1 247 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 16
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL19:
 248:stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 249:stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 250:stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 251:stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 252:stm32f4xx_usart.c **** 
 253:stm32f4xx_usart.c ****   /* Check the parameters */
 254:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 255:stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 256:stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 257:stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 258:stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 259:stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 260:stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 261:stm32f4xx_usart.c **** 
 262:stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 264:stm32f4xx_usart.c ****   {
 265:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 266:stm32f4xx_usart.c ****   }
 267:stm32f4xx_usart.c **** 
 268:stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 214              		.loc 1 269 0
 215 0000 038A     		ldrh	r3, [r0, #16]	@, USARTx_10(D)->CR2
 247:stm32f4xx_usart.c **** {
 216              		.loc 1 247 0
 217 0002 30B5     		push	{r4, r5, lr}	@
 218              	.LCFI1:
 219              		.cfi_def_cfa_offset 12
 220              		.cfi_offset 4, -12
 221              		.cfi_offset 5, -8
 222              		.cfi_offset 14, -4
 223 0004 0D46     		mov	r5, r1	@ USART_InitStruct, USART_InitStruct
 224 0006 0446     		mov	r4, r0	@ USARTx, USARTx
 270:stm32f4xx_usart.c **** 
 271:stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 273:stm32f4xx_usart.c **** 
 274:stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 225              		.loc 1 276 0
ARM GAS  /tmp/ccyhuBN5.s 			page 10


 226 0008 EA88     		ldrh	r2, [r5, #6]	@ USART_InitStruct_8(D)->USART_StopBits, USART_InitStruct_8(D)->USART_StopBits
 269:stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 227              		.loc 1 269 0
 228 000a 98B2     		uxth	r0, r3	@ D.6225, USARTx_10(D)->CR2
 229              	.LVL20:
 272:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 230              		.loc 1 272 0
 231 000c 20F44051 		bic	r1, r0, #12288	@ tmpreg, D.6225,
 232              	.LVL21:
 277:stm32f4xx_usart.c ****   
 278:stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 233              		.loc 1 279 0
 234 0010 1143     		orrs	r1, r1, r2	@, D.6228, tmpreg, USART_InitStruct_8(D)->USART_StopBits
 235              	.LVL22:
 236 0012 2182     		strh	r1, [r4, #16]	@ movhi	@ D.6228, USARTx_10(D)->CR2
 280:stm32f4xx_usart.c **** 
 281:stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 237              		.loc 1 282 0
 238 0014 A389     		ldrh	r3, [r4, #12]	@, USARTx_10(D)->CR1
 239              	.LVL23:
 283:stm32f4xx_usart.c **** 
 284:stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 240              		.loc 1 285 0
 241 0016 23F4B050 		bic	r0, r3, #5632	@ tmpreg, USARTx_10(D)->CR1,
 242 001a 20F00C01 		bic	r1, r0, #12	@ tmpreg, tmpreg,
 243 001e 0A04     		lsls	r2, r1, #16	@ tmpreg, tmpreg,
 286:stm32f4xx_usart.c **** 
 287:stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 244              		.loc 1 291 0
 245 0020 2889     		ldrh	r0, [r5, #8]	@, USART_InitStruct_8(D)->USART_Parity
 246 0022 A988     		ldrh	r1, [r5, #4]	@, USART_InitStruct_8(D)->USART_WordLength
 285:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 247              		.loc 1 285 0
 248 0024 130C     		lsrs	r3, r2, #16	@ tmpreg, tmpreg,
 249              	.LVL24:
 250              		.loc 1 291 0
 251 0026 40EA0102 		orr	r2, r0, r1	@ tmp206, USART_InitStruct_8(D)->USART_Parity, USART_InitStruct_8(D)->USART_WordLen
 252 002a 6889     		ldrh	r0, [r5, #10]	@, USART_InitStruct_8(D)->USART_Mode
 253 002c 0243     		orrs	r2, r2, r0	@, tmp209, tmp206, USART_InitStruct_8(D)->USART_Mode
 254 002e 91B2     		uxth	r1, r2	@ tmp210, tmp209
 292:stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 293:stm32f4xx_usart.c **** 
 294:stm32f4xx_usart.c ****   /* Write to USART CR1 */
 295:stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 255              		.loc 1 295 0
 256 0030 0B43     		orrs	r3, r3, r1	@, D.6228, tmpreg, tmp210
 257              	.LVL25:
 258 0032 A381     		strh	r3, [r4, #12]	@ movhi	@ D.6228, USARTx_10(D)->CR1
 296:stm32f4xx_usart.c **** 
 297:stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
ARM GAS  /tmp/ccyhuBN5.s 			page 11


 298:stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 259              		.loc 1 298 0
 260 0034 A28A     		ldrh	r2, [r4, #20]	@, USARTx_10(D)->CR3
 299:stm32f4xx_usart.c **** 
 300:stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 302:stm32f4xx_usart.c **** 
 303:stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 261              		.loc 1 305 0
 262 0036 AB89     		ldrh	r3, [r5, #12]	@ USART_InitStruct_8(D)->USART_HardwareFlowControl, USART_InitStruct_8(D)->USAR
 298:stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 263              		.loc 1 298 0
 264 0038 90B2     		uxth	r0, r2	@ D.6236, USARTx_10(D)->CR3
 265              	.LVL26:
 301:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 266              		.loc 1 301 0
 267 003a 20F44071 		bic	r1, r0, #768	@ tmpreg, D.6236,
 268              	.LVL27:
 247:stm32f4xx_usart.c **** {
 269              		.loc 1 247 0
 270 003e 85B0     		sub	sp, sp, #20	@,,
 271              	.LCFI2:
 272              		.cfi_def_cfa_offset 32
 306:stm32f4xx_usart.c **** 
 307:stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 273              		.loc 1 308 0
 274 0040 1943     		orrs	r1, r1, r3	@, D.6228, tmpreg, USART_InitStruct_8(D)->USART_HardwareFlowControl
 275              	.LVL28:
 276 0042 A182     		strh	r1, [r4, #20]	@ movhi	@ D.6228, USARTx_10(D)->CR3
 309:stm32f4xx_usart.c **** 
 310:stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 277              		.loc 1 312 0
 278 0044 6846     		mov	r0, sp	@,
 279 0046 FFF7FEFF 		bl	RCC_GetClocksFreq	@
 280              	.LVL29:
 313:stm32f4xx_usart.c **** 
 314:stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 281              		.loc 1 314 0
 282 004a 1A4A     		ldr	r2, .L23	@ tmp219,
 283 004c 9442     		cmp	r4, r2	@ USARTx, tmp219
 284 004e 03D0     		beq	.L14	@,
 285              		.loc 1 314 0 is_stmt 0 discriminator 1
 286 0050 02F58060 		add	r0, r2, #1024	@ tmp220, tmp220,
 287 0054 8442     		cmp	r4, r0	@ USARTx, tmp220
 288 0056 01D1     		bne	.L15	@,
 289              	.L14:
 315:stm32f4xx_usart.c ****   {
 316:stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 290              		.loc 1 316 0 is_stmt 1
 291 0058 039B     		ldr	r3, [sp, #12]	@ apbclock, RCC_ClocksStatus.PCLK2_Frequency
 292              	.LVL30:
 293 005a 00E0     		b	.L16	@
ARM GAS  /tmp/ccyhuBN5.s 			page 12


 294              	.LVL31:
 295              	.L15:
 317:stm32f4xx_usart.c ****   }
 318:stm32f4xx_usart.c ****   else
 319:stm32f4xx_usart.c ****   {
 320:stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 296              		.loc 1 320 0
 297 005c 029B     		ldr	r3, [sp, #8]	@ apbclock, RCC_ClocksStatus.PCLK1_Frequency
 298              	.LVL32:
 299              	.L16:
 321:stm32f4xx_usart.c ****   }
 322:stm32f4xx_usart.c ****   
 323:stm32f4xx_usart.c ****   /* Determine the integer part */
 324:stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 300              		.loc 1 324 0
 301 005e A189     		ldrh	r1, [r4, #12]	@, USARTx_10(D)->CR1
 302 0060 0AB2     		sxth	r2, r1	@ D.6242, USARTx_10(D)->CR1
 303 0062 002A     		cmp	r2, #0	@ D.6242,
 304 0064 4FF01900 		mov	r0, #25	@ tmp254,
 305 0068 2A68     		ldr	r2, [r5, #0]	@ USART_InitStruct_8(D)->USART_BaudRate, USART_InitStruct_8(D)->USART_BaudRate
 325:stm32f4xx_usart.c ****   {
 326:stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 306              		.loc 1 327 0
 307 006a 00FB03F3 		mul	r3, r0, r3	@ tmp224, tmp254, apbclock
 308              	.LVL33:
 324:stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 309              		.loc 1 324 0
 310 006e 01DA     		bge	.L17	@,
 311              		.loc 1 327 0
 312 0070 5100     		lsls	r1, r2, #1	@ tmp226, USART_InitStruct_8(D)->USART_BaudRate,
 313 0072 00E0     		b	.L21	@
 314              	.L17:
 328:stm32f4xx_usart.c ****   }
 329:stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:stm32f4xx_usart.c ****   {
 331:stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 315              		.loc 1 332 0
 316 0074 9100     		lsls	r1, r2, #2	@ tmp230, USART_InitStruct_8(D)->USART_BaudRate,
 317              	.L21:
 318 0076 B3FBF1F1 		udiv	r1, r3, r1	@ integerdivider, tmp228, tmp230
 319              	.LVL34:
 333:stm32f4xx_usart.c ****   }
 334:stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 320              		.loc 1 334 0
 321 007a 6423     		movs	r3, #100	@ tmp234,
 322 007c B1FBF3F0 		udiv	r0, r1, r3	@ tmp233, integerdivider, tmp234
 323 0080 0201     		lsls	r2, r0, #4	@ tmpreg, tmp233,
 324              	.LVL35:
 335:stm32f4xx_usart.c **** 
 336:stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 325              		.loc 1 337 0
 326 0082 1009     		lsrs	r0, r2, #4	@ tmp235, tmpreg,
 327 0084 03FB1011 		mls	r1, r3, r0, r1	@ fractionaldivider, tmp234, tmp235, integerdivider
 328              	.LVL36:
ARM GAS  /tmp/ccyhuBN5.s 			page 13


 338:stm32f4xx_usart.c **** 
 339:stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 329              		.loc 1 340 0
 330 0088 A089     		ldrh	r0, [r4, #12]	@, USARTx_10(D)->CR1
 331 008a 00B2     		sxth	r0, r0	@ D.6254, USARTx_10(D)->CR1
 332 008c 0028     		cmp	r0, #0	@ D.6254,
 333 008e 06DA     		bge	.L19	@,
 341:stm32f4xx_usart.c ****   {
 342:stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 334              		.loc 1 342 0
 335 0090 C900     		lsls	r1, r1, #3	@ tmp241, fractionaldivider,
 336              	.LVL37:
 337 0092 3231     		adds	r1, r1, #50	@ tmp242, tmp241,
 338 0094 B1FBF3F3 		udiv	r3, r1, r3	@ tmp244, tmp242, tmp234
 339 0098 03F00700 		and	r0, r3, #7	@ tmp246, tmp244,
 340 009c 05E0     		b	.L22	@
 341              	.LVL38:
 342              	.L19:
 343:stm32f4xx_usart.c ****   }
 344:stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:stm32f4xx_usart.c ****   {
 346:stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 343              		.loc 1 346 0
 344 009e 0901     		lsls	r1, r1, #4	@ tmp247, fractionaldivider,
 345              	.LVL39:
 346 00a0 3231     		adds	r1, r1, #50	@ tmp248, tmp247,
 347 00a2 B1FBF3F3 		udiv	r3, r1, r3	@ tmp250, tmp248, tmp234
 348 00a6 03F00F00 		and	r0, r3, #15	@ tmp252, tmp250,
 349              	.L22:
 350 00aa 0243     		orrs	r2, r2, r0	@, tmpreg, tmpreg, tmp252
 351              	.LVL40:
 347:stm32f4xx_usart.c ****   }
 348:stm32f4xx_usart.c ****   
 349:stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 352              		.loc 1 350 0
 353 00ac 90B2     		uxth	r0, r2	@ D.6228, tmpreg
 354 00ae 2081     		strh	r0, [r4, #8]	@ movhi	@ D.6228, USARTx_10(D)->BRR
 351:stm32f4xx_usart.c **** }
 355              		.loc 1 351 0
 356 00b0 05B0     		add	sp, sp, #20	@,,
 357 00b2 30BD     		pop	{r4, r5, pc}
 358              	.L24:
 359              		.align	2
 360              	.L23:
 361 00b4 00100140 		.word	1073811456
 362              		.cfi_endproc
 363              	.LFE111:
 364              		.size	USART_Init, .-USART_Init
 365              		.section	.text.USART_StructInit,"ax",%progbits
 366              		.align	1
 367              		.global	USART_StructInit
 368              		.thumb
 369              		.thumb_func
 370              		.type	USART_StructInit, %function
 371              	USART_StructInit:
ARM GAS  /tmp/ccyhuBN5.s 			page 14


 372              	.LFB112:
 352:stm32f4xx_usart.c **** 
 353:stm32f4xx_usart.c **** /**
 354:stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:stm32f4xx_usart.c ****   *         be initialized.
 357:stm32f4xx_usart.c ****   * @retval None
 358:stm32f4xx_usart.c ****   */
 359:stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:stm32f4xx_usart.c **** {
 373              		.loc 1 360 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              		@ link register save eliminated.
 378              	.LVL41:
 361:stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 363:stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 379              		.loc 1 363 0
 380 0000 0021     		movs	r1, #0	@ tmp137,
 362:stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 381              		.loc 1 362 0
 382 0002 4FF41653 		mov	r3, #9600	@ tmp135,
 364:stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 365:stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 366:stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 383              		.loc 1 366 0
 384 0006 0C22     		movs	r2, #12	@ tmp143,
 362:stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 385              		.loc 1 362 0
 386 0008 0360     		str	r3, [r0, #0]	@ tmp135, USART_InitStruct_1(D)->USART_BaudRate
 363:stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 387              		.loc 1 363 0
 388 000a 8180     		strh	r1, [r0, #4]	@ movhi	@ tmp137, USART_InitStruct_1(D)->USART_WordLength
 364:stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 389              		.loc 1 364 0
 390 000c C180     		strh	r1, [r0, #6]	@ movhi	@ tmp137, USART_InitStruct_1(D)->USART_StopBits
 365:stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 391              		.loc 1 365 0
 392 000e 0181     		strh	r1, [r0, #8]	@ movhi	@ tmp137, USART_InitStruct_1(D)->USART_Parity
 393              		.loc 1 366 0
 394 0010 4281     		strh	r2, [r0, #10]	@ movhi	@ tmp143, USART_InitStruct_1(D)->USART_Mode
 367:stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 395              		.loc 1 367 0
 396 0012 8181     		strh	r1, [r0, #12]	@ movhi	@ tmp137, USART_InitStruct_1(D)->USART_HardwareFlowControl
 397 0014 7047     		bx	lr	@
 398              		.cfi_endproc
 399              	.LFE112:
 400              		.size	USART_StructInit, .-USART_StructInit
 401              		.section	.text.USART_ClockInit,"ax",%progbits
 402              		.align	1
 403              		.global	USART_ClockInit
 404              		.thumb
 405              		.thumb_func
 406              		.type	USART_ClockInit, %function
 407              	USART_ClockInit:
ARM GAS  /tmp/ccyhuBN5.s 			page 15


 408              	.LFB113:
 368:stm32f4xx_usart.c **** }
 369:stm32f4xx_usart.c **** 
 370:stm32f4xx_usart.c **** /**
 371:stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:stm32f4xx_usart.c ****   * @retval None
 378:stm32f4xx_usart.c ****   */
 379:stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:stm32f4xx_usart.c **** {
 409              		.loc 1 380 0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              	.LVL42:
 381:stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 382:stm32f4xx_usart.c ****   /* Check the parameters */
 383:stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 384:stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 385:stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 386:stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 387:stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 388:stm32f4xx_usart.c ****   
 389:stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 414              		.loc 1 390 0
 415 0000 028A     		ldrh	r2, [r0, #16]	@, USARTx_2(D)->CR2
 416 0002 93B2     		uxth	r3, r2	@ D.6212, USARTx_2(D)->CR2
 417              	.LVL43:
 391:stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 418              		.loc 1 392 0
 419 0004 23F47062 		bic	r2, r3, #3840	@ tmpreg, D.6212,
 420              	.LVL44:
 380:stm32f4xx_usart.c **** {
 421              		.loc 1 380 0
 422 0008 10B5     		push	{r4, lr}	@
 423              	.LCFI3:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 4, -8
 426              		.cfi_offset 14, -4
 393:stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 395:stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 399:stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 427              		.loc 1 399 0
 428 000a 0B88     		ldrh	r3, [r1, #0]	@, USART_ClockInitStruct_6(D)->USART_Clock
 429 000c 4C88     		ldrh	r4, [r1, #2]	@, USART_ClockInitStruct_6(D)->USART_CPOL
 430 000e 2343     		orrs	r3, r3, r4	@, tmp153, USART_ClockInitStruct_6(D)->USART_Clock, USART_ClockInitStruct_6(D)->US
 431 0010 8C88     		ldrh	r4, [r1, #4]	@, USART_ClockInitStruct_6(D)->USART_CPHA
ARM GAS  /tmp/ccyhuBN5.s 			page 16


 432 0012 C988     		ldrh	r1, [r1, #6]	@, USART_ClockInitStruct_6(D)->USART_LastBit
 433              	.LVL45:
 434 0014 2343     		orrs	r3, r3, r4	@, tmp156, tmp153, USART_ClockInitStruct_6(D)->USART_CPHA
 435 0016 0B43     		orrs	r3, r3, r1	@, tmp159, tmp156, USART_ClockInitStruct_6(D)->USART_LastBit
 436 0018 9BB2     		uxth	r3, r3	@ tmp160, tmp159
 400:stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 437              		.loc 1 401 0
 438 001a 1343     		orrs	r3, r3, r2	@, D.6221, tmp160, tmpreg
 439 001c 0382     		strh	r3, [r0, #16]	@ movhi	@ D.6221, USARTx_2(D)->CR2
 440 001e 10BD     		pop	{r4, pc}	@
 441              		.cfi_endproc
 442              	.LFE113:
 443              		.size	USART_ClockInit, .-USART_ClockInit
 444              		.section	.text.USART_ClockStructInit,"ax",%progbits
 445              		.align	1
 446              		.global	USART_ClockStructInit
 447              		.thumb
 448              		.thumb_func
 449              		.type	USART_ClockStructInit, %function
 450              	USART_ClockStructInit:
 451              	.LFB114:
 402:stm32f4xx_usart.c **** }
 403:stm32f4xx_usart.c **** 
 404:stm32f4xx_usart.c **** /**
 405:stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 407:stm32f4xx_usart.c ****   *         which will be initialized.
 408:stm32f4xx_usart.c ****   * @retval None
 409:stm32f4xx_usart.c ****   */
 410:stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:stm32f4xx_usart.c **** {
 452              		.loc 1 411 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457              	.LVL46:
 412:stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 458              		.loc 1 413 0
 459 0000 0023     		movs	r3, #0	@ tmp136,
 460 0002 0380     		strh	r3, [r0, #0]	@ movhi	@ tmp136, USART_ClockInitStruct_1(D)->USART_Clock
 414:stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 461              		.loc 1 414 0
 462 0004 4380     		strh	r3, [r0, #2]	@ movhi	@ tmp136, USART_ClockInitStruct_1(D)->USART_CPOL
 415:stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 463              		.loc 1 415 0
 464 0006 8380     		strh	r3, [r0, #4]	@ movhi	@ tmp136, USART_ClockInitStruct_1(D)->USART_CPHA
 416:stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 465              		.loc 1 416 0
 466 0008 C380     		strh	r3, [r0, #6]	@ movhi	@ tmp136, USART_ClockInitStruct_1(D)->USART_LastBit
 467 000a 7047     		bx	lr	@
 468              		.cfi_endproc
 469              	.LFE114:
 470              		.size	USART_ClockStructInit, .-USART_ClockStructInit
 471              		.section	.text.USART_Cmd,"ax",%progbits
ARM GAS  /tmp/ccyhuBN5.s 			page 17


 472              		.align	1
 473              		.global	USART_Cmd
 474              		.thumb
 475              		.thumb_func
 476              		.type	USART_Cmd, %function
 477              	USART_Cmd:
 478              	.LFB115:
 417:stm32f4xx_usart.c **** }
 418:stm32f4xx_usart.c **** 
 419:stm32f4xx_usart.c **** /**
 420:stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:stm32f4xx_usart.c ****   *         UART peripheral.
 423:stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:stm32f4xx_usart.c ****   * @retval None
 426:stm32f4xx_usart.c ****   */
 427:stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:stm32f4xx_usart.c **** {
 479              		.loc 1 428 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484              	.LVL47:
 429:stm32f4xx_usart.c ****   /* Check the parameters */
 430:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 431:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 432:stm32f4xx_usart.c ****   
 433:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 434:stm32f4xx_usart.c ****   {
 435:stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 485              		.loc 1 436 0
 486 0000 8389     		ldrh	r3, [r0, #12]	@,
 433:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 487              		.loc 1 433 0
 488 0002 19B1     		cbz	r1, .L29	@ NewState,
 489              		.loc 1 436 0
 490 0004 99B2     		uxth	r1, r3	@ D.6207, USARTx_2(D)->CR1
 491              	.LVL48:
 492 0006 41F40053 		orr	r3, r1, #8192	@ D.6208, D.6207,
 493 000a 03E0     		b	.L31	@
 494              	.LVL49:
 495              	.L29:
 437:stm32f4xx_usart.c ****   }
 438:stm32f4xx_usart.c ****   else
 439:stm32f4xx_usart.c ****   {
 440:stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 496              		.loc 1 441 0
 497 000c 23F40051 		bic	r1, r3, #8192	@ D.6211, USARTx_2(D)->CR1,
 498              	.LVL50:
 499 0010 0A04     		lsls	r2, r1, #16	@ D.6211, D.6211,
 500 0012 130C     		lsrs	r3, r2, #16	@ D.6211, D.6211,
 501              	.L31:
 502 0014 8381     		strh	r3, [r0, #12]	@ movhi	@ D.6211,
ARM GAS  /tmp/ccyhuBN5.s 			page 18


 503 0016 7047     		bx	lr	@
 504              		.cfi_endproc
 505              	.LFE115:
 506              		.size	USART_Cmd, .-USART_Cmd
 507              		.section	.text.USART_SetPrescaler,"ax",%progbits
 508              		.align	1
 509              		.global	USART_SetPrescaler
 510              		.thumb
 511              		.thumb_func
 512              		.type	USART_SetPrescaler, %function
 513              	USART_SetPrescaler:
 514              	.LFB116:
 442:stm32f4xx_usart.c ****   }
 443:stm32f4xx_usart.c **** }
 444:stm32f4xx_usart.c **** 
 445:stm32f4xx_usart.c **** /**
 446:stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:stm32f4xx_usart.c ****   *         UART peripheral.
 449:stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 450:stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:stm32f4xx_usart.c ****   * @retval None
 452:stm32f4xx_usart.c ****   */
 453:stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:stm32f4xx_usart.c **** { 
 515              		.loc 1 454 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520              	.LVL51:
 455:stm32f4xx_usart.c ****   /* Check the parameters */
 456:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 457:stm32f4xx_usart.c ****   
 458:stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 521              		.loc 1 459 0
 522 0000 038B     		ldrh	r3, [r0, #24]	@, USARTx_1(D)->GTPR
 523 0002 03F47F42 		and	r2, r3, #65280	@ D.6201, USARTx_1(D)->GTPR,
 524 0006 0283     		strh	r2, [r0, #24]	@ movhi	@ D.6201, USARTx_1(D)->GTPR
 460:stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 525              		.loc 1 461 0
 526 0008 038B     		ldrh	r3, [r0, #24]	@, USARTx_1(D)->GTPR
 527 000a 9AB2     		uxth	r2, r3	@ D.6202, USARTx_1(D)->GTPR
 528 000c 1143     		orrs	r1, r1, r2	@, D.6204, USART_Prescaler, D.6202
 529              	.LVL52:
 530 000e 0183     		strh	r1, [r0, #24]	@ movhi	@ D.6204, USARTx_1(D)->GTPR
 531 0010 7047     		bx	lr	@
 532              		.cfi_endproc
 533              	.LFE116:
 534              		.size	USART_SetPrescaler, .-USART_SetPrescaler
 535              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 536              		.align	1
 537              		.global	USART_OverSampling8Cmd
 538              		.thumb
 539              		.thumb_func
ARM GAS  /tmp/ccyhuBN5.s 			page 19


 540              		.type	USART_OverSampling8Cmd, %function
 541              	USART_OverSampling8Cmd:
 542              	.LFB117:
 462:stm32f4xx_usart.c **** }
 463:stm32f4xx_usart.c **** 
 464:stm32f4xx_usart.c **** /**
 465:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:stm32f4xx_usart.c ****   *         UART peripheral.
 470:stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:stm32f4xx_usart.c ****   * @retval None
 473:stm32f4xx_usart.c ****   */
 474:stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:stm32f4xx_usart.c **** {
 543              		.loc 1 475 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL53:
 476:stm32f4xx_usart.c ****   /* Check the parameters */
 477:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 478:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:stm32f4xx_usart.c ****   
 480:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 481:stm32f4xx_usart.c ****   {
 482:stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 549              		.loc 1 483 0
 550 0000 8389     		ldrh	r3, [r0, #12]	@,
 480:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 551              		.loc 1 480 0
 552 0002 29B1     		cbz	r1, .L34	@ NewState,
 553              		.loc 1 483 0
 554 0004 6FEA4343 		mvn	r3, r3, lsl #17	@ tmp142, USARTx_2(D)->CR1,
 555 0008 6FEA5341 		mvn	r1, r3, lsr #17	@ tmp142, tmp142,
 556              	.LVL54:
 557 000c 8AB2     		uxth	r2, r1	@ D.6196, tmp142
 558 000e 01E0     		b	.L36	@
 559              	.LVL55:
 560              	.L34:
 484:stm32f4xx_usart.c ****   }
 485:stm32f4xx_usart.c ****   else
 486:stm32f4xx_usart.c ****   {
 487:stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 561              		.loc 1 488 0
 562 0010 5904     		lsls	r1, r3, #17	@ tmp148, USARTx_2(D)->CR1,
 563              	.LVL56:
 564 0012 4A0C     		lsrs	r2, r1, #17	@ D.6199, tmp148,
 565              	.L36:
 566 0014 8281     		strh	r2, [r0, #12]	@ movhi	@ D.6199,
 567 0016 7047     		bx	lr	@
 568              		.cfi_endproc
ARM GAS  /tmp/ccyhuBN5.s 			page 20


 569              	.LFE117:
 570              		.size	USART_OverSampling8Cmd, .-USART_OverSampling8Cmd
 571              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 572              		.align	1
 573              		.global	USART_OneBitMethodCmd
 574              		.thumb
 575              		.thumb_func
 576              		.type	USART_OneBitMethodCmd, %function
 577              	USART_OneBitMethodCmd:
 578              	.LFB118:
 489:stm32f4xx_usart.c ****   }
 490:stm32f4xx_usart.c **** }  
 491:stm32f4xx_usart.c **** 
 492:stm32f4xx_usart.c **** /**
 493:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 495:stm32f4xx_usart.c ****   *         UART peripheral.
 496:stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:stm32f4xx_usart.c ****   * @retval None
 499:stm32f4xx_usart.c ****   */
 500:stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:stm32f4xx_usart.c **** {
 579              		.loc 1 501 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 584              	.LVL57:
 502:stm32f4xx_usart.c ****   /* Check the parameters */
 503:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 504:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 505:stm32f4xx_usart.c ****   
 506:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 507:stm32f4xx_usart.c ****   {
 508:stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 585              		.loc 1 509 0
 586 0000 838A     		ldrh	r3, [r0, #20]	@,
 506:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 587              		.loc 1 506 0
 588 0002 19B1     		cbz	r1, .L38	@ NewState,
 589              		.loc 1 509 0
 590 0004 99B2     		uxth	r1, r3	@ D.6188, USARTx_2(D)->CR3
 591              	.LVL58:
 592 0006 41F40063 		orr	r3, r1, #2048	@ D.6189, D.6188,
 593 000a 03E0     		b	.L40	@
 594              	.LVL59:
 595              	.L38:
 510:stm32f4xx_usart.c ****   }
 511:stm32f4xx_usart.c ****   else
 512:stm32f4xx_usart.c ****   {
 513:stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 514:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 596              		.loc 1 514 0
 597 000c 23F40061 		bic	r1, r3, #2048	@ D.6192, USARTx_2(D)->CR3,
 598              	.LVL60:
ARM GAS  /tmp/ccyhuBN5.s 			page 21


 599 0010 0A04     		lsls	r2, r1, #16	@ D.6192, D.6192,
 600 0012 130C     		lsrs	r3, r2, #16	@ D.6192, D.6192,
 601              	.L40:
 602 0014 8382     		strh	r3, [r0, #20]	@ movhi	@ D.6192,
 603 0016 7047     		bx	lr	@
 604              		.cfi_endproc
 605              	.LFE118:
 606              		.size	USART_OneBitMethodCmd, .-USART_OneBitMethodCmd
 607              		.section	.text.USART_SendData,"ax",%progbits
 608              		.align	1
 609              		.global	USART_SendData
 610              		.thumb
 611              		.thumb_func
 612              		.type	USART_SendData, %function
 613              	USART_SendData:
 614              	.LFB119:
 515:stm32f4xx_usart.c ****   }
 516:stm32f4xx_usart.c **** }
 517:stm32f4xx_usart.c **** 
 518:stm32f4xx_usart.c **** /**
 519:stm32f4xx_usart.c ****   * @}
 520:stm32f4xx_usart.c ****   */
 521:stm32f4xx_usart.c **** 
 522:stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:stm32f4xx_usart.c ****  *
 525:stm32f4xx_usart.c **** @verbatim   
 526:stm32f4xx_usart.c ****  ===============================================================================
 527:stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 528:stm32f4xx_usart.c ****  ===============================================================================  
 529:stm32f4xx_usart.c ****     [..]
 530:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:stm32f4xx_usart.c ****     transfers.
 532:stm32f4xx_usart.c ****     [..]
 533:stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:stm32f4xx_usart.c ****     [..]
 537:stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:stm32f4xx_usart.c ****     at the end of the current transmission.
 540:stm32f4xx_usart.c ****     [..]
 541:stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:stm32f4xx_usart.c ****     TDR buffer.
 545:stm32f4xx_usart.c **** 
 546:stm32f4xx_usart.c **** @endverbatim
 547:stm32f4xx_usart.c ****   * @{
 548:stm32f4xx_usart.c ****   */
 549:stm32f4xx_usart.c **** 
 550:stm32f4xx_usart.c **** /**
 551:stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:stm32f4xx_usart.c ****   *         UART peripheral.
 554:stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:stm32f4xx_usart.c ****   * @retval None
ARM GAS  /tmp/ccyhuBN5.s 			page 22


 556:stm32f4xx_usart.c ****   */
 557:stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:stm32f4xx_usart.c **** {
 615              		.loc 1 558 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL61:
 559:stm32f4xx_usart.c ****   /* Check the parameters */
 560:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 561:stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 562:stm32f4xx_usart.c ****     
 563:stm32f4xx_usart.c ****   /* Transmit Data */
 564:stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 621              		.loc 1 564 0
 622 0000 C905     		lsls	r1, r1, #23	@ tmp138, Data,
 623              	.LVL62:
 624 0002 CA0D     		lsrs	r2, r1, #23	@ D.6185, tmp138,
 625 0004 8280     		strh	r2, [r0, #4]	@ movhi	@ D.6185, USARTx_3(D)->DR
 626 0006 7047     		bx	lr	@
 627              		.cfi_endproc
 628              	.LFE119:
 629              		.size	USART_SendData, .-USART_SendData
 630              		.section	.text.USART_ReceiveData,"ax",%progbits
 631              		.align	1
 632              		.global	USART_ReceiveData
 633              		.thumb
 634              		.thumb_func
 635              		.type	USART_ReceiveData, %function
 636              	USART_ReceiveData:
 637              	.LFB120:
 565:stm32f4xx_usart.c **** }
 566:stm32f4xx_usart.c **** 
 567:stm32f4xx_usart.c **** /**
 568:stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:stm32f4xx_usart.c ****   *         UART peripheral.
 571:stm32f4xx_usart.c ****   * @retval The received data.
 572:stm32f4xx_usart.c ****   */
 573:stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:stm32f4xx_usart.c **** {
 638              		.loc 1 574 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643              	.LVL63:
 575:stm32f4xx_usart.c ****   /* Check the parameters */
 576:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 577:stm32f4xx_usart.c ****   
 578:stm32f4xx_usart.c ****   /* Receive Data */
 579:stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 644              		.loc 1 579 0
 645 0000 8088     		ldrh	r0, [r0, #4]	@, USARTx_1(D)->DR
 646              	.LVL64:
 647 0002 C105     		lsls	r1, r0, #23	@ tmp142, USARTx_1(D)->DR,
ARM GAS  /tmp/ccyhuBN5.s 			page 23


 580:stm32f4xx_usart.c **** }
 648              		.loc 1 580 0
 649 0004 C80D     		lsrs	r0, r1, #23	@, tmp142,
 650 0006 7047     		bx	lr	@
 651              		.cfi_endproc
 652              	.LFE120:
 653              		.size	USART_ReceiveData, .-USART_ReceiveData
 654              		.section	.text.USART_SetAddress,"ax",%progbits
 655              		.align	1
 656              		.global	USART_SetAddress
 657              		.thumb
 658              		.thumb_func
 659              		.type	USART_SetAddress, %function
 660              	USART_SetAddress:
 661              	.LFB121:
 581:stm32f4xx_usart.c **** 
 582:stm32f4xx_usart.c **** /**
 583:stm32f4xx_usart.c ****   * @}
 584:stm32f4xx_usart.c ****   */
 585:stm32f4xx_usart.c **** 
 586:stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:stm32f4xx_usart.c ****  *
 589:stm32f4xx_usart.c **** @verbatim   
 590:stm32f4xx_usart.c ****  ===============================================================================
 591:stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 592:stm32f4xx_usart.c ****  ===============================================================================  
 593:stm32f4xx_usart.c ****     [..]
 594:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:stm32f4xx_usart.c ****     multiprocessor communication.
 596:stm32f4xx_usart.c ****     [..]
 597:stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:stm32f4xx_usart.c ****     master.
 601:stm32f4xx_usart.c ****     [..]
 602:stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:stm32f4xx_usart.c ****           the USART_Init() function.
 606:stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:stm32f4xx_usart.c ****     [..]
 612:stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 613:stm32f4xx_usart.c **** 
 614:stm32f4xx_usart.c **** @endverbatim
 615:stm32f4xx_usart.c ****   * @{
 616:stm32f4xx_usart.c ****   */
 617:stm32f4xx_usart.c **** 
 618:stm32f4xx_usart.c **** /**
 619:stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:stm32f4xx_usart.c ****   *         UART peripheral.
 622:stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
ARM GAS  /tmp/ccyhuBN5.s 			page 24


 623:stm32f4xx_usart.c ****   * @retval None
 624:stm32f4xx_usart.c ****   */
 625:stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:stm32f4xx_usart.c **** {
 662              		.loc 1 626 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 0
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              		@ link register save eliminated.
 667              	.LVL65:
 627:stm32f4xx_usart.c ****   /* Check the parameters */
 628:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 630:stm32f4xx_usart.c ****     
 631:stm32f4xx_usart.c ****   /* Clear the USART address */
 632:stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 668              		.loc 1 632 0
 669 0000 038A     		ldrh	r3, [r0, #16]	@, USARTx_1(D)->CR2
 670 0002 23F00F02 		bic	r2, r3, #15	@ D.6178, USARTx_1(D)->CR2,
 671 0006 1304     		lsls	r3, r2, #16	@ D.6178, D.6178,
 672 0008 1A0C     		lsrs	r2, r3, #16	@ D.6178, D.6178,
 673 000a 0282     		strh	r2, [r0, #16]	@ movhi	@ D.6178, USARTx_1(D)->CR2
 633:stm32f4xx_usart.c ****   /* Set the USART address node */
 634:stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 674              		.loc 1 634 0
 675 000c 038A     		ldrh	r3, [r0, #16]	@, USARTx_1(D)->CR2
 676 000e 9AB2     		uxth	r2, r3	@ D.6179, USARTx_1(D)->CR2
 677 0010 1143     		orrs	r1, r1, r2	@, D.6181, USART_Address, D.6179
 678              	.LVL66:
 679 0012 0182     		strh	r1, [r0, #16]	@ movhi	@ D.6181, USARTx_1(D)->CR2
 680 0014 7047     		bx	lr	@
 681              		.cfi_endproc
 682              	.LFE121:
 683              		.size	USART_SetAddress, .-USART_SetAddress
 684              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 685              		.align	1
 686              		.global	USART_ReceiverWakeUpCmd
 687              		.thumb
 688              		.thumb_func
 689              		.type	USART_ReceiverWakeUpCmd, %function
 690              	USART_ReceiverWakeUpCmd:
 691              	.LFB122:
 635:stm32f4xx_usart.c **** }
 636:stm32f4xx_usart.c **** 
 637:stm32f4xx_usart.c **** /**
 638:stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 640:stm32f4xx_usart.c ****   *         UART peripheral.
 641:stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:stm32f4xx_usart.c ****   * @retval None
 644:stm32f4xx_usart.c ****   */
 645:stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:stm32f4xx_usart.c **** {
 692              		.loc 1 646 0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccyhuBN5.s 			page 25


 695              		@ frame_needed = 0, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 697              	.LVL67:
 647:stm32f4xx_usart.c ****   /* Check the parameters */
 648:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 649:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 650:stm32f4xx_usart.c ****   
 651:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 652:stm32f4xx_usart.c ****   {
 653:stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 698              		.loc 1 654 0
 699 0000 8389     		ldrh	r3, [r0, #12]	@,
 651:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 700              		.loc 1 651 0
 701 0002 19B1     		cbz	r1, .L45	@ NewState,
 702              		.loc 1 654 0
 703 0004 99B2     		uxth	r1, r3	@ D.6172, USARTx_2(D)->CR1
 704              	.LVL68:
 705 0006 41F00203 		orr	r3, r1, #2	@ D.6173, D.6172,
 706 000a 03E0     		b	.L47	@
 707              	.LVL69:
 708              	.L45:
 655:stm32f4xx_usart.c ****   }
 656:stm32f4xx_usart.c ****   else
 657:stm32f4xx_usart.c ****   {
 658:stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 709              		.loc 1 659 0
 710 000c 23F00201 		bic	r1, r3, #2	@ D.6176, USARTx_2(D)->CR1,
 711              	.LVL70:
 712 0010 0A04     		lsls	r2, r1, #16	@ D.6176, D.6176,
 713 0012 130C     		lsrs	r3, r2, #16	@ D.6176, D.6176,
 714              	.L47:
 715 0014 8381     		strh	r3, [r0, #12]	@ movhi	@ D.6176,
 716 0016 7047     		bx	lr	@
 717              		.cfi_endproc
 718              	.LFE122:
 719              		.size	USART_ReceiverWakeUpCmd, .-USART_ReceiverWakeUpCmd
 720              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 721              		.align	1
 722              		.global	USART_WakeUpConfig
 723              		.thumb
 724              		.thumb_func
 725              		.type	USART_WakeUpConfig, %function
 726              	USART_WakeUpConfig:
 727              	.LFB123:
 660:stm32f4xx_usart.c ****   }
 661:stm32f4xx_usart.c **** }
 662:stm32f4xx_usart.c **** /**
 663:stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:stm32f4xx_usart.c ****   *         UART peripheral.
 666:stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
ARM GAS  /tmp/ccyhuBN5.s 			page 26


 670:stm32f4xx_usart.c ****   * @retval None
 671:stm32f4xx_usart.c ****   */
 672:stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 673:stm32f4xx_usart.c **** {
 728              		.loc 1 673 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732              		@ link register save eliminated.
 733              	.LVL71:
 674:stm32f4xx_usart.c ****   /* Check the parameters */
 675:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 676:stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 677:stm32f4xx_usart.c ****   
 678:stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 734              		.loc 1 678 0
 735 0000 8389     		ldrh	r3, [r0, #12]	@, USARTx_1(D)->CR1
 736 0002 23F40062 		bic	r2, r3, #2048	@ D.6167, USARTx_1(D)->CR1,
 737 0006 1304     		lsls	r3, r2, #16	@ D.6167, D.6167,
 738 0008 1A0C     		lsrs	r2, r3, #16	@ D.6167, D.6167,
 739 000a 8281     		strh	r2, [r0, #12]	@ movhi	@ D.6167, USARTx_1(D)->CR1
 679:stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 740              		.loc 1 679 0
 741 000c 8389     		ldrh	r3, [r0, #12]	@, USARTx_1(D)->CR1
 742 000e 9AB2     		uxth	r2, r3	@ D.6168, USARTx_1(D)->CR1
 743 0010 1143     		orrs	r1, r1, r2	@, D.6169, USART_WakeUp, D.6168
 744              	.LVL72:
 745 0012 8181     		strh	r1, [r0, #12]	@ movhi	@ D.6169, USARTx_1(D)->CR1
 746 0014 7047     		bx	lr	@
 747              		.cfi_endproc
 748              	.LFE123:
 749              		.size	USART_WakeUpConfig, .-USART_WakeUpConfig
 750              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 751              		.align	1
 752              		.global	USART_LINBreakDetectLengthConfig
 753              		.thumb
 754              		.thumb_func
 755              		.type	USART_LINBreakDetectLengthConfig, %function
 756              	USART_LINBreakDetectLengthConfig:
 757              	.LFB124:
 680:stm32f4xx_usart.c **** }
 681:stm32f4xx_usart.c **** 
 682:stm32f4xx_usart.c **** /**
 683:stm32f4xx_usart.c ****   * @}
 684:stm32f4xx_usart.c ****   */
 685:stm32f4xx_usart.c **** 
 686:stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:stm32f4xx_usart.c ****  *
 689:stm32f4xx_usart.c **** @verbatim   
 690:stm32f4xx_usart.c ****  ===============================================================================
 691:stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:stm32f4xx_usart.c ****  ===============================================================================  
 693:stm32f4xx_usart.c ****     [..]
 694:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:stm32f4xx_usart.c ****     Mode communication.
 696:stm32f4xx_usart.c ****     [..]
ARM GAS  /tmp/ccyhuBN5.s 			page 27


 697:stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:stm32f4xx_usart.c ****     the LIN standard.
 699:stm32f4xx_usart.c ****     [..]
 700:stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:stm32f4xx_usart.c **** 
 704:stm32f4xx_usart.c ****     [..]
 705:stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:stm32f4xx_usart.c ****     procedure:
 707:stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:stm32f4xx_usart.c ****         the USART_Init() function.
 710:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:stm32f4xx_usart.c ****     [..]
 714:stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 716:stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:stm32f4xx_usart.c ****           the USART_Init() function.
 718:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:stm32f4xx_usart.c ****           function.
 721:stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:stm32f4xx_usart.c **** 
 723:stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:stm32f4xx_usart.c **** 
 727:stm32f4xx_usart.c **** @endverbatim
 728:stm32f4xx_usart.c ****   * @{
 729:stm32f4xx_usart.c ****   */
 730:stm32f4xx_usart.c **** 
 731:stm32f4xx_usart.c **** /**
 732:stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:stm32f4xx_usart.c ****   *         UART peripheral.
 735:stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:stm32f4xx_usart.c ****   * @retval None
 740:stm32f4xx_usart.c ****   */
 741:stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:stm32f4xx_usart.c **** {
 758              		.loc 1 742 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763              	.LVL73:
 743:stm32f4xx_usart.c ****   /* Check the parameters */
 744:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 745:stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 746:stm32f4xx_usart.c ****   
 747:stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
ARM GAS  /tmp/ccyhuBN5.s 			page 28


 764              		.loc 1 747 0
 765 0000 038A     		ldrh	r3, [r0, #16]	@, USARTx_1(D)->CR2
 766 0002 23F02002 		bic	r2, r3, #32	@ D.6163, USARTx_1(D)->CR2,
 767 0006 1304     		lsls	r3, r2, #16	@ D.6163, D.6163,
 768 0008 1A0C     		lsrs	r2, r3, #16	@ D.6163, D.6163,
 769 000a 0282     		strh	r2, [r0, #16]	@ movhi	@ D.6163, USARTx_1(D)->CR2
 748:stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 770              		.loc 1 748 0
 771 000c 038A     		ldrh	r3, [r0, #16]	@, USARTx_1(D)->CR2
 772 000e 9AB2     		uxth	r2, r3	@ D.6164, USARTx_1(D)->CR2
 773 0010 1143     		orrs	r1, r1, r2	@, D.6165, USART_LINBreakDetectLength, D.6164
 774              	.LVL74:
 775 0012 0182     		strh	r1, [r0, #16]	@ movhi	@ D.6165, USARTx_1(D)->CR2
 776 0014 7047     		bx	lr	@
 777              		.cfi_endproc
 778              	.LFE124:
 779              		.size	USART_LINBreakDetectLengthConfig, .-USART_LINBreakDetectLengthConfig
 780              		.section	.text.USART_LINCmd,"ax",%progbits
 781              		.align	1
 782              		.global	USART_LINCmd
 783              		.thumb
 784              		.thumb_func
 785              		.type	USART_LINCmd, %function
 786              	USART_LINCmd:
 787              	.LFB125:
 749:stm32f4xx_usart.c **** }
 750:stm32f4xx_usart.c **** 
 751:stm32f4xx_usart.c **** /**
 752:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:stm32f4xx_usart.c ****   *         UART peripheral.
 755:stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:stm32f4xx_usart.c ****   * @retval None
 758:stm32f4xx_usart.c ****   */
 759:stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:stm32f4xx_usart.c **** {
 788              		.loc 1 760 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793              	.LVL75:
 761:stm32f4xx_usart.c ****   /* Check the parameters */
 762:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 763:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 764:stm32f4xx_usart.c ****   
 765:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 766:stm32f4xx_usart.c ****   {
 767:stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 794              		.loc 1 768 0
 795 0000 038A     		ldrh	r3, [r0, #16]	@,
 765:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 796              		.loc 1 765 0
 797 0002 19B1     		cbz	r1, .L51	@ NewState,
 798              		.loc 1 768 0
ARM GAS  /tmp/ccyhuBN5.s 			page 29


 799 0004 99B2     		uxth	r1, r3	@ D.6157, USARTx_2(D)->CR2
 800              	.LVL76:
 801 0006 41F48043 		orr	r3, r1, #16384	@ D.6158, D.6157,
 802 000a 03E0     		b	.L53	@
 803              	.LVL77:
 804              	.L51:
 769:stm32f4xx_usart.c ****   }
 770:stm32f4xx_usart.c ****   else
 771:stm32f4xx_usart.c ****   {
 772:stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 805              		.loc 1 773 0
 806 000c 23F48041 		bic	r1, r3, #16384	@ D.6161, USARTx_2(D)->CR2,
 807              	.LVL78:
 808 0010 0A04     		lsls	r2, r1, #16	@ D.6161, D.6161,
 809 0012 130C     		lsrs	r3, r2, #16	@ D.6161, D.6161,
 810              	.L53:
 811 0014 0382     		strh	r3, [r0, #16]	@ movhi	@ D.6161,
 812 0016 7047     		bx	lr	@
 813              		.cfi_endproc
 814              	.LFE125:
 815              		.size	USART_LINCmd, .-USART_LINCmd
 816              		.section	.text.USART_SendBreak,"ax",%progbits
 817              		.align	1
 818              		.global	USART_SendBreak
 819              		.thumb
 820              		.thumb_func
 821              		.type	USART_SendBreak, %function
 822              	USART_SendBreak:
 823              	.LFB126:
 774:stm32f4xx_usart.c ****   }
 775:stm32f4xx_usart.c **** }
 776:stm32f4xx_usart.c **** 
 777:stm32f4xx_usart.c **** /**
 778:stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:stm32f4xx_usart.c ****   *         UART peripheral.
 781:stm32f4xx_usart.c ****   * @retval None
 782:stm32f4xx_usart.c ****   */
 783:stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:stm32f4xx_usart.c **** {
 824              		.loc 1 784 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 829              	.LVL79:
 785:stm32f4xx_usart.c ****   /* Check the parameters */
 786:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 787:stm32f4xx_usart.c ****   
 788:stm32f4xx_usart.c ****   /* Send break characters */
 789:stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 830              		.loc 1 789 0
 831 0000 8389     		ldrh	r3, [r0, #12]	@, USARTx_1(D)->CR1
 832 0002 99B2     		uxth	r1, r3	@ D.6153, USARTx_1(D)->CR1
 833 0004 41F00102 		orr	r2, r1, #1	@ D.6154, D.6153,
 834 0008 8281     		strh	r2, [r0, #12]	@ movhi	@ D.6154, USARTx_1(D)->CR1
ARM GAS  /tmp/ccyhuBN5.s 			page 30


 835 000a 7047     		bx	lr	@
 836              		.cfi_endproc
 837              	.LFE126:
 838              		.size	USART_SendBreak, .-USART_SendBreak
 839              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 840              		.align	1
 841              		.global	USART_HalfDuplexCmd
 842              		.thumb
 843              		.thumb_func
 844              		.type	USART_HalfDuplexCmd, %function
 845              	USART_HalfDuplexCmd:
 846              	.LFB127:
 790:stm32f4xx_usart.c **** }
 791:stm32f4xx_usart.c **** 
 792:stm32f4xx_usart.c **** /**
 793:stm32f4xx_usart.c ****   * @}
 794:stm32f4xx_usart.c ****   */
 795:stm32f4xx_usart.c **** 
 796:stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:stm32f4xx_usart.c ****  *
 799:stm32f4xx_usart.c **** @verbatim   
 800:stm32f4xx_usart.c ****  ===============================================================================
 801:stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:stm32f4xx_usart.c ****  ===============================================================================  
 803:stm32f4xx_usart.c ****     [..]
 804:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:stm32f4xx_usart.c ****     Half-duplex communication.
 806:stm32f4xx_usart.c ****     [..]
 807:stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:stm32f4xx_usart.c ****     [..]
 810:stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:stm32f4xx_usart.c ****           function.
 814:stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:stm32f4xx_usart.c **** 
 818:stm32f4xx_usart.c **** 
 819:stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:stm32f4xx_usart.c **** 
 824:stm32f4xx_usart.c **** @endverbatim
 825:stm32f4xx_usart.c ****   * @{
 826:stm32f4xx_usart.c ****   */
 827:stm32f4xx_usart.c **** 
 828:stm32f4xx_usart.c **** /**
 829:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 831:stm32f4xx_usart.c ****   *         UART peripheral.
 832:stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:stm32f4xx_usart.c ****   * @retval None
ARM GAS  /tmp/ccyhuBN5.s 			page 31


 835:stm32f4xx_usart.c ****   */
 836:stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:stm32f4xx_usart.c **** {
 847              		.loc 1 837 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852              	.LVL80:
 838:stm32f4xx_usart.c ****   /* Check the parameters */
 839:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 840:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 841:stm32f4xx_usart.c ****   
 842:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 843:stm32f4xx_usart.c ****   {
 844:stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 853              		.loc 1 845 0
 854 0000 838A     		ldrh	r3, [r0, #20]	@,
 842:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 855              		.loc 1 842 0
 856 0002 19B1     		cbz	r1, .L56	@ NewState,
 857              		.loc 1 845 0
 858 0004 99B2     		uxth	r1, r3	@ D.6148, USARTx_2(D)->CR3
 859              	.LVL81:
 860 0006 41F00803 		orr	r3, r1, #8	@ D.6149, D.6148,
 861 000a 03E0     		b	.L58	@
 862              	.LVL82:
 863              	.L56:
 846:stm32f4xx_usart.c ****   }
 847:stm32f4xx_usart.c ****   else
 848:stm32f4xx_usart.c ****   {
 849:stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 864              		.loc 1 850 0
 865 000c 23F00801 		bic	r1, r3, #8	@ D.6152, USARTx_2(D)->CR3,
 866              	.LVL83:
 867 0010 0A04     		lsls	r2, r1, #16	@ D.6152, D.6152,
 868 0012 130C     		lsrs	r3, r2, #16	@ D.6152, D.6152,
 869              	.L58:
 870 0014 8382     		strh	r3, [r0, #20]	@ movhi	@ D.6152,
 871 0016 7047     		bx	lr	@
 872              		.cfi_endproc
 873              	.LFE127:
 874              		.size	USART_HalfDuplexCmd, .-USART_HalfDuplexCmd
 875              		.section	.text.USART_SetGuardTime,"ax",%progbits
 876              		.align	1
 877              		.global	USART_SetGuardTime
 878              		.thumb
 879              		.thumb_func
 880              		.type	USART_SetGuardTime, %function
 881              	USART_SetGuardTime:
 882              	.LFB128:
 851:stm32f4xx_usart.c ****   }
 852:stm32f4xx_usart.c **** }
 853:stm32f4xx_usart.c **** 
 854:stm32f4xx_usart.c **** /**
ARM GAS  /tmp/ccyhuBN5.s 			page 32


 855:stm32f4xx_usart.c ****   * @}
 856:stm32f4xx_usart.c ****   */
 857:stm32f4xx_usart.c **** 
 858:stm32f4xx_usart.c **** 
 859:stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:stm32f4xx_usart.c ****  *
 862:stm32f4xx_usart.c **** @verbatim   
 863:stm32f4xx_usart.c ****  ===============================================================================
 864:stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:stm32f4xx_usart.c ****  ===============================================================================  
 866:stm32f4xx_usart.c ****     [..]
 867:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:stm32f4xx_usart.c ****     Smartcard communication.
 869:stm32f4xx_usart.c ****     [..]
 870:stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:stm32f4xx_usart.c ****     [..]
 873:stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:stm32f4xx_usart.c ****     [..]
 877:stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:stm32f4xx_usart.c ****         (++) Even parity
 889:stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:stm32f4xx_usart.c ****           function
 894:stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:stm32f4xx_usart.c **** 
 898:stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:stm32f4xx_usart.c **** 
 900:stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:stm32f4xx_usart.c ****           between the two configurations.
 903:stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:stm32f4xx_usart.c ****           and UART5 peripherals).
 908:stm32f4xx_usart.c **** 
 909:stm32f4xx_usart.c **** @endverbatim
 910:stm32f4xx_usart.c ****   * @{
 911:stm32f4xx_usart.c ****   */
ARM GAS  /tmp/ccyhuBN5.s 			page 33


 912:stm32f4xx_usart.c **** 
 913:stm32f4xx_usart.c **** /**
 914:stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:stm32f4xx_usart.c ****   *         UART peripheral.
 917:stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:stm32f4xx_usart.c ****   * @retval None
 919:stm32f4xx_usart.c ****   */
 920:stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:stm32f4xx_usart.c **** {    
 883              		.loc 1 921 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888              	.LVL84:
 922:stm32f4xx_usart.c ****   /* Check the parameters */
 923:stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:stm32f4xx_usart.c ****   
 925:stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 889              		.loc 1 926 0
 890 0000 038B     		ldrh	r3, [r0, #24]	@, USARTx_1(D)->GTPR
 891 0002 DAB2     		uxtb	r2, r3	@ D.6141, USARTx_1(D)->GTPR
 892 0004 0283     		strh	r2, [r0, #24]	@ movhi	@ D.6141, USARTx_1(D)->GTPR
 927:stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 893              		.loc 1 928 0
 894 0006 038B     		ldrh	r3, [r0, #24]	@, USARTx_1(D)->GTPR
 895 0008 9AB2     		uxth	r2, r3	@ D.6142, USARTx_1(D)->GTPR
 896 000a 42EA0121 		orr	r1, r2, r1, lsl #8	@, D.6145, D.6142, USART_GuardTime,
 897              	.LVL85:
 898 000e 0183     		strh	r1, [r0, #24]	@ movhi	@ D.6145, USARTx_1(D)->GTPR
 899 0010 7047     		bx	lr	@
 900              		.cfi_endproc
 901              	.LFE128:
 902              		.size	USART_SetGuardTime, .-USART_SetGuardTime
 903              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 904              		.align	1
 905              		.global	USART_SmartCardCmd
 906              		.thumb
 907              		.thumb_func
 908              		.type	USART_SmartCardCmd, %function
 909              	USART_SmartCardCmd:
 910              	.LFB129:
 929:stm32f4xx_usart.c **** }
 930:stm32f4xx_usart.c **** 
 931:stm32f4xx_usart.c **** /**
 932:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:stm32f4xx_usart.c ****   *         UART peripheral.
 935:stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:stm32f4xx_usart.c ****   * @retval None
 938:stm32f4xx_usart.c ****   */
 939:stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 940:stm32f4xx_usart.c **** {
ARM GAS  /tmp/ccyhuBN5.s 			page 34


 911              		.loc 1 940 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              		@ link register save eliminated.
 916              	.LVL86:
 941:stm32f4xx_usart.c ****   /* Check the parameters */
 942:stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 943:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 944:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 945:stm32f4xx_usart.c ****   {
 946:stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 917              		.loc 1 947 0
 918 0000 838A     		ldrh	r3, [r0, #20]	@,
 944:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 919              		.loc 1 944 0
 920 0002 19B1     		cbz	r1, .L61	@ NewState,
 921              		.loc 1 947 0
 922 0004 99B2     		uxth	r1, r3	@ D.6135, USARTx_2(D)->CR3
 923              	.LVL87:
 924 0006 41F02003 		orr	r3, r1, #32	@ D.6136, D.6135,
 925 000a 03E0     		b	.L63	@
 926              	.LVL88:
 927              	.L61:
 948:stm32f4xx_usart.c ****   }
 949:stm32f4xx_usart.c ****   else
 950:stm32f4xx_usart.c ****   {
 951:stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 928              		.loc 1 952 0
 929 000c 23F02001 		bic	r1, r3, #32	@ D.6139, USARTx_2(D)->CR3,
 930              	.LVL89:
 931 0010 0A04     		lsls	r2, r1, #16	@ D.6139, D.6139,
 932 0012 130C     		lsrs	r3, r2, #16	@ D.6139, D.6139,
 933              	.L63:
 934 0014 8382     		strh	r3, [r0, #20]	@ movhi	@ D.6139,
 935 0016 7047     		bx	lr	@
 936              		.cfi_endproc
 937              	.LFE129:
 938              		.size	USART_SmartCardCmd, .-USART_SmartCardCmd
 939              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 940              		.align	1
 941              		.global	USART_SmartCardNACKCmd
 942              		.thumb
 943              		.thumb_func
 944              		.type	USART_SmartCardNACKCmd, %function
 945              	USART_SmartCardNACKCmd:
 946              	.LFB130:
 953:stm32f4xx_usart.c ****   }
 954:stm32f4xx_usart.c **** }
 955:stm32f4xx_usart.c **** 
 956:stm32f4xx_usart.c **** /**
 957:stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:stm32f4xx_usart.c ****   *         UART peripheral.
 960:stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
ARM GAS  /tmp/ccyhuBN5.s 			page 35


 961:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:stm32f4xx_usart.c ****   * @retval None
 963:stm32f4xx_usart.c ****   */
 964:stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:stm32f4xx_usart.c **** {
 947              		.loc 1 965 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              		@ link register save eliminated.
 952              	.LVL90:
 966:stm32f4xx_usart.c ****   /* Check the parameters */
 967:stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 968:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 969:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 970:stm32f4xx_usart.c ****   {
 971:stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 953              		.loc 1 972 0
 954 0000 838A     		ldrh	r3, [r0, #20]	@,
 969:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 955              		.loc 1 969 0
 956 0002 19B1     		cbz	r1, .L65	@ NewState,
 957              		.loc 1 972 0
 958 0004 99B2     		uxth	r1, r3	@ D.6128, USARTx_2(D)->CR3
 959              	.LVL91:
 960 0006 41F01003 		orr	r3, r1, #16	@ D.6129, D.6128,
 961 000a 03E0     		b	.L67	@
 962              	.LVL92:
 963              	.L65:
 973:stm32f4xx_usart.c ****   }
 974:stm32f4xx_usart.c ****   else
 975:stm32f4xx_usart.c ****   {
 976:stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 964              		.loc 1 977 0
 965 000c 23F01001 		bic	r1, r3, #16	@ D.6132, USARTx_2(D)->CR3,
 966              	.LVL93:
 967 0010 0A04     		lsls	r2, r1, #16	@ D.6132, D.6132,
 968 0012 130C     		lsrs	r3, r2, #16	@ D.6132, D.6132,
 969              	.L67:
 970 0014 8382     		strh	r3, [r0, #20]	@ movhi	@ D.6132,
 971 0016 7047     		bx	lr	@
 972              		.cfi_endproc
 973              	.LFE130:
 974              		.size	USART_SmartCardNACKCmd, .-USART_SmartCardNACKCmd
 975              		.section	.text.USART_IrDAConfig,"ax",%progbits
 976              		.align	1
 977              		.global	USART_IrDAConfig
 978              		.thumb
 979              		.thumb_func
 980              		.type	USART_IrDAConfig, %function
 981              	USART_IrDAConfig:
 982              	.LFB131:
 978:stm32f4xx_usart.c ****   }
 979:stm32f4xx_usart.c **** }
 980:stm32f4xx_usart.c **** 
ARM GAS  /tmp/ccyhuBN5.s 			page 36


 981:stm32f4xx_usart.c **** /**
 982:stm32f4xx_usart.c ****   * @}
 983:stm32f4xx_usart.c ****   */
 984:stm32f4xx_usart.c **** 
 985:stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 986:stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:stm32f4xx_usart.c ****  *
 988:stm32f4xx_usart.c **** @verbatim   
 989:stm32f4xx_usart.c ****  ===============================================================================
 990:stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:stm32f4xx_usart.c ****  ===============================================================================  
 992:stm32f4xx_usart.c ****     [..]
 993:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:stm32f4xx_usart.c ****     IrDA communication.
 995:stm32f4xx_usart.c ****     [..]
 996:stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:stm32f4xx_usart.c ****     could be corrupted.
1001:stm32f4xx_usart.c ****     [..]
1002:stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:stm32f4xx_usart.c **** 
1012:stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:stm32f4xx_usart.c ****           not be rejected.
1014:stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1019:stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:stm32f4xx_usart.c **** 
1021:stm32f4xx_usart.c **** @endverbatim
1022:stm32f4xx_usart.c ****   * @{
1023:stm32f4xx_usart.c ****   */
1024:stm32f4xx_usart.c **** 
1025:stm32f4xx_usart.c **** /**
1026:stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:stm32f4xx_usart.c ****   *         UART peripheral.
1029:stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:stm32f4xx_usart.c ****   * @retval None
1034:stm32f4xx_usart.c ****   */
1035:stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:stm32f4xx_usart.c **** {
 983              		.loc 1 1036 0
ARM GAS  /tmp/ccyhuBN5.s 			page 37


 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988              	.LVL94:
1037:stm32f4xx_usart.c ****   /* Check the parameters */
1038:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1039:stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1040:stm32f4xx_usart.c ****     
1041:stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 989              		.loc 1 1041 0
 990 0000 838A     		ldrh	r3, [r0, #20]	@, USARTx_1(D)->CR3
 991 0002 23F00402 		bic	r2, r3, #4	@ D.6123, USARTx_1(D)->CR3,
 992 0006 1304     		lsls	r3, r2, #16	@ D.6123, D.6123,
 993 0008 1A0C     		lsrs	r2, r3, #16	@ D.6123, D.6123,
 994 000a 8282     		strh	r2, [r0, #20]	@ movhi	@ D.6123, USARTx_1(D)->CR3
1042:stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 995              		.loc 1 1042 0
 996 000c 838A     		ldrh	r3, [r0, #20]	@, USARTx_1(D)->CR3
 997 000e 9AB2     		uxth	r2, r3	@ D.6124, USARTx_1(D)->CR3
 998 0010 1143     		orrs	r1, r1, r2	@, D.6125, USART_IrDAMode, D.6124
 999              	.LVL95:
 1000 0012 8182     		strh	r1, [r0, #20]	@ movhi	@ D.6125, USARTx_1(D)->CR3
 1001 0014 7047     		bx	lr	@
 1002              		.cfi_endproc
 1003              	.LFE131:
 1004              		.size	USART_IrDAConfig, .-USART_IrDAConfig
 1005              		.section	.text.USART_IrDACmd,"ax",%progbits
 1006              		.align	1
 1007              		.global	USART_IrDACmd
 1008              		.thumb
 1009              		.thumb_func
 1010              		.type	USART_IrDACmd, %function
 1011              	USART_IrDACmd:
 1012              	.LFB132:
1043:stm32f4xx_usart.c **** }
1044:stm32f4xx_usart.c **** 
1045:stm32f4xx_usart.c **** /**
1046:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:stm32f4xx_usart.c ****   *         UART peripheral.
1049:stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:stm32f4xx_usart.c ****   * @retval None
1052:stm32f4xx_usart.c ****   */
1053:stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:stm32f4xx_usart.c **** {
 1013              		.loc 1 1054 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018              	.LVL96:
1055:stm32f4xx_usart.c ****   /* Check the parameters */
1056:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1057:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1058:stm32f4xx_usart.c ****     
ARM GAS  /tmp/ccyhuBN5.s 			page 38


1059:stm32f4xx_usart.c ****   if (NewState != DISABLE)
1060:stm32f4xx_usart.c ****   {
1061:stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1062:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1019              		.loc 1 1062 0
 1020 0000 838A     		ldrh	r3, [r0, #20]	@,
1059:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1021              		.loc 1 1059 0
 1022 0002 19B1     		cbz	r1, .L70	@ NewState,
 1023              		.loc 1 1062 0
 1024 0004 99B2     		uxth	r1, r3	@ D.6117, USARTx_2(D)->CR3
 1025              	.LVL97:
 1026 0006 41F00203 		orr	r3, r1, #2	@ D.6118, D.6117,
 1027 000a 03E0     		b	.L72	@
 1028              	.LVL98:
 1029              	.L70:
1063:stm32f4xx_usart.c ****   }
1064:stm32f4xx_usart.c ****   else
1065:stm32f4xx_usart.c ****   {
1066:stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1030              		.loc 1 1067 0
 1031 000c 23F00201 		bic	r1, r3, #2	@ D.6121, USARTx_2(D)->CR3,
 1032              	.LVL99:
 1033 0010 0A04     		lsls	r2, r1, #16	@ D.6121, D.6121,
 1034 0012 130C     		lsrs	r3, r2, #16	@ D.6121, D.6121,
 1035              	.L72:
 1036 0014 8382     		strh	r3, [r0, #20]	@ movhi	@ D.6121,
 1037 0016 7047     		bx	lr	@
 1038              		.cfi_endproc
 1039              	.LFE132:
 1040              		.size	USART_IrDACmd, .-USART_IrDACmd
 1041              		.section	.text.USART_DMACmd,"ax",%progbits
 1042              		.align	1
 1043              		.global	USART_DMACmd
 1044              		.thumb
 1045              		.thumb_func
 1046              		.type	USART_DMACmd, %function
 1047              	USART_DMACmd:
 1048              	.LFB133:
1068:stm32f4xx_usart.c ****   }
1069:stm32f4xx_usart.c **** }
1070:stm32f4xx_usart.c **** 
1071:stm32f4xx_usart.c **** /**
1072:stm32f4xx_usart.c ****   * @}
1073:stm32f4xx_usart.c ****   */
1074:stm32f4xx_usart.c **** 
1075:stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:stm32f4xx_usart.c ****  *
1078:stm32f4xx_usart.c **** @verbatim   
1079:stm32f4xx_usart.c ****  ===============================================================================
1080:stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:stm32f4xx_usart.c ****  ===============================================================================  
1082:stm32f4xx_usart.c **** 
1083:stm32f4xx_usart.c **** @endverbatim
1084:stm32f4xx_usart.c ****   * @{
ARM GAS  /tmp/ccyhuBN5.s 			page 39


1085:stm32f4xx_usart.c ****   */
1086:stm32f4xx_usart.c ****   
1087:stm32f4xx_usart.c **** /**
1088:stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1089:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:stm32f4xx_usart.c ****   *         UART peripheral.
1091:stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1093:stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:stm32f4xx_usart.c ****   * @retval None
1098:stm32f4xx_usart.c ****   */
1099:stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:stm32f4xx_usart.c **** {
 1049              		.loc 1 1100 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              		@ link register save eliminated.
 1054              	.LVL100:
1101:stm32f4xx_usart.c ****   /* Check the parameters */
1102:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1103:stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1104:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1105:stm32f4xx_usart.c **** 
1106:stm32f4xx_usart.c ****   if (NewState != DISABLE)
1107:stm32f4xx_usart.c ****   {
1108:stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1055              		.loc 1 1110 0
 1056 0000 838A     		ldrh	r3, [r0, #20]	@,
 1057 0002 9BB2     		uxth	r3, r3	@ D.6109, USARTx_2(D)->CR3
1106:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1058              		.loc 1 1106 0
 1059 0004 0AB1     		cbz	r2, .L74	@ NewState,
 1060              		.loc 1 1110 0
 1061 0006 1943     		orrs	r1, r1, r3	@, D.6110, USART_DMAReq, D.6109
 1062              	.LVL101:
 1063 0008 01E0     		b	.L76	@
 1064              	.LVL102:
 1065              	.L74:
1111:stm32f4xx_usart.c ****   }
1112:stm32f4xx_usart.c ****   else
1113:stm32f4xx_usart.c ****   {
1114:stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1066              		.loc 1 1116 0
 1067 000a 23EA0101 		bic	r1, r3, r1	@ D.6114, D.6112, USART_DMAReq
 1068              	.LVL103:
 1069              	.L76:
 1070 000e 8182     		strh	r1, [r0, #20]	@ movhi	@ D.6114,
 1071 0010 7047     		bx	lr	@
 1072              		.cfi_endproc
ARM GAS  /tmp/ccyhuBN5.s 			page 40


 1073              	.LFE133:
 1074              		.size	USART_DMACmd, .-USART_DMACmd
 1075              		.section	.text.USART_ITConfig,"ax",%progbits
 1076              		.align	1
 1077              		.global	USART_ITConfig
 1078              		.thumb
 1079              		.thumb_func
 1080              		.type	USART_ITConfig, %function
 1081              	USART_ITConfig:
 1082              	.LFB134:
1117:stm32f4xx_usart.c ****   }
1118:stm32f4xx_usart.c **** }
1119:stm32f4xx_usart.c **** 
1120:stm32f4xx_usart.c **** /**
1121:stm32f4xx_usart.c ****   * @}
1122:stm32f4xx_usart.c ****   */
1123:stm32f4xx_usart.c ****   
1124:stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:stm32f4xx_usart.c ****  *
1127:stm32f4xx_usart.c **** @verbatim   
1128:stm32f4xx_usart.c ****  ===============================================================================
1129:stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:stm32f4xx_usart.c ****  ===============================================================================  
1131:stm32f4xx_usart.c ****     [..]
1132:stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:stm32f4xx_usart.c ****     pending bits status.
1135:stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:stm32f4xx_usart.c ****     
1138:stm32f4xx_usart.c ****     *** Polling Mode ***
1139:stm32f4xx_usart.c ****     ====================
1140:stm32f4xx_usart.c ****     [..]
1141:stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:stm32f4xx_usart.c ****     [..]
1153:stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:stm32f4xx_usart.c **** 
1157:stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:stm32f4xx_usart.c ****     ======================
1159:stm32f4xx_usart.c ****     [..]
1160:stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:stm32f4xx_usart.c ****     and 10 pending bits: 
1162:stm32f4xx_usart.c **** 
1163:stm32f4xx_usart.c ****       (#) Pending Bits:
ARM GAS  /tmp/ccyhuBN5.s 			page 41


1164:stm32f4xx_usart.c **** 
1165:stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1172:stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:stm32f4xx_usart.c **** 
1176:stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:stm32f4xx_usart.c **** 
1178:stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:stm32f4xx_usart.c ****                             interrupt. 
1180:stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:stm32f4xx_usart.c ****                              empty interrupt.
1182:stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:stm32f4xx_usart.c ****                            interrupt. 
1184:stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:stm32f4xx_usart.c ****                             interrupt. 
1188:stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:stm32f4xx_usart.c **** 
1191:stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:stm32f4xx_usart.c ****           or as pending bits.
1193:stm32f4xx_usart.c ****     [..]
1194:stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:stm32f4xx_usart.c **** 
1199:stm32f4xx_usart.c ****     *** DMA Mode ***
1200:stm32f4xx_usart.c ****     ================
1201:stm32f4xx_usart.c ****     [..]
1202:stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:stm32f4xx_usart.c ****     [..]
1206:stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:stm32f4xx_usart.c **** 
1209:stm32f4xx_usart.c **** @endverbatim
1210:stm32f4xx_usart.c ****   * @{
1211:stm32f4xx_usart.c ****   */
1212:stm32f4xx_usart.c **** 
1213:stm32f4xx_usart.c **** /**
1214:stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:stm32f4xx_usart.c ****   *         UART peripheral.
1217:stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
ARM GAS  /tmp/ccyhuBN5.s 			page 42


1221:stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1229:stm32f4xx_usart.c ****   * @retval None
1230:stm32f4xx_usart.c ****   */
1231:stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:stm32f4xx_usart.c **** {
 1083              		.loc 1 1232 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              	.LVL104:
1233:stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1234:stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1235:stm32f4xx_usart.c ****   /* Check the parameters */
1236:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1237:stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1238:stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1239:stm32f4xx_usart.c **** 
1240:stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1242:stm32f4xx_usart.c ****   {
1243:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1244:stm32f4xx_usart.c ****   } 
1245:stm32f4xx_usart.c ****     
1246:stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1247:stm32f4xx_usart.c **** 
1248:stm32f4xx_usart.c ****   /* Get the USART register index */
1249:stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1088              		.loc 1 1249 0
 1089 0000 C1F34213 		ubfx	r3, r1, #5, #3	@ usartreg, USART_IT,,
 1090              	.LVL105:
1232:stm32f4xx_usart.c **** {
 1091              		.loc 1 1232 0
 1092 0004 10B5     		push	{r4, lr}	@
 1093              	.LCFI4:
 1094              		.cfi_def_cfa_offset 8
 1095              		.cfi_offset 4, -8
 1096              		.cfi_offset 14, -4
1250:stm32f4xx_usart.c **** 
1251:stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
1253:stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1097              		.loc 1 1253 0
 1098 0006 0124     		movs	r4, #1	@ tmp156,
 1099 0008 01F01F01 		and	r1, r1, #31	@ tmp155, USART_IT,
 1100              	.LVL106:
1254:stm32f4xx_usart.c ****     
1255:stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1101              		.loc 1 1255 0
 1102 000c A342     		cmp	r3, r4	@ usartreg,
1253:stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
ARM GAS  /tmp/ccyhuBN5.s 			page 43


 1103              		.loc 1 1253 0
 1104 000e 04FA01F1 		lsl	r1, r4, r1	@ itmask, tmp156, tmp155
 1105              	.LVL107:
 1106              		.loc 1 1255 0
 1107 0012 01D1     		bne	.L78	@,
1256:stm32f4xx_usart.c ****   {
1257:stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1108              		.loc 1 1257 0
 1109 0014 0C30     		adds	r0, r0, #12	@ usartxbase, USARTx,
 1110              	.LVL108:
 1111 0016 04E0     		b	.L79	@
 1112              	.LVL109:
 1113              	.L78:
1258:stm32f4xx_usart.c ****   }
1259:stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1114              		.loc 1 1259 0
 1115 0018 022B     		cmp	r3, #2	@ usartreg,
 1116 001a 01D1     		bne	.L80	@,
1260:stm32f4xx_usart.c ****   {
1261:stm32f4xx_usart.c ****     usartxbase += 0x10;
 1117              		.loc 1 1261 0
 1118 001c 1030     		adds	r0, r0, #16	@ usartxbase, USARTx,
 1119              	.LVL110:
 1120 001e 00E0     		b	.L79	@
 1121              	.LVL111:
 1122              	.L80:
1262:stm32f4xx_usart.c ****   }
1263:stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1264:stm32f4xx_usart.c ****   {
1265:stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1123              		.loc 1 1265 0
 1124 0020 1430     		adds	r0, r0, #20	@ usartxbase, USARTx,
 1125              	.LVL112:
 1126              	.L79:
1266:stm32f4xx_usart.c ****   }
1267:stm32f4xx_usart.c ****   if (NewState != DISABLE)
1268:stm32f4xx_usart.c ****   {
1269:stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1127              		.loc 1 1269 0
 1128 0022 0368     		ldr	r3, [r0, #0]	@ D.6101,* usartxbase
 1129              	.LVL113:
1267:stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1130              		.loc 1 1267 0
 1131 0024 12B1     		cbz	r2, .L81	@ NewState,
 1132              		.loc 1 1269 0
 1133 0026 43EA0102 		orr	r2, r3, r1	@ D.6102, D.6101, itmask
 1134              	.LVL114:
 1135 002a 01E0     		b	.L83	@
 1136              	.LVL115:
 1137              	.L81:
1270:stm32f4xx_usart.c ****   }
1271:stm32f4xx_usart.c ****   else
1272:stm32f4xx_usart.c ****   {
1273:stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1138              		.loc 1 1273 0
 1139 002c 23EA0102 		bic	r2, r3, r1	@ D.6106, D.6104, itmask
 1140              	.LVL116:
ARM GAS  /tmp/ccyhuBN5.s 			page 44


 1141              	.L83:
 1142 0030 0260     		str	r2, [r0, #0]	@ D.6106,* usartxbase
 1143 0032 10BD     		pop	{r4, pc}	@
 1144              		.cfi_endproc
 1145              	.LFE134:
 1146              		.size	USART_ITConfig, .-USART_ITConfig
 1147              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1148              		.align	1
 1149              		.global	USART_GetFlagStatus
 1150              		.thumb
 1151              		.thumb_func
 1152              		.type	USART_GetFlagStatus, %function
 1153              	USART_GetFlagStatus:
 1154              	.LFB135:
1274:stm32f4xx_usart.c ****   }
1275:stm32f4xx_usart.c **** }
1276:stm32f4xx_usart.c **** 
1277:stm32f4xx_usart.c **** /**
1278:stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:stm32f4xx_usart.c ****   *         UART peripheral.
1281:stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1291:stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:stm32f4xx_usart.c ****   */
1295:stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:stm32f4xx_usart.c **** {
 1155              		.loc 1 1296 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              		@ link register save eliminated.
 1160              	.LVL117:
1297:stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1298:stm32f4xx_usart.c ****   /* Check the parameters */
1299:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1300:stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1301:stm32f4xx_usart.c **** 
1302:stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1304:stm32f4xx_usart.c ****   {
1305:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1306:stm32f4xx_usart.c ****   } 
1307:stm32f4xx_usart.c ****     
1308:stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1161              		.loc 1 1308 0
 1162 0000 0388     		ldrh	r3, [r0, #0]	@, USARTx_3(D)->SR
ARM GAS  /tmp/ccyhuBN5.s 			page 45


 1163              	.LVL118:
 1164 0002 1942     		tst	r1, r3	@ USART_FLAG, USARTx_3(D)->SR
1309:stm32f4xx_usart.c ****   {
1310:stm32f4xx_usart.c ****     bitstatus = SET;
1311:stm32f4xx_usart.c ****   }
1312:stm32f4xx_usart.c ****   else
1313:stm32f4xx_usart.c ****   {
1314:stm32f4xx_usart.c ****     bitstatus = RESET;
1315:stm32f4xx_usart.c ****   }
1316:stm32f4xx_usart.c ****   return bitstatus;
1317:stm32f4xx_usart.c **** }
 1165              		.loc 1 1317 0
 1166 0004 0CBF     		ite	eq	@
 1167 0006 0020     		moveq	r0, #0	@,
 1168 0008 0120     		movne	r0, #1	@,
 1169              	.LVL119:
 1170 000a 7047     		bx	lr	@
 1171              		.cfi_endproc
 1172              	.LFE135:
 1173              		.size	USART_GetFlagStatus, .-USART_GetFlagStatus
 1174              		.section	.text.USART_ClearFlag,"ax",%progbits
 1175              		.align	1
 1176              		.global	USART_ClearFlag
 1177              		.thumb
 1178              		.thumb_func
 1179              		.type	USART_ClearFlag, %function
 1180              	USART_ClearFlag:
 1181              	.LFB136:
1318:stm32f4xx_usart.c **** 
1319:stm32f4xx_usart.c **** /**
1320:stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:stm32f4xx_usart.c ****   *         UART peripheral.
1323:stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:stm32f4xx_usart.c ****   *   
1330:stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1333:stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:stm32f4xx_usart.c ****   *          (USART_SendData()).
1341:stm32f4xx_usart.c ****   *   
1342:stm32f4xx_usart.c ****   * @retval None
1343:stm32f4xx_usart.c ****   */
1344:stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:stm32f4xx_usart.c **** {
 1182              		.loc 1 1345 0
ARM GAS  /tmp/ccyhuBN5.s 			page 46


 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187              	.LVL120:
1346:stm32f4xx_usart.c ****   /* Check the parameters */
1347:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1348:stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1349:stm32f4xx_usart.c **** 
1350:stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1352:stm32f4xx_usart.c ****   {
1353:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1354:stm32f4xx_usart.c ****   } 
1355:stm32f4xx_usart.c ****        
1356:stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1188              		.loc 1 1356 0
 1189 0000 C943     		mvns	r1, r1	@ tmp137, USART_FLAG
 1190              	.LVL121:
 1191 0002 8AB2     		uxth	r2, r1	@ D.6076, tmp137
 1192 0004 0280     		strh	r2, [r0, #0]	@ movhi	@ D.6076, USARTx_5(D)->SR
 1193 0006 7047     		bx	lr	@
 1194              		.cfi_endproc
 1195              	.LFE136:
 1196              		.size	USART_ClearFlag, .-USART_ClearFlag
 1197              		.section	.text.USART_GetITStatus,"ax",%progbits
 1198              		.align	1
 1199              		.global	USART_GetITStatus
 1200              		.thumb
 1201              		.thumb_func
 1202              		.type	USART_GetITStatus, %function
 1203              	USART_GetITStatus:
 1204              	.LFB137:
1357:stm32f4xx_usart.c **** }
1358:stm32f4xx_usart.c **** 
1359:stm32f4xx_usart.c **** /**
1360:stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:stm32f4xx_usart.c ****   *         UART peripheral.
1363:stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1374:stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:stm32f4xx_usart.c ****   */
1378:stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:stm32f4xx_usart.c **** {
 1205              		.loc 1 1379 0
ARM GAS  /tmp/ccyhuBN5.s 			page 47


 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 0
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              	.LVL122:
 1210 0000 10B5     		push	{r4, lr}	@
 1211              	.LCFI5:
 1212              		.cfi_def_cfa_offset 8
 1213              		.cfi_offset 4, -8
 1214              		.cfi_offset 14, -4
1380:stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1381:stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1382:stm32f4xx_usart.c ****   /* Check the parameters */
1383:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1384:stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1385:stm32f4xx_usart.c **** 
1386:stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1388:stm32f4xx_usart.c ****   {
1389:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1390:stm32f4xx_usart.c ****   } 
1391:stm32f4xx_usart.c ****     
1392:stm32f4xx_usart.c ****   /* Get the USART register index */
1393:stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1215              		.loc 1 1393 0
 1216 0002 C1F34214 		ubfx	r4, r1, #5, #3	@ usartreg, USART_IT,,
 1217              	.LVL123:
1394:stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
1396:stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1218              		.loc 1 1396 0
 1219 0006 0122     		movs	r2, #1	@ tmp162,
 1220 0008 01F01F03 		and	r3, r1, #31	@ tmp161, USART_IT,
1397:stm32f4xx_usart.c ****   
1398:stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1221              		.loc 1 1398 0
 1222 000c 012C     		cmp	r4, #1	@ usartreg,
1396:stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1223              		.loc 1 1396 0
 1224 000e 02FA03F2 		lsl	r2, r2, r3	@ itmask, tmp162, tmp161
 1225              	.LVL124:
 1226              		.loc 1 1398 0
 1227 0012 01D1     		bne	.L87	@,
1399:stm32f4xx_usart.c ****   {
1400:stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1228              		.loc 1 1400 0
 1229 0014 8389     		ldrh	r3, [r0, #12]	@, USARTx_15(D)->CR1
 1230 0016 03E0     		b	.L92	@
 1231              	.L87:
1401:stm32f4xx_usart.c ****   }
1402:stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1232              		.loc 1 1402 0
 1233 0018 022C     		cmp	r4, #2	@ usartreg,
1403:stm32f4xx_usart.c ****   {
1404:stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1234              		.loc 1 1404 0
 1235 001a 0CBF     		ite	eq
 1236 001c 038A     		ldrheq	r3, [r0, #16]	@, USARTx_15(D)->CR2
ARM GAS  /tmp/ccyhuBN5.s 			page 48


1405:stm32f4xx_usart.c ****   }
1406:stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:stm32f4xx_usart.c ****   {
1408:stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1237              		.loc 1 1408 0
 1238 001e 838A     		ldrhne	r3, [r0, #20]	@, USARTx_15(D)->CR3
 1239              	.L92:
 1240 0020 9BB2     		uxth	r3, r3	@ D.6060, USARTx_15(D)->CR3
1409:stm32f4xx_usart.c ****   }
1410:stm32f4xx_usart.c ****   
1411:stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1412:stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
1413:stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1241              		.loc 1 1413 0
 1242 0022 0088     		ldrh	r0, [r0, #0]	@, USARTx_15(D)->SR
 1243              	.LVL125:
1408:stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1244              		.loc 1 1408 0
 1245 0024 1340     		ands	r3, r3, r2	@, itmask, D.6060, itmask
 1246              	.LVL126:
 1247              		.loc 1 1413 0
 1248 0026 82B2     		uxth	r2, r0	@ D.6064, USARTx_15(D)->SR
 1249              	.LVL127:
1414:stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1250              		.loc 1 1414 0
 1251 0028 43B1     		cbz	r3, .L91	@ itmask,
1412:stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1252              		.loc 1 1412 0 discriminator 1
 1253 002a 090A     		lsrs	r1, r1, #8	@ tmp171, USART_IT,
 1254              	.LVL128:
 1255 002c 0123     		movs	r3, #1	@ tmp172,
 1256              	.LVL129:
 1257 002e 03FA01F0 		lsl	r0, r3, r1	@ bitpos, tmp172, tmp171
 1258              		.loc 1 1414 0 discriminator 1
 1259 0032 1042     		tst	r0, r2	@ bitpos, D.6064
1415:stm32f4xx_usart.c ****   {
1416:stm32f4xx_usart.c ****     bitstatus = SET;
 1260              		.loc 1 1416 0 discriminator 1
 1261 0034 0CBF     		ite	eq	@
 1262 0036 0020     		moveq	r0, #0	@, bitstatus
 1263 0038 0120     		movne	r0, #1	@, bitstatus
 1264 003a 10BD     		pop	{r4, pc}	@
 1265              	.LVL130:
 1266              	.L91:
1417:stm32f4xx_usart.c ****   }
1418:stm32f4xx_usart.c ****   else
1419:stm32f4xx_usart.c ****   {
1420:stm32f4xx_usart.c ****     bitstatus = RESET;
 1267              		.loc 1 1420 0
 1268 003c 1846     		mov	r0, r3	@ bitstatus, itmask
 1269              	.LVL131:
1421:stm32f4xx_usart.c ****   }
1422:stm32f4xx_usart.c ****   
1423:stm32f4xx_usart.c ****   return bitstatus;  
1424:stm32f4xx_usart.c **** }
 1270              		.loc 1 1424 0
 1271 003e 10BD     		pop	{r4, pc}	@
ARM GAS  /tmp/ccyhuBN5.s 			page 49


 1272              		.cfi_endproc
 1273              	.LFE137:
 1274              		.size	USART_GetITStatus, .-USART_GetITStatus
 1275              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1276              		.align	1
 1277              		.global	USART_ClearITPendingBit
 1278              		.thumb
 1279              		.thumb_func
 1280              		.type	USART_ClearITPendingBit, %function
 1281              	USART_ClearITPendingBit:
 1282              	.LFB138:
1425:stm32f4xx_usart.c **** 
1426:stm32f4xx_usart.c **** /**
1427:stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:stm32f4xx_usart.c ****   *         UART peripheral.
1430:stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1432:stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:stm32f4xx_usart.c ****   *
1437:stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1442:stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:stm32f4xx_usart.c ****   *  
1450:stm32f4xx_usart.c ****   * @retval None
1451:stm32f4xx_usart.c ****   */
1452:stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:stm32f4xx_usart.c **** {
 1283              		.loc 1 1453 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288              	.LVL132:
1454:stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1455:stm32f4xx_usart.c ****   /* Check the parameters */
1456:stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1457:stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1458:stm32f4xx_usart.c **** 
1459:stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1461:stm32f4xx_usart.c ****   {
1462:stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1463:stm32f4xx_usart.c ****   } 
1464:stm32f4xx_usart.c ****     
ARM GAS  /tmp/ccyhuBN5.s 			page 50


1465:stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1466:stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1289              		.loc 1 1466 0
 1290 0000 090A     		lsrs	r1, r1, #8	@ tmp142, USART_IT,
 1291              	.LVL133:
 1292 0002 0123     		movs	r3, #1	@ tmp144,
 1293 0004 03FA01F3 		lsl	r3, r3, r1	@ tmp143, tmp144, tmp142
1467:stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1294              		.loc 1 1467 0
 1295 0008 DA43     		mvns	r2, r3	@ tmp146, tmp143
 1296 000a 91B2     		uxth	r1, r2	@ D.6043, tmp146
 1297 000c 0180     		strh	r1, [r0, #0]	@ movhi	@ D.6043, USARTx_9(D)->SR
 1298 000e 7047     		bx	lr	@
 1299              		.cfi_endproc
 1300              	.LFE138:
 1301              		.size	USART_ClearITPendingBit, .-USART_ClearITPendingBit
 1302              		.text
 1303              	.Letext0:
 1304              		.file 2 "/usr/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/include/stdint.h"
 1305              		.file 3 "stm32f4xx.h"
 1306              		.file 4 "stm32f4xx_rcc.h"
 1307              		.file 5 "stm32f4xx_usart.h"
 1308              		.file 6 "cmsis/core_cm4.h"
 1309              		.section	.debug_info,"",%progbits
 1310              	.Ldebug_info0:
 1311 0000 780B0000 		.4byte	0xb78
 1312 0004 0200     		.2byte	0x2
 1313 0006 00000000 		.4byte	.Ldebug_abbrev0
 1314 000a 04       		.byte	0x4
 1315 000b 01       		.uleb128 0x1
 1316 000c 4B030000 		.4byte	.LASF103
 1317 0010 01       		.byte	0x1
 1318 0011 5C060000 		.4byte	.LASF104
 1319 0015 49000000 		.4byte	.LASF105
 1320 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1321 001d 00000000 		.4byte	0
 1322 0021 00000000 		.4byte	0
 1323 0025 00000000 		.4byte	.Ldebug_line0
 1324 0029 02       		.uleb128 0x2
 1325 002a 01       		.byte	0x1
 1326 002b 06       		.byte	0x6
 1327 002c 91010000 		.4byte	.LASF0
 1328 0030 03       		.uleb128 0x3
 1329 0031 44010000 		.4byte	.LASF3
 1330 0035 02       		.byte	0x2
 1331 0036 2A       		.byte	0x2a
 1332 0037 3B000000 		.4byte	0x3b
 1333 003b 02       		.uleb128 0x2
 1334 003c 01       		.byte	0x1
 1335 003d 08       		.byte	0x8
 1336 003e D1020000 		.4byte	.LASF1
 1337 0042 02       		.uleb128 0x2
 1338 0043 02       		.byte	0x2
 1339 0044 05       		.byte	0x5
 1340 0045 31020000 		.4byte	.LASF2
 1341 0049 03       		.uleb128 0x3
 1342 004a 4C040000 		.4byte	.LASF4
ARM GAS  /tmp/ccyhuBN5.s 			page 51


 1343 004e 02       		.byte	0x2
 1344 004f 36       		.byte	0x36
 1345 0050 54000000 		.4byte	0x54
 1346 0054 02       		.uleb128 0x2
 1347 0055 02       		.byte	0x2
 1348 0056 07       		.byte	0x7
 1349 0057 89040000 		.4byte	.LASF5
 1350 005b 03       		.uleb128 0x3
 1351 005c 63040000 		.4byte	.LASF6
 1352 0060 02       		.byte	0x2
 1353 0061 4F       		.byte	0x4f
 1354 0062 66000000 		.4byte	0x66
 1355 0066 02       		.uleb128 0x2
 1356 0067 04       		.byte	0x4
 1357 0068 05       		.byte	0x5
 1358 0069 00020000 		.4byte	.LASF7
 1359 006d 03       		.uleb128 0x3
 1360 006e 22030000 		.4byte	.LASF8
 1361 0072 02       		.byte	0x2
 1362 0073 50       		.byte	0x50
 1363 0074 78000000 		.4byte	0x78
 1364 0078 02       		.uleb128 0x2
 1365 0079 04       		.byte	0x4
 1366 007a 07       		.byte	0x7
 1367 007b 94030000 		.4byte	.LASF9
 1368 007f 02       		.uleb128 0x2
 1369 0080 08       		.byte	0x8
 1370 0081 05       		.byte	0x5
 1371 0082 D2010000 		.4byte	.LASF10
 1372 0086 02       		.uleb128 0x2
 1373 0087 08       		.byte	0x8
 1374 0088 07       		.byte	0x7
 1375 0089 0B030000 		.4byte	.LASF11
 1376 008d 04       		.uleb128 0x4
 1377 008e 04       		.byte	0x4
 1378 008f 05       		.byte	0x5
 1379 0090 696E7400 		.ascii	"int\000"
 1380 0094 02       		.uleb128 0x2
 1381 0095 04       		.byte	0x4
 1382 0096 07       		.byte	0x7
 1383 0097 3E030000 		.4byte	.LASF12
 1384 009b 02       		.uleb128 0x2
 1385 009c 04       		.byte	0x4
 1386 009d 07       		.byte	0x7
 1387 009e 99000000 		.4byte	.LASF13
 1388 00a2 05       		.uleb128 0x5
 1389 00a3 49000000 		.4byte	0x49
 1390 00a7 05       		.uleb128 0x5
 1391 00a8 5B000000 		.4byte	0x5b
 1392 00ac 06       		.uleb128 0x6
 1393 00ad 01       		.byte	0x1
 1394 00ae 03       		.byte	0x3
 1395 00af 1D01     		.2byte	0x11d
 1396 00b1 C2000000 		.4byte	0xc2
 1397 00b5 07       		.uleb128 0x7
 1398 00b6 CC040000 		.4byte	.LASF14
 1399 00ba 00       		.sleb128 0
ARM GAS  /tmp/ccyhuBN5.s 			page 52


 1400 00bb 08       		.uleb128 0x8
 1401 00bc 53455400 		.ascii	"SET\000"
 1402 00c0 01       		.sleb128 1
 1403 00c1 00       		.byte	0
 1404 00c2 09       		.uleb128 0x9
 1405 00c3 E2000000 		.4byte	.LASF15
 1406 00c7 03       		.byte	0x3
 1407 00c8 1D01     		.2byte	0x11d
 1408 00ca AC000000 		.4byte	0xac
 1409 00ce 09       		.uleb128 0x9
 1410 00cf F7010000 		.4byte	.LASF16
 1411 00d3 03       		.byte	0x3
 1412 00d4 1D01     		.2byte	0x11d
 1413 00d6 AC000000 		.4byte	0xac
 1414 00da 06       		.uleb128 0x6
 1415 00db 01       		.byte	0x1
 1416 00dc 03       		.byte	0x3
 1417 00dd 1F01     		.2byte	0x11f
 1418 00df F0000000 		.4byte	0xf0
 1419 00e3 07       		.uleb128 0x7
 1420 00e4 89010000 		.4byte	.LASF17
 1421 00e8 00       		.sleb128 0
 1422 00e9 07       		.uleb128 0x7
 1423 00ea 77060000 		.4byte	.LASF18
 1424 00ee 01       		.sleb128 1
 1425 00ef 00       		.byte	0
 1426 00f0 09       		.uleb128 0x9
 1427 00f1 54050000 		.4byte	.LASF19
 1428 00f5 03       		.byte	0x3
 1429 00f6 1F01     		.2byte	0x11f
 1430 00f8 DA000000 		.4byte	0xda
 1431 00fc 0A       		.uleb128 0xa
 1432 00fd 1C       		.byte	0x1c
 1433 00fe 03       		.byte	0x3
 1434 00ff 9503     		.2byte	0x395
 1435 0101 D6010000 		.4byte	0x1d6
 1436 0105 0B       		.uleb128 0xb
 1437 0106 535200   		.ascii	"SR\000"
 1438 0109 03       		.byte	0x3
 1439 010a 9703     		.2byte	0x397
 1440 010c A2000000 		.4byte	0xa2
 1441 0110 02       		.byte	0x2
 1442 0111 23       		.byte	0x23
 1443 0112 00       		.uleb128 0
 1444 0113 0C       		.uleb128 0xc
 1445 0114 EE040000 		.4byte	.LASF20
 1446 0118 03       		.byte	0x3
 1447 0119 9803     		.2byte	0x398
 1448 011b 49000000 		.4byte	0x49
 1449 011f 02       		.byte	0x2
 1450 0120 23       		.byte	0x23
 1451 0121 02       		.uleb128 0x2
 1452 0122 0B       		.uleb128 0xb
 1453 0123 445200   		.ascii	"DR\000"
 1454 0126 03       		.byte	0x3
 1455 0127 9903     		.2byte	0x399
 1456 0129 A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccyhuBN5.s 			page 53


 1457 012d 02       		.byte	0x2
 1458 012e 23       		.byte	0x23
 1459 012f 04       		.uleb128 0x4
 1460 0130 0C       		.uleb128 0xc
 1461 0131 F8040000 		.4byte	.LASF21
 1462 0135 03       		.byte	0x3
 1463 0136 9A03     		.2byte	0x39a
 1464 0138 49000000 		.4byte	0x49
 1465 013c 02       		.byte	0x2
 1466 013d 23       		.byte	0x23
 1467 013e 06       		.uleb128 0x6
 1468 013f 0B       		.uleb128 0xb
 1469 0140 42525200 		.ascii	"BRR\000"
 1470 0144 03       		.byte	0x3
 1471 0145 9B03     		.2byte	0x39b
 1472 0147 A2000000 		.4byte	0xa2
 1473 014b 02       		.byte	0x2
 1474 014c 23       		.byte	0x23
 1475 014d 08       		.uleb128 0x8
 1476 014e 0C       		.uleb128 0xc
 1477 014f 02050000 		.4byte	.LASF22
 1478 0153 03       		.byte	0x3
 1479 0154 9C03     		.2byte	0x39c
 1480 0156 49000000 		.4byte	0x49
 1481 015a 02       		.byte	0x2
 1482 015b 23       		.byte	0x23
 1483 015c 0A       		.uleb128 0xa
 1484 015d 0B       		.uleb128 0xb
 1485 015e 43523100 		.ascii	"CR1\000"
 1486 0162 03       		.byte	0x3
 1487 0163 9D03     		.2byte	0x39d
 1488 0165 A2000000 		.4byte	0xa2
 1489 0169 02       		.byte	0x2
 1490 016a 23       		.byte	0x23
 1491 016b 0C       		.uleb128 0xc
 1492 016c 0C       		.uleb128 0xc
 1493 016d 0C050000 		.4byte	.LASF23
 1494 0171 03       		.byte	0x3
 1495 0172 9E03     		.2byte	0x39e
 1496 0174 49000000 		.4byte	0x49
 1497 0178 02       		.byte	0x2
 1498 0179 23       		.byte	0x23
 1499 017a 0E       		.uleb128 0xe
 1500 017b 0B       		.uleb128 0xb
 1501 017c 43523200 		.ascii	"CR2\000"
 1502 0180 03       		.byte	0x3
 1503 0181 9F03     		.2byte	0x39f
 1504 0183 A2000000 		.4byte	0xa2
 1505 0187 02       		.byte	0x2
 1506 0188 23       		.byte	0x23
 1507 0189 10       		.uleb128 0x10
 1508 018a 0C       		.uleb128 0xc
 1509 018b 16050000 		.4byte	.LASF24
 1510 018f 03       		.byte	0x3
 1511 0190 A003     		.2byte	0x3a0
 1512 0192 49000000 		.4byte	0x49
 1513 0196 02       		.byte	0x2
ARM GAS  /tmp/ccyhuBN5.s 			page 54


 1514 0197 23       		.byte	0x23
 1515 0198 12       		.uleb128 0x12
 1516 0199 0B       		.uleb128 0xb
 1517 019a 43523300 		.ascii	"CR3\000"
 1518 019e 03       		.byte	0x3
 1519 019f A103     		.2byte	0x3a1
 1520 01a1 A2000000 		.4byte	0xa2
 1521 01a5 02       		.byte	0x2
 1522 01a6 23       		.byte	0x23
 1523 01a7 14       		.uleb128 0x14
 1524 01a8 0C       		.uleb128 0xc
 1525 01a9 20050000 		.4byte	.LASF25
 1526 01ad 03       		.byte	0x3
 1527 01ae A203     		.2byte	0x3a2
 1528 01b0 49000000 		.4byte	0x49
 1529 01b4 02       		.byte	0x2
 1530 01b5 23       		.byte	0x23
 1531 01b6 16       		.uleb128 0x16
 1532 01b7 0C       		.uleb128 0xc
 1533 01b8 1A000000 		.4byte	.LASF26
 1534 01bc 03       		.byte	0x3
 1535 01bd A303     		.2byte	0x3a3
 1536 01bf A2000000 		.4byte	0xa2
 1537 01c3 02       		.byte	0x2
 1538 01c4 23       		.byte	0x23
 1539 01c5 18       		.uleb128 0x18
 1540 01c6 0C       		.uleb128 0xc
 1541 01c7 2A050000 		.4byte	.LASF27
 1542 01cb 03       		.byte	0x3
 1543 01cc A403     		.2byte	0x3a4
 1544 01ce 49000000 		.4byte	0x49
 1545 01d2 02       		.byte	0x2
 1546 01d3 23       		.byte	0x23
 1547 01d4 1A       		.uleb128 0x1a
 1548 01d5 00       		.byte	0
 1549 01d6 09       		.uleb128 0x9
 1550 01d7 ED000000 		.4byte	.LASF28
 1551 01db 03       		.byte	0x3
 1552 01dc A503     		.2byte	0x3a5
 1553 01de FC000000 		.4byte	0xfc
 1554 01e2 0D       		.uleb128 0xd
 1555 01e3 10       		.byte	0x10
 1556 01e4 04       		.byte	0x4
 1557 01e5 30       		.byte	0x30
 1558 01e6 23020000 		.4byte	0x223
 1559 01ea 0E       		.uleb128 0xe
 1560 01eb 25000000 		.4byte	.LASF29
 1561 01ef 04       		.byte	0x4
 1562 01f0 32       		.byte	0x32
 1563 01f1 6D000000 		.4byte	0x6d
 1564 01f5 02       		.byte	0x2
 1565 01f6 23       		.byte	0x23
 1566 01f7 00       		.uleb128 0
 1567 01f8 0E       		.uleb128 0xe
 1568 01f9 A2000000 		.4byte	.LASF30
 1569 01fd 04       		.byte	0x4
 1570 01fe 33       		.byte	0x33
ARM GAS  /tmp/ccyhuBN5.s 			page 55


 1571 01ff 6D000000 		.4byte	0x6d
 1572 0203 02       		.byte	0x2
 1573 0204 23       		.byte	0x23
 1574 0205 04       		.uleb128 0x4
 1575 0206 0E       		.uleb128 0xe
 1576 0207 7B050000 		.4byte	.LASF31
 1577 020b 04       		.byte	0x4
 1578 020c 34       		.byte	0x34
 1579 020d 6D000000 		.4byte	0x6d
 1580 0211 02       		.byte	0x2
 1581 0212 23       		.byte	0x23
 1582 0213 08       		.uleb128 0x8
 1583 0214 0E       		.uleb128 0xe
 1584 0215 D2040000 		.4byte	.LASF32
 1585 0219 04       		.byte	0x4
 1586 021a 35       		.byte	0x35
 1587 021b 6D000000 		.4byte	0x6d
 1588 021f 02       		.byte	0x2
 1589 0220 23       		.byte	0x23
 1590 0221 0C       		.uleb128 0xc
 1591 0222 00       		.byte	0
 1592 0223 03       		.uleb128 0x3
 1593 0224 EE030000 		.4byte	.LASF33
 1594 0228 04       		.byte	0x4
 1595 0229 36       		.byte	0x36
 1596 022a E2010000 		.4byte	0x1e2
 1597 022e 0D       		.uleb128 0xd
 1598 022f 10       		.byte	0x10
 1599 0230 05       		.byte	0x5
 1600 0231 36       		.byte	0x36
 1601 0232 8B020000 		.4byte	0x28b
 1602 0236 0E       		.uleb128 0xe
 1603 0237 AB010000 		.4byte	.LASF34
 1604 023b 05       		.byte	0x5
 1605 023c 38       		.byte	0x38
 1606 023d 6D000000 		.4byte	0x6d
 1607 0241 02       		.byte	0x2
 1608 0242 23       		.byte	0x23
 1609 0243 00       		.uleb128 0
 1610 0244 0E       		.uleb128 0xe
 1611 0245 62010000 		.4byte	.LASF35
 1612 0249 05       		.byte	0x5
 1613 024a 3E       		.byte	0x3e
 1614 024b 49000000 		.4byte	0x49
 1615 024f 02       		.byte	0x2
 1616 0250 23       		.byte	0x23
 1617 0251 04       		.uleb128 0x4
 1618 0252 0E       		.uleb128 0xe
 1619 0253 FB000000 		.4byte	.LASF36
 1620 0257 05       		.byte	0x5
 1621 0258 41       		.byte	0x41
 1622 0259 49000000 		.4byte	0x49
 1623 025d 02       		.byte	0x2
 1624 025e 23       		.byte	0x23
 1625 025f 06       		.uleb128 0x6
 1626 0260 0E       		.uleb128 0xe
 1627 0261 AE020000 		.4byte	.LASF37
ARM GAS  /tmp/ccyhuBN5.s 			page 56


 1628 0265 05       		.byte	0x5
 1629 0266 44       		.byte	0x44
 1630 0267 49000000 		.4byte	0x49
 1631 026b 02       		.byte	0x2
 1632 026c 23       		.byte	0x23
 1633 026d 08       		.uleb128 0x8
 1634 026e 0E       		.uleb128 0xe
 1635 026f 41040000 		.4byte	.LASF38
 1636 0273 05       		.byte	0x5
 1637 0274 4B       		.byte	0x4b
 1638 0275 49000000 		.4byte	0x49
 1639 0279 02       		.byte	0x2
 1640 027a 23       		.byte	0x23
 1641 027b 0A       		.uleb128 0xa
 1642 027c 0E       		.uleb128 0xe
 1643 027d 14040000 		.4byte	.LASF39
 1644 0281 05       		.byte	0x5
 1645 0282 4E       		.byte	0x4e
 1646 0283 49000000 		.4byte	0x49
 1647 0287 02       		.byte	0x2
 1648 0288 23       		.byte	0x23
 1649 0289 0C       		.uleb128 0xc
 1650 028a 00       		.byte	0
 1651 028b 03       		.uleb128 0x3
 1652 028c B6030000 		.4byte	.LASF40
 1653 0290 05       		.byte	0x5
 1654 0291 51       		.byte	0x51
 1655 0292 2E020000 		.4byte	0x22e
 1656 0296 0D       		.uleb128 0xd
 1657 0297 08       		.byte	0x8
 1658 0298 05       		.byte	0x5
 1659 0299 57       		.byte	0x57
 1660 029a D7020000 		.4byte	0x2d7
 1661 029e 0E       		.uleb128 0xe
 1662 029f E2040000 		.4byte	.LASF41
 1663 02a3 05       		.byte	0x5
 1664 02a4 5A       		.byte	0x5a
 1665 02a5 49000000 		.4byte	0x49
 1666 02a9 02       		.byte	0x2
 1667 02aa 23       		.byte	0x23
 1668 02ab 00       		.uleb128 0
 1669 02ac 0E       		.uleb128 0xe
 1670 02ad 2B060000 		.4byte	.LASF42
 1671 02b1 05       		.byte	0x5
 1672 02b2 5D       		.byte	0x5d
 1673 02b3 49000000 		.4byte	0x49
 1674 02b7 02       		.byte	0x2
 1675 02b8 23       		.byte	0x23
 1676 02b9 02       		.uleb128 0x2
 1677 02ba 0E       		.uleb128 0xe
 1678 02bb 0F000000 		.4byte	.LASF43
 1679 02bf 05       		.byte	0x5
 1680 02c0 60       		.byte	0x60
 1681 02c1 49000000 		.4byte	0x49
 1682 02c5 02       		.byte	0x2
 1683 02c6 23       		.byte	0x23
 1684 02c7 04       		.uleb128 0x4
ARM GAS  /tmp/ccyhuBN5.s 			page 57


 1685 02c8 0E       		.uleb128 0xe
 1686 02c9 9D010000 		.4byte	.LASF44
 1687 02cd 05       		.byte	0x5
 1688 02ce 63       		.byte	0x63
 1689 02cf 49000000 		.4byte	0x49
 1690 02d3 02       		.byte	0x2
 1691 02d4 23       		.byte	0x23
 1692 02d5 06       		.uleb128 0x6
 1693 02d6 00       		.byte	0
 1694 02d7 03       		.uleb128 0x3
 1695 02d8 14010000 		.4byte	.LASF45
 1696 02dc 05       		.byte	0x5
 1697 02dd 66       		.byte	0x66
 1698 02de 96020000 		.4byte	0x296
 1699 02e2 0F       		.uleb128 0xf
 1700 02e3 01       		.byte	0x1
 1701 02e4 7F020000 		.4byte	.LASF46
 1702 02e8 01       		.byte	0x1
 1703 02e9 BB       		.byte	0xbb
 1704 02ea 01       		.byte	0x1
 1705 02eb 00000000 		.4byte	.LFB110
 1706 02ef A8000000 		.4byte	.LFE110
 1707 02f3 00000000 		.4byte	.LLST0
 1708 02f7 01       		.byte	0x1
 1709 02f8 C9030000 		.4byte	0x3c9
 1710 02fc 10       		.uleb128 0x10
 1711 02fd 0D040000 		.4byte	.LASF48
 1712 0301 01       		.byte	0x1
 1713 0302 BB       		.byte	0xbb
 1714 0303 C9030000 		.4byte	0x3c9
 1715 0307 20000000 		.4byte	.LLST1
 1716 030b 11       		.uleb128 0x11
 1717 030c 10000000 		.4byte	.LVL2
 1718 0310 2C0B0000 		.4byte	0xb2c
 1719 0314 23030000 		.4byte	0x323
 1720 0318 12       		.uleb128 0x12
 1721 0319 01       		.byte	0x1
 1722 031a 51       		.byte	0x51
 1723 031b 01       		.byte	0x1
 1724 031c 31       		.byte	0x31
 1725 031d 12       		.uleb128 0x12
 1726 031e 01       		.byte	0x1
 1727 031f 50       		.byte	0x50
 1728 0320 01       		.byte	0x1
 1729 0321 40       		.byte	0x40
 1730 0322 00       		.byte	0
 1731 0323 11       		.uleb128 0x11
 1732 0324 24000000 		.4byte	.LVL5
 1733 0328 460B0000 		.4byte	0xb46
 1734 032c 3D030000 		.4byte	0x33d
 1735 0330 12       		.uleb128 0x12
 1736 0331 01       		.byte	0x1
 1737 0332 51       		.byte	0x51
 1738 0333 01       		.byte	0x1
 1739 0334 31       		.byte	0x31
 1740 0335 12       		.uleb128 0x12
 1741 0336 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 58


 1742 0337 50       		.byte	0x50
 1743 0338 03       		.byte	0x3
 1744 0339 40       		.byte	0x40
 1745 033a 3D       		.byte	0x3d
 1746 033b 24       		.byte	0x24
 1747 033c 00       		.byte	0
 1748 033d 11       		.uleb128 0x11
 1749 033e 3A000000 		.4byte	.LVL8
 1750 0342 460B0000 		.4byte	0xb46
 1751 0346 57030000 		.4byte	0x357
 1752 034a 12       		.uleb128 0x12
 1753 034b 01       		.byte	0x1
 1754 034c 51       		.byte	0x51
 1755 034d 01       		.byte	0x1
 1756 034e 31       		.byte	0x31
 1757 034f 12       		.uleb128 0x12
 1758 0350 01       		.byte	0x1
 1759 0351 50       		.byte	0x50
 1760 0352 03       		.byte	0x3
 1761 0353 40       		.byte	0x40
 1762 0354 3E       		.byte	0x3e
 1763 0355 24       		.byte	0x24
 1764 0356 00       		.byte	0
 1765 0357 13       		.uleb128 0x13
 1766 0358 48000000 		.4byte	.LVL9
 1767 035c 01       		.byte	0x1
 1768 035d 460B0000 		.4byte	0xb46
 1769 0361 6B030000 		.4byte	0x36b
 1770 0365 12       		.uleb128 0x12
 1771 0366 01       		.byte	0x1
 1772 0367 51       		.byte	0x51
 1773 0368 01       		.byte	0x1
 1774 0369 30       		.byte	0x30
 1775 036a 00       		.byte	0
 1776 036b 11       		.uleb128 0x11
 1777 036c 58000000 		.4byte	.LVL11
 1778 0370 460B0000 		.4byte	0xb46
 1779 0374 85030000 		.4byte	0x385
 1780 0378 12       		.uleb128 0x12
 1781 0379 01       		.byte	0x1
 1782 037a 51       		.byte	0x51
 1783 037b 01       		.byte	0x1
 1784 037c 31       		.byte	0x31
 1785 037d 12       		.uleb128 0x12
 1786 037e 01       		.byte	0x1
 1787 037f 50       		.byte	0x50
 1788 0380 03       		.byte	0x3
 1789 0381 40       		.byte	0x40
 1790 0382 3F       		.byte	0x3f
 1791 0383 24       		.byte	0x24
 1792 0384 00       		.byte	0
 1793 0385 11       		.uleb128 0x11
 1794 0386 6E000000 		.4byte	.LVL14
 1795 038a 460B0000 		.4byte	0xb46
 1796 038e 9F030000 		.4byte	0x39f
 1797 0392 12       		.uleb128 0x12
 1798 0393 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 59


 1799 0394 51       		.byte	0x51
 1800 0395 01       		.byte	0x1
 1801 0396 31       		.byte	0x31
 1802 0397 12       		.uleb128 0x12
 1803 0398 01       		.byte	0x1
 1804 0399 50       		.byte	0x50
 1805 039a 03       		.byte	0x3
 1806 039b 40       		.byte	0x40
 1807 039c 40       		.byte	0x40
 1808 039d 24       		.byte	0x24
 1809 039e 00       		.byte	0
 1810 039f 11       		.uleb128 0x11
 1811 03a0 82000000 		.4byte	.LVL17
 1812 03a4 2C0B0000 		.4byte	0xb2c
 1813 03a8 B8030000 		.4byte	0x3b8
 1814 03ac 12       		.uleb128 0x12
 1815 03ad 01       		.byte	0x1
 1816 03ae 51       		.byte	0x51
 1817 03af 01       		.byte	0x1
 1818 03b0 31       		.byte	0x31
 1819 03b1 12       		.uleb128 0x12
 1820 03b2 01       		.byte	0x1
 1821 03b3 50       		.byte	0x50
 1822 03b4 02       		.byte	0x2
 1823 03b5 08       		.byte	0x8
 1824 03b6 20       		.byte	0x20
 1825 03b7 00       		.byte	0
 1826 03b8 14       		.uleb128 0x14
 1827 03b9 8E000000 		.4byte	.LVL18
 1828 03bd 01       		.byte	0x1
 1829 03be 2C0B0000 		.4byte	0xb2c
 1830 03c2 12       		.uleb128 0x12
 1831 03c3 01       		.byte	0x1
 1832 03c4 51       		.byte	0x51
 1833 03c5 01       		.byte	0x1
 1834 03c6 30       		.byte	0x30
 1835 03c7 00       		.byte	0
 1836 03c8 00       		.byte	0
 1837 03c9 15       		.uleb128 0x15
 1838 03ca 04       		.byte	0x4
 1839 03cb D6010000 		.4byte	0x1d6
 1840 03cf 0F       		.uleb128 0xf
 1841 03d0 01       		.byte	0x1
 1842 03d1 8E000000 		.4byte	.LASF47
 1843 03d5 01       		.byte	0x1
 1844 03d6 F6       		.byte	0xf6
 1845 03d7 01       		.byte	0x1
 1846 03d8 00000000 		.4byte	.LFB111
 1847 03dc B8000000 		.4byte	.LFE111
 1848 03e0 C9000000 		.4byte	.LLST2
 1849 03e4 01       		.byte	0x1
 1850 03e5 62040000 		.4byte	0x462
 1851 03e9 10       		.uleb128 0x10
 1852 03ea 0D040000 		.4byte	.LASF48
 1853 03ee 01       		.byte	0x1
 1854 03ef F6       		.byte	0xf6
 1855 03f0 C9030000 		.4byte	0x3c9
ARM GAS  /tmp/ccyhuBN5.s 			page 60


 1856 03f4 F5000000 		.4byte	.LLST3
 1857 03f8 10       		.uleb128 0x10
 1858 03f9 B1050000 		.4byte	.LASF49
 1859 03fd 01       		.byte	0x1
 1860 03fe F6       		.byte	0xf6
 1861 03ff 62040000 		.4byte	0x462
 1862 0403 13010000 		.4byte	.LLST4
 1863 0407 16       		.uleb128 0x16
 1864 0408 A7020000 		.4byte	.LASF50
 1865 040c 01       		.byte	0x1
 1866 040d F8       		.byte	0xf8
 1867 040e 6D000000 		.4byte	0x6d
 1868 0412 31010000 		.4byte	.LLST5
 1869 0416 16       		.uleb128 0x16
 1870 0417 C9010000 		.4byte	.LASF51
 1871 041b 01       		.byte	0x1
 1872 041c F8       		.byte	0xf8
 1873 041d 6D000000 		.4byte	0x6d
 1874 0421 D9010000 		.4byte	.LLST6
 1875 0425 16       		.uleb128 0x16
 1876 0426 00000000 		.4byte	.LASF52
 1877 042a 01       		.byte	0x1
 1878 042b F9       		.byte	0xf9
 1879 042c 6D000000 		.4byte	0x6d
 1880 0430 0F020000 		.4byte	.LLST7
 1881 0434 16       		.uleb128 0x16
 1882 0435 42050000 		.4byte	.LASF53
 1883 0439 01       		.byte	0x1
 1884 043a FA       		.byte	0xfa
 1885 043b 6D000000 		.4byte	0x6d
 1886 043f 2E020000 		.4byte	.LLST8
 1887 0443 17       		.uleb128 0x17
 1888 0444 C2050000 		.4byte	.LASF54
 1889 0448 01       		.byte	0x1
 1890 0449 FB       		.byte	0xfb
 1891 044a 23020000 		.4byte	0x223
 1892 044e 02       		.byte	0x2
 1893 044f 91       		.byte	0x91
 1894 0450 60       		.sleb128 -32
 1895 0451 18       		.uleb128 0x18
 1896 0452 4A000000 		.4byte	.LVL29
 1897 0456 600B0000 		.4byte	0xb60
 1898 045a 12       		.uleb128 0x12
 1899 045b 01       		.byte	0x1
 1900 045c 50       		.byte	0x50
 1901 045d 02       		.byte	0x2
 1902 045e 7D       		.byte	0x7d
 1903 045f 00       		.sleb128 0
 1904 0460 00       		.byte	0
 1905 0461 00       		.byte	0
 1906 0462 15       		.uleb128 0x15
 1907 0463 04       		.byte	0x4
 1908 0464 8B020000 		.4byte	0x28b
 1909 0468 19       		.uleb128 0x19
 1910 0469 01       		.byte	0x1
 1911 046a 0A060000 		.4byte	.LASF55
 1912 046e 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 61


 1913 046f 6701     		.2byte	0x167
 1914 0471 01       		.byte	0x1
 1915 0472 00000000 		.4byte	.LFB112
 1916 0476 16000000 		.4byte	.LFE112
 1917 047a 02       		.byte	0x2
 1918 047b 7D       		.byte	0x7d
 1919 047c 00       		.sleb128 0
 1920 047d 01       		.byte	0x1
 1921 047e 91040000 		.4byte	0x491
 1922 0482 1A       		.uleb128 0x1a
 1923 0483 B1050000 		.4byte	.LASF49
 1924 0487 01       		.byte	0x1
 1925 0488 6701     		.2byte	0x167
 1926 048a 62040000 		.4byte	0x462
 1927 048e 01       		.byte	0x1
 1928 048f 50       		.byte	0x50
 1929 0490 00       		.byte	0
 1930 0491 1B       		.uleb128 0x1b
 1931 0492 01       		.byte	0x1
 1932 0493 D3050000 		.4byte	.LASF56
 1933 0497 01       		.byte	0x1
 1934 0498 7B01     		.2byte	0x17b
 1935 049a 01       		.byte	0x1
 1936 049b 00000000 		.4byte	.LFB113
 1937 049f 20000000 		.4byte	.LFE113
 1938 04a3 58020000 		.4byte	.LLST9
 1939 04a7 01       		.byte	0x1
 1940 04a8 DB040000 		.4byte	0x4db
 1941 04ac 1A       		.uleb128 0x1a
 1942 04ad 0D040000 		.4byte	.LASF48
 1943 04b1 01       		.byte	0x1
 1944 04b2 7B01     		.2byte	0x17b
 1945 04b4 C9030000 		.4byte	0x3c9
 1946 04b8 01       		.byte	0x1
 1947 04b9 50       		.byte	0x50
 1948 04ba 1C       		.uleb128 0x1c
 1949 04bb 8C020000 		.4byte	.LASF57
 1950 04bf 01       		.byte	0x1
 1951 04c0 7B01     		.2byte	0x17b
 1952 04c2 DB040000 		.4byte	0x4db
 1953 04c6 78020000 		.4byte	.LLST10
 1954 04ca 1D       		.uleb128 0x1d
 1955 04cb A7020000 		.4byte	.LASF50
 1956 04cf 01       		.byte	0x1
 1957 04d0 7D01     		.2byte	0x17d
 1958 04d2 6D000000 		.4byte	0x6d
 1959 04d6 99020000 		.4byte	.LLST11
 1960 04da 00       		.byte	0
 1961 04db 15       		.uleb128 0x15
 1962 04dc 04       		.byte	0x4
 1963 04dd D7020000 		.4byte	0x2d7
 1964 04e1 19       		.uleb128 0x19
 1965 04e2 01       		.byte	0x1
 1966 04e3 BB020000 		.4byte	.LASF58
 1967 04e7 01       		.byte	0x1
 1968 04e8 9A01     		.2byte	0x19a
 1969 04ea 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 62


 1970 04eb 00000000 		.4byte	.LFB114
 1971 04ef 0C000000 		.4byte	.LFE114
 1972 04f3 02       		.byte	0x2
 1973 04f4 7D       		.byte	0x7d
 1974 04f5 00       		.sleb128 0
 1975 04f6 01       		.byte	0x1
 1976 04f7 0A050000 		.4byte	0x50a
 1977 04fb 1A       		.uleb128 0x1a
 1978 04fc 8C020000 		.4byte	.LASF57
 1979 0500 01       		.byte	0x1
 1980 0501 9A01     		.2byte	0x19a
 1981 0503 DB040000 		.4byte	0x4db
 1982 0507 01       		.byte	0x1
 1983 0508 50       		.byte	0x50
 1984 0509 00       		.byte	0
 1985 050a 19       		.uleb128 0x19
 1986 050b 01       		.byte	0x1
 1987 050c 2B010000 		.4byte	.LASF59
 1988 0510 01       		.byte	0x1
 1989 0511 AB01     		.2byte	0x1ab
 1990 0513 01       		.byte	0x1
 1991 0514 00000000 		.4byte	.LFB115
 1992 0518 18000000 		.4byte	.LFE115
 1993 051c 02       		.byte	0x2
 1994 051d 7D       		.byte	0x7d
 1995 051e 00       		.sleb128 0
 1996 051f 01       		.byte	0x1
 1997 0520 43050000 		.4byte	0x543
 1998 0524 1A       		.uleb128 0x1a
 1999 0525 0D040000 		.4byte	.LASF48
 2000 0529 01       		.byte	0x1
 2001 052a AB01     		.2byte	0x1ab
 2002 052c C9030000 		.4byte	0x3c9
 2003 0530 01       		.byte	0x1
 2004 0531 50       		.byte	0x50
 2005 0532 1C       		.uleb128 0x1c
 2006 0533 73010000 		.4byte	.LASF60
 2007 0537 01       		.byte	0x1
 2008 0538 AB01     		.2byte	0x1ab
 2009 053a F0000000 		.4byte	0xf0
 2010 053e 0C030000 		.4byte	.LLST12
 2011 0542 00       		.byte	0
 2012 0543 19       		.uleb128 0x19
 2013 0544 01       		.byte	0x1
 2014 0545 36000000 		.4byte	.LASF61
 2015 0549 01       		.byte	0x1
 2016 054a C501     		.2byte	0x1c5
 2017 054c 01       		.byte	0x1
 2018 054d 00000000 		.4byte	.LFB116
 2019 0551 12000000 		.4byte	.LFE116
 2020 0555 02       		.byte	0x2
 2021 0556 7D       		.byte	0x7d
 2022 0557 00       		.sleb128 0
 2023 0558 01       		.byte	0x1
 2024 0559 7C050000 		.4byte	0x57c
 2025 055d 1A       		.uleb128 0x1a
 2026 055e 0D040000 		.4byte	.LASF48
ARM GAS  /tmp/ccyhuBN5.s 			page 63


 2027 0562 01       		.byte	0x1
 2028 0563 C501     		.2byte	0x1c5
 2029 0565 C9030000 		.4byte	0x3c9
 2030 0569 01       		.byte	0x1
 2031 056a 50       		.byte	0x50
 2032 056b 1C       		.uleb128 0x1c
 2033 056c 1B060000 		.4byte	.LASF62
 2034 0570 01       		.byte	0x1
 2035 0571 C501     		.2byte	0x1c5
 2036 0573 30000000 		.4byte	0x30
 2037 0577 46030000 		.4byte	.LLST13
 2038 057b 00       		.byte	0
 2039 057c 19       		.uleb128 0x19
 2040 057d 01       		.byte	0x1
 2041 057e 72040000 		.4byte	.LASF63
 2042 0582 01       		.byte	0x1
 2043 0583 DA01     		.2byte	0x1da
 2044 0585 01       		.byte	0x1
 2045 0586 00000000 		.4byte	.LFB117
 2046 058a 18000000 		.4byte	.LFE117
 2047 058e 02       		.byte	0x2
 2048 058f 7D       		.byte	0x7d
 2049 0590 00       		.sleb128 0
 2050 0591 01       		.byte	0x1
 2051 0592 B5050000 		.4byte	0x5b5
 2052 0596 1A       		.uleb128 0x1a
 2053 0597 0D040000 		.4byte	.LASF48
 2054 059b 01       		.byte	0x1
 2055 059c DA01     		.2byte	0x1da
 2056 059e C9030000 		.4byte	0x3c9
 2057 05a2 01       		.byte	0x1
 2058 05a3 50       		.byte	0x50
 2059 05a4 1C       		.uleb128 0x1c
 2060 05a5 73010000 		.4byte	.LASF60
 2061 05a9 01       		.byte	0x1
 2062 05aa DA01     		.2byte	0x1da
 2063 05ac F0000000 		.4byte	0xf0
 2064 05b0 67030000 		.4byte	.LLST14
 2065 05b4 00       		.byte	0
 2066 05b5 19       		.uleb128 0x19
 2067 05b6 01       		.byte	0x1
 2068 05b7 CC000000 		.4byte	.LASF64
 2069 05bb 01       		.byte	0x1
 2070 05bc F401     		.2byte	0x1f4
 2071 05be 01       		.byte	0x1
 2072 05bf 00000000 		.4byte	.LFB118
 2073 05c3 18000000 		.4byte	.LFE118
 2074 05c7 02       		.byte	0x2
 2075 05c8 7D       		.byte	0x7d
 2076 05c9 00       		.sleb128 0
 2077 05ca 01       		.byte	0x1
 2078 05cb EE050000 		.4byte	0x5ee
 2079 05cf 1A       		.uleb128 0x1a
 2080 05d0 0D040000 		.4byte	.LASF48
 2081 05d4 01       		.byte	0x1
 2082 05d5 F401     		.2byte	0x1f4
 2083 05d7 C9030000 		.4byte	0x3c9
ARM GAS  /tmp/ccyhuBN5.s 			page 64


 2084 05db 01       		.byte	0x1
 2085 05dc 50       		.byte	0x50
 2086 05dd 1C       		.uleb128 0x1c
 2087 05de 73010000 		.4byte	.LASF60
 2088 05e2 01       		.byte	0x1
 2089 05e3 F401     		.2byte	0x1f4
 2090 05e5 F0000000 		.4byte	0xf0
 2091 05e9 A1030000 		.4byte	.LLST15
 2092 05ed 00       		.byte	0
 2093 05ee 19       		.uleb128 0x19
 2094 05ef 01       		.byte	0x1
 2095 05f0 35010000 		.4byte	.LASF65
 2096 05f4 01       		.byte	0x1
 2097 05f5 2D02     		.2byte	0x22d
 2098 05f7 01       		.byte	0x1
 2099 05f8 00000000 		.4byte	.LFB119
 2100 05fc 08000000 		.4byte	.LFE119
 2101 0600 02       		.byte	0x2
 2102 0601 7D       		.byte	0x7d
 2103 0602 00       		.sleb128 0
 2104 0603 01       		.byte	0x1
 2105 0604 27060000 		.4byte	0x627
 2106 0608 1A       		.uleb128 0x1a
 2107 0609 0D040000 		.4byte	.LASF48
 2108 060d 01       		.byte	0x1
 2109 060e 2D02     		.2byte	0x22d
 2110 0610 C9030000 		.4byte	0x3c9
 2111 0614 01       		.byte	0x1
 2112 0615 50       		.byte	0x50
 2113 0616 1C       		.uleb128 0x1c
 2114 0617 A2020000 		.4byte	.LASF66
 2115 061b 01       		.byte	0x1
 2116 061c 2D02     		.2byte	0x22d
 2117 061e 49000000 		.4byte	0x49
 2118 0622 DB030000 		.4byte	.LLST16
 2119 0626 00       		.byte	0
 2120 0627 1E       		.uleb128 0x1e
 2121 0628 01       		.byte	0x1
 2122 0629 4A060000 		.4byte	.LASF92
 2123 062d 01       		.byte	0x1
 2124 062e 3D02     		.2byte	0x23d
 2125 0630 01       		.byte	0x1
 2126 0631 49000000 		.4byte	0x49
 2127 0635 00000000 		.4byte	.LFB120
 2128 0639 08000000 		.4byte	.LFE120
 2129 063d 02       		.byte	0x2
 2130 063e 7D       		.byte	0x7d
 2131 063f 00       		.sleb128 0
 2132 0640 01       		.byte	0x1
 2133 0641 56060000 		.4byte	0x656
 2134 0645 1C       		.uleb128 0x1c
 2135 0646 0D040000 		.4byte	.LASF48
 2136 064a 01       		.byte	0x1
 2137 064b 3D02     		.2byte	0x23d
 2138 064d C9030000 		.4byte	0x3c9
 2139 0651 FC030000 		.4byte	.LLST17
 2140 0655 00       		.byte	0
ARM GAS  /tmp/ccyhuBN5.s 			page 65


 2141 0656 19       		.uleb128 0x19
 2142 0657 01       		.byte	0x1
 2143 0658 FA020000 		.4byte	.LASF67
 2144 065c 01       		.byte	0x1
 2145 065d 7102     		.2byte	0x271
 2146 065f 01       		.byte	0x1
 2147 0660 00000000 		.4byte	.LFB121
 2148 0664 16000000 		.4byte	.LFE121
 2149 0668 02       		.byte	0x2
 2150 0669 7D       		.byte	0x7d
 2151 066a 00       		.sleb128 0
 2152 066b 01       		.byte	0x1
 2153 066c 8F060000 		.4byte	0x68f
 2154 0670 1A       		.uleb128 0x1a
 2155 0671 0D040000 		.4byte	.LASF48
 2156 0675 01       		.byte	0x1
 2157 0676 7102     		.2byte	0x271
 2158 0678 C9030000 		.4byte	0x3c9
 2159 067c 01       		.byte	0x1
 2160 067d 50       		.byte	0x50
 2161 067e 1C       		.uleb128 0x1c
 2162 067f 55040000 		.4byte	.LASF68
 2163 0683 01       		.byte	0x1
 2164 0684 7102     		.2byte	0x271
 2165 0686 30000000 		.4byte	0x30
 2166 068a 1D040000 		.4byte	.LLST18
 2167 068e 00       		.byte	0
 2168 068f 19       		.uleb128 0x19
 2169 0690 01       		.byte	0x1
 2170 0691 67020000 		.4byte	.LASF69
 2171 0695 01       		.byte	0x1
 2172 0696 8502     		.2byte	0x285
 2173 0698 01       		.byte	0x1
 2174 0699 00000000 		.4byte	.LFB122
 2175 069d 18000000 		.4byte	.LFE122
 2176 06a1 02       		.byte	0x2
 2177 06a2 7D       		.byte	0x7d
 2178 06a3 00       		.sleb128 0
 2179 06a4 01       		.byte	0x1
 2180 06a5 C8060000 		.4byte	0x6c8
 2181 06a9 1A       		.uleb128 0x1a
 2182 06aa 0D040000 		.4byte	.LASF48
 2183 06ae 01       		.byte	0x1
 2184 06af 8502     		.2byte	0x285
 2185 06b1 C9030000 		.4byte	0x3c9
 2186 06b5 01       		.byte	0x1
 2187 06b6 50       		.byte	0x50
 2188 06b7 1C       		.uleb128 0x1c
 2189 06b8 73010000 		.4byte	.LASF60
 2190 06bc 01       		.byte	0x1
 2191 06bd 8502     		.2byte	0x285
 2192 06bf F0000000 		.4byte	0xf0
 2193 06c3 3E040000 		.4byte	.LLST19
 2194 06c7 00       		.byte	0
 2195 06c8 19       		.uleb128 0x19
 2196 06c9 01       		.byte	0x1
 2197 06ca E3050000 		.4byte	.LASF70
ARM GAS  /tmp/ccyhuBN5.s 			page 66


 2198 06ce 01       		.byte	0x1
 2199 06cf A002     		.2byte	0x2a0
 2200 06d1 01       		.byte	0x1
 2201 06d2 00000000 		.4byte	.LFB123
 2202 06d6 16000000 		.4byte	.LFE123
 2203 06da 02       		.byte	0x2
 2204 06db 7D       		.byte	0x7d
 2205 06dc 00       		.sleb128 0
 2206 06dd 01       		.byte	0x1
 2207 06de 01070000 		.4byte	0x701
 2208 06e2 1A       		.uleb128 0x1a
 2209 06e3 0D040000 		.4byte	.LASF48
 2210 06e7 01       		.byte	0x1
 2211 06e8 A002     		.2byte	0x2a0
 2212 06ea C9030000 		.4byte	0x3c9
 2213 06ee 01       		.byte	0x1
 2214 06ef 50       		.byte	0x50
 2215 06f0 1C       		.uleb128 0x1c
 2216 06f1 55010000 		.4byte	.LASF71
 2217 06f5 01       		.byte	0x1
 2218 06f6 A002     		.2byte	0x2a0
 2219 06f8 49000000 		.4byte	0x49
 2220 06fc 78040000 		.4byte	.LLST20
 2221 0700 00       		.byte	0
 2222 0701 19       		.uleb128 0x19
 2223 0702 01       		.byte	0x1
 2224 0703 3B020000 		.4byte	.LASF72
 2225 0707 01       		.byte	0x1
 2226 0708 E502     		.2byte	0x2e5
 2227 070a 01       		.byte	0x1
 2228 070b 00000000 		.4byte	.LFB124
 2229 070f 16000000 		.4byte	.LFE124
 2230 0713 02       		.byte	0x2
 2231 0714 7D       		.byte	0x7d
 2232 0715 00       		.sleb128 0
 2233 0716 01       		.byte	0x1
 2234 0717 3A070000 		.4byte	0x73a
 2235 071b 1A       		.uleb128 0x1a
 2236 071c 0D040000 		.4byte	.LASF48
 2237 0720 01       		.byte	0x1
 2238 0721 E502     		.2byte	0x2e5
 2239 0723 C9030000 		.4byte	0x3c9
 2240 0727 01       		.byte	0x1
 2241 0728 50       		.byte	0x50
 2242 0729 1C       		.uleb128 0x1c
 2243 072a B1000000 		.4byte	.LASF73
 2244 072e 01       		.byte	0x1
 2245 072f E502     		.2byte	0x2e5
 2246 0731 49000000 		.4byte	0x49
 2247 0735 99040000 		.4byte	.LLST21
 2248 0739 00       		.byte	0
 2249 073a 19       		.uleb128 0x19
 2250 073b 01       		.byte	0x1
 2251 073c AE040000 		.4byte	.LASF74
 2252 0740 01       		.byte	0x1
 2253 0741 F702     		.2byte	0x2f7
 2254 0743 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 67


 2255 0744 00000000 		.4byte	.LFB125
 2256 0748 18000000 		.4byte	.LFE125
 2257 074c 02       		.byte	0x2
 2258 074d 7D       		.byte	0x7d
 2259 074e 00       		.sleb128 0
 2260 074f 01       		.byte	0x1
 2261 0750 73070000 		.4byte	0x773
 2262 0754 1A       		.uleb128 0x1a
 2263 0755 0D040000 		.4byte	.LASF48
 2264 0759 01       		.byte	0x1
 2265 075a F702     		.2byte	0x2f7
 2266 075c C9030000 		.4byte	0x3c9
 2267 0760 01       		.byte	0x1
 2268 0761 50       		.byte	0x50
 2269 0762 1C       		.uleb128 0x1c
 2270 0763 73010000 		.4byte	.LASF60
 2271 0767 01       		.byte	0x1
 2272 0768 F702     		.2byte	0x2f7
 2273 076a F0000000 		.4byte	0xf0
 2274 076e BA040000 		.4byte	.LLST22
 2275 0772 00       		.byte	0
 2276 0773 19       		.uleb128 0x19
 2277 0774 01       		.byte	0x1
 2278 0775 A6030000 		.4byte	.LASF75
 2279 0779 01       		.byte	0x1
 2280 077a 0F03     		.2byte	0x30f
 2281 077c 01       		.byte	0x1
 2282 077d 00000000 		.4byte	.LFB126
 2283 0781 0C000000 		.4byte	.LFE126
 2284 0785 02       		.byte	0x2
 2285 0786 7D       		.byte	0x7d
 2286 0787 00       		.sleb128 0
 2287 0788 01       		.byte	0x1
 2288 0789 9C070000 		.4byte	0x79c
 2289 078d 1A       		.uleb128 0x1a
 2290 078e 0D040000 		.4byte	.LASF48
 2291 0792 01       		.byte	0x1
 2292 0793 0F03     		.2byte	0x30f
 2293 0795 C9030000 		.4byte	0x3c9
 2294 0799 01       		.byte	0x1
 2295 079a 50       		.byte	0x50
 2296 079b 00       		.byte	0
 2297 079c 19       		.uleb128 0x19
 2298 079d 01       		.byte	0x1
 2299 079e F6050000 		.4byte	.LASF76
 2300 07a2 01       		.byte	0x1
 2301 07a3 4403     		.2byte	0x344
 2302 07a5 01       		.byte	0x1
 2303 07a6 00000000 		.4byte	.LFB127
 2304 07aa 18000000 		.4byte	.LFE127
 2305 07ae 02       		.byte	0x2
 2306 07af 7D       		.byte	0x7d
 2307 07b0 00       		.sleb128 0
 2308 07b1 01       		.byte	0x1
 2309 07b2 D5070000 		.4byte	0x7d5
 2310 07b6 1A       		.uleb128 0x1a
 2311 07b7 0D040000 		.4byte	.LASF48
ARM GAS  /tmp/ccyhuBN5.s 			page 68


 2312 07bb 01       		.byte	0x1
 2313 07bc 4403     		.2byte	0x344
 2314 07be C9030000 		.4byte	0x3c9
 2315 07c2 01       		.byte	0x1
 2316 07c3 50       		.byte	0x50
 2317 07c4 1C       		.uleb128 0x1c
 2318 07c5 73010000 		.4byte	.LASF60
 2319 07c9 01       		.byte	0x1
 2320 07ca 4403     		.2byte	0x344
 2321 07cc F0000000 		.4byte	0xf0
 2322 07d0 F4040000 		.4byte	.LLST23
 2323 07d4 00       		.byte	0
 2324 07d5 19       		.uleb128 0x19
 2325 07d6 01       		.byte	0x1
 2326 07d7 2B030000 		.4byte	.LASF77
 2327 07db 01       		.byte	0x1
 2328 07dc 9803     		.2byte	0x398
 2329 07de 01       		.byte	0x1
 2330 07df 00000000 		.4byte	.LFB128
 2331 07e3 12000000 		.4byte	.LFE128
 2332 07e7 02       		.byte	0x2
 2333 07e8 7D       		.byte	0x7d
 2334 07e9 00       		.sleb128 0
 2335 07ea 01       		.byte	0x1
 2336 07eb 0E080000 		.4byte	0x80e
 2337 07ef 1A       		.uleb128 0x1a
 2338 07f0 0D040000 		.4byte	.LASF48
 2339 07f4 01       		.byte	0x1
 2340 07f5 9803     		.2byte	0x398
 2341 07f7 C9030000 		.4byte	0x3c9
 2342 07fb 01       		.byte	0x1
 2343 07fc 50       		.byte	0x50
 2344 07fd 1C       		.uleb128 0x1c
 2345 07fe 21020000 		.4byte	.LASF78
 2346 0802 01       		.byte	0x1
 2347 0803 9803     		.2byte	0x398
 2348 0805 30000000 		.4byte	0x30
 2349 0809 2E050000 		.4byte	.LLST24
 2350 080d 00       		.byte	0
 2351 080e 19       		.uleb128 0x19
 2352 080f 01       		.byte	0x1
 2353 0810 2E040000 		.4byte	.LASF79
 2354 0814 01       		.byte	0x1
 2355 0815 AB03     		.2byte	0x3ab
 2356 0817 01       		.byte	0x1
 2357 0818 00000000 		.4byte	.LFB129
 2358 081c 18000000 		.4byte	.LFE129
 2359 0820 02       		.byte	0x2
 2360 0821 7D       		.byte	0x7d
 2361 0822 00       		.sleb128 0
 2362 0823 01       		.byte	0x1
 2363 0824 47080000 		.4byte	0x847
 2364 0828 1A       		.uleb128 0x1a
 2365 0829 0D040000 		.4byte	.LASF48
 2366 082d 01       		.byte	0x1
 2367 082e AB03     		.2byte	0x3ab
 2368 0830 C9030000 		.4byte	0x3c9
ARM GAS  /tmp/ccyhuBN5.s 			page 69


 2369 0834 01       		.byte	0x1
 2370 0835 50       		.byte	0x50
 2371 0836 1C       		.uleb128 0x1c
 2372 0837 73010000 		.4byte	.LASF60
 2373 083b 01       		.byte	0x1
 2374 083c AB03     		.2byte	0x3ab
 2375 083e F0000000 		.4byte	0xf0
 2376 0842 4F050000 		.4byte	.LLST25
 2377 0846 00       		.byte	0
 2378 0847 19       		.uleb128 0x19
 2379 0848 01       		.byte	0x1
 2380 0849 64050000 		.4byte	.LASF80
 2381 084d 01       		.byte	0x1
 2382 084e C403     		.2byte	0x3c4
 2383 0850 01       		.byte	0x1
 2384 0851 00000000 		.4byte	.LFB130
 2385 0855 18000000 		.4byte	.LFE130
 2386 0859 02       		.byte	0x2
 2387 085a 7D       		.byte	0x7d
 2388 085b 00       		.sleb128 0
 2389 085c 01       		.byte	0x1
 2390 085d 80080000 		.4byte	0x880
 2391 0861 1A       		.uleb128 0x1a
 2392 0862 0D040000 		.4byte	.LASF48
 2393 0866 01       		.byte	0x1
 2394 0867 C403     		.2byte	0x3c4
 2395 0869 C9030000 		.4byte	0x3c9
 2396 086d 01       		.byte	0x1
 2397 086e 50       		.byte	0x50
 2398 086f 1C       		.uleb128 0x1c
 2399 0870 73010000 		.4byte	.LASF60
 2400 0874 01       		.byte	0x1
 2401 0875 C403     		.2byte	0x3c4
 2402 0877 F0000000 		.4byte	0xf0
 2403 087b 89050000 		.4byte	.LLST26
 2404 087f 00       		.byte	0
 2405 0880 19       		.uleb128 0x19
 2406 0881 01       		.byte	0x1
 2407 0882 BB040000 		.4byte	.LASF81
 2408 0886 01       		.byte	0x1
 2409 0887 0B04     		.2byte	0x40b
 2410 0889 01       		.byte	0x1
 2411 088a 00000000 		.4byte	.LFB131
 2412 088e 16000000 		.4byte	.LFE131
 2413 0892 02       		.byte	0x2
 2414 0893 7D       		.byte	0x7d
 2415 0894 00       		.sleb128 0
 2416 0895 01       		.byte	0x1
 2417 0896 B9080000 		.4byte	0x8b9
 2418 089a 1A       		.uleb128 0x1a
 2419 089b 0D040000 		.4byte	.LASF48
 2420 089f 01       		.byte	0x1
 2421 08a0 0B04     		.2byte	0x40b
 2422 08a2 C9030000 		.4byte	0x3c9
 2423 08a6 01       		.byte	0x1
 2424 08a7 50       		.byte	0x50
 2425 08a8 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccyhuBN5.s 			page 70


 2426 08a9 BA010000 		.4byte	.LASF82
 2427 08ad 01       		.byte	0x1
 2428 08ae 0B04     		.2byte	0x40b
 2429 08b0 49000000 		.4byte	0x49
 2430 08b4 C3050000 		.4byte	.LLST27
 2431 08b8 00       		.byte	0
 2432 08b9 19       		.uleb128 0x19
 2433 08ba 01       		.byte	0x1
 2434 08bb 34050000 		.4byte	.LASF83
 2435 08bf 01       		.byte	0x1
 2436 08c0 1D04     		.2byte	0x41d
 2437 08c2 01       		.byte	0x1
 2438 08c3 00000000 		.4byte	.LFB132
 2439 08c7 18000000 		.4byte	.LFE132
 2440 08cb 02       		.byte	0x2
 2441 08cc 7D       		.byte	0x7d
 2442 08cd 00       		.sleb128 0
 2443 08ce 01       		.byte	0x1
 2444 08cf F2080000 		.4byte	0x8f2
 2445 08d3 1A       		.uleb128 0x1a
 2446 08d4 0D040000 		.4byte	.LASF48
 2447 08d8 01       		.byte	0x1
 2448 08d9 1D04     		.2byte	0x41d
 2449 08db C9030000 		.4byte	0x3c9
 2450 08df 01       		.byte	0x1
 2451 08e0 50       		.byte	0x50
 2452 08e1 1C       		.uleb128 0x1c
 2453 08e2 73010000 		.4byte	.LASF60
 2454 08e6 01       		.byte	0x1
 2455 08e7 1D04     		.2byte	0x41d
 2456 08e9 F0000000 		.4byte	0xf0
 2457 08ed E4050000 		.4byte	.LLST28
 2458 08f1 00       		.byte	0
 2459 08f2 19       		.uleb128 0x19
 2460 08f3 01       		.byte	0x1
 2461 08f4 7C010000 		.4byte	.LASF84
 2462 08f8 01       		.byte	0x1
 2463 08f9 4B04     		.2byte	0x44b
 2464 08fb 01       		.byte	0x1
 2465 08fc 00000000 		.4byte	.LFB133
 2466 0900 12000000 		.4byte	.LFE133
 2467 0904 02       		.byte	0x2
 2468 0905 7D       		.byte	0x7d
 2469 0906 00       		.sleb128 0
 2470 0907 01       		.byte	0x1
 2471 0908 39090000 		.4byte	0x939
 2472 090c 1A       		.uleb128 0x1a
 2473 090d 0D040000 		.4byte	.LASF48
 2474 0911 01       		.byte	0x1
 2475 0912 4B04     		.2byte	0x44b
 2476 0914 C9030000 		.4byte	0x3c9
 2477 0918 01       		.byte	0x1
 2478 0919 50       		.byte	0x50
 2479 091a 1C       		.uleb128 0x1c
 2480 091b 00040000 		.4byte	.LASF85
 2481 091f 01       		.byte	0x1
 2482 0920 4B04     		.2byte	0x44b
ARM GAS  /tmp/ccyhuBN5.s 			page 71


 2483 0922 49000000 		.4byte	0x49
 2484 0926 1E060000 		.4byte	.LLST29
 2485 092a 1A       		.uleb128 0x1a
 2486 092b 73010000 		.4byte	.LASF60
 2487 092f 01       		.byte	0x1
 2488 0930 4B04     		.2byte	0x44b
 2489 0932 F0000000 		.4byte	0xf0
 2490 0936 01       		.byte	0x1
 2491 0937 52       		.byte	0x52
 2492 0938 00       		.byte	0
 2493 0939 1B       		.uleb128 0x1b
 2494 093a 01       		.byte	0x1
 2495 093b DF030000 		.4byte	.LASF86
 2496 093f 01       		.byte	0x1
 2497 0940 CF04     		.2byte	0x4cf
 2498 0942 01       		.byte	0x1
 2499 0943 00000000 		.4byte	.LFB134
 2500 0947 34000000 		.4byte	.LFE134
 2501 094b 58060000 		.4byte	.LLST30
 2502 094f 01       		.byte	0x1
 2503 0950 C3090000 		.4byte	0x9c3
 2504 0954 1C       		.uleb128 0x1c
 2505 0955 0D040000 		.4byte	.LASF48
 2506 0959 01       		.byte	0x1
 2507 095a CF04     		.2byte	0x4cf
 2508 095c C9030000 		.4byte	0x3c9
 2509 0960 78060000 		.4byte	.LLST31
 2510 0964 1C       		.uleb128 0x1c
 2511 0965 4C010000 		.4byte	.LASF87
 2512 0969 01       		.byte	0x1
 2513 096a CF04     		.2byte	0x4cf
 2514 096c 49000000 		.4byte	0x49
 2515 0970 C9060000 		.4byte	.LLST32
 2516 0974 1C       		.uleb128 0x1c
 2517 0975 73010000 		.4byte	.LASF60
 2518 0979 01       		.byte	0x1
 2519 097a CF04     		.2byte	0x4cf
 2520 097c F0000000 		.4byte	0xf0
 2521 0980 EA060000 		.4byte	.LLST33
 2522 0984 1D       		.uleb128 0x1d
 2523 0985 6E060000 		.4byte	.LASF88
 2524 0989 01       		.byte	0x1
 2525 098a D104     		.2byte	0x4d1
 2526 098c 6D000000 		.4byte	0x6d
 2527 0990 24070000 		.4byte	.LLST34
 2528 0994 1D       		.uleb128 0x1d
 2529 0995 1F000000 		.4byte	.LASF89
 2530 0999 01       		.byte	0x1
 2531 099a D104     		.2byte	0x4d1
 2532 099c 6D000000 		.4byte	0x6d
 2533 09a0 43070000 		.4byte	.LLST35
 2534 09a4 1D       		.uleb128 0x1d
 2535 09a5 36060000 		.4byte	.LASF90
 2536 09a9 01       		.byte	0x1
 2537 09aa D104     		.2byte	0x4d1
 2538 09ac 6D000000 		.4byte	0x6d
 2539 09b0 6A070000 		.4byte	.LLST36
ARM GAS  /tmp/ccyhuBN5.s 			page 72


 2540 09b4 1F       		.uleb128 0x1f
 2541 09b5 DF020000 		.4byte	.LASF91
 2542 09b9 01       		.byte	0x1
 2543 09ba D204     		.2byte	0x4d2
 2544 09bc 6D000000 		.4byte	0x6d
 2545 09c0 01       		.byte	0x1
 2546 09c1 50       		.byte	0x50
 2547 09c2 00       		.byte	0
 2548 09c3 1E       		.uleb128 0x1e
 2549 09c4 01       		.byte	0x1
 2550 09c5 8B050000 		.4byte	.LASF93
 2551 09c9 01       		.byte	0x1
 2552 09ca 0F05     		.2byte	0x50f
 2553 09cc 01       		.byte	0x1
 2554 09cd C2000000 		.4byte	0xc2
 2555 09d1 00000000 		.4byte	.LFB135
 2556 09d5 0C000000 		.4byte	.LFE135
 2557 09d9 02       		.byte	0x2
 2558 09da 7D       		.byte	0x7d
 2559 09db 00       		.sleb128 0
 2560 09dc 01       		.byte	0x1
 2561 09dd 100A0000 		.4byte	0xa10
 2562 09e1 1C       		.uleb128 0x1c
 2563 09e2 0D040000 		.4byte	.LASF48
 2564 09e6 01       		.byte	0x1
 2565 09e7 0F05     		.2byte	0x50f
 2566 09e9 C9030000 		.4byte	0x3c9
 2567 09ed 89070000 		.4byte	.LLST37
 2568 09f1 1A       		.uleb128 0x1a
 2569 09f2 5C020000 		.4byte	.LASF94
 2570 09f6 01       		.byte	0x1
 2571 09f7 0F05     		.2byte	0x50f
 2572 09f9 49000000 		.4byte	0x49
 2573 09fd 01       		.byte	0x1
 2574 09fe 51       		.byte	0x51
 2575 09ff 1D       		.uleb128 0x1d
 2576 0a00 0A010000 		.4byte	.LASF95
 2577 0a04 01       		.byte	0x1
 2578 0a05 1105     		.2byte	0x511
 2579 0a07 C2000000 		.4byte	0xc2
 2580 0a0b AA070000 		.4byte	.LLST38
 2581 0a0f 00       		.byte	0
 2582 0a10 19       		.uleb128 0x19
 2583 0a11 01       		.byte	0x1
 2584 0a12 EA020000 		.4byte	.LASF96
 2585 0a16 01       		.byte	0x1
 2586 0a17 4005     		.2byte	0x540
 2587 0a19 01       		.byte	0x1
 2588 0a1a 00000000 		.4byte	.LFB136
 2589 0a1e 08000000 		.4byte	.LFE136
 2590 0a22 02       		.byte	0x2
 2591 0a23 7D       		.byte	0x7d
 2592 0a24 00       		.sleb128 0
 2593 0a25 01       		.byte	0x1
 2594 0a26 490A0000 		.4byte	0xa49
 2595 0a2a 1A       		.uleb128 0x1a
 2596 0a2b 0D040000 		.4byte	.LASF48
ARM GAS  /tmp/ccyhuBN5.s 			page 73


 2597 0a2f 01       		.byte	0x1
 2598 0a30 4005     		.2byte	0x540
 2599 0a32 C9030000 		.4byte	0x3c9
 2600 0a36 01       		.byte	0x1
 2601 0a37 50       		.byte	0x50
 2602 0a38 1C       		.uleb128 0x1c
 2603 0a39 5C020000 		.4byte	.LASF94
 2604 0a3d 01       		.byte	0x1
 2605 0a3e 4005     		.2byte	0x540
 2606 0a40 49000000 		.4byte	0x49
 2607 0a44 D2070000 		.4byte	.LLST39
 2608 0a48 00       		.byte	0
 2609 0a49 20       		.uleb128 0x20
 2610 0a4a 01       		.byte	0x1
 2611 0a4b 9C040000 		.4byte	.LASF97
 2612 0a4f 01       		.byte	0x1
 2613 0a50 6205     		.2byte	0x562
 2614 0a52 01       		.byte	0x1
 2615 0a53 CE000000 		.4byte	0xce
 2616 0a57 00000000 		.4byte	.LFB137
 2617 0a5b 40000000 		.4byte	.LFE137
 2618 0a5f F3070000 		.4byte	.LLST40
 2619 0a63 01       		.byte	0x1
 2620 0a64 C90A0000 		.4byte	0xac9
 2621 0a68 1C       		.uleb128 0x1c
 2622 0a69 0D040000 		.4byte	.LASF48
 2623 0a6d 01       		.byte	0x1
 2624 0a6e 6205     		.2byte	0x562
 2625 0a70 C9030000 		.4byte	0x3c9
 2626 0a74 13080000 		.4byte	.LLST41
 2627 0a78 1C       		.uleb128 0x1c
 2628 0a79 4C010000 		.4byte	.LASF87
 2629 0a7d 01       		.byte	0x1
 2630 0a7e 6205     		.2byte	0x562
 2631 0a80 49000000 		.4byte	0x49
 2632 0a84 34080000 		.4byte	.LLST42
 2633 0a88 1D       		.uleb128 0x1d
 2634 0a89 6B040000 		.4byte	.LASF98
 2635 0a8d 01       		.byte	0x1
 2636 0a8e 6405     		.2byte	0x564
 2637 0a90 6D000000 		.4byte	0x6d
 2638 0a94 60080000 		.4byte	.LLST43
 2639 0a98 1D       		.uleb128 0x1d
 2640 0a99 36060000 		.4byte	.LASF90
 2641 0a9d 01       		.byte	0x1
 2642 0a9e 6405     		.2byte	0x564
 2643 0aa0 6D000000 		.4byte	0x6d
 2644 0aa4 C1080000 		.4byte	.LLST44
 2645 0aa8 1D       		.uleb128 0x1d
 2646 0aa9 6E060000 		.4byte	.LASF88
 2647 0aad 01       		.byte	0x1
 2648 0aae 6405     		.2byte	0x564
 2649 0ab0 6D000000 		.4byte	0x6d
 2650 0ab4 09090000 		.4byte	.LLST45
 2651 0ab8 1D       		.uleb128 0x1d
 2652 0ab9 0A010000 		.4byte	.LASF95
 2653 0abd 01       		.byte	0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 74


 2654 0abe 6505     		.2byte	0x565
 2655 0ac0 CE000000 		.4byte	0xce
 2656 0ac4 28090000 		.4byte	.LLST46
 2657 0ac8 00       		.byte	0
 2658 0ac9 19       		.uleb128 0x19
 2659 0aca 01       		.byte	0x1
 2660 0acb 09020000 		.4byte	.LASF99
 2661 0acf 01       		.byte	0x1
 2662 0ad0 AC05     		.2byte	0x5ac
 2663 0ad2 01       		.byte	0x1
 2664 0ad3 00000000 		.4byte	.LFB138
 2665 0ad7 10000000 		.4byte	.LFE138
 2666 0adb 02       		.byte	0x2
 2667 0adc 7D       		.byte	0x7d
 2668 0add 00       		.sleb128 0
 2669 0ade 01       		.byte	0x1
 2670 0adf 1E0B0000 		.4byte	0xb1e
 2671 0ae3 1A       		.uleb128 0x1a
 2672 0ae4 0D040000 		.4byte	.LASF48
 2673 0ae8 01       		.byte	0x1
 2674 0ae9 AC05     		.2byte	0x5ac
 2675 0aeb C9030000 		.4byte	0x3c9
 2676 0aef 01       		.byte	0x1
 2677 0af0 50       		.byte	0x50
 2678 0af1 1C       		.uleb128 0x1c
 2679 0af2 4C010000 		.4byte	.LASF87
 2680 0af6 01       		.byte	0x1
 2681 0af7 AC05     		.2byte	0x5ac
 2682 0af9 49000000 		.4byte	0x49
 2683 0afd 47090000 		.4byte	.LLST47
 2684 0b01 1D       		.uleb128 0x1d
 2685 0b02 6B040000 		.4byte	.LASF98
 2686 0b06 01       		.byte	0x1
 2687 0b07 AE05     		.2byte	0x5ae
 2688 0b09 49000000 		.4byte	0x49
 2689 0b0d 68090000 		.4byte	.LLST48
 2690 0b11 21       		.uleb128 0x21
 2691 0b12 36060000 		.4byte	.LASF90
 2692 0b16 01       		.byte	0x1
 2693 0b17 AE05     		.2byte	0x5ae
 2694 0b19 49000000 		.4byte	0x49
 2695 0b1d 00       		.byte	0
 2696 0b1e 22       		.uleb128 0x22
 2697 0b1f 3D060000 		.4byte	.LASF106
 2698 0b23 06       		.byte	0x6
 2699 0b24 9806     		.2byte	0x698
 2700 0b26 A7000000 		.4byte	0xa7
 2701 0b2a 01       		.byte	0x1
 2702 0b2b 01       		.byte	0x1
 2703 0b2c 23       		.uleb128 0x23
 2704 0b2d 01       		.byte	0x1
 2705 0b2e C8030000 		.4byte	.LASF100
 2706 0b32 04       		.byte	0x4
 2707 0b33 0402     		.2byte	0x204
 2708 0b35 01       		.byte	0x1
 2709 0b36 01       		.byte	0x1
 2710 0b37 460B0000 		.4byte	0xb46
ARM GAS  /tmp/ccyhuBN5.s 			page 75


 2711 0b3b 24       		.uleb128 0x24
 2712 0b3c 6D000000 		.4byte	0x6d
 2713 0b40 24       		.uleb128 0x24
 2714 0b41 F0000000 		.4byte	0xf0
 2715 0b45 00       		.byte	0
 2716 0b46 23       		.uleb128 0x23
 2717 0b47 01       		.byte	0x1
 2718 0b48 E0010000 		.4byte	.LASF101
 2719 0b4c 04       		.byte	0x4
 2720 0b4d 0302     		.2byte	0x203
 2721 0b4f 01       		.byte	0x1
 2722 0b50 01       		.byte	0x1
 2723 0b51 600B0000 		.4byte	0xb60
 2724 0b55 24       		.uleb128 0x24
 2725 0b56 6D000000 		.4byte	0x6d
 2726 0b5a 24       		.uleb128 0x24
 2727 0b5b F0000000 		.4byte	0xf0
 2728 0b5f 00       		.byte	0
 2729 0b60 23       		.uleb128 0x23
 2730 0b61 01       		.byte	0x1
 2731 0b62 9F050000 		.4byte	.LASF102
 2732 0b66 04       		.byte	0x4
 2733 0b67 F101     		.2byte	0x1f1
 2734 0b69 01       		.byte	0x1
 2735 0b6a 01       		.byte	0x1
 2736 0b6b 750B0000 		.4byte	0xb75
 2737 0b6f 24       		.uleb128 0x24
 2738 0b70 750B0000 		.4byte	0xb75
 2739 0b74 00       		.byte	0
 2740 0b75 15       		.uleb128 0x15
 2741 0b76 04       		.byte	0x4
 2742 0b77 23020000 		.4byte	0x223
 2743 0b7b 00       		.byte	0
 2744              		.section	.debug_abbrev,"",%progbits
 2745              	.Ldebug_abbrev0:
 2746 0000 01       		.uleb128 0x1
 2747 0001 11       		.uleb128 0x11
 2748 0002 01       		.byte	0x1
 2749 0003 25       		.uleb128 0x25
 2750 0004 0E       		.uleb128 0xe
 2751 0005 13       		.uleb128 0x13
 2752 0006 0B       		.uleb128 0xb
 2753 0007 03       		.uleb128 0x3
 2754 0008 0E       		.uleb128 0xe
 2755 0009 1B       		.uleb128 0x1b
 2756 000a 0E       		.uleb128 0xe
 2757 000b 55       		.uleb128 0x55
 2758 000c 06       		.uleb128 0x6
 2759 000d 11       		.uleb128 0x11
 2760 000e 01       		.uleb128 0x1
 2761 000f 52       		.uleb128 0x52
 2762 0010 01       		.uleb128 0x1
 2763 0011 10       		.uleb128 0x10
 2764 0012 06       		.uleb128 0x6
 2765 0013 00       		.byte	0
 2766 0014 00       		.byte	0
 2767 0015 02       		.uleb128 0x2
ARM GAS  /tmp/ccyhuBN5.s 			page 76


 2768 0016 24       		.uleb128 0x24
 2769 0017 00       		.byte	0
 2770 0018 0B       		.uleb128 0xb
 2771 0019 0B       		.uleb128 0xb
 2772 001a 3E       		.uleb128 0x3e
 2773 001b 0B       		.uleb128 0xb
 2774 001c 03       		.uleb128 0x3
 2775 001d 0E       		.uleb128 0xe
 2776 001e 00       		.byte	0
 2777 001f 00       		.byte	0
 2778 0020 03       		.uleb128 0x3
 2779 0021 16       		.uleb128 0x16
 2780 0022 00       		.byte	0
 2781 0023 03       		.uleb128 0x3
 2782 0024 0E       		.uleb128 0xe
 2783 0025 3A       		.uleb128 0x3a
 2784 0026 0B       		.uleb128 0xb
 2785 0027 3B       		.uleb128 0x3b
 2786 0028 0B       		.uleb128 0xb
 2787 0029 49       		.uleb128 0x49
 2788 002a 13       		.uleb128 0x13
 2789 002b 00       		.byte	0
 2790 002c 00       		.byte	0
 2791 002d 04       		.uleb128 0x4
 2792 002e 24       		.uleb128 0x24
 2793 002f 00       		.byte	0
 2794 0030 0B       		.uleb128 0xb
 2795 0031 0B       		.uleb128 0xb
 2796 0032 3E       		.uleb128 0x3e
 2797 0033 0B       		.uleb128 0xb
 2798 0034 03       		.uleb128 0x3
 2799 0035 08       		.uleb128 0x8
 2800 0036 00       		.byte	0
 2801 0037 00       		.byte	0
 2802 0038 05       		.uleb128 0x5
 2803 0039 35       		.uleb128 0x35
 2804 003a 00       		.byte	0
 2805 003b 49       		.uleb128 0x49
 2806 003c 13       		.uleb128 0x13
 2807 003d 00       		.byte	0
 2808 003e 00       		.byte	0
 2809 003f 06       		.uleb128 0x6
 2810 0040 04       		.uleb128 0x4
 2811 0041 01       		.byte	0x1
 2812 0042 0B       		.uleb128 0xb
 2813 0043 0B       		.uleb128 0xb
 2814 0044 3A       		.uleb128 0x3a
 2815 0045 0B       		.uleb128 0xb
 2816 0046 3B       		.uleb128 0x3b
 2817 0047 05       		.uleb128 0x5
 2818 0048 01       		.uleb128 0x1
 2819 0049 13       		.uleb128 0x13
 2820 004a 00       		.byte	0
 2821 004b 00       		.byte	0
 2822 004c 07       		.uleb128 0x7
 2823 004d 28       		.uleb128 0x28
 2824 004e 00       		.byte	0
ARM GAS  /tmp/ccyhuBN5.s 			page 77


 2825 004f 03       		.uleb128 0x3
 2826 0050 0E       		.uleb128 0xe
 2827 0051 1C       		.uleb128 0x1c
 2828 0052 0D       		.uleb128 0xd
 2829 0053 00       		.byte	0
 2830 0054 00       		.byte	0
 2831 0055 08       		.uleb128 0x8
 2832 0056 28       		.uleb128 0x28
 2833 0057 00       		.byte	0
 2834 0058 03       		.uleb128 0x3
 2835 0059 08       		.uleb128 0x8
 2836 005a 1C       		.uleb128 0x1c
 2837 005b 0D       		.uleb128 0xd
 2838 005c 00       		.byte	0
 2839 005d 00       		.byte	0
 2840 005e 09       		.uleb128 0x9
 2841 005f 16       		.uleb128 0x16
 2842 0060 00       		.byte	0
 2843 0061 03       		.uleb128 0x3
 2844 0062 0E       		.uleb128 0xe
 2845 0063 3A       		.uleb128 0x3a
 2846 0064 0B       		.uleb128 0xb
 2847 0065 3B       		.uleb128 0x3b
 2848 0066 05       		.uleb128 0x5
 2849 0067 49       		.uleb128 0x49
 2850 0068 13       		.uleb128 0x13
 2851 0069 00       		.byte	0
 2852 006a 00       		.byte	0
 2853 006b 0A       		.uleb128 0xa
 2854 006c 13       		.uleb128 0x13
 2855 006d 01       		.byte	0x1
 2856 006e 0B       		.uleb128 0xb
 2857 006f 0B       		.uleb128 0xb
 2858 0070 3A       		.uleb128 0x3a
 2859 0071 0B       		.uleb128 0xb
 2860 0072 3B       		.uleb128 0x3b
 2861 0073 05       		.uleb128 0x5
 2862 0074 01       		.uleb128 0x1
 2863 0075 13       		.uleb128 0x13
 2864 0076 00       		.byte	0
 2865 0077 00       		.byte	0
 2866 0078 0B       		.uleb128 0xb
 2867 0079 0D       		.uleb128 0xd
 2868 007a 00       		.byte	0
 2869 007b 03       		.uleb128 0x3
 2870 007c 08       		.uleb128 0x8
 2871 007d 3A       		.uleb128 0x3a
 2872 007e 0B       		.uleb128 0xb
 2873 007f 3B       		.uleb128 0x3b
 2874 0080 05       		.uleb128 0x5
 2875 0081 49       		.uleb128 0x49
 2876 0082 13       		.uleb128 0x13
 2877 0083 38       		.uleb128 0x38
 2878 0084 0A       		.uleb128 0xa
 2879 0085 00       		.byte	0
 2880 0086 00       		.byte	0
 2881 0087 0C       		.uleb128 0xc
ARM GAS  /tmp/ccyhuBN5.s 			page 78


 2882 0088 0D       		.uleb128 0xd
 2883 0089 00       		.byte	0
 2884 008a 03       		.uleb128 0x3
 2885 008b 0E       		.uleb128 0xe
 2886 008c 3A       		.uleb128 0x3a
 2887 008d 0B       		.uleb128 0xb
 2888 008e 3B       		.uleb128 0x3b
 2889 008f 05       		.uleb128 0x5
 2890 0090 49       		.uleb128 0x49
 2891 0091 13       		.uleb128 0x13
 2892 0092 38       		.uleb128 0x38
 2893 0093 0A       		.uleb128 0xa
 2894 0094 00       		.byte	0
 2895 0095 00       		.byte	0
 2896 0096 0D       		.uleb128 0xd
 2897 0097 13       		.uleb128 0x13
 2898 0098 01       		.byte	0x1
 2899 0099 0B       		.uleb128 0xb
 2900 009a 0B       		.uleb128 0xb
 2901 009b 3A       		.uleb128 0x3a
 2902 009c 0B       		.uleb128 0xb
 2903 009d 3B       		.uleb128 0x3b
 2904 009e 0B       		.uleb128 0xb
 2905 009f 01       		.uleb128 0x1
 2906 00a0 13       		.uleb128 0x13
 2907 00a1 00       		.byte	0
 2908 00a2 00       		.byte	0
 2909 00a3 0E       		.uleb128 0xe
 2910 00a4 0D       		.uleb128 0xd
 2911 00a5 00       		.byte	0
 2912 00a6 03       		.uleb128 0x3
 2913 00a7 0E       		.uleb128 0xe
 2914 00a8 3A       		.uleb128 0x3a
 2915 00a9 0B       		.uleb128 0xb
 2916 00aa 3B       		.uleb128 0x3b
 2917 00ab 0B       		.uleb128 0xb
 2918 00ac 49       		.uleb128 0x49
 2919 00ad 13       		.uleb128 0x13
 2920 00ae 38       		.uleb128 0x38
 2921 00af 0A       		.uleb128 0xa
 2922 00b0 00       		.byte	0
 2923 00b1 00       		.byte	0
 2924 00b2 0F       		.uleb128 0xf
 2925 00b3 2E       		.uleb128 0x2e
 2926 00b4 01       		.byte	0x1
 2927 00b5 3F       		.uleb128 0x3f
 2928 00b6 0C       		.uleb128 0xc
 2929 00b7 03       		.uleb128 0x3
 2930 00b8 0E       		.uleb128 0xe
 2931 00b9 3A       		.uleb128 0x3a
 2932 00ba 0B       		.uleb128 0xb
 2933 00bb 3B       		.uleb128 0x3b
 2934 00bc 0B       		.uleb128 0xb
 2935 00bd 27       		.uleb128 0x27
 2936 00be 0C       		.uleb128 0xc
 2937 00bf 11       		.uleb128 0x11
 2938 00c0 01       		.uleb128 0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 79


 2939 00c1 12       		.uleb128 0x12
 2940 00c2 01       		.uleb128 0x1
 2941 00c3 40       		.uleb128 0x40
 2942 00c4 06       		.uleb128 0x6
 2943 00c5 9742     		.uleb128 0x2117
 2944 00c7 0C       		.uleb128 0xc
 2945 00c8 01       		.uleb128 0x1
 2946 00c9 13       		.uleb128 0x13
 2947 00ca 00       		.byte	0
 2948 00cb 00       		.byte	0
 2949 00cc 10       		.uleb128 0x10
 2950 00cd 05       		.uleb128 0x5
 2951 00ce 00       		.byte	0
 2952 00cf 03       		.uleb128 0x3
 2953 00d0 0E       		.uleb128 0xe
 2954 00d1 3A       		.uleb128 0x3a
 2955 00d2 0B       		.uleb128 0xb
 2956 00d3 3B       		.uleb128 0x3b
 2957 00d4 0B       		.uleb128 0xb
 2958 00d5 49       		.uleb128 0x49
 2959 00d6 13       		.uleb128 0x13
 2960 00d7 02       		.uleb128 0x2
 2961 00d8 06       		.uleb128 0x6
 2962 00d9 00       		.byte	0
 2963 00da 00       		.byte	0
 2964 00db 11       		.uleb128 0x11
 2965 00dc 898201   		.uleb128 0x4109
 2966 00df 01       		.byte	0x1
 2967 00e0 11       		.uleb128 0x11
 2968 00e1 01       		.uleb128 0x1
 2969 00e2 31       		.uleb128 0x31
 2970 00e3 13       		.uleb128 0x13
 2971 00e4 01       		.uleb128 0x1
 2972 00e5 13       		.uleb128 0x13
 2973 00e6 00       		.byte	0
 2974 00e7 00       		.byte	0
 2975 00e8 12       		.uleb128 0x12
 2976 00e9 8A8201   		.uleb128 0x410a
 2977 00ec 00       		.byte	0
 2978 00ed 02       		.uleb128 0x2
 2979 00ee 0A       		.uleb128 0xa
 2980 00ef 9142     		.uleb128 0x2111
 2981 00f1 0A       		.uleb128 0xa
 2982 00f2 00       		.byte	0
 2983 00f3 00       		.byte	0
 2984 00f4 13       		.uleb128 0x13
 2985 00f5 898201   		.uleb128 0x4109
 2986 00f8 01       		.byte	0x1
 2987 00f9 11       		.uleb128 0x11
 2988 00fa 01       		.uleb128 0x1
 2989 00fb 9542     		.uleb128 0x2115
 2990 00fd 0C       		.uleb128 0xc
 2991 00fe 31       		.uleb128 0x31
 2992 00ff 13       		.uleb128 0x13
 2993 0100 01       		.uleb128 0x1
 2994 0101 13       		.uleb128 0x13
 2995 0102 00       		.byte	0
ARM GAS  /tmp/ccyhuBN5.s 			page 80


 2996 0103 00       		.byte	0
 2997 0104 14       		.uleb128 0x14
 2998 0105 898201   		.uleb128 0x4109
 2999 0108 01       		.byte	0x1
 3000 0109 11       		.uleb128 0x11
 3001 010a 01       		.uleb128 0x1
 3002 010b 9542     		.uleb128 0x2115
 3003 010d 0C       		.uleb128 0xc
 3004 010e 31       		.uleb128 0x31
 3005 010f 13       		.uleb128 0x13
 3006 0110 00       		.byte	0
 3007 0111 00       		.byte	0
 3008 0112 15       		.uleb128 0x15
 3009 0113 0F       		.uleb128 0xf
 3010 0114 00       		.byte	0
 3011 0115 0B       		.uleb128 0xb
 3012 0116 0B       		.uleb128 0xb
 3013 0117 49       		.uleb128 0x49
 3014 0118 13       		.uleb128 0x13
 3015 0119 00       		.byte	0
 3016 011a 00       		.byte	0
 3017 011b 16       		.uleb128 0x16
 3018 011c 34       		.uleb128 0x34
 3019 011d 00       		.byte	0
 3020 011e 03       		.uleb128 0x3
 3021 011f 0E       		.uleb128 0xe
 3022 0120 3A       		.uleb128 0x3a
 3023 0121 0B       		.uleb128 0xb
 3024 0122 3B       		.uleb128 0x3b
 3025 0123 0B       		.uleb128 0xb
 3026 0124 49       		.uleb128 0x49
 3027 0125 13       		.uleb128 0x13
 3028 0126 02       		.uleb128 0x2
 3029 0127 06       		.uleb128 0x6
 3030 0128 00       		.byte	0
 3031 0129 00       		.byte	0
 3032 012a 17       		.uleb128 0x17
 3033 012b 34       		.uleb128 0x34
 3034 012c 00       		.byte	0
 3035 012d 03       		.uleb128 0x3
 3036 012e 0E       		.uleb128 0xe
 3037 012f 3A       		.uleb128 0x3a
 3038 0130 0B       		.uleb128 0xb
 3039 0131 3B       		.uleb128 0x3b
 3040 0132 0B       		.uleb128 0xb
 3041 0133 49       		.uleb128 0x49
 3042 0134 13       		.uleb128 0x13
 3043 0135 02       		.uleb128 0x2
 3044 0136 0A       		.uleb128 0xa
 3045 0137 00       		.byte	0
 3046 0138 00       		.byte	0
 3047 0139 18       		.uleb128 0x18
 3048 013a 898201   		.uleb128 0x4109
 3049 013d 01       		.byte	0x1
 3050 013e 11       		.uleb128 0x11
 3051 013f 01       		.uleb128 0x1
 3052 0140 31       		.uleb128 0x31
ARM GAS  /tmp/ccyhuBN5.s 			page 81


 3053 0141 13       		.uleb128 0x13
 3054 0142 00       		.byte	0
 3055 0143 00       		.byte	0
 3056 0144 19       		.uleb128 0x19
 3057 0145 2E       		.uleb128 0x2e
 3058 0146 01       		.byte	0x1
 3059 0147 3F       		.uleb128 0x3f
 3060 0148 0C       		.uleb128 0xc
 3061 0149 03       		.uleb128 0x3
 3062 014a 0E       		.uleb128 0xe
 3063 014b 3A       		.uleb128 0x3a
 3064 014c 0B       		.uleb128 0xb
 3065 014d 3B       		.uleb128 0x3b
 3066 014e 05       		.uleb128 0x5
 3067 014f 27       		.uleb128 0x27
 3068 0150 0C       		.uleb128 0xc
 3069 0151 11       		.uleb128 0x11
 3070 0152 01       		.uleb128 0x1
 3071 0153 12       		.uleb128 0x12
 3072 0154 01       		.uleb128 0x1
 3073 0155 40       		.uleb128 0x40
 3074 0156 0A       		.uleb128 0xa
 3075 0157 9742     		.uleb128 0x2117
 3076 0159 0C       		.uleb128 0xc
 3077 015a 01       		.uleb128 0x1
 3078 015b 13       		.uleb128 0x13
 3079 015c 00       		.byte	0
 3080 015d 00       		.byte	0
 3081 015e 1A       		.uleb128 0x1a
 3082 015f 05       		.uleb128 0x5
 3083 0160 00       		.byte	0
 3084 0161 03       		.uleb128 0x3
 3085 0162 0E       		.uleb128 0xe
 3086 0163 3A       		.uleb128 0x3a
 3087 0164 0B       		.uleb128 0xb
 3088 0165 3B       		.uleb128 0x3b
 3089 0166 05       		.uleb128 0x5
 3090 0167 49       		.uleb128 0x49
 3091 0168 13       		.uleb128 0x13
 3092 0169 02       		.uleb128 0x2
 3093 016a 0A       		.uleb128 0xa
 3094 016b 00       		.byte	0
 3095 016c 00       		.byte	0
 3096 016d 1B       		.uleb128 0x1b
 3097 016e 2E       		.uleb128 0x2e
 3098 016f 01       		.byte	0x1
 3099 0170 3F       		.uleb128 0x3f
 3100 0171 0C       		.uleb128 0xc
 3101 0172 03       		.uleb128 0x3
 3102 0173 0E       		.uleb128 0xe
 3103 0174 3A       		.uleb128 0x3a
 3104 0175 0B       		.uleb128 0xb
 3105 0176 3B       		.uleb128 0x3b
 3106 0177 05       		.uleb128 0x5
 3107 0178 27       		.uleb128 0x27
 3108 0179 0C       		.uleb128 0xc
 3109 017a 11       		.uleb128 0x11
ARM GAS  /tmp/ccyhuBN5.s 			page 82


 3110 017b 01       		.uleb128 0x1
 3111 017c 12       		.uleb128 0x12
 3112 017d 01       		.uleb128 0x1
 3113 017e 40       		.uleb128 0x40
 3114 017f 06       		.uleb128 0x6
 3115 0180 9742     		.uleb128 0x2117
 3116 0182 0C       		.uleb128 0xc
 3117 0183 01       		.uleb128 0x1
 3118 0184 13       		.uleb128 0x13
 3119 0185 00       		.byte	0
 3120 0186 00       		.byte	0
 3121 0187 1C       		.uleb128 0x1c
 3122 0188 05       		.uleb128 0x5
 3123 0189 00       		.byte	0
 3124 018a 03       		.uleb128 0x3
 3125 018b 0E       		.uleb128 0xe
 3126 018c 3A       		.uleb128 0x3a
 3127 018d 0B       		.uleb128 0xb
 3128 018e 3B       		.uleb128 0x3b
 3129 018f 05       		.uleb128 0x5
 3130 0190 49       		.uleb128 0x49
 3131 0191 13       		.uleb128 0x13
 3132 0192 02       		.uleb128 0x2
 3133 0193 06       		.uleb128 0x6
 3134 0194 00       		.byte	0
 3135 0195 00       		.byte	0
 3136 0196 1D       		.uleb128 0x1d
 3137 0197 34       		.uleb128 0x34
 3138 0198 00       		.byte	0
 3139 0199 03       		.uleb128 0x3
 3140 019a 0E       		.uleb128 0xe
 3141 019b 3A       		.uleb128 0x3a
 3142 019c 0B       		.uleb128 0xb
 3143 019d 3B       		.uleb128 0x3b
 3144 019e 05       		.uleb128 0x5
 3145 019f 49       		.uleb128 0x49
 3146 01a0 13       		.uleb128 0x13
 3147 01a1 02       		.uleb128 0x2
 3148 01a2 06       		.uleb128 0x6
 3149 01a3 00       		.byte	0
 3150 01a4 00       		.byte	0
 3151 01a5 1E       		.uleb128 0x1e
 3152 01a6 2E       		.uleb128 0x2e
 3153 01a7 01       		.byte	0x1
 3154 01a8 3F       		.uleb128 0x3f
 3155 01a9 0C       		.uleb128 0xc
 3156 01aa 03       		.uleb128 0x3
 3157 01ab 0E       		.uleb128 0xe
 3158 01ac 3A       		.uleb128 0x3a
 3159 01ad 0B       		.uleb128 0xb
 3160 01ae 3B       		.uleb128 0x3b
 3161 01af 05       		.uleb128 0x5
 3162 01b0 27       		.uleb128 0x27
 3163 01b1 0C       		.uleb128 0xc
 3164 01b2 49       		.uleb128 0x49
 3165 01b3 13       		.uleb128 0x13
 3166 01b4 11       		.uleb128 0x11
ARM GAS  /tmp/ccyhuBN5.s 			page 83


 3167 01b5 01       		.uleb128 0x1
 3168 01b6 12       		.uleb128 0x12
 3169 01b7 01       		.uleb128 0x1
 3170 01b8 40       		.uleb128 0x40
 3171 01b9 0A       		.uleb128 0xa
 3172 01ba 9742     		.uleb128 0x2117
 3173 01bc 0C       		.uleb128 0xc
 3174 01bd 01       		.uleb128 0x1
 3175 01be 13       		.uleb128 0x13
 3176 01bf 00       		.byte	0
 3177 01c0 00       		.byte	0
 3178 01c1 1F       		.uleb128 0x1f
 3179 01c2 34       		.uleb128 0x34
 3180 01c3 00       		.byte	0
 3181 01c4 03       		.uleb128 0x3
 3182 01c5 0E       		.uleb128 0xe
 3183 01c6 3A       		.uleb128 0x3a
 3184 01c7 0B       		.uleb128 0xb
 3185 01c8 3B       		.uleb128 0x3b
 3186 01c9 05       		.uleb128 0x5
 3187 01ca 49       		.uleb128 0x49
 3188 01cb 13       		.uleb128 0x13
 3189 01cc 02       		.uleb128 0x2
 3190 01cd 0A       		.uleb128 0xa
 3191 01ce 00       		.byte	0
 3192 01cf 00       		.byte	0
 3193 01d0 20       		.uleb128 0x20
 3194 01d1 2E       		.uleb128 0x2e
 3195 01d2 01       		.byte	0x1
 3196 01d3 3F       		.uleb128 0x3f
 3197 01d4 0C       		.uleb128 0xc
 3198 01d5 03       		.uleb128 0x3
 3199 01d6 0E       		.uleb128 0xe
 3200 01d7 3A       		.uleb128 0x3a
 3201 01d8 0B       		.uleb128 0xb
 3202 01d9 3B       		.uleb128 0x3b
 3203 01da 05       		.uleb128 0x5
 3204 01db 27       		.uleb128 0x27
 3205 01dc 0C       		.uleb128 0xc
 3206 01dd 49       		.uleb128 0x49
 3207 01de 13       		.uleb128 0x13
 3208 01df 11       		.uleb128 0x11
 3209 01e0 01       		.uleb128 0x1
 3210 01e1 12       		.uleb128 0x12
 3211 01e2 01       		.uleb128 0x1
 3212 01e3 40       		.uleb128 0x40
 3213 01e4 06       		.uleb128 0x6
 3214 01e5 9742     		.uleb128 0x2117
 3215 01e7 0C       		.uleb128 0xc
 3216 01e8 01       		.uleb128 0x1
 3217 01e9 13       		.uleb128 0x13
 3218 01ea 00       		.byte	0
 3219 01eb 00       		.byte	0
 3220 01ec 21       		.uleb128 0x21
 3221 01ed 34       		.uleb128 0x34
 3222 01ee 00       		.byte	0
 3223 01ef 03       		.uleb128 0x3
ARM GAS  /tmp/ccyhuBN5.s 			page 84


 3224 01f0 0E       		.uleb128 0xe
 3225 01f1 3A       		.uleb128 0x3a
 3226 01f2 0B       		.uleb128 0xb
 3227 01f3 3B       		.uleb128 0x3b
 3228 01f4 05       		.uleb128 0x5
 3229 01f5 49       		.uleb128 0x49
 3230 01f6 13       		.uleb128 0x13
 3231 01f7 00       		.byte	0
 3232 01f8 00       		.byte	0
 3233 01f9 22       		.uleb128 0x22
 3234 01fa 34       		.uleb128 0x34
 3235 01fb 00       		.byte	0
 3236 01fc 03       		.uleb128 0x3
 3237 01fd 0E       		.uleb128 0xe
 3238 01fe 3A       		.uleb128 0x3a
 3239 01ff 0B       		.uleb128 0xb
 3240 0200 3B       		.uleb128 0x3b
 3241 0201 05       		.uleb128 0x5
 3242 0202 49       		.uleb128 0x49
 3243 0203 13       		.uleb128 0x13
 3244 0204 3F       		.uleb128 0x3f
 3245 0205 0C       		.uleb128 0xc
 3246 0206 3C       		.uleb128 0x3c
 3247 0207 0C       		.uleb128 0xc
 3248 0208 00       		.byte	0
 3249 0209 00       		.byte	0
 3250 020a 23       		.uleb128 0x23
 3251 020b 2E       		.uleb128 0x2e
 3252 020c 01       		.byte	0x1
 3253 020d 3F       		.uleb128 0x3f
 3254 020e 0C       		.uleb128 0xc
 3255 020f 03       		.uleb128 0x3
 3256 0210 0E       		.uleb128 0xe
 3257 0211 3A       		.uleb128 0x3a
 3258 0212 0B       		.uleb128 0xb
 3259 0213 3B       		.uleb128 0x3b
 3260 0214 05       		.uleb128 0x5
 3261 0215 27       		.uleb128 0x27
 3262 0216 0C       		.uleb128 0xc
 3263 0217 3C       		.uleb128 0x3c
 3264 0218 0C       		.uleb128 0xc
 3265 0219 01       		.uleb128 0x1
 3266 021a 13       		.uleb128 0x13
 3267 021b 00       		.byte	0
 3268 021c 00       		.byte	0
 3269 021d 24       		.uleb128 0x24
 3270 021e 05       		.uleb128 0x5
 3271 021f 00       		.byte	0
 3272 0220 49       		.uleb128 0x49
 3273 0221 13       		.uleb128 0x13
 3274 0222 00       		.byte	0
 3275 0223 00       		.byte	0
 3276 0224 00       		.byte	0
 3277              		.section	.debug_loc,"",%progbits
 3278              	.Ldebug_loc0:
 3279              	.LLST0:
 3280 0000 00000000 		.4byte	.LFB110
ARM GAS  /tmp/ccyhuBN5.s 			page 85


 3281 0004 02000000 		.4byte	.LCFI0
 3282 0008 0200     		.2byte	0x2
 3283 000a 7D       		.byte	0x7d
 3284 000b 00       		.sleb128 0
 3285 000c 02000000 		.4byte	.LCFI0
 3286 0010 A8000000 		.4byte	.LFE110
 3287 0014 0200     		.2byte	0x2
 3288 0016 7D       		.byte	0x7d
 3289 0017 08       		.sleb128 8
 3290 0018 00000000 		.4byte	0
 3291 001c 00000000 		.4byte	0
 3292              	.LLST1:
 3293 0020 00000000 		.4byte	.LVL0
 3294 0024 0A000000 		.4byte	.LVL1
 3295 0028 0100     		.2byte	0x1
 3296 002a 50       		.byte	0x50
 3297 002b 0A000000 		.4byte	.LVL1
 3298 002f 14000000 		.4byte	.LVL3
 3299 0033 0400     		.2byte	0x4
 3300 0035 F3       		.byte	0xf3
 3301 0036 01       		.uleb128 0x1
 3302 0037 50       		.byte	0x50
 3303 0038 9F       		.byte	0x9f
 3304 0039 14000000 		.4byte	.LVL3
 3305 003d 1E000000 		.4byte	.LVL4
 3306 0041 0100     		.2byte	0x1
 3307 0043 50       		.byte	0x50
 3308 0044 1E000000 		.4byte	.LVL4
 3309 0048 2A000000 		.4byte	.LVL6
 3310 004c 0400     		.2byte	0x4
 3311 004e F3       		.byte	0xf3
 3312 004f 01       		.uleb128 0x1
 3313 0050 50       		.byte	0x50
 3314 0051 9F       		.byte	0x9f
 3315 0052 2A000000 		.4byte	.LVL6
 3316 0056 34000000 		.4byte	.LVL7
 3317 005a 0100     		.2byte	0x1
 3318 005c 50       		.byte	0x50
 3319 005d 34000000 		.4byte	.LVL7
 3320 0061 48000000 		.4byte	.LVL9
 3321 0065 0400     		.2byte	0x4
 3322 0067 F3       		.byte	0xf3
 3323 0068 01       		.uleb128 0x1
 3324 0069 50       		.byte	0x50
 3325 006a 9F       		.byte	0x9f
 3326 006b 48000000 		.4byte	.LVL9
 3327 006f 52000000 		.4byte	.LVL10
 3328 0073 0100     		.2byte	0x1
 3329 0075 50       		.byte	0x50
 3330 0076 52000000 		.4byte	.LVL10
 3331 007a 5E000000 		.4byte	.LVL12
 3332 007e 0400     		.2byte	0x4
 3333 0080 F3       		.byte	0xf3
 3334 0081 01       		.uleb128 0x1
 3335 0082 50       		.byte	0x50
 3336 0083 9F       		.byte	0x9f
 3337 0084 5E000000 		.4byte	.LVL12
ARM GAS  /tmp/ccyhuBN5.s 			page 86


 3338 0088 68000000 		.4byte	.LVL13
 3339 008c 0100     		.2byte	0x1
 3340 008e 50       		.byte	0x50
 3341 008f 68000000 		.4byte	.LVL13
 3342 0093 74000000 		.4byte	.LVL15
 3343 0097 0400     		.2byte	0x4
 3344 0099 F3       		.byte	0xf3
 3345 009a 01       		.uleb128 0x1
 3346 009b 50       		.byte	0x50
 3347 009c 9F       		.byte	0x9f
 3348 009d 74000000 		.4byte	.LVL15
 3349 00a1 7C000000 		.4byte	.LVL16
 3350 00a5 0100     		.2byte	0x1
 3351 00a7 50       		.byte	0x50
 3352 00a8 7C000000 		.4byte	.LVL16
 3353 00ac 8E000000 		.4byte	.LVL18
 3354 00b0 0400     		.2byte	0x4
 3355 00b2 F3       		.byte	0xf3
 3356 00b3 01       		.uleb128 0x1
 3357 00b4 50       		.byte	0x50
 3358 00b5 9F       		.byte	0x9f
 3359 00b6 8E000000 		.4byte	.LVL18
 3360 00ba A8000000 		.4byte	.LFE110
 3361 00be 0100     		.2byte	0x1
 3362 00c0 50       		.byte	0x50
 3363 00c1 00000000 		.4byte	0
 3364 00c5 00000000 		.4byte	0
 3365              	.LLST2:
 3366 00c9 00000000 		.4byte	.LFB111
 3367 00cd 04000000 		.4byte	.LCFI1
 3368 00d1 0200     		.2byte	0x2
 3369 00d3 7D       		.byte	0x7d
 3370 00d4 00       		.sleb128 0
 3371 00d5 04000000 		.4byte	.LCFI1
 3372 00d9 40000000 		.4byte	.LCFI2
 3373 00dd 0200     		.2byte	0x2
 3374 00df 7D       		.byte	0x7d
 3375 00e0 0C       		.sleb128 12
 3376 00e1 40000000 		.4byte	.LCFI2
 3377 00e5 B8000000 		.4byte	.LFE111
 3378 00e9 0200     		.2byte	0x2
 3379 00eb 7D       		.byte	0x7d
 3380 00ec 20       		.sleb128 32
 3381 00ed 00000000 		.4byte	0
 3382 00f1 00000000 		.4byte	0
 3383              	.LLST3:
 3384 00f5 00000000 		.4byte	.LVL19
 3385 00f9 0C000000 		.4byte	.LVL20
 3386 00fd 0100     		.2byte	0x1
 3387 00ff 50       		.byte	0x50
 3388 0100 0C000000 		.4byte	.LVL20
 3389 0104 B8000000 		.4byte	.LFE111
 3390 0108 0100     		.2byte	0x1
 3391 010a 54       		.byte	0x54
 3392 010b 00000000 		.4byte	0
 3393 010f 00000000 		.4byte	0
 3394              	.LLST4:
ARM GAS  /tmp/ccyhuBN5.s 			page 87


 3395 0113 00000000 		.4byte	.LVL19
 3396 0117 10000000 		.4byte	.LVL21
 3397 011b 0100     		.2byte	0x1
 3398 011d 51       		.byte	0x51
 3399 011e 10000000 		.4byte	.LVL21
 3400 0122 B8000000 		.4byte	.LFE111
 3401 0126 0100     		.2byte	0x1
 3402 0128 55       		.byte	0x55
 3403 0129 00000000 		.4byte	0
 3404 012d 00000000 		.4byte	0
 3405              	.LLST5:
 3406 0131 00000000 		.4byte	.LVL19
 3407 0135 0C000000 		.4byte	.LVL20
 3408 0139 0200     		.2byte	0x2
 3409 013b 30       		.byte	0x30
 3410 013c 9F       		.byte	0x9f
 3411 013d 0C000000 		.4byte	.LVL20
 3412 0141 10000000 		.4byte	.LVL21
 3413 0145 0100     		.2byte	0x1
 3414 0147 50       		.byte	0x50
 3415 0148 10000000 		.4byte	.LVL21
 3416 014c 12000000 		.4byte	.LVL22
 3417 0150 0C00     		.2byte	0xc
 3418 0152 75       		.byte	0x75
 3419 0153 06       		.sleb128 6
 3420 0154 94       		.byte	0x94
 3421 0155 02       		.byte	0x2
 3422 0156 0A       		.byte	0xa
 3423 0157 FFFF     		.2byte	0xffff
 3424 0159 1A       		.byte	0x1a
 3425 015a 71       		.byte	0x71
 3426 015b 00       		.sleb128 0
 3427 015c 21       		.byte	0x21
 3428 015d 9F       		.byte	0x9f
 3429 015e 12000000 		.4byte	.LVL22
 3430 0162 16000000 		.4byte	.LVL23
 3431 0166 0100     		.2byte	0x1
 3432 0168 51       		.byte	0x51
 3433 0169 16000000 		.4byte	.LVL23
 3434 016d 26000000 		.4byte	.LVL24
 3435 0171 0700     		.2byte	0x7
 3436 0173 73       		.byte	0x73
 3437 0174 00       		.sleb128 0
 3438 0175 0A       		.byte	0xa
 3439 0176 FFFF     		.2byte	0xffff
 3440 0178 1A       		.byte	0x1a
 3441 0179 9F       		.byte	0x9f
 3442 017a 26000000 		.4byte	.LVL24
 3443 017e 32000000 		.4byte	.LVL25
 3444 0182 1600     		.2byte	0x16
 3445 0184 75       		.byte	0x75
 3446 0185 08       		.sleb128 8
 3447 0186 94       		.byte	0x94
 3448 0187 02       		.byte	0x2
 3449 0188 75       		.byte	0x75
 3450 0189 04       		.sleb128 4
 3451 018a 94       		.byte	0x94
ARM GAS  /tmp/ccyhuBN5.s 			page 88


 3452 018b 02       		.byte	0x2
 3453 018c 21       		.byte	0x21
 3454 018d 75       		.byte	0x75
 3455 018e 0A       		.sleb128 10
 3456 018f 94       		.byte	0x94
 3457 0190 02       		.byte	0x2
 3458 0191 21       		.byte	0x21
 3459 0192 0A       		.byte	0xa
 3460 0193 FFFF     		.2byte	0xffff
 3461 0195 1A       		.byte	0x1a
 3462 0196 73       		.byte	0x73
 3463 0197 00       		.sleb128 0
 3464 0198 21       		.byte	0x21
 3465 0199 9F       		.byte	0x9f
 3466 019a 3A000000 		.4byte	.LVL26
 3467 019e 3E000000 		.4byte	.LVL27
 3468 01a2 0100     		.2byte	0x1
 3469 01a4 50       		.byte	0x50
 3470 01a5 3E000000 		.4byte	.LVL27
 3471 01a9 42000000 		.4byte	.LVL28
 3472 01ad 0C00     		.2byte	0xc
 3473 01af 75       		.byte	0x75
 3474 01b0 0C       		.sleb128 12
 3475 01b1 94       		.byte	0x94
 3476 01b2 02       		.byte	0x2
 3477 01b3 0A       		.byte	0xa
 3478 01b4 FFFF     		.2byte	0xffff
 3479 01b6 1A       		.byte	0x1a
 3480 01b7 71       		.byte	0x71
 3481 01b8 00       		.sleb128 0
 3482 01b9 21       		.byte	0x21
 3483 01ba 9F       		.byte	0x9f
 3484 01bb 42000000 		.4byte	.LVL28
 3485 01bf 49000000 		.4byte	.LVL29-1
 3486 01c3 0100     		.2byte	0x1
 3487 01c5 51       		.byte	0x51
 3488 01c6 82000000 		.4byte	.LVL35
 3489 01ca B8000000 		.4byte	.LFE111
 3490 01ce 0100     		.2byte	0x1
 3491 01d0 52       		.byte	0x52
 3492 01d1 00000000 		.4byte	0
 3493 01d5 00000000 		.4byte	0
 3494              	.LLST6:
 3495 01d9 00000000 		.4byte	.LVL19
 3496 01dd 5A000000 		.4byte	.LVL30
 3497 01e1 0200     		.2byte	0x2
 3498 01e3 30       		.byte	0x30
 3499 01e4 9F       		.byte	0x9f
 3500 01e5 5A000000 		.4byte	.LVL30
 3501 01e9 5C000000 		.4byte	.LVL31
 3502 01ed 0100     		.2byte	0x1
 3503 01ef 53       		.byte	0x53
 3504 01f0 5C000000 		.4byte	.LVL31
 3505 01f4 5E000000 		.4byte	.LVL32
 3506 01f8 0200     		.2byte	0x2
 3507 01fa 30       		.byte	0x30
 3508 01fb 9F       		.byte	0x9f
ARM GAS  /tmp/ccyhuBN5.s 			page 89


 3509 01fc 5E000000 		.4byte	.LVL32
 3510 0200 6E000000 		.4byte	.LVL33
 3511 0204 0100     		.2byte	0x1
 3512 0206 53       		.byte	0x53
 3513 0207 00000000 		.4byte	0
 3514 020b 00000000 		.4byte	0
 3515              	.LLST7:
 3516 020f 00000000 		.4byte	.LVL19
 3517 0213 7A000000 		.4byte	.LVL34
 3518 0217 0200     		.2byte	0x2
 3519 0219 30       		.byte	0x30
 3520 021a 9F       		.byte	0x9f
 3521 021b 7A000000 		.4byte	.LVL34
 3522 021f 88000000 		.4byte	.LVL36
 3523 0223 0100     		.2byte	0x1
 3524 0225 51       		.byte	0x51
 3525 0226 00000000 		.4byte	0
 3526 022a 00000000 		.4byte	0
 3527              	.LLST8:
 3528 022e 00000000 		.4byte	.LVL19
 3529 0232 88000000 		.4byte	.LVL36
 3530 0236 0200     		.2byte	0x2
 3531 0238 30       		.byte	0x30
 3532 0239 9F       		.byte	0x9f
 3533 023a 88000000 		.4byte	.LVL36
 3534 023e 92000000 		.4byte	.LVL37
 3535 0242 0100     		.2byte	0x1
 3536 0244 51       		.byte	0x51
 3537 0245 9E000000 		.4byte	.LVL38
 3538 0249 A0000000 		.4byte	.LVL39
 3539 024d 0100     		.2byte	0x1
 3540 024f 51       		.byte	0x51
 3541 0250 00000000 		.4byte	0
 3542 0254 00000000 		.4byte	0
 3543              	.LLST9:
 3544 0258 00000000 		.4byte	.LFB113
 3545 025c 0A000000 		.4byte	.LCFI3
 3546 0260 0200     		.2byte	0x2
 3547 0262 7D       		.byte	0x7d
 3548 0263 00       		.sleb128 0
 3549 0264 0A000000 		.4byte	.LCFI3
 3550 0268 20000000 		.4byte	.LFE113
 3551 026c 0200     		.2byte	0x2
 3552 026e 7D       		.byte	0x7d
 3553 026f 08       		.sleb128 8
 3554 0270 00000000 		.4byte	0
 3555 0274 00000000 		.4byte	0
 3556              	.LLST10:
 3557 0278 00000000 		.4byte	.LVL42
 3558 027c 14000000 		.4byte	.LVL45
 3559 0280 0100     		.2byte	0x1
 3560 0282 51       		.byte	0x51
 3561 0283 14000000 		.4byte	.LVL45
 3562 0287 20000000 		.4byte	.LFE113
 3563 028b 0400     		.2byte	0x4
 3564 028d F3       		.byte	0xf3
 3565 028e 01       		.uleb128 0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 90


 3566 028f 51       		.byte	0x51
 3567 0290 9F       		.byte	0x9f
 3568 0291 00000000 		.4byte	0
 3569 0295 00000000 		.4byte	0
 3570              	.LLST11:
 3571 0299 00000000 		.4byte	.LVL42
 3572 029d 04000000 		.4byte	.LVL43
 3573 02a1 0200     		.2byte	0x2
 3574 02a3 30       		.byte	0x30
 3575 02a4 9F       		.byte	0x9f
 3576 02a5 04000000 		.4byte	.LVL43
 3577 02a9 08000000 		.4byte	.LVL44
 3578 02ad 0100     		.2byte	0x1
 3579 02af 53       		.byte	0x53
 3580 02b0 08000000 		.4byte	.LVL44
 3581 02b4 14000000 		.4byte	.LVL45
 3582 02b8 1B00     		.2byte	0x1b
 3583 02ba 71       		.byte	0x71
 3584 02bb 02       		.sleb128 2
 3585 02bc 94       		.byte	0x94
 3586 02bd 02       		.byte	0x2
 3587 02be 71       		.byte	0x71
 3588 02bf 00       		.sleb128 0
 3589 02c0 94       		.byte	0x94
 3590 02c1 02       		.byte	0x2
 3591 02c2 21       		.byte	0x21
 3592 02c3 71       		.byte	0x71
 3593 02c4 04       		.sleb128 4
 3594 02c5 94       		.byte	0x94
 3595 02c6 02       		.byte	0x2
 3596 02c7 21       		.byte	0x21
 3597 02c8 71       		.byte	0x71
 3598 02c9 06       		.sleb128 6
 3599 02ca 94       		.byte	0x94
 3600 02cb 02       		.byte	0x2
 3601 02cc 21       		.byte	0x21
 3602 02cd 0A       		.byte	0xa
 3603 02ce FFFF     		.2byte	0xffff
 3604 02d0 1A       		.byte	0x1a
 3605 02d1 72       		.byte	0x72
 3606 02d2 00       		.sleb128 0
 3607 02d3 21       		.byte	0x21
 3608 02d4 9F       		.byte	0x9f
 3609 02d5 14000000 		.4byte	.LVL45
 3610 02d9 20000000 		.4byte	.LFE113
 3611 02dd 2500     		.2byte	0x25
 3612 02df F3       		.byte	0xf3
 3613 02e0 01       		.uleb128 0x1
 3614 02e1 51       		.byte	0x51
 3615 02e2 23       		.byte	0x23
 3616 02e3 02       		.uleb128 0x2
 3617 02e4 94       		.byte	0x94
 3618 02e5 02       		.byte	0x2
 3619 02e6 F3       		.byte	0xf3
 3620 02e7 01       		.uleb128 0x1
 3621 02e8 51       		.byte	0x51
 3622 02e9 94       		.byte	0x94
ARM GAS  /tmp/ccyhuBN5.s 			page 91


 3623 02ea 02       		.byte	0x2
 3624 02eb 21       		.byte	0x21
 3625 02ec F3       		.byte	0xf3
 3626 02ed 01       		.uleb128 0x1
 3627 02ee 51       		.byte	0x51
 3628 02ef 23       		.byte	0x23
 3629 02f0 04       		.uleb128 0x4
 3630 02f1 94       		.byte	0x94
 3631 02f2 02       		.byte	0x2
 3632 02f3 21       		.byte	0x21
 3633 02f4 F3       		.byte	0xf3
 3634 02f5 01       		.uleb128 0x1
 3635 02f6 51       		.byte	0x51
 3636 02f7 23       		.byte	0x23
 3637 02f8 06       		.uleb128 0x6
 3638 02f9 94       		.byte	0x94
 3639 02fa 02       		.byte	0x2
 3640 02fb 21       		.byte	0x21
 3641 02fc 0A       		.byte	0xa
 3642 02fd FFFF     		.2byte	0xffff
 3643 02ff 1A       		.byte	0x1a
 3644 0300 72       		.byte	0x72
 3645 0301 00       		.sleb128 0
 3646 0302 21       		.byte	0x21
 3647 0303 9F       		.byte	0x9f
 3648 0304 00000000 		.4byte	0
 3649 0308 00000000 		.4byte	0
 3650              	.LLST12:
 3651 030c 00000000 		.4byte	.LVL47
 3652 0310 06000000 		.4byte	.LVL48
 3653 0314 0100     		.2byte	0x1
 3654 0316 51       		.byte	0x51
 3655 0317 06000000 		.4byte	.LVL48
 3656 031b 0C000000 		.4byte	.LVL49
 3657 031f 0400     		.2byte	0x4
 3658 0321 F3       		.byte	0xf3
 3659 0322 01       		.uleb128 0x1
 3660 0323 51       		.byte	0x51
 3661 0324 9F       		.byte	0x9f
 3662 0325 0C000000 		.4byte	.LVL49
 3663 0329 10000000 		.4byte	.LVL50
 3664 032d 0100     		.2byte	0x1
 3665 032f 51       		.byte	0x51
 3666 0330 10000000 		.4byte	.LVL50
 3667 0334 18000000 		.4byte	.LFE115
 3668 0338 0400     		.2byte	0x4
 3669 033a F3       		.byte	0xf3
 3670 033b 01       		.uleb128 0x1
 3671 033c 51       		.byte	0x51
 3672 033d 9F       		.byte	0x9f
 3673 033e 00000000 		.4byte	0
 3674 0342 00000000 		.4byte	0
 3675              	.LLST13:
 3676 0346 00000000 		.4byte	.LVL51
 3677 034a 0E000000 		.4byte	.LVL52
 3678 034e 0100     		.2byte	0x1
 3679 0350 51       		.byte	0x51
ARM GAS  /tmp/ccyhuBN5.s 			page 92


 3680 0351 0E000000 		.4byte	.LVL52
 3681 0355 12000000 		.4byte	.LFE116
 3682 0359 0400     		.2byte	0x4
 3683 035b F3       		.byte	0xf3
 3684 035c 01       		.uleb128 0x1
 3685 035d 51       		.byte	0x51
 3686 035e 9F       		.byte	0x9f
 3687 035f 00000000 		.4byte	0
 3688 0363 00000000 		.4byte	0
 3689              	.LLST14:
 3690 0367 00000000 		.4byte	.LVL53
 3691 036b 0C000000 		.4byte	.LVL54
 3692 036f 0100     		.2byte	0x1
 3693 0371 51       		.byte	0x51
 3694 0372 0C000000 		.4byte	.LVL54
 3695 0376 10000000 		.4byte	.LVL55
 3696 037a 0400     		.2byte	0x4
 3697 037c F3       		.byte	0xf3
 3698 037d 01       		.uleb128 0x1
 3699 037e 51       		.byte	0x51
 3700 037f 9F       		.byte	0x9f
 3701 0380 10000000 		.4byte	.LVL55
 3702 0384 12000000 		.4byte	.LVL56
 3703 0388 0100     		.2byte	0x1
 3704 038a 51       		.byte	0x51
 3705 038b 12000000 		.4byte	.LVL56
 3706 038f 18000000 		.4byte	.LFE117
 3707 0393 0400     		.2byte	0x4
 3708 0395 F3       		.byte	0xf3
 3709 0396 01       		.uleb128 0x1
 3710 0397 51       		.byte	0x51
 3711 0398 9F       		.byte	0x9f
 3712 0399 00000000 		.4byte	0
 3713 039d 00000000 		.4byte	0
 3714              	.LLST15:
 3715 03a1 00000000 		.4byte	.LVL57
 3716 03a5 06000000 		.4byte	.LVL58
 3717 03a9 0100     		.2byte	0x1
 3718 03ab 51       		.byte	0x51
 3719 03ac 06000000 		.4byte	.LVL58
 3720 03b0 0C000000 		.4byte	.LVL59
 3721 03b4 0400     		.2byte	0x4
 3722 03b6 F3       		.byte	0xf3
 3723 03b7 01       		.uleb128 0x1
 3724 03b8 51       		.byte	0x51
 3725 03b9 9F       		.byte	0x9f
 3726 03ba 0C000000 		.4byte	.LVL59
 3727 03be 10000000 		.4byte	.LVL60
 3728 03c2 0100     		.2byte	0x1
 3729 03c4 51       		.byte	0x51
 3730 03c5 10000000 		.4byte	.LVL60
 3731 03c9 18000000 		.4byte	.LFE118
 3732 03cd 0400     		.2byte	0x4
 3733 03cf F3       		.byte	0xf3
 3734 03d0 01       		.uleb128 0x1
 3735 03d1 51       		.byte	0x51
 3736 03d2 9F       		.byte	0x9f
ARM GAS  /tmp/ccyhuBN5.s 			page 93


 3737 03d3 00000000 		.4byte	0
 3738 03d7 00000000 		.4byte	0
 3739              	.LLST16:
 3740 03db 00000000 		.4byte	.LVL61
 3741 03df 02000000 		.4byte	.LVL62
 3742 03e3 0100     		.2byte	0x1
 3743 03e5 51       		.byte	0x51
 3744 03e6 02000000 		.4byte	.LVL62
 3745 03ea 08000000 		.4byte	.LFE119
 3746 03ee 0400     		.2byte	0x4
 3747 03f0 F3       		.byte	0xf3
 3748 03f1 01       		.uleb128 0x1
 3749 03f2 51       		.byte	0x51
 3750 03f3 9F       		.byte	0x9f
 3751 03f4 00000000 		.4byte	0
 3752 03f8 00000000 		.4byte	0
 3753              	.LLST17:
 3754 03fc 00000000 		.4byte	.LVL63
 3755 0400 02000000 		.4byte	.LVL64
 3756 0404 0100     		.2byte	0x1
 3757 0406 50       		.byte	0x50
 3758 0407 02000000 		.4byte	.LVL64
 3759 040b 08000000 		.4byte	.LFE120
 3760 040f 0400     		.2byte	0x4
 3761 0411 F3       		.byte	0xf3
 3762 0412 01       		.uleb128 0x1
 3763 0413 50       		.byte	0x50
 3764 0414 9F       		.byte	0x9f
 3765 0415 00000000 		.4byte	0
 3766 0419 00000000 		.4byte	0
 3767              	.LLST18:
 3768 041d 00000000 		.4byte	.LVL65
 3769 0421 12000000 		.4byte	.LVL66
 3770 0425 0100     		.2byte	0x1
 3771 0427 51       		.byte	0x51
 3772 0428 12000000 		.4byte	.LVL66
 3773 042c 16000000 		.4byte	.LFE121
 3774 0430 0400     		.2byte	0x4
 3775 0432 F3       		.byte	0xf3
 3776 0433 01       		.uleb128 0x1
 3777 0434 51       		.byte	0x51
 3778 0435 9F       		.byte	0x9f
 3779 0436 00000000 		.4byte	0
 3780 043a 00000000 		.4byte	0
 3781              	.LLST19:
 3782 043e 00000000 		.4byte	.LVL67
 3783 0442 06000000 		.4byte	.LVL68
 3784 0446 0100     		.2byte	0x1
 3785 0448 51       		.byte	0x51
 3786 0449 06000000 		.4byte	.LVL68
 3787 044d 0C000000 		.4byte	.LVL69
 3788 0451 0400     		.2byte	0x4
 3789 0453 F3       		.byte	0xf3
 3790 0454 01       		.uleb128 0x1
 3791 0455 51       		.byte	0x51
 3792 0456 9F       		.byte	0x9f
 3793 0457 0C000000 		.4byte	.LVL69
ARM GAS  /tmp/ccyhuBN5.s 			page 94


 3794 045b 10000000 		.4byte	.LVL70
 3795 045f 0100     		.2byte	0x1
 3796 0461 51       		.byte	0x51
 3797 0462 10000000 		.4byte	.LVL70
 3798 0466 18000000 		.4byte	.LFE122
 3799 046a 0400     		.2byte	0x4
 3800 046c F3       		.byte	0xf3
 3801 046d 01       		.uleb128 0x1
 3802 046e 51       		.byte	0x51
 3803 046f 9F       		.byte	0x9f
 3804 0470 00000000 		.4byte	0
 3805 0474 00000000 		.4byte	0
 3806              	.LLST20:
 3807 0478 00000000 		.4byte	.LVL71
 3808 047c 12000000 		.4byte	.LVL72
 3809 0480 0100     		.2byte	0x1
 3810 0482 51       		.byte	0x51
 3811 0483 12000000 		.4byte	.LVL72
 3812 0487 16000000 		.4byte	.LFE123
 3813 048b 0400     		.2byte	0x4
 3814 048d F3       		.byte	0xf3
 3815 048e 01       		.uleb128 0x1
 3816 048f 51       		.byte	0x51
 3817 0490 9F       		.byte	0x9f
 3818 0491 00000000 		.4byte	0
 3819 0495 00000000 		.4byte	0
 3820              	.LLST21:
 3821 0499 00000000 		.4byte	.LVL73
 3822 049d 12000000 		.4byte	.LVL74
 3823 04a1 0100     		.2byte	0x1
 3824 04a3 51       		.byte	0x51
 3825 04a4 12000000 		.4byte	.LVL74
 3826 04a8 16000000 		.4byte	.LFE124
 3827 04ac 0400     		.2byte	0x4
 3828 04ae F3       		.byte	0xf3
 3829 04af 01       		.uleb128 0x1
 3830 04b0 51       		.byte	0x51
 3831 04b1 9F       		.byte	0x9f
 3832 04b2 00000000 		.4byte	0
 3833 04b6 00000000 		.4byte	0
 3834              	.LLST22:
 3835 04ba 00000000 		.4byte	.LVL75
 3836 04be 06000000 		.4byte	.LVL76
 3837 04c2 0100     		.2byte	0x1
 3838 04c4 51       		.byte	0x51
 3839 04c5 06000000 		.4byte	.LVL76
 3840 04c9 0C000000 		.4byte	.LVL77
 3841 04cd 0400     		.2byte	0x4
 3842 04cf F3       		.byte	0xf3
 3843 04d0 01       		.uleb128 0x1
 3844 04d1 51       		.byte	0x51
 3845 04d2 9F       		.byte	0x9f
 3846 04d3 0C000000 		.4byte	.LVL77
 3847 04d7 10000000 		.4byte	.LVL78
 3848 04db 0100     		.2byte	0x1
 3849 04dd 51       		.byte	0x51
 3850 04de 10000000 		.4byte	.LVL78
ARM GAS  /tmp/ccyhuBN5.s 			page 95


 3851 04e2 18000000 		.4byte	.LFE125
 3852 04e6 0400     		.2byte	0x4
 3853 04e8 F3       		.byte	0xf3
 3854 04e9 01       		.uleb128 0x1
 3855 04ea 51       		.byte	0x51
 3856 04eb 9F       		.byte	0x9f
 3857 04ec 00000000 		.4byte	0
 3858 04f0 00000000 		.4byte	0
 3859              	.LLST23:
 3860 04f4 00000000 		.4byte	.LVL80
 3861 04f8 06000000 		.4byte	.LVL81
 3862 04fc 0100     		.2byte	0x1
 3863 04fe 51       		.byte	0x51
 3864 04ff 06000000 		.4byte	.LVL81
 3865 0503 0C000000 		.4byte	.LVL82
 3866 0507 0400     		.2byte	0x4
 3867 0509 F3       		.byte	0xf3
 3868 050a 01       		.uleb128 0x1
 3869 050b 51       		.byte	0x51
 3870 050c 9F       		.byte	0x9f
 3871 050d 0C000000 		.4byte	.LVL82
 3872 0511 10000000 		.4byte	.LVL83
 3873 0515 0100     		.2byte	0x1
 3874 0517 51       		.byte	0x51
 3875 0518 10000000 		.4byte	.LVL83
 3876 051c 18000000 		.4byte	.LFE127
 3877 0520 0400     		.2byte	0x4
 3878 0522 F3       		.byte	0xf3
 3879 0523 01       		.uleb128 0x1
 3880 0524 51       		.byte	0x51
 3881 0525 9F       		.byte	0x9f
 3882 0526 00000000 		.4byte	0
 3883 052a 00000000 		.4byte	0
 3884              	.LLST24:
 3885 052e 00000000 		.4byte	.LVL84
 3886 0532 0E000000 		.4byte	.LVL85
 3887 0536 0100     		.2byte	0x1
 3888 0538 51       		.byte	0x51
 3889 0539 0E000000 		.4byte	.LVL85
 3890 053d 12000000 		.4byte	.LFE128
 3891 0541 0400     		.2byte	0x4
 3892 0543 F3       		.byte	0xf3
 3893 0544 01       		.uleb128 0x1
 3894 0545 51       		.byte	0x51
 3895 0546 9F       		.byte	0x9f
 3896 0547 00000000 		.4byte	0
 3897 054b 00000000 		.4byte	0
 3898              	.LLST25:
 3899 054f 00000000 		.4byte	.LVL86
 3900 0553 06000000 		.4byte	.LVL87
 3901 0557 0100     		.2byte	0x1
 3902 0559 51       		.byte	0x51
 3903 055a 06000000 		.4byte	.LVL87
 3904 055e 0C000000 		.4byte	.LVL88
 3905 0562 0400     		.2byte	0x4
 3906 0564 F3       		.byte	0xf3
 3907 0565 01       		.uleb128 0x1
ARM GAS  /tmp/ccyhuBN5.s 			page 96


 3908 0566 51       		.byte	0x51
 3909 0567 9F       		.byte	0x9f
 3910 0568 0C000000 		.4byte	.LVL88
 3911 056c 10000000 		.4byte	.LVL89
 3912 0570 0100     		.2byte	0x1
 3913 0572 51       		.byte	0x51
 3914 0573 10000000 		.4byte	.LVL89
 3915 0577 18000000 		.4byte	.LFE129
 3916 057b 0400     		.2byte	0x4
 3917 057d F3       		.byte	0xf3
 3918 057e 01       		.uleb128 0x1
 3919 057f 51       		.byte	0x51
 3920 0580 9F       		.byte	0x9f
 3921 0581 00000000 		.4byte	0
 3922 0585 00000000 		.4byte	0
 3923              	.LLST26:
 3924 0589 00000000 		.4byte	.LVL90
 3925 058d 06000000 		.4byte	.LVL91
 3926 0591 0100     		.2byte	0x1
 3927 0593 51       		.byte	0x51
 3928 0594 06000000 		.4byte	.LVL91
 3929 0598 0C000000 		.4byte	.LVL92
 3930 059c 0400     		.2byte	0x4
 3931 059e F3       		.byte	0xf3
 3932 059f 01       		.uleb128 0x1
 3933 05a0 51       		.byte	0x51
 3934 05a1 9F       		.byte	0x9f
 3935 05a2 0C000000 		.4byte	.LVL92
 3936 05a6 10000000 		.4byte	.LVL93
 3937 05aa 0100     		.2byte	0x1
 3938 05ac 51       		.byte	0x51
 3939 05ad 10000000 		.4byte	.LVL93
 3940 05b1 18000000 		.4byte	.LFE130
 3941 05b5 0400     		.2byte	0x4
 3942 05b7 F3       		.byte	0xf3
 3943 05b8 01       		.uleb128 0x1
 3944 05b9 51       		.byte	0x51
 3945 05ba 9F       		.byte	0x9f
 3946 05bb 00000000 		.4byte	0
 3947 05bf 00000000 		.4byte	0
 3948              	.LLST27:
 3949 05c3 00000000 		.4byte	.LVL94
 3950 05c7 12000000 		.4byte	.LVL95
 3951 05cb 0100     		.2byte	0x1
 3952 05cd 51       		.byte	0x51
 3953 05ce 12000000 		.4byte	.LVL95
 3954 05d2 16000000 		.4byte	.LFE131
 3955 05d6 0400     		.2byte	0x4
 3956 05d8 F3       		.byte	0xf3
 3957 05d9 01       		.uleb128 0x1
 3958 05da 51       		.byte	0x51
 3959 05db 9F       		.byte	0x9f
 3960 05dc 00000000 		.4byte	0
 3961 05e0 00000000 		.4byte	0
 3962              	.LLST28:
 3963 05e4 00000000 		.4byte	.LVL96
 3964 05e8 06000000 		.4byte	.LVL97
ARM GAS  /tmp/ccyhuBN5.s 			page 97


 3965 05ec 0100     		.2byte	0x1
 3966 05ee 51       		.byte	0x51
 3967 05ef 06000000 		.4byte	.LVL97
 3968 05f3 0C000000 		.4byte	.LVL98
 3969 05f7 0400     		.2byte	0x4
 3970 05f9 F3       		.byte	0xf3
 3971 05fa 01       		.uleb128 0x1
 3972 05fb 51       		.byte	0x51
 3973 05fc 9F       		.byte	0x9f
 3974 05fd 0C000000 		.4byte	.LVL98
 3975 0601 10000000 		.4byte	.LVL99
 3976 0605 0100     		.2byte	0x1
 3977 0607 51       		.byte	0x51
 3978 0608 10000000 		.4byte	.LVL99
 3979 060c 18000000 		.4byte	.LFE132
 3980 0610 0400     		.2byte	0x4
 3981 0612 F3       		.byte	0xf3
 3982 0613 01       		.uleb128 0x1
 3983 0614 51       		.byte	0x51
 3984 0615 9F       		.byte	0x9f
 3985 0616 00000000 		.4byte	0
 3986 061a 00000000 		.4byte	0
 3987              	.LLST29:
 3988 061e 00000000 		.4byte	.LVL100
 3989 0622 08000000 		.4byte	.LVL101
 3990 0626 0100     		.2byte	0x1
 3991 0628 51       		.byte	0x51
 3992 0629 08000000 		.4byte	.LVL101
 3993 062d 0A000000 		.4byte	.LVL102
 3994 0631 0400     		.2byte	0x4
 3995 0633 F3       		.byte	0xf3
 3996 0634 01       		.uleb128 0x1
 3997 0635 51       		.byte	0x51
 3998 0636 9F       		.byte	0x9f
 3999 0637 0A000000 		.4byte	.LVL102
 4000 063b 0E000000 		.4byte	.LVL103
 4001 063f 0100     		.2byte	0x1
 4002 0641 51       		.byte	0x51
 4003 0642 0E000000 		.4byte	.LVL103
 4004 0646 12000000 		.4byte	.LFE133
 4005 064a 0400     		.2byte	0x4
 4006 064c F3       		.byte	0xf3
 4007 064d 01       		.uleb128 0x1
 4008 064e 51       		.byte	0x51
 4009 064f 9F       		.byte	0x9f
 4010 0650 00000000 		.4byte	0
 4011 0654 00000000 		.4byte	0
 4012              	.LLST30:
 4013 0658 00000000 		.4byte	.LFB134
 4014 065c 06000000 		.4byte	.LCFI4
 4015 0660 0200     		.2byte	0x2
 4016 0662 7D       		.byte	0x7d
 4017 0663 00       		.sleb128 0
 4018 0664 06000000 		.4byte	.LCFI4
 4019 0668 34000000 		.4byte	.LFE134
 4020 066c 0200     		.2byte	0x2
 4021 066e 7D       		.byte	0x7d
ARM GAS  /tmp/ccyhuBN5.s 			page 98


 4022 066f 08       		.sleb128 8
 4023 0670 00000000 		.4byte	0
 4024 0674 00000000 		.4byte	0
 4025              	.LLST31:
 4026 0678 00000000 		.4byte	.LVL104
 4027 067c 16000000 		.4byte	.LVL108
 4028 0680 0100     		.2byte	0x1
 4029 0682 50       		.byte	0x50
 4030 0683 16000000 		.4byte	.LVL108
 4031 0687 18000000 		.4byte	.LVL109
 4032 068b 0300     		.2byte	0x3
 4033 068d 70       		.byte	0x70
 4034 068e 74       		.sleb128 -12
 4035 068f 9F       		.byte	0x9f
 4036 0690 18000000 		.4byte	.LVL109
 4037 0694 1E000000 		.4byte	.LVL110
 4038 0698 0100     		.2byte	0x1
 4039 069a 50       		.byte	0x50
 4040 069b 1E000000 		.4byte	.LVL110
 4041 069f 20000000 		.4byte	.LVL111
 4042 06a3 0300     		.2byte	0x3
 4043 06a5 70       		.byte	0x70
 4044 06a6 70       		.sleb128 -16
 4045 06a7 9F       		.byte	0x9f
 4046 06a8 20000000 		.4byte	.LVL111
 4047 06ac 22000000 		.4byte	.LVL112
 4048 06b0 0100     		.2byte	0x1
 4049 06b2 50       		.byte	0x50
 4050 06b3 22000000 		.4byte	.LVL112
 4051 06b7 34000000 		.4byte	.LFE134
 4052 06bb 0400     		.2byte	0x4
 4053 06bd F3       		.byte	0xf3
 4054 06be 01       		.uleb128 0x1
 4055 06bf 50       		.byte	0x50
 4056 06c0 9F       		.byte	0x9f
 4057 06c1 00000000 		.4byte	0
 4058 06c5 00000000 		.4byte	0
 4059              	.LLST32:
 4060 06c9 00000000 		.4byte	.LVL104
 4061 06cd 0C000000 		.4byte	.LVL106
 4062 06d1 0100     		.2byte	0x1
 4063 06d3 51       		.byte	0x51
 4064 06d4 0C000000 		.4byte	.LVL106
 4065 06d8 34000000 		.4byte	.LFE134
 4066 06dc 0400     		.2byte	0x4
 4067 06de F3       		.byte	0xf3
 4068 06df 01       		.uleb128 0x1
 4069 06e0 51       		.byte	0x51
 4070 06e1 9F       		.byte	0x9f
 4071 06e2 00000000 		.4byte	0
 4072 06e6 00000000 		.4byte	0
 4073              	.LLST33:
 4074 06ea 00000000 		.4byte	.LVL104
 4075 06ee 2A000000 		.4byte	.LVL114
 4076 06f2 0100     		.2byte	0x1
 4077 06f4 52       		.byte	0x52
 4078 06f5 2A000000 		.4byte	.LVL114
ARM GAS  /tmp/ccyhuBN5.s 			page 99


 4079 06f9 2C000000 		.4byte	.LVL115
 4080 06fd 0400     		.2byte	0x4
 4081 06ff F3       		.byte	0xf3
 4082 0700 01       		.uleb128 0x1
 4083 0701 52       		.byte	0x52
 4084 0702 9F       		.byte	0x9f
 4085 0703 2C000000 		.4byte	.LVL115
 4086 0707 30000000 		.4byte	.LVL116
 4087 070b 0100     		.2byte	0x1
 4088 070d 52       		.byte	0x52
 4089 070e 30000000 		.4byte	.LVL116
 4090 0712 34000000 		.4byte	.LFE134
 4091 0716 0400     		.2byte	0x4
 4092 0718 F3       		.byte	0xf3
 4093 0719 01       		.uleb128 0x1
 4094 071a 52       		.byte	0x52
 4095 071b 9F       		.byte	0x9f
 4096 071c 00000000 		.4byte	0
 4097 0720 00000000 		.4byte	0
 4098              	.LLST34:
 4099 0724 00000000 		.4byte	.LVL104
 4100 0728 04000000 		.4byte	.LVL105
 4101 072c 0200     		.2byte	0x2
 4102 072e 30       		.byte	0x30
 4103 072f 9F       		.byte	0x9f
 4104 0730 04000000 		.4byte	.LVL105
 4105 0734 24000000 		.4byte	.LVL113
 4106 0738 0100     		.2byte	0x1
 4107 073a 53       		.byte	0x53
 4108 073b 00000000 		.4byte	0
 4109 073f 00000000 		.4byte	0
 4110              	.LLST35:
 4111 0743 00000000 		.4byte	.LVL104
 4112 0747 04000000 		.4byte	.LVL105
 4113 074b 0200     		.2byte	0x2
 4114 074d 30       		.byte	0x30
 4115 074e 9F       		.byte	0x9f
 4116 074f 04000000 		.4byte	.LVL105
 4117 0753 0C000000 		.4byte	.LVL106
 4118 0757 0900     		.2byte	0x9
 4119 0759 71       		.byte	0x71
 4120 075a 00       		.sleb128 0
 4121 075b 4F       		.byte	0x4f
 4122 075c 1A       		.byte	0x1a
 4123 075d 0A       		.byte	0xa
 4124 075e FFFF     		.2byte	0xffff
 4125 0760 1A       		.byte	0x1a
 4126 0761 9F       		.byte	0x9f
 4127 0762 00000000 		.4byte	0
 4128 0766 00000000 		.4byte	0
 4129              	.LLST36:
 4130 076a 00000000 		.4byte	.LVL104
 4131 076e 12000000 		.4byte	.LVL107
 4132 0772 0200     		.2byte	0x2
 4133 0774 30       		.byte	0x30
 4134 0775 9F       		.byte	0x9f
 4135 0776 12000000 		.4byte	.LVL107
ARM GAS  /tmp/ccyhuBN5.s 			page 100


 4136 077a 34000000 		.4byte	.LFE134
 4137 077e 0100     		.2byte	0x1
 4138 0780 51       		.byte	0x51
 4139 0781 00000000 		.4byte	0
 4140 0785 00000000 		.4byte	0
 4141              	.LLST37:
 4142 0789 00000000 		.4byte	.LVL117
 4143 078d 0A000000 		.4byte	.LVL119
 4144 0791 0100     		.2byte	0x1
 4145 0793 50       		.byte	0x50
 4146 0794 0A000000 		.4byte	.LVL119
 4147 0798 0C000000 		.4byte	.LFE135
 4148 079c 0400     		.2byte	0x4
 4149 079e F3       		.byte	0xf3
 4150 079f 01       		.uleb128 0x1
 4151 07a0 50       		.byte	0x50
 4152 07a1 9F       		.byte	0x9f
 4153 07a2 00000000 		.4byte	0
 4154 07a6 00000000 		.4byte	0
 4155              	.LLST38:
 4156 07aa 00000000 		.4byte	.LVL117
 4157 07ae 02000000 		.4byte	.LVL118
 4158 07b2 0200     		.2byte	0x2
 4159 07b4 30       		.byte	0x30
 4160 07b5 9F       		.byte	0x9f
 4161 07b6 02000000 		.4byte	.LVL118
 4162 07ba 0C000000 		.4byte	.LFE135
 4163 07be 0A00     		.2byte	0xa
 4164 07c0 71       		.byte	0x71
 4165 07c1 00       		.sleb128 0
 4166 07c2 73       		.byte	0x73
 4167 07c3 00       		.sleb128 0
 4168 07c4 1A       		.byte	0x1a
 4169 07c5 40       		.byte	0x40
 4170 07c6 24       		.byte	0x24
 4171 07c7 30       		.byte	0x30
 4172 07c8 2E       		.byte	0x2e
 4173 07c9 9F       		.byte	0x9f
 4174 07ca 00000000 		.4byte	0
 4175 07ce 00000000 		.4byte	0
 4176              	.LLST39:
 4177 07d2 00000000 		.4byte	.LVL120
 4178 07d6 02000000 		.4byte	.LVL121
 4179 07da 0100     		.2byte	0x1
 4180 07dc 51       		.byte	0x51
 4181 07dd 02000000 		.4byte	.LVL121
 4182 07e1 08000000 		.4byte	.LFE136
 4183 07e5 0400     		.2byte	0x4
 4184 07e7 F3       		.byte	0xf3
 4185 07e8 01       		.uleb128 0x1
 4186 07e9 51       		.byte	0x51
 4187 07ea 9F       		.byte	0x9f
 4188 07eb 00000000 		.4byte	0
 4189 07ef 00000000 		.4byte	0
 4190              	.LLST40:
 4191 07f3 00000000 		.4byte	.LFB137
 4192 07f7 02000000 		.4byte	.LCFI5
ARM GAS  /tmp/ccyhuBN5.s 			page 101


 4193 07fb 0200     		.2byte	0x2
 4194 07fd 7D       		.byte	0x7d
 4195 07fe 00       		.sleb128 0
 4196 07ff 02000000 		.4byte	.LCFI5
 4197 0803 40000000 		.4byte	.LFE137
 4198 0807 0200     		.2byte	0x2
 4199 0809 7D       		.byte	0x7d
 4200 080a 08       		.sleb128 8
 4201 080b 00000000 		.4byte	0
 4202 080f 00000000 		.4byte	0
 4203              	.LLST41:
 4204 0813 00000000 		.4byte	.LVL122
 4205 0817 24000000 		.4byte	.LVL125
 4206 081b 0100     		.2byte	0x1
 4207 081d 50       		.byte	0x50
 4208 081e 24000000 		.4byte	.LVL125
 4209 0822 40000000 		.4byte	.LFE137
 4210 0826 0400     		.2byte	0x4
 4211 0828 F3       		.byte	0xf3
 4212 0829 01       		.uleb128 0x1
 4213 082a 50       		.byte	0x50
 4214 082b 9F       		.byte	0x9f
 4215 082c 00000000 		.4byte	0
 4216 0830 00000000 		.4byte	0
 4217              	.LLST42:
 4218 0834 00000000 		.4byte	.LVL122
 4219 0838 2C000000 		.4byte	.LVL128
 4220 083c 0100     		.2byte	0x1
 4221 083e 51       		.byte	0x51
 4222 083f 2C000000 		.4byte	.LVL128
 4223 0843 3C000000 		.4byte	.LVL130
 4224 0847 0400     		.2byte	0x4
 4225 0849 F3       		.byte	0xf3
 4226 084a 01       		.uleb128 0x1
 4227 084b 51       		.byte	0x51
 4228 084c 9F       		.byte	0x9f
 4229 084d 3C000000 		.4byte	.LVL130
 4230 0851 40000000 		.4byte	.LFE137
 4231 0855 0100     		.2byte	0x1
 4232 0857 51       		.byte	0x51
 4233 0858 00000000 		.4byte	0
 4234 085c 00000000 		.4byte	0
 4235              	.LLST43:
 4236 0860 00000000 		.4byte	.LVL122
 4237 0864 26000000 		.4byte	.LVL126
 4238 0868 0200     		.2byte	0x2
 4239 086a 30       		.byte	0x30
 4240 086b 9F       		.byte	0x9f
 4241 086c 26000000 		.4byte	.LVL126
 4242 0870 28000000 		.4byte	.LVL127
 4243 0874 0B00     		.2byte	0xb
 4244 0876 31       		.byte	0x31
 4245 0877 71       		.byte	0x71
 4246 0878 00       		.sleb128 0
 4247 0879 38       		.byte	0x38
 4248 087a 25       		.byte	0x25
 4249 087b 0A       		.byte	0xa
ARM GAS  /tmp/ccyhuBN5.s 			page 102


 4250 087c FFFF     		.2byte	0xffff
 4251 087e 1A       		.byte	0x1a
 4252 087f 24       		.byte	0x24
 4253 0880 9F       		.byte	0x9f
 4254 0881 28000000 		.4byte	.LVL127
 4255 0885 2C000000 		.4byte	.LVL128
 4256 0889 1200     		.2byte	0x12
 4257 088b 31       		.byte	0x31
 4258 088c 71       		.byte	0x71
 4259 088d 00       		.sleb128 0
 4260 088e 38       		.byte	0x38
 4261 088f 25       		.byte	0x25
 4262 0890 0A       		.byte	0xa
 4263 0891 FFFF     		.2byte	0xffff
 4264 0893 1A       		.byte	0x1a
 4265 0894 24       		.byte	0x24
 4266 0895 72       		.byte	0x72
 4267 0896 00       		.sleb128 0
 4268 0897 0A       		.byte	0xa
 4269 0898 FFFF     		.2byte	0xffff
 4270 089a 1A       		.byte	0x1a
 4271 089b 1A       		.byte	0x1a
 4272 089c 9F       		.byte	0x9f
 4273 089d 3C000000 		.4byte	.LVL130
 4274 08a1 40000000 		.4byte	.LFE137
 4275 08a5 1200     		.2byte	0x12
 4276 08a7 31       		.byte	0x31
 4277 08a8 71       		.byte	0x71
 4278 08a9 00       		.sleb128 0
 4279 08aa 38       		.byte	0x38
 4280 08ab 25       		.byte	0x25
 4281 08ac 0A       		.byte	0xa
 4282 08ad FFFF     		.2byte	0xffff
 4283 08af 1A       		.byte	0x1a
 4284 08b0 24       		.byte	0x24
 4285 08b1 72       		.byte	0x72
 4286 08b2 00       		.sleb128 0
 4287 08b3 0A       		.byte	0xa
 4288 08b4 FFFF     		.2byte	0xffff
 4289 08b6 1A       		.byte	0x1a
 4290 08b7 1A       		.byte	0x1a
 4291 08b8 9F       		.byte	0x9f
 4292 08b9 00000000 		.4byte	0
 4293 08bd 00000000 		.4byte	0
 4294              	.LLST44:
 4295 08c1 00000000 		.4byte	.LVL122
 4296 08c5 06000000 		.4byte	.LVL123
 4297 08c9 0200     		.2byte	0x2
 4298 08cb 30       		.byte	0x30
 4299 08cc 9F       		.byte	0x9f
 4300 08cd 06000000 		.4byte	.LVL123
 4301 08d1 12000000 		.4byte	.LVL124
 4302 08d5 0900     		.2byte	0x9
 4303 08d7 71       		.byte	0x71
 4304 08d8 00       		.sleb128 0
 4305 08d9 4F       		.byte	0x4f
 4306 08da 1A       		.byte	0x1a
ARM GAS  /tmp/ccyhuBN5.s 			page 103


 4307 08db 0A       		.byte	0xa
 4308 08dc FFFF     		.2byte	0xffff
 4309 08de 1A       		.byte	0x1a
 4310 08df 9F       		.byte	0x9f
 4311 08e0 12000000 		.4byte	.LVL124
 4312 08e4 26000000 		.4byte	.LVL126
 4313 08e8 0100     		.2byte	0x1
 4314 08ea 52       		.byte	0x52
 4315 08eb 26000000 		.4byte	.LVL126
 4316 08ef 2E000000 		.4byte	.LVL129
 4317 08f3 0100     		.2byte	0x1
 4318 08f5 53       		.byte	0x53
 4319 08f6 3C000000 		.4byte	.LVL130
 4320 08fa 40000000 		.4byte	.LFE137
 4321 08fe 0100     		.2byte	0x1
 4322 0900 53       		.byte	0x53
 4323 0901 00000000 		.4byte	0
 4324 0905 00000000 		.4byte	0
 4325              	.LLST45:
 4326 0909 00000000 		.4byte	.LVL122
 4327 090d 06000000 		.4byte	.LVL123
 4328 0911 0200     		.2byte	0x2
 4329 0913 30       		.byte	0x30
 4330 0914 9F       		.byte	0x9f
 4331 0915 06000000 		.4byte	.LVL123
 4332 0919 40000000 		.4byte	.LFE137
 4333 091d 0100     		.2byte	0x1
 4334 091f 54       		.byte	0x54
 4335 0920 00000000 		.4byte	0
 4336 0924 00000000 		.4byte	0
 4337              	.LLST46:
 4338 0928 00000000 		.4byte	.LVL122
 4339 092c 3E000000 		.4byte	.LVL131
 4340 0930 0200     		.2byte	0x2
 4341 0932 30       		.byte	0x30
 4342 0933 9F       		.byte	0x9f
 4343 0934 3E000000 		.4byte	.LVL131
 4344 0938 40000000 		.4byte	.LFE137
 4345 093c 0100     		.2byte	0x1
 4346 093e 50       		.byte	0x50
 4347 093f 00000000 		.4byte	0
 4348 0943 00000000 		.4byte	0
 4349              	.LLST47:
 4350 0947 00000000 		.4byte	.LVL132
 4351 094b 02000000 		.4byte	.LVL133
 4352 094f 0100     		.2byte	0x1
 4353 0951 51       		.byte	0x51
 4354 0952 02000000 		.4byte	.LVL133
 4355 0956 10000000 		.4byte	.LFE138
 4356 095a 0400     		.2byte	0x4
 4357 095c F3       		.byte	0xf3
 4358 095d 01       		.uleb128 0x1
 4359 095e 51       		.byte	0x51
 4360 095f 9F       		.byte	0x9f
 4361 0960 00000000 		.4byte	0
 4362 0964 00000000 		.4byte	0
 4363              	.LLST48:
ARM GAS  /tmp/ccyhuBN5.s 			page 104


 4364 0968 00000000 		.4byte	.LVL132
 4365 096c 02000000 		.4byte	.LVL133
 4366 0970 0500     		.2byte	0x5
 4367 0972 71       		.byte	0x71
 4368 0973 00       		.sleb128 0
 4369 0974 38       		.byte	0x38
 4370 0975 25       		.byte	0x25
 4371 0976 9F       		.byte	0x9f
 4372 0977 02000000 		.4byte	.LVL133
 4373 097b 10000000 		.4byte	.LFE138
 4374 097f 0600     		.2byte	0x6
 4375 0981 F3       		.byte	0xf3
 4376 0982 01       		.uleb128 0x1
 4377 0983 51       		.byte	0x51
 4378 0984 38       		.byte	0x38
 4379 0985 25       		.byte	0x25
 4380 0986 9F       		.byte	0x9f
 4381 0987 00000000 		.4byte	0
 4382 098b 00000000 		.4byte	0
 4383              		.section	.debug_aranges,"",%progbits
 4384 0000 FC000000 		.4byte	0xfc
 4385 0004 0200     		.2byte	0x2
 4386 0006 00000000 		.4byte	.Ldebug_info0
 4387 000a 04       		.byte	0x4
 4388 000b 00       		.byte	0
 4389 000c 0000     		.2byte	0
 4390 000e 0000     		.2byte	0
 4391 0010 00000000 		.4byte	.LFB110
 4392 0014 A8000000 		.4byte	.LFE110-.LFB110
 4393 0018 00000000 		.4byte	.LFB111
 4394 001c B8000000 		.4byte	.LFE111-.LFB111
 4395 0020 00000000 		.4byte	.LFB112
 4396 0024 16000000 		.4byte	.LFE112-.LFB112
 4397 0028 00000000 		.4byte	.LFB113
 4398 002c 20000000 		.4byte	.LFE113-.LFB113
 4399 0030 00000000 		.4byte	.LFB114
 4400 0034 0C000000 		.4byte	.LFE114-.LFB114
 4401 0038 00000000 		.4byte	.LFB115
 4402 003c 18000000 		.4byte	.LFE115-.LFB115
 4403 0040 00000000 		.4byte	.LFB116
 4404 0044 12000000 		.4byte	.LFE116-.LFB116
 4405 0048 00000000 		.4byte	.LFB117
 4406 004c 18000000 		.4byte	.LFE117-.LFB117
 4407 0050 00000000 		.4byte	.LFB118
 4408 0054 18000000 		.4byte	.LFE118-.LFB118
 4409 0058 00000000 		.4byte	.LFB119
 4410 005c 08000000 		.4byte	.LFE119-.LFB119
 4411 0060 00000000 		.4byte	.LFB120
 4412 0064 08000000 		.4byte	.LFE120-.LFB120
 4413 0068 00000000 		.4byte	.LFB121
 4414 006c 16000000 		.4byte	.LFE121-.LFB121
 4415 0070 00000000 		.4byte	.LFB122
 4416 0074 18000000 		.4byte	.LFE122-.LFB122
 4417 0078 00000000 		.4byte	.LFB123
 4418 007c 16000000 		.4byte	.LFE123-.LFB123
 4419 0080 00000000 		.4byte	.LFB124
 4420 0084 16000000 		.4byte	.LFE124-.LFB124
ARM GAS  /tmp/ccyhuBN5.s 			page 105


 4421 0088 00000000 		.4byte	.LFB125
 4422 008c 18000000 		.4byte	.LFE125-.LFB125
 4423 0090 00000000 		.4byte	.LFB126
 4424 0094 0C000000 		.4byte	.LFE126-.LFB126
 4425 0098 00000000 		.4byte	.LFB127
 4426 009c 18000000 		.4byte	.LFE127-.LFB127
 4427 00a0 00000000 		.4byte	.LFB128
 4428 00a4 12000000 		.4byte	.LFE128-.LFB128
 4429 00a8 00000000 		.4byte	.LFB129
 4430 00ac 18000000 		.4byte	.LFE129-.LFB129
 4431 00b0 00000000 		.4byte	.LFB130
 4432 00b4 18000000 		.4byte	.LFE130-.LFB130
 4433 00b8 00000000 		.4byte	.LFB131
 4434 00bc 16000000 		.4byte	.LFE131-.LFB131
 4435 00c0 00000000 		.4byte	.LFB132
 4436 00c4 18000000 		.4byte	.LFE132-.LFB132
 4437 00c8 00000000 		.4byte	.LFB133
 4438 00cc 12000000 		.4byte	.LFE133-.LFB133
 4439 00d0 00000000 		.4byte	.LFB134
 4440 00d4 34000000 		.4byte	.LFE134-.LFB134
 4441 00d8 00000000 		.4byte	.LFB135
 4442 00dc 0C000000 		.4byte	.LFE135-.LFB135
 4443 00e0 00000000 		.4byte	.LFB136
 4444 00e4 08000000 		.4byte	.LFE136-.LFB136
 4445 00e8 00000000 		.4byte	.LFB137
 4446 00ec 40000000 		.4byte	.LFE137-.LFB137
 4447 00f0 00000000 		.4byte	.LFB138
 4448 00f4 10000000 		.4byte	.LFE138-.LFB138
 4449 00f8 00000000 		.4byte	0
 4450 00fc 00000000 		.4byte	0
 4451              		.section	.debug_ranges,"",%progbits
 4452              	.Ldebug_ranges0:
 4453 0000 00000000 		.4byte	.LFB110
 4454 0004 A8000000 		.4byte	.LFE110
 4455 0008 00000000 		.4byte	.LFB111
 4456 000c B8000000 		.4byte	.LFE111
 4457 0010 00000000 		.4byte	.LFB112
 4458 0014 16000000 		.4byte	.LFE112
 4459 0018 00000000 		.4byte	.LFB113
 4460 001c 20000000 		.4byte	.LFE113
 4461 0020 00000000 		.4byte	.LFB114
 4462 0024 0C000000 		.4byte	.LFE114
 4463 0028 00000000 		.4byte	.LFB115
 4464 002c 18000000 		.4byte	.LFE115
 4465 0030 00000000 		.4byte	.LFB116
 4466 0034 12000000 		.4byte	.LFE116
 4467 0038 00000000 		.4byte	.LFB117
 4468 003c 18000000 		.4byte	.LFE117
 4469 0040 00000000 		.4byte	.LFB118
 4470 0044 18000000 		.4byte	.LFE118
 4471 0048 00000000 		.4byte	.LFB119
 4472 004c 08000000 		.4byte	.LFE119
 4473 0050 00000000 		.4byte	.LFB120
 4474 0054 08000000 		.4byte	.LFE120
 4475 0058 00000000 		.4byte	.LFB121
 4476 005c 16000000 		.4byte	.LFE121
 4477 0060 00000000 		.4byte	.LFB122
ARM GAS  /tmp/ccyhuBN5.s 			page 106


 4478 0064 18000000 		.4byte	.LFE122
 4479 0068 00000000 		.4byte	.LFB123
 4480 006c 16000000 		.4byte	.LFE123
 4481 0070 00000000 		.4byte	.LFB124
 4482 0074 16000000 		.4byte	.LFE124
 4483 0078 00000000 		.4byte	.LFB125
 4484 007c 18000000 		.4byte	.LFE125
 4485 0080 00000000 		.4byte	.LFB126
 4486 0084 0C000000 		.4byte	.LFE126
 4487 0088 00000000 		.4byte	.LFB127
 4488 008c 18000000 		.4byte	.LFE127
 4489 0090 00000000 		.4byte	.LFB128
 4490 0094 12000000 		.4byte	.LFE128
 4491 0098 00000000 		.4byte	.LFB129
 4492 009c 18000000 		.4byte	.LFE129
 4493 00a0 00000000 		.4byte	.LFB130
 4494 00a4 18000000 		.4byte	.LFE130
 4495 00a8 00000000 		.4byte	.LFB131
 4496 00ac 16000000 		.4byte	.LFE131
 4497 00b0 00000000 		.4byte	.LFB132
 4498 00b4 18000000 		.4byte	.LFE132
 4499 00b8 00000000 		.4byte	.LFB133
 4500 00bc 12000000 		.4byte	.LFE133
 4501 00c0 00000000 		.4byte	.LFB134
 4502 00c4 34000000 		.4byte	.LFE134
 4503 00c8 00000000 		.4byte	.LFB135
 4504 00cc 0C000000 		.4byte	.LFE135
 4505 00d0 00000000 		.4byte	.LFB136
 4506 00d4 08000000 		.4byte	.LFE136
 4507 00d8 00000000 		.4byte	.LFB137
 4508 00dc 40000000 		.4byte	.LFE137
 4509 00e0 00000000 		.4byte	.LFB138
 4510 00e4 10000000 		.4byte	.LFE138
 4511 00e8 00000000 		.4byte	0
 4512 00ec 00000000 		.4byte	0
 4513              		.section	.debug_line,"",%progbits
 4514              	.Ldebug_line0:
 4515 0000 89030000 		.section	.debug_str,"MS",%progbits,1
 4515      0200C900 
 4515      00000201 
 4515      FB0E0D00 
 4515      01010101 
 4516              	.LASF52:
 4517 0000 696E7465 		.ascii	"integerdivider\000"
 4517      67657264 
 4517      69766964 
 4517      657200
 4518              	.LASF43:
 4519 000f 55534152 		.ascii	"USART_CPHA\000"
 4519      545F4350 
 4519      484100
 4520              	.LASF26:
 4521 001a 47545052 		.ascii	"GTPR\000"
 4521      00
 4522              	.LASF89:
 4523 001f 6974706F 		.ascii	"itpos\000"
 4523      7300
ARM GAS  /tmp/ccyhuBN5.s 			page 107


 4524              	.LASF29:
 4525 0025 53595343 		.ascii	"SYSCLK_Frequency\000"
 4525      4C4B5F46 
 4525      72657175 
 4525      656E6379 
 4525      00
 4526              	.LASF61:
 4527 0036 55534152 		.ascii	"USART_SetPrescaler\000"
 4527      545F5365 
 4527      74507265 
 4527      7363616C 
 4527      657200
 4528              	.LASF105:
 4529 0049 2F686F6D 		.ascii	"/home/xavier/Documents/Xav/dev/stm32code/bitbox/boo"
 4529      652F7861 
 4529      76696572 
 4529      2F446F63 
 4529      756D656E 
 4530 007c 746C6F61 		.ascii	"tloader/FATFS-DBG\000"
 4530      6465722F 
 4530      46415446 
 4530      532D4442 
 4530      4700
 4531              	.LASF47:
 4532 008e 55534152 		.ascii	"USART_Init\000"
 4532      545F496E 
 4532      697400
 4533              	.LASF13:
 4534 0099 73697A65 		.ascii	"sizetype\000"
 4534      74797065 
 4534      00
 4535              	.LASF30:
 4536 00a2 48434C4B 		.ascii	"HCLK_Frequency\000"
 4536      5F467265 
 4536      7175656E 
 4536      637900
 4537              	.LASF73:
 4538 00b1 55534152 		.ascii	"USART_LINBreakDetectLength\000"
 4538      545F4C49 
 4538      4E427265 
 4538      616B4465 
 4538      74656374 
 4539              	.LASF64:
 4540 00cc 55534152 		.ascii	"USART_OneBitMethodCmd\000"
 4540      545F4F6E 
 4540      65426974 
 4540      4D657468 
 4540      6F64436D 
 4541              	.LASF15:
 4542 00e2 466C6167 		.ascii	"FlagStatus\000"
 4542      53746174 
 4542      757300
 4543              	.LASF28:
 4544 00ed 55534152 		.ascii	"USART_TypeDef\000"
 4544      545F5479 
 4544      70654465 
 4544      6600
ARM GAS  /tmp/ccyhuBN5.s 			page 108


 4545              	.LASF36:
 4546 00fb 55534152 		.ascii	"USART_StopBits\000"
 4546      545F5374 
 4546      6F704269 
 4546      747300
 4547              	.LASF95:
 4548 010a 62697473 		.ascii	"bitstatus\000"
 4548      74617475 
 4548      7300
 4549              	.LASF45:
 4550 0114 55534152 		.ascii	"USART_ClockInitTypeDef\000"
 4550      545F436C 
 4550      6F636B49 
 4550      6E697454 
 4550      79706544 
 4551              	.LASF59:
 4552 012b 55534152 		.ascii	"USART_Cmd\000"
 4552      545F436D 
 4552      6400
 4553              	.LASF65:
 4554 0135 55534152 		.ascii	"USART_SendData\000"
 4554      545F5365 
 4554      6E644461 
 4554      746100
 4555              	.LASF3:
 4556 0144 75696E74 		.ascii	"uint8_t\000"
 4556      385F7400 
 4557              	.LASF87:
 4558 014c 55534152 		.ascii	"USART_IT\000"
 4558      545F4954 
 4558      00
 4559              	.LASF71:
 4560 0155 55534152 		.ascii	"USART_WakeUp\000"
 4560      545F5761 
 4560      6B655570 
 4560      00
 4561              	.LASF35:
 4562 0162 55534152 		.ascii	"USART_WordLength\000"
 4562      545F576F 
 4562      72644C65 
 4562      6E677468 
 4562      00
 4563              	.LASF60:
 4564 0173 4E657753 		.ascii	"NewState\000"
 4564      74617465 
 4564      00
 4565              	.LASF84:
 4566 017c 55534152 		.ascii	"USART_DMACmd\000"
 4566      545F444D 
 4566      41436D64 
 4566      00
 4567              	.LASF17:
 4568 0189 44495341 		.ascii	"DISABLE\000"
 4568      424C4500 
 4569              	.LASF0:
 4570 0191 7369676E 		.ascii	"signed char\000"
 4570      65642063 
ARM GAS  /tmp/ccyhuBN5.s 			page 109


 4570      68617200 
 4571              	.LASF44:
 4572 019d 55534152 		.ascii	"USART_LastBit\000"
 4572      545F4C61 
 4572      73744269 
 4572      7400
 4573              	.LASF34:
 4574 01ab 55534152 		.ascii	"USART_BaudRate\000"
 4574      545F4261 
 4574      75645261 
 4574      746500
 4575              	.LASF82:
 4576 01ba 55534152 		.ascii	"USART_IrDAMode\000"
 4576      545F4972 
 4576      44414D6F 
 4576      646500
 4577              	.LASF51:
 4578 01c9 61706263 		.ascii	"apbclock\000"
 4578      6C6F636B 
 4578      00
 4579              	.LASF10:
 4580 01d2 6C6F6E67 		.ascii	"long long int\000"
 4580      206C6F6E 
 4580      6720696E 
 4580      7400
 4581              	.LASF101:
 4582 01e0 5243435F 		.ascii	"RCC_APB1PeriphResetCmd\000"
 4582      41504231 
 4582      50657269 
 4582      70685265 
 4582      73657443 
 4583              	.LASF16:
 4584 01f7 49545374 		.ascii	"ITStatus\000"
 4584      61747573 
 4584      00
 4585              	.LASF7:
 4586 0200 6C6F6E67 		.ascii	"long int\000"
 4586      20696E74 
 4586      00
 4587              	.LASF99:
 4588 0209 55534152 		.ascii	"USART_ClearITPendingBit\000"
 4588      545F436C 
 4588      65617249 
 4588      5450656E 
 4588      64696E67 
 4589              	.LASF78:
 4590 0221 55534152 		.ascii	"USART_GuardTime\000"
 4590      545F4775 
 4590      61726454 
 4590      696D6500 
 4591              	.LASF2:
 4592 0231 73686F72 		.ascii	"short int\000"
 4592      7420696E 
 4592      7400
 4593              	.LASF72:
 4594 023b 55534152 		.ascii	"USART_LINBreakDetectLengthConfig\000"
 4594      545F4C49 
ARM GAS  /tmp/ccyhuBN5.s 			page 110


 4594      4E427265 
 4594      616B4465 
 4594      74656374 
 4595              	.LASF94:
 4596 025c 55534152 		.ascii	"USART_FLAG\000"
 4596      545F464C 
 4596      414700
 4597              	.LASF69:
 4598 0267 55534152 		.ascii	"USART_ReceiverWakeUpCmd\000"
 4598      545F5265 
 4598      63656976 
 4598      65725761 
 4598      6B655570 
 4599              	.LASF46:
 4600 027f 55534152 		.ascii	"USART_DeInit\000"
 4600      545F4465 
 4600      496E6974 
 4600      00
 4601              	.LASF57:
 4602 028c 55534152 		.ascii	"USART_ClockInitStruct\000"
 4602      545F436C 
 4602      6F636B49 
 4602      6E697453 
 4602      74727563 
 4603              	.LASF66:
 4604 02a2 44617461 		.ascii	"Data\000"
 4604      00
 4605              	.LASF50:
 4606 02a7 746D7072 		.ascii	"tmpreg\000"
 4606      656700
 4607              	.LASF37:
 4608 02ae 55534152 		.ascii	"USART_Parity\000"
 4608      545F5061 
 4608      72697479 
 4608      00
 4609              	.LASF58:
 4610 02bb 55534152 		.ascii	"USART_ClockStructInit\000"
 4610      545F436C 
 4610      6F636B53 
 4610      74727563 
 4610      74496E69 
 4611              	.LASF1:
 4612 02d1 756E7369 		.ascii	"unsigned char\000"
 4612      676E6564 
 4612      20636861 
 4612      7200
 4613              	.LASF91:
 4614 02df 75736172 		.ascii	"usartxbase\000"
 4614      74786261 
 4614      736500
 4615              	.LASF96:
 4616 02ea 55534152 		.ascii	"USART_ClearFlag\000"
 4616      545F436C 
 4616      65617246 
 4616      6C616700 
 4617              	.LASF67:
 4618 02fa 55534152 		.ascii	"USART_SetAddress\000"
ARM GAS  /tmp/ccyhuBN5.s 			page 111


 4618      545F5365 
 4618      74416464 
 4618      72657373 
 4618      00
 4619              	.LASF11:
 4620 030b 6C6F6E67 		.ascii	"long long unsigned int\000"
 4620      206C6F6E 
 4620      6720756E 
 4620      7369676E 
 4620      65642069 
 4621              	.LASF8:
 4622 0322 75696E74 		.ascii	"uint32_t\000"
 4622      33325F74 
 4622      00
 4623              	.LASF77:
 4624 032b 55534152 		.ascii	"USART_SetGuardTime\000"
 4624      545F5365 
 4624      74477561 
 4624      72645469 
 4624      6D6500
 4625              	.LASF12:
 4626 033e 756E7369 		.ascii	"unsigned int\000"
 4626      676E6564 
 4626      20696E74 
 4626      00
 4627              	.LASF103:
 4628 034b 474E5520 		.ascii	"GNU C 4.7.4 20130913 (release) [ARM/embedded-4_7-br"
 4628      4320342E 
 4628      372E3420 
 4628      32303133 
 4628      30393133 
 4629 037e 616E6368 		.ascii	"anch revision 202601]\000"
 4629      20726576 
 4629      6973696F 
 4629      6E203230 
 4629      32363031 
 4630              	.LASF9:
 4631 0394 6C6F6E67 		.ascii	"long unsigned int\000"
 4631      20756E73 
 4631      69676E65 
 4631      6420696E 
 4631      7400
 4632              	.LASF75:
 4633 03a6 55534152 		.ascii	"USART_SendBreak\000"
 4633      545F5365 
 4633      6E644272 
 4633      65616B00 
 4634              	.LASF40:
 4635 03b6 55534152 		.ascii	"USART_InitTypeDef\000"
 4635      545F496E 
 4635      69745479 
 4635      70654465 
 4635      6600
 4636              	.LASF100:
 4637 03c8 5243435F 		.ascii	"RCC_APB2PeriphResetCmd\000"
 4637      41504232 
 4637      50657269 
ARM GAS  /tmp/ccyhuBN5.s 			page 112


 4637      70685265 
 4637      73657443 
 4638              	.LASF86:
 4639 03df 55534152 		.ascii	"USART_ITConfig\000"
 4639      545F4954 
 4639      436F6E66 
 4639      696700
 4640              	.LASF33:
 4641 03ee 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 4641      436C6F63 
 4641      6B735479 
 4641      70654465 
 4641      6600
 4642              	.LASF85:
 4643 0400 55534152 		.ascii	"USART_DMAReq\000"
 4643      545F444D 
 4643      41526571 
 4643      00
 4644              	.LASF48:
 4645 040d 55534152 		.ascii	"USARTx\000"
 4645      547800
 4646              	.LASF39:
 4647 0414 55534152 		.ascii	"USART_HardwareFlowControl\000"
 4647      545F4861 
 4647      72647761 
 4647      7265466C 
 4647      6F77436F 
 4648              	.LASF79:
 4649 042e 55534152 		.ascii	"USART_SmartCardCmd\000"
 4649      545F536D 
 4649      61727443 
 4649      61726443 
 4649      6D6400
 4650              	.LASF38:
 4651 0441 55534152 		.ascii	"USART_Mode\000"
 4651      545F4D6F 
 4651      646500
 4652              	.LASF4:
 4653 044c 75696E74 		.ascii	"uint16_t\000"
 4653      31365F74 
 4653      00
 4654              	.LASF68:
 4655 0455 55534152 		.ascii	"USART_Address\000"
 4655      545F4164 
 4655      64726573 
 4655      7300
 4656              	.LASF6:
 4657 0463 696E7433 		.ascii	"int32_t\000"
 4657      325F7400 
 4658              	.LASF98:
 4659 046b 62697470 		.ascii	"bitpos\000"
 4659      6F7300
 4660              	.LASF63:
 4661 0472 55534152 		.ascii	"USART_OverSampling8Cmd\000"
 4661      545F4F76 
 4661      65725361 
 4661      6D706C69 
ARM GAS  /tmp/ccyhuBN5.s 			page 113


 4661      6E673843 
 4662              	.LASF5:
 4663 0489 73686F72 		.ascii	"short unsigned int\000"
 4663      7420756E 
 4663      7369676E 
 4663      65642069 
 4663      6E7400
 4664              	.LASF97:
 4665 049c 55534152 		.ascii	"USART_GetITStatus\000"
 4665      545F4765 
 4665      74495453 
 4665      74617475 
 4665      7300
 4666              	.LASF74:
 4667 04ae 55534152 		.ascii	"USART_LINCmd\000"
 4667      545F4C49 
 4667      4E436D64 
 4667      00
 4668              	.LASF81:
 4669 04bb 55534152 		.ascii	"USART_IrDAConfig\000"
 4669      545F4972 
 4669      4441436F 
 4669      6E666967 
 4669      00
 4670              	.LASF14:
 4671 04cc 52455345 		.ascii	"RESET\000"
 4671      5400
 4672              	.LASF32:
 4673 04d2 50434C4B 		.ascii	"PCLK2_Frequency\000"
 4673      325F4672 
 4673      65717565 
 4673      6E637900 
 4674              	.LASF41:
 4675 04e2 55534152 		.ascii	"USART_Clock\000"
 4675      545F436C 
 4675      6F636B00 
 4676              	.LASF20:
 4677 04ee 52455345 		.ascii	"RESERVED0\000"
 4677      52564544 
 4677      3000
 4678              	.LASF21:
 4679 04f8 52455345 		.ascii	"RESERVED1\000"
 4679      52564544 
 4679      3100
 4680              	.LASF22:
 4681 0502 52455345 		.ascii	"RESERVED2\000"
 4681      52564544 
 4681      3200
 4682              	.LASF23:
 4683 050c 52455345 		.ascii	"RESERVED3\000"
 4683      52564544 
 4683      3300
 4684              	.LASF24:
 4685 0516 52455345 		.ascii	"RESERVED4\000"
 4685      52564544 
 4685      3400
 4686              	.LASF25:
ARM GAS  /tmp/ccyhuBN5.s 			page 114


 4687 0520 52455345 		.ascii	"RESERVED5\000"
 4687      52564544 
 4687      3500
 4688              	.LASF27:
 4689 052a 52455345 		.ascii	"RESERVED6\000"
 4689      52564544 
 4689      3600
 4690              	.LASF83:
 4691 0534 55534152 		.ascii	"USART_IrDACmd\000"
 4691      545F4972 
 4691      4441436D 
 4691      6400
 4692              	.LASF53:
 4693 0542 66726163 		.ascii	"fractionaldivider\000"
 4693      74696F6E 
 4693      616C6469 
 4693      76696465 
 4693      7200
 4694              	.LASF19:
 4695 0554 46756E63 		.ascii	"FunctionalState\000"
 4695      74696F6E 
 4695      616C5374 
 4695      61746500 
 4696              	.LASF80:
 4697 0564 55534152 		.ascii	"USART_SmartCardNACKCmd\000"
 4697      545F536D 
 4697      61727443 
 4697      6172644E 
 4697      41434B43 
 4698              	.LASF31:
 4699 057b 50434C4B 		.ascii	"PCLK1_Frequency\000"
 4699      315F4672 
 4699      65717565 
 4699      6E637900 
 4700              	.LASF93:
 4701 058b 55534152 		.ascii	"USART_GetFlagStatus\000"
 4701      545F4765 
 4701      74466C61 
 4701      67537461 
 4701      74757300 
 4702              	.LASF102:
 4703 059f 5243435F 		.ascii	"RCC_GetClocksFreq\000"
 4703      47657443 
 4703      6C6F636B 
 4703      73467265 
 4703      7100
 4704              	.LASF49:
 4705 05b1 55534152 		.ascii	"USART_InitStruct\000"
 4705      545F496E 
 4705      69745374 
 4705      72756374 
 4705      00
 4706              	.LASF54:
 4707 05c2 5243435F 		.ascii	"RCC_ClocksStatus\000"
 4707      436C6F63 
 4707      6B735374 
 4707      61747573 
ARM GAS  /tmp/ccyhuBN5.s 			page 115


 4707      00
 4708              	.LASF56:
 4709 05d3 55534152 		.ascii	"USART_ClockInit\000"
 4709      545F436C 
 4709      6F636B49 
 4709      6E697400 
 4710              	.LASF70:
 4711 05e3 55534152 		.ascii	"USART_WakeUpConfig\000"
 4711      545F5761 
 4711      6B655570 
 4711      436F6E66 
 4711      696700
 4712              	.LASF76:
 4713 05f6 55534152 		.ascii	"USART_HalfDuplexCmd\000"
 4713      545F4861 
 4713      6C664475 
 4713      706C6578 
 4713      436D6400 
 4714              	.LASF55:
 4715 060a 55534152 		.ascii	"USART_StructInit\000"
 4715      545F5374 
 4715      72756374 
 4715      496E6974 
 4715      00
 4716              	.LASF62:
 4717 061b 55534152 		.ascii	"USART_Prescaler\000"
 4717      545F5072 
 4717      65736361 
 4717      6C657200 
 4718              	.LASF42:
 4719 062b 55534152 		.ascii	"USART_CPOL\000"
 4719      545F4350 
 4719      4F4C00
 4720              	.LASF90:
 4721 0636 69746D61 		.ascii	"itmask\000"
 4721      736B00
 4722              	.LASF106:
 4723 063d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4723      52784275 
 4723      66666572 
 4723      00
 4724              	.LASF92:
 4725 064a 55534152 		.ascii	"USART_ReceiveData\000"
 4725      545F5265 
 4725      63656976 
 4725      65446174 
 4725      6100
 4726              	.LASF104:
 4727 065c 73746D33 		.ascii	"stm32f4xx_usart.c\000"
 4727      32663478 
 4727      785F7573 
 4727      6172742E 
 4727      6300
 4728              	.LASF88:
 4729 066e 75736172 		.ascii	"usartreg\000"
 4729      74726567 
 4729      00
ARM GAS  /tmp/ccyhuBN5.s 			page 116


 4730              	.LASF18:
 4731 0677 454E4142 		.ascii	"ENABLE\000"
 4731      4C4500
 4732              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.4 20130913 (release) [ARM/embedded-4_7-br
ARM GAS  /tmp/ccyhuBN5.s 			page 117


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
     /tmp/ccyhuBN5.s:70     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccyhuBN5.s:75     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccyhuBN5.s:192    .text.USART_DeInit:0000000000000090 $d
     /tmp/ccyhuBN5.s:202    .text.USART_Init:0000000000000000 $t
     /tmp/ccyhuBN5.s:207    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccyhuBN5.s:361    .text.USART_Init:00000000000000b4 $d
     /tmp/ccyhuBN5.s:366    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccyhuBN5.s:371    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccyhuBN5.s:402    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccyhuBN5.s:407    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccyhuBN5.s:445    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccyhuBN5.s:450    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccyhuBN5.s:472    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:477    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccyhuBN5.s:508    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccyhuBN5.s:513    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccyhuBN5.s:536    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:541    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccyhuBN5.s:572    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:577    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccyhuBN5.s:608    .text.USART_SendData:0000000000000000 $t
     /tmp/ccyhuBN5.s:613    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccyhuBN5.s:631    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccyhuBN5.s:636    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccyhuBN5.s:655    .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccyhuBN5.s:660    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccyhuBN5.s:685    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:690    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/ccyhuBN5.s:721    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/ccyhuBN5.s:726    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/ccyhuBN5.s:751    .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccyhuBN5.s:756    .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccyhuBN5.s:781    .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:786    .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccyhuBN5.s:817    .text.USART_SendBreak:0000000000000000 $t
     /tmp/ccyhuBN5.s:822    .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/ccyhuBN5.s:840    .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:845    .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccyhuBN5.s:876    .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccyhuBN5.s:881    .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccyhuBN5.s:904    .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:909    .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccyhuBN5.s:940    .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:945    .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccyhuBN5.s:976    .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccyhuBN5.s:981    .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccyhuBN5.s:1006   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:1011   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccyhuBN5.s:1042   .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccyhuBN5.s:1047   .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccyhuBN5.s:1076   .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccyhuBN5.s:1081   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccyhuBN5.s:1148   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccyhuBN5.s:1153   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccyhuBN5.s:1175   .text.USART_ClearFlag:0000000000000000 $t
ARM GAS  /tmp/ccyhuBN5.s 			page 118


     /tmp/ccyhuBN5.s:1180   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccyhuBN5.s:1198   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccyhuBN5.s:1203   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccyhuBN5.s:1276   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccyhuBN5.s:1281   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
