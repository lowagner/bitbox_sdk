ARM GAS  /tmp/ccXZiPD3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3	@ Tag_ABI_HardFP_use
   4              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   7              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   8              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   9              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
  10              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
  11              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  12              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  13              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  14              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  15              		.file	"stm32f4xx_dma.c"
  16              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.7.4 20130913 (release) [ARM/embedded-4_7-
  17              	@	compiled by GNU C version 4.7.3, GMP version 5.0.5, MPFR version 3.1.1-p2, MPC version 0.9
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed:  -I . -I ../ -I cmsis/ -imultilib armv7e-m/fpu
  20              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/4.7.4/
  21              	@ -isysroot /usr/bin/../arm-none-eabi -MD stm32f4xx_dma.d
  22              	@ -MF .dep/stm32f4xx_dma.o.d -MP -MQ stm32f4xx_dma.o -D__USES_INITFINI__
  23              	@ -D __FPU_USED=1 -D __arm__ -D __ASSEMBLY__ -D USE_STDPERIPH_DRIVER
  24              	@ -D STM32F4XX -D HSE_VALUE=8000000 -D __FPU_PRESENT=1 -D __FPU_USED=1
  25              	@ -D STM32F405VG -D USE_USB_OTG_FS -D RUN_FROM_FLASH=1 stm32f4xx_dma.c
  26              	@ -mthumb -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb
  27              	@ -auxbase-strip stm32f4xx_dma.o -gdwarf-2 -Os -Wall -Wstrict-prototypes
  28              	@ -std=gnu99 -falign-functions=16 -fno-inline -fomit-frame-pointer
  29              	@ -fverbose-asm -ffunction-sections -fdata-sections
  30              	@ options enabled:  -fauto-inc-dec -fbranch-count-reg -fcaller-saves
  31              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  32              	@ -fcrossjumping -fcse-follow-jumps -fdata-sections -fdebug-types-section
  33              	@ -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize -fdwarf2-cfi-asm
  34              	@ -fearly-inlining -feliminate-unused-debug-types -fexpensive-optimizations
  35              	@ -fforward-propagate -ffunction-cse -ffunction-sections -fgcse -fgcse-lm
  36              	@ -fgnu-runtime -fguess-branch-probability -fident -fif-conversion
  37              	@ -fif-conversion2 -findirect-inlining -finline-atomics -finline-functions
  38              	@ -finline-functions-called-once -finline-small-functions -fipa-cp
  39              	@ -fipa-profile -fipa-pure-const -fipa-reference -fipa-sra
  40              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  41              	@ -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
  42              	@ -fmerge-debug-strings -fomit-frame-pointer -foptimize-register-move
  43              	@ -foptimize-sibling-calls -fpartial-inlining -fpeephole -fpeephole2
  44              	@ -fprefetch-loop-arrays -freg-struct-return -fregmove -frename-registers
  45              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  46              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  47              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  48              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  49              	@ -fsched-stalled-insns-dep -fschedule-insns2 -fsection-anchors
  50              	@ -fshow-column -fshrink-wrap -fsigned-zeros -fsplit-ivs-in-unroller
  51              	@ -fsplit-wide-types -fstrict-aliasing -fstrict-overflow
  52              	@ -fstrict-volatile-bitfields -fthread-jumps -ftoplevel-reorder
  53              	@ -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp
  54              	@ -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-cselim -ftree-dce
  55              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  56              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  57              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pre
ARM GAS  /tmp/ccXZiPD3.s 			page 2


  58              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  59              	@ -ftree-slp-vectorize -ftree-sra -ftree-switch-conversion
  60              	@ -ftree-tail-merge -ftree-ter -ftree-vect-loop-version -ftree-vrp
  61              	@ -funit-at-a-time -funroll-loops -fvar-tracking -fvar-tracking-assignments
  62              	@ -fverbose-asm -fweb -fzero-initialized-in-bss -mlittle-endian
  63              	@ -msched-prolog -mthumb -munaligned-access -mvectorize-with-neon-quad
  64              	
  65              		.text
  66              	.Ltext0:
  67              		.cfi_sections	.debug_frame
  68              		.section	.text.DMA_DeInit,"ax",%progbits
  69              		.align	1
  70              		.global	DMA_DeInit
  71              		.thumb
  72              		.thumb_func
  73              		.type	DMA_DeInit, %function
  74              	DMA_DeInit:
  75              	.LFB110:
  76              		.file 1 "stm32f4xx_dma.c"
   1:stm32f4xx_dma.c **** /**
   2:stm32f4xx_dma.c ****   ******************************************************************************
   3:stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:stm32f4xx_dma.c ****   * @version V1.1.0
   6:stm32f4xx_dma.c ****   * @date    11-January-2013
   7:stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:stm32f4xx_dma.c ****   *           + Initialization and Configuration
  10:stm32f4xx_dma.c ****   *           + Data Counter
  11:stm32f4xx_dma.c ****   *           + Double Buffer mode configuration and command  
  12:stm32f4xx_dma.c ****   *           + Interrupts and flags management
  13:stm32f4xx_dma.c ****   *           
  14:stm32f4xx_dma.c ****   @verbatim      
  15:stm32f4xx_dma.c ****  ===============================================================================      
  16:stm32f4xx_dma.c ****                        ##### How to use this driver #####
  17:stm32f4xx_dma.c ****  ===============================================================================
  18:stm32f4xx_dma.c ****     [..] 
  19:stm32f4xx_dma.c ****       (#) Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, ENABLE)
  20:stm32f4xx_dma.c ****           function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:stm32f4xx_dma.c ****           function for DMA2.
  22:stm32f4xx_dma.c ****   
  23:stm32f4xx_dma.c ****       (#) Enable and configure the peripheral to be connected to the DMA Stream
  24:stm32f4xx_dma.c ****           (except for internal SRAM / FLASH memories: no initialization is 
  25:stm32f4xx_dma.c ****           necessary). 
  26:stm32f4xx_dma.c ****           
  27:stm32f4xx_dma.c ****       (#) For a given Stream, program the required configuration through following parameters:   
  28:stm32f4xx_dma.c ****           Source and Destination addresses, Transfer Direction, Transfer size, Source and Destinati
  29:stm32f4xx_dma.c ****           data formats, Circular or Normal mode, Stream Priority level, Source and Destination 
  30:stm32f4xx_dma.c ****           Incrementation mode, FIFO mode and its Threshold (if needed), Burst 
  31:stm32f4xx_dma.c ****           mode for Source and/or Destination (if needed) using the DMA_Init() function.
  32:stm32f4xx_dma.c ****           To avoid filling unneccessary fields, you can call DMA_StructInit() function
  33:stm32f4xx_dma.c ****           to initialize a given structure with default values (reset values), the modify
  34:stm32f4xx_dma.c ****           only necessary fields 
  35:stm32f4xx_dma.c ****           (ie. Source and Destination addresses, Transfer size and Data Formats).
  36:stm32f4xx_dma.c ****   
  37:stm32f4xx_dma.c ****       (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  38:stm32f4xx_dma.c ****           DMA_ITConfig() if you need to use DMA interrupts. 
ARM GAS  /tmp/ccXZiPD3.s 			page 3


  39:stm32f4xx_dma.c ****   
  40:stm32f4xx_dma.c ****       (#) Optionally, if the Circular mode is enabled, you can use the Double buffer mode by config
  41:stm32f4xx_dma.c ****           the second Memory address and the first Memory to be used through the function 
  42:stm32f4xx_dma.c ****           DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the function
  43:stm32f4xx_dma.c ****           DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  44:stm32f4xx_dma.c ****       
  45:stm32f4xx_dma.c ****       (#) Enable the DMA stream using the DMA_Cmd() function. 
  46:stm32f4xx_dma.c ****                   
  47:stm32f4xx_dma.c ****       (#) Activate the needed Stream Request using PPP_DMACmd() function for
  48:stm32f4xx_dma.c ****           any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  49:stm32f4xx_dma.c ****           The function allowing this operation is provided in each PPP peripheral
  50:stm32f4xx_dma.c ****           driver (ie. SPI_DMACmd for SPI peripheral).
  51:stm32f4xx_dma.c ****           Once the Stream is enabled, it is not possible to modify its configuration
  52:stm32f4xx_dma.c ****           unless the stream is stopped and disabled.
  53:stm32f4xx_dma.c ****           After enabling the Stream, it is advised to monitor the EN bit status using
  54:stm32f4xx_dma.c ****           the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  55:stm32f4xx_dma.c ****           this bit will remain reset and all transfers on this Stream will remain on hold.      
  56:stm32f4xx_dma.c ****   
  57:stm32f4xx_dma.c ****       (#) Optionally, you can configure the number of data to be transferred
  58:stm32f4xx_dma.c ****           when the Stream is disabled (ie. after each Transfer Complete event
  59:stm32f4xx_dma.c ****           or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  60:stm32f4xx_dma.c ****           And you can get the number of remaining data to be transferred using 
  61:stm32f4xx_dma.c ****           the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  62:stm32f4xx_dma.c ****           enabled and running).  
  63:stm32f4xx_dma.c ****                      
  64:stm32f4xx_dma.c ****       (#) To control DMA events you can use one of the following two methods:
  65:stm32f4xx_dma.c ****         (##) Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:stm32f4xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:stm32f4xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  68:stm32f4xx_dma.c ****              communication phase.
  69:stm32f4xx_dma.c ****     [..]     
  70:stm32f4xx_dma.c ****           After checking on a flag you should clear it using DMA_ClearFlag()
  71:stm32f4xx_dma.c ****           function. And after checking on an interrupt event you should 
  72:stm32f4xx_dma.c ****           clear it using DMA_ClearITPendingBit() function.    
  73:stm32f4xx_dma.c ****                 
  74:stm32f4xx_dma.c ****       (#) Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  75:stm32f4xx_dma.c ****           the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  76:stm32f4xx_dma.c ****           the Memory Address to be modified is not the one currently in use by DMA Stream.
  77:stm32f4xx_dma.c ****           This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  78:stm32f4xx_dma.c ****                 
  79:stm32f4xx_dma.c ****       (#) Optionally, Pause-Resume operations may be performed:
  80:stm32f4xx_dma.c ****           The DMA_Cmd() function may be used to perform Pause-Resume operation. 
  81:stm32f4xx_dma.c ****           When a transfer is ongoing, calling this function to disable the 
  82:stm32f4xx_dma.c ****           Stream will cause the transfer to be paused. All configuration registers 
  83:stm32f4xx_dma.c ****           and the number of remaining data will be preserved. When calling again 
  84:stm32f4xx_dma.c ****           this function to re-enable the Stream, the transfer will be resumed from 
  85:stm32f4xx_dma.c ****           the point where it was paused.          
  86:stm32f4xx_dma.c ****                    
  87:stm32f4xx_dma.c ****       -@- Memory-to-Memory transfer is possible by setting the address of the memory into
  88:stm32f4xx_dma.c ****            the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  89:stm32f4xx_dma.c ****            are not allowed.
  90:stm32f4xx_dma.c ****     
  91:stm32f4xx_dma.c ****       -@- The FIFO is used mainly to reduce bus usage and to allow data 
  92:stm32f4xx_dma.c ****            packing/unpacking: it is possible to set different Data Sizes for 
  93:stm32f4xx_dma.c ****            the Peripheral and the Memory (ie. you can set Half-Word data size 
  94:stm32f4xx_dma.c ****            for the peripheral to access its data register and set Word data size
  95:stm32f4xx_dma.c ****            for the Memory to gain in access time. Each two Half-words will be 
ARM GAS  /tmp/ccXZiPD3.s 			page 4


  96:stm32f4xx_dma.c ****            packed and written in a single access to a Word in the Memory).
  97:stm32f4xx_dma.c ****       
  98:stm32f4xx_dma.c ****       -@- When FIFO is disabled, it is not allowed to configure different 
  99:stm32f4xx_dma.c ****            Data Sizes for Source and Destination. In this case the Peripheral 
 100:stm32f4xx_dma.c ****            Data Size will be applied to both Source and Destination.               
 101:stm32f4xx_dma.c ****   
 102:stm32f4xx_dma.c ****   @endverbatim                                 
 103:stm32f4xx_dma.c ****   ******************************************************************************
 104:stm32f4xx_dma.c ****   * @attention
 105:stm32f4xx_dma.c ****   *
 106:stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
 107:stm32f4xx_dma.c ****   *
 108:stm32f4xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 109:stm32f4xx_dma.c ****   * You may not use this file except in compliance with the License.
 110:stm32f4xx_dma.c ****   * You may obtain a copy of the License at:
 111:stm32f4xx_dma.c ****   *
 112:stm32f4xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 113:stm32f4xx_dma.c ****   *
 114:stm32f4xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
 115:stm32f4xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 116:stm32f4xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 117:stm32f4xx_dma.c ****   * See the License for the specific language governing permissions and
 118:stm32f4xx_dma.c ****   * limitations under the License.
 119:stm32f4xx_dma.c ****   *
 120:stm32f4xx_dma.c ****   ******************************************************************************  
 121:stm32f4xx_dma.c ****   */ 
 122:stm32f4xx_dma.c **** 
 123:stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 124:stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 125:stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 126:stm32f4xx_dma.c **** 
 127:stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 128:stm32f4xx_dma.c ****   * @{
 129:stm32f4xx_dma.c ****   */
 130:stm32f4xx_dma.c **** 
 131:stm32f4xx_dma.c **** /** @defgroup DMA 
 132:stm32f4xx_dma.c ****   * @brief DMA driver modules
 133:stm32f4xx_dma.c ****   * @{
 134:stm32f4xx_dma.c ****   */ 
 135:stm32f4xx_dma.c **** 
 136:stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 137:stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 138:stm32f4xx_dma.c **** 
 139:stm32f4xx_dma.c **** /* Masks Definition */
 140:stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 141:stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 142:stm32f4xx_dma.c **** 
 143:stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 144:stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 145:stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 146:stm32f4xx_dma.c **** 
 147:stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 148:stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 149:stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 150:stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 151:stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 152:stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
ARM GAS  /tmp/ccXZiPD3.s 			page 5


 153:stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 154:stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 155:stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 156:stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 157:stm32f4xx_dma.c **** 
 158:stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 159:stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 160:stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 161:stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 162:stm32f4xx_dma.c **** 
 163:stm32f4xx_dma.c **** 
 164:stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 165:stm32f4xx_dma.c ****   * @{
 166:stm32f4xx_dma.c ****   */
 167:stm32f4xx_dma.c **** 
 168:stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 169:stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 170:stm32f4xx_dma.c ****  *
 171:stm32f4xx_dma.c **** @verbatim   
 172:stm32f4xx_dma.c ****  ===============================================================================
 173:stm32f4xx_dma.c ****                 ##### Initialization and Configuration functions #####
 174:stm32f4xx_dma.c ****  ===============================================================================  
 175:stm32f4xx_dma.c ****     [..]
 176:stm32f4xx_dma.c ****     This subsection provides functions allowing to initialize the DMA Stream source
 177:stm32f4xx_dma.c ****     and destination addresses, incrementation and data sizes, transfer direction, 
 178:stm32f4xx_dma.c ****     buffer size, circular/normal mode selection, memory-to-memory mode selection 
 179:stm32f4xx_dma.c ****     and Stream priority value.
 180:stm32f4xx_dma.c ****     [..]
 181:stm32f4xx_dma.c ****     The DMA_Init() function follows the DMA configuration procedures as described in
 182:stm32f4xx_dma.c ****     reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 183:stm32f4xx_dma.c ****     This condition should be checked by user application using the function DMA_GetCmdStatus()
 184:stm32f4xx_dma.c ****     before calling the DMA_Init() function.
 185:stm32f4xx_dma.c **** 
 186:stm32f4xx_dma.c **** @endverbatim
 187:stm32f4xx_dma.c ****   * @{
 188:stm32f4xx_dma.c ****   */
 189:stm32f4xx_dma.c **** 
 190:stm32f4xx_dma.c **** /**
 191:stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 192:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 193:stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 194:stm32f4xx_dma.c ****   * @retval None
 195:stm32f4xx_dma.c ****   */
 196:stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 197:stm32f4xx_dma.c **** {
  77              		.loc 1 197 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82              	.LVL0:
 198:stm32f4xx_dma.c ****   /* Check the parameters */
 199:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 200:stm32f4xx_dma.c **** 
 201:stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 202:stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  83              		.loc 1 202 0
ARM GAS  /tmp/ccXZiPD3.s 			page 6


  84 0000 0368     		ldr	r3, [r0, #0]	@ D.6150, DMAy_Streamx_1(D)->CR
  85 0002 23F00101 		bic	r1, r3, #1	@ D.6151, D.6150,
  86 0006 0160     		str	r1, [r0, #0]	@ D.6151, DMAy_Streamx_1(D)->CR
 203:stm32f4xx_dma.c **** 
 204:stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 205:stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
 206:stm32f4xx_dma.c ****   
 207:stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 208:stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
 209:stm32f4xx_dma.c ****   
 210:stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 211:stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
 212:stm32f4xx_dma.c ****   
 213:stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 214:stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
 215:stm32f4xx_dma.c **** 
 216:stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 217:stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
 218:stm32f4xx_dma.c **** 
 219:stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 220:stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 221:stm32f4xx_dma.c **** 
 222:stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 223:stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  87              		.loc 1 223 0
  88 0008 2D49     		ldr	r1, .L27	@ tmp143,
 205:stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  89              		.loc 1 205 0
  90 000a 0022     		movs	r2, #0	@ tmp137,
 220:stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  91              		.loc 1 220 0
  92 000c 2123     		movs	r3, #33	@ tmp142,
  93              		.loc 1 223 0
  94 000e 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp143
 205:stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  95              		.loc 1 205 0
  96 0010 0260     		str	r2, [r0, #0]	@ tmp137, DMAy_Streamx_1(D)->CR
 208:stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  97              		.loc 1 208 0
  98 0012 4260     		str	r2, [r0, #4]	@ tmp137, DMAy_Streamx_1(D)->NDTR
 211:stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  99              		.loc 1 211 0
 100 0014 8260     		str	r2, [r0, #8]	@ tmp137, DMAy_Streamx_1(D)->PAR
 214:stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
 101              		.loc 1 214 0
 102 0016 C260     		str	r2, [r0, #12]	@ tmp137, DMAy_Streamx_1(D)->M0AR
 217:stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
 103              		.loc 1 217 0
 104 0018 0261     		str	r2, [r0, #16]	@ tmp137, DMAy_Streamx_1(D)->M1AR
 220:stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 105              		.loc 1 220 0
 106 001a 4361     		str	r3, [r0, #20]	@ tmp142, DMAy_Streamx_1(D)->FCR
 107              		.loc 1 223 0
 108 001c 17D0     		beq	.L18	@,
 109              	.L2:
 224:stm32f4xx_dma.c ****   {
 225:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
ARM GAS  /tmp/ccXZiPD3.s 			page 7


 226:stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
 227:stm32f4xx_dma.c ****   }
 228:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
 110              		.loc 1 228 0
 111 001e 294B     		ldr	r3, .L27+4	@ tmp146,
 112 0020 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp146
 113 0022 1BD0     		beq	.L19	@,
 114              	.L4:
 229:stm32f4xx_dma.c ****   {
 230:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 231:stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 232:stm32f4xx_dma.c ****   }
 233:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 115              		.loc 1 233 0
 116 0024 2849     		ldr	r1, .L27+8	@ tmp149,
 117 0026 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp149
 118 0028 20D0     		beq	.L20	@,
 119              	.L5:
 234:stm32f4xx_dma.c ****   {
 235:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 236:stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 237:stm32f4xx_dma.c ****   }
 238:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 120              		.loc 1 238 0
 121 002a 284B     		ldr	r3, .L27+12	@ tmp152,
 122 002c 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp152
 123 002e 25D0     		beq	.L21	@,
 124              	.L6:
 239:stm32f4xx_dma.c ****   {
 240:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 241:stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 242:stm32f4xx_dma.c ****   }
 243:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 125              		.loc 1 243 0
 126 0030 2749     		ldr	r1, .L27+16	@ tmp155,
 127 0032 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp155
 128 0034 2AD0     		beq	.L22	@,
 129              	.L7:
 244:stm32f4xx_dma.c ****   {
 245:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 246:stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 247:stm32f4xx_dma.c ****   }
 248:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 130              		.loc 1 248 0
 131 0036 274B     		ldr	r3, .L27+20	@ tmp158,
 132 0038 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp158
 133 003a 2ED0     		beq	.L23	@,
 134              	.L8:
 249:stm32f4xx_dma.c ****   {
 250:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 251:stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 252:stm32f4xx_dma.c ****   }
 253:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 135              		.loc 1 253 0
 136 003c 2649     		ldr	r1, .L27+24	@ tmp161,
 137 003e 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp161
 138 0040 32D0     		beq	.L24	@,
ARM GAS  /tmp/ccXZiPD3.s 			page 8


 139              	.L9:
 254:stm32f4xx_dma.c ****   {
 255:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 256:stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 257:stm32f4xx_dma.c ****   }
 258:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 140              		.loc 1 258 0
 141 0042 264B     		ldr	r3, .L27+28	@ tmp164,
 142 0044 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp164
 143 0046 36D0     		beq	.L25	@,
 144              	.L10:
 259:stm32f4xx_dma.c ****   {
 260:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 261:stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 262:stm32f4xx_dma.c ****   }
 263:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 145              		.loc 1 263 0
 146 0048 2549     		ldr	r1, .L27+32	@ tmp167,
 147 004a 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp167
 148 004c 03D1     		bne	.L11	@,
 149              	.L18:
 264:stm32f4xx_dma.c ****   {
 265:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 266:stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 150              		.loc 1 266 0
 151 004e 3D23     		movs	r3, #61	@ tmp169,
 152 0050 41F8083C 		str	r3, [r1, #-8]	@ tmp169,
 153 0054 7047     		bx	lr	@
 154              	.L11:
 267:stm32f4xx_dma.c ****   }
 268:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 155              		.loc 1 268 0
 156 0056 234B     		ldr	r3, .L27+36	@ tmp170,
 157 0058 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp170
 158 005a 04D1     		bne	.L12	@,
 159              	.L19:
 269:stm32f4xx_dma.c ****   {
 270:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 271:stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 160              		.loc 1 271 0
 161 005c 4FF47461 		mov	r1, #3904	@ tmp172,
 162 0060 43F8201C 		str	r1, [r3, #-32]	@ tmp172,
 163 0064 7047     		bx	lr	@
 164              	.L12:
 272:stm32f4xx_dma.c ****   }
 273:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 165              		.loc 1 273 0
 166 0066 2049     		ldr	r1, .L27+40	@ tmp173,
 167 0068 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp173
 168 006a 04D1     		bne	.L13	@,
 169              	.L20:
 274:stm32f4xx_dma.c ****   {
 275:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 276:stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 170              		.loc 1 276 0
 171 006c 4FF47412 		mov	r2, #3997696	@ tmp175,
 172 0070 41F8382C 		str	r2, [r1, #-56]	@ tmp175,
ARM GAS  /tmp/ccXZiPD3.s 			page 9


 173 0074 7047     		bx	lr	@
 174              	.L13:
 277:stm32f4xx_dma.c ****   }
 278:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 175              		.loc 1 278 0
 176 0076 1D4B     		ldr	r3, .L27+44	@ tmp176,
 177 0078 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp176
 178 007a 04D1     		bne	.L14	@,
 179              	.L21:
 279:stm32f4xx_dma.c ****   {
 280:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 281:stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 180              		.loc 1 281 0
 181 007c 4FF07460 		mov	r0, #255852544	@ tmp178,
 182              	.LVL1:
 183 0080 43F8500C 		str	r0, [r3, #-80]	@ tmp178,
 184 0084 7047     		bx	lr	@
 185              	.LVL2:
 186              	.L14:
 282:stm32f4xx_dma.c ****   }
 283:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 187              		.loc 1 283 0
 188 0086 1A49     		ldr	r1, .L27+48	@ tmp179,
 189 0088 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp179
 190 008a 03D1     		bne	.L15	@,
 191              	.L22:
 284:stm32f4xx_dma.c ****   {
 285:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 286:stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 192              		.loc 1 286 0
 193 008c 194B     		ldr	r3, .L27+52	@ tmp181,
 194 008e 41F8643C 		str	r3, [r1, #-100]	@ tmp181,
 195 0092 7047     		bx	lr	@
 196              	.L15:
 287:stm32f4xx_dma.c ****   }
 288:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 197              		.loc 1 288 0
 198 0094 184B     		ldr	r3, .L27+56	@ tmp182,
 199 0096 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp182
 200 0098 03D1     		bne	.L16	@,
 201              	.L23:
 289:stm32f4xx_dma.c ****   {
 290:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 291:stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 202              		.loc 1 291 0
 203 009a 1849     		ldr	r1, .L27+60	@ tmp184,
 204 009c 43F87C1C 		str	r1, [r3, #-124]	@ tmp184,
 205 00a0 7047     		bx	lr	@
 206              	.L16:
 292:stm32f4xx_dma.c ****   }
 293:stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 207              		.loc 1 293 0
 208 00a2 1749     		ldr	r1, .L27+64	@ tmp185,
 209 00a4 8842     		cmp	r0, r1	@ DMAy_Streamx, tmp185
 210 00a6 03D1     		bne	.L17	@,
 211              	.L24:
 294:stm32f4xx_dma.c ****   {
ARM GAS  /tmp/ccXZiPD3.s 			page 10


 295:stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 296:stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 212              		.loc 1 296 0
 213 00a8 164A     		ldr	r2, .L27+68	@ tmp187,
 214 00aa 41F8942C 		str	r2, [r1, #-148]	@ tmp187,
 215 00ae 7047     		bx	lr	@
 216              	.L17:
 297:stm32f4xx_dma.c ****   }
 298:stm32f4xx_dma.c ****   else 
 299:stm32f4xx_dma.c ****   {
 300:stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 217              		.loc 1 300 0
 218 00b0 154B     		ldr	r3, .L27+72	@ tmp188,
 219 00b2 9842     		cmp	r0, r3	@ DMAy_Streamx, tmp188
 220 00b4 03D1     		bne	.L1	@,
 221              	.L25:
 301:stm32f4xx_dma.c ****     {
 302:stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 303:stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 222              		.loc 1 303 0
 223 00b6 4FF03D50 		mov	r0, #792723456	@ tmp190,
 224              	.LVL3:
 225 00ba 43F8AC0C 		str	r0, [r3, #-172]	@ tmp190,
 226              	.L1:
 227 00be 7047     		bx	lr	@
 228              	.L28:
 229              		.align	2
 230              	.L27:
 231 00c0 10600240 		.word	1073897488
 232 00c4 28600240 		.word	1073897512
 233 00c8 40600240 		.word	1073897536
 234 00cc 58600240 		.word	1073897560
 235 00d0 70600240 		.word	1073897584
 236 00d4 88600240 		.word	1073897608
 237 00d8 A0600240 		.word	1073897632
 238 00dc B8600240 		.word	1073897656
 239 00e0 10640240 		.word	1073898512
 240 00e4 28640240 		.word	1073898536
 241 00e8 40640240 		.word	1073898560
 242 00ec 58640240 		.word	1073898584
 243 00f0 70640240 		.word	1073898608
 244 00f4 3D000020 		.word	536870973
 245 00f8 88640240 		.word	1073898632
 246 00fc 400F0020 		.word	536874816
 247 0100 A0640240 		.word	1073898656
 248 0104 00003D20 		.word	540868608
 249 0108 B8640240 		.word	1073898680
 250              		.cfi_endproc
 251              	.LFE110:
 252              		.size	DMA_DeInit, .-DMA_DeInit
 253              		.section	.text.DMA_Init,"ax",%progbits
 254              		.align	1
 255              		.global	DMA_Init
 256              		.thumb
 257              		.thumb_func
 258              		.type	DMA_Init, %function
 259              	DMA_Init:
ARM GAS  /tmp/ccXZiPD3.s 			page 11


 260              	.LFB111:
 304:stm32f4xx_dma.c ****     }
 305:stm32f4xx_dma.c ****   }
 306:stm32f4xx_dma.c **** }
 307:stm32f4xx_dma.c **** 
 308:stm32f4xx_dma.c **** /**
 309:stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 310:stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 311:stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 312:stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 313:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 314:stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 315:stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 316:stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 317:stm32f4xx_dma.c ****   * @retval None
 318:stm32f4xx_dma.c ****   */
 319:stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 320:stm32f4xx_dma.c **** {
 261              		.loc 1 320 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              	.LVL4:
 321:stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 322:stm32f4xx_dma.c **** 
 323:stm32f4xx_dma.c ****   /* Check the parameters */
 324:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 325:stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 326:stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 327:stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 328:stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 329:stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 330:stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 331:stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 332:stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 333:stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 334:stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 335:stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 336:stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 337:stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 338:stm32f4xx_dma.c **** 
 339:stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 340:stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 341:stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 266              		.loc 1 341 0
 267 0000 0268     		ldr	r2, [r0, #0]	@ tmpreg, DMAy_Streamx_2(D)->CR
 268              	.LVL5:
 342:stm32f4xx_dma.c **** 
 343:stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 344:stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 269              		.loc 1 344 0
 270 0002 134B     		ldr	r3, .L30	@ tmpreg,
 320:stm32f4xx_dma.c **** {
 271              		.loc 1 320 0
 272 0004 10B5     		push	{r4, lr}	@
 273              	.LCFI0:
 274              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccXZiPD3.s 			page 12


 275              		.cfi_offset 4, -8
 276              		.cfi_offset 14, -4
 277              		.loc 1 344 0
 278 0006 1340     		ands	r3, r3, r2	@, tmpreg, tmpreg, tmpreg
 279              	.LVL6:
 345:stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 346:stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 347:stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 348:stm32f4xx_dma.c **** 
 349:stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 350:stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 351:stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 352:stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 353:stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 354:stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 355:stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 356:stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 357:stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 358:stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 359:stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 360:stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 280              		.loc 1 360 0
 281 0008 CC68     		ldr	r4, [r1, #12]	@ DMA_InitStruct_5(D)->DMA_DIR, DMA_InitStruct_5(D)->DMA_DIR
 282 000a 0A68     		ldr	r2, [r1, #0]	@ DMA_InitStruct_5(D)->DMA_Channel, DMA_InitStruct_5(D)->DMA_Channel
 283 000c 1443     		orrs	r4, r4, r2	@, tmp168, DMA_InitStruct_5(D)->DMA_DIR, DMA_InitStruct_5(D)->DMA_Channel
 284 000e 4A69     		ldr	r2, [r1, #20]	@ DMA_InitStruct_5(D)->DMA_PeripheralInc, DMA_InitStruct_5(D)->DMA_PeripheralInc
 285 0010 1443     		orrs	r4, r4, r2	@, tmp171, tmp168, DMA_InitStruct_5(D)->DMA_PeripheralInc
 361:stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 286              		.loc 1 361 0
 287 0012 8A69     		ldr	r2, [r1, #24]	@ DMA_InitStruct_5(D)->DMA_MemoryInc, DMA_InitStruct_5(D)->DMA_MemoryInc
 288 0014 1443     		orrs	r4, r4, r2	@, tmp173, tmp171, DMA_InitStruct_5(D)->DMA_MemoryInc
 289 0016 CA69     		ldr	r2, [r1, #28]	@ DMA_InitStruct_5(D)->DMA_PeripheralDataSize, DMA_InitStruct_5(D)->DMA_Peripher
 290 0018 1443     		orrs	r4, r4, r2	@, tmp175, tmp173, DMA_InitStruct_5(D)->DMA_PeripheralDataSize
 362:stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 291              		.loc 1 362 0
 292 001a 0A6A     		ldr	r2, [r1, #32]	@ DMA_InitStruct_5(D)->DMA_MemoryDataSize, DMA_InitStruct_5(D)->DMA_MemoryDataSi
 293 001c 1443     		orrs	r4, r4, r2	@, tmp177, tmp175, DMA_InitStruct_5(D)->DMA_MemoryDataSize
 294 001e 4A6A     		ldr	r2, [r1, #36]	@ DMA_InitStruct_5(D)->DMA_Mode, DMA_InitStruct_5(D)->DMA_Mode
 295 0020 1443     		orrs	r4, r4, r2	@, tmp179, tmp177, DMA_InitStruct_5(D)->DMA_Mode
 363:stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 296              		.loc 1 363 0
 297 0022 8A6A     		ldr	r2, [r1, #40]	@ DMA_InitStruct_5(D)->DMA_Priority, DMA_InitStruct_5(D)->DMA_Priority
 298 0024 1443     		orrs	r4, r4, r2	@, tmp181, tmp179, DMA_InitStruct_5(D)->DMA_Priority
 299 0026 4A6B     		ldr	r2, [r1, #52]	@ DMA_InitStruct_5(D)->DMA_MemoryBurst, DMA_InitStruct_5(D)->DMA_MemoryBurst
 300 0028 1443     		orrs	r4, r4, r2	@, tmp183, tmp181, DMA_InitStruct_5(D)->DMA_MemoryBurst
 364:stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 301              		.loc 1 364 0
 302 002a 8A6B     		ldr	r2, [r1, #56]	@ DMA_InitStruct_5(D)->DMA_PeripheralBurst, DMA_InitStruct_5(D)->DMA_PeripheralB
 303 002c 1443     		orrs	r4, r4, r2	@, tmp185, tmp183, DMA_InitStruct_5(D)->DMA_PeripheralBurst
 360:stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 304              		.loc 1 360 0
 305 002e 2343     		orrs	r3, r3, r4	@, tmpreg, tmpreg, tmp185
 306              	.LVL7:
 365:stm32f4xx_dma.c **** 
 366:stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 367:stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 307              		.loc 1 367 0
ARM GAS  /tmp/ccXZiPD3.s 			page 13


 308 0030 0360     		str	r3, [r0, #0]	@ tmpreg, DMAy_Streamx_2(D)->CR
 368:stm32f4xx_dma.c **** 
 369:stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 370:stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 371:stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 309              		.loc 1 371 0
 310 0032 4269     		ldr	r2, [r0, #20]	@ tmpreg, DMAy_Streamx_2(D)->FCR
 311              	.LVL8:
 372:stm32f4xx_dma.c **** 
 373:stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 374:stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 375:stm32f4xx_dma.c **** 
 376:stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 377:stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 378:stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 379:stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 312              		.loc 1 379 0
 313 0034 CB6A     		ldr	r3, [r1, #44]	@ DMA_InitStruct_5(D)->DMA_FIFOMode, DMA_InitStruct_5(D)->DMA_FIFOMode
 374:stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 314              		.loc 1 374 0
 315 0036 22F00704 		bic	r4, r2, #7	@ tmpreg, tmpreg,
 316              	.LVL9:
 317              		.loc 1 379 0
 318 003a 0A6B     		ldr	r2, [r1, #48]	@ DMA_InitStruct_5(D)->DMA_FIFOThreshold, DMA_InitStruct_5(D)->DMA_FIFOThreshold
 319 003c 1A43     		orrs	r2, r2, r3	@, tmp187, DMA_InitStruct_5(D)->DMA_FIFOThreshold, DMA_InitStruct_5(D)->DMA_FIFOMo
 320 003e 2243     		orrs	r2, r2, r4	@, tmpreg, tmp187, tmpreg
 321              	.LVL10:
 380:stm32f4xx_dma.c **** 
 381:stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 382:stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 322              		.loc 1 382 0
 323 0040 4261     		str	r2, [r0, #20]	@ tmpreg, DMAy_Streamx_2(D)->FCR
 383:stm32f4xx_dma.c **** 
 384:stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 385:stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 386:stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 324              		.loc 1 386 0
 325 0042 0B69     		ldr	r3, [r1, #16]	@ D.6147, DMA_InitStruct_5(D)->DMA_BufferSize
 387:stm32f4xx_dma.c **** 
 388:stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 389:stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 390:stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 326              		.loc 1 390 0
 327 0044 4A68     		ldr	r2, [r1, #4]	@ D.6148, DMA_InitStruct_5(D)->DMA_PeripheralBaseAddr
 328              	.LVL11:
 391:stm32f4xx_dma.c **** 
 392:stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 393:stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 394:stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 329              		.loc 1 394 0
 330 0046 8968     		ldr	r1, [r1, #8]	@ D.6149, DMA_InitStruct_5(D)->DMA_Memory0BaseAddr
 331              	.LVL12:
 386:stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 332              		.loc 1 386 0
 333 0048 4360     		str	r3, [r0, #4]	@ D.6147, DMAy_Streamx_2(D)->NDTR
 390:stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 334              		.loc 1 390 0
ARM GAS  /tmp/ccXZiPD3.s 			page 14


 335 004a 8260     		str	r2, [r0, #8]	@ D.6148, DMAy_Streamx_2(D)->PAR
 336              		.loc 1 394 0
 337 004c C160     		str	r1, [r0, #12]	@ D.6149, DMAy_Streamx_2(D)->M0AR
 338 004e 10BD     		pop	{r4, pc}	@
 339              	.L31:
 340              		.align	2
 341              	.L30:
 342 0050 3F801CF0 		.word	-266567617
 343              		.cfi_endproc
 344              	.LFE111:
 345              		.size	DMA_Init, .-DMA_Init
 346              		.section	.text.DMA_StructInit,"ax",%progbits
 347              		.align	1
 348              		.global	DMA_StructInit
 349              		.thumb
 350              		.thumb_func
 351              		.type	DMA_StructInit, %function
 352              	DMA_StructInit:
 353              	.LFB112:
 395:stm32f4xx_dma.c **** }
 396:stm32f4xx_dma.c **** 
 397:stm32f4xx_dma.c **** /**
 398:stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 399:stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 400:stm32f4xx_dma.c ****   *         be initialized.
 401:stm32f4xx_dma.c ****   * @retval None
 402:stm32f4xx_dma.c ****   */
 403:stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 404:stm32f4xx_dma.c **** {
 354              		.loc 1 404 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359              	.LVL13:
 405:stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 406:stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 407:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 360              		.loc 1 407 0
 361 0000 0023     		movs	r3, #0	@ tmp135,
 362 0002 0360     		str	r3, [r0, #0]	@ tmp135, DMA_InitStruct_1(D)->DMA_Channel
 408:stm32f4xx_dma.c **** 
 409:stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 410:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 363              		.loc 1 410 0
 364 0004 4360     		str	r3, [r0, #4]	@ tmp135, DMA_InitStruct_1(D)->DMA_PeripheralBaseAddr
 411:stm32f4xx_dma.c **** 
 412:stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 413:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 365              		.loc 1 413 0
 366 0006 8360     		str	r3, [r0, #8]	@ tmp135, DMA_InitStruct_1(D)->DMA_Memory0BaseAddr
 414:stm32f4xx_dma.c **** 
 415:stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 416:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 367              		.loc 1 416 0
 368 0008 C360     		str	r3, [r0, #12]	@ tmp135, DMA_InitStruct_1(D)->DMA_DIR
 417:stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccXZiPD3.s 			page 15


 418:stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 419:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 369              		.loc 1 419 0
 370 000a 0361     		str	r3, [r0, #16]	@ tmp135, DMA_InitStruct_1(D)->DMA_BufferSize
 420:stm32f4xx_dma.c **** 
 421:stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 422:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 371              		.loc 1 422 0
 372 000c 4361     		str	r3, [r0, #20]	@ tmp135, DMA_InitStruct_1(D)->DMA_PeripheralInc
 423:stm32f4xx_dma.c **** 
 424:stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 425:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 373              		.loc 1 425 0
 374 000e 8361     		str	r3, [r0, #24]	@ tmp135, DMA_InitStruct_1(D)->DMA_MemoryInc
 426:stm32f4xx_dma.c **** 
 427:stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 428:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 375              		.loc 1 428 0
 376 0010 C361     		str	r3, [r0, #28]	@ tmp135, DMA_InitStruct_1(D)->DMA_PeripheralDataSize
 429:stm32f4xx_dma.c **** 
 430:stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 431:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 377              		.loc 1 431 0
 378 0012 0362     		str	r3, [r0, #32]	@ tmp135, DMA_InitStruct_1(D)->DMA_MemoryDataSize
 432:stm32f4xx_dma.c **** 
 433:stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 434:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 379              		.loc 1 434 0
 380 0014 4362     		str	r3, [r0, #36]	@ tmp135, DMA_InitStruct_1(D)->DMA_Mode
 435:stm32f4xx_dma.c **** 
 436:stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 437:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 381              		.loc 1 437 0
 382 0016 8362     		str	r3, [r0, #40]	@ tmp135, DMA_InitStruct_1(D)->DMA_Priority
 438:stm32f4xx_dma.c **** 
 439:stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 440:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 383              		.loc 1 440 0
 384 0018 C362     		str	r3, [r0, #44]	@ tmp135, DMA_InitStruct_1(D)->DMA_FIFOMode
 441:stm32f4xx_dma.c **** 
 442:stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 443:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 385              		.loc 1 443 0
 386 001a 0363     		str	r3, [r0, #48]	@ tmp135, DMA_InitStruct_1(D)->DMA_FIFOThreshold
 444:stm32f4xx_dma.c **** 
 445:stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 446:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 387              		.loc 1 446 0
 388 001c 4363     		str	r3, [r0, #52]	@ tmp135, DMA_InitStruct_1(D)->DMA_MemoryBurst
 447:stm32f4xx_dma.c **** 
 448:stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 449:stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 389              		.loc 1 449 0
 390 001e 8363     		str	r3, [r0, #56]	@ tmp135, DMA_InitStruct_1(D)->DMA_PeripheralBurst
 391 0020 7047     		bx	lr	@
 392              		.cfi_endproc
 393              	.LFE112:
ARM GAS  /tmp/ccXZiPD3.s 			page 16


 394              		.size	DMA_StructInit, .-DMA_StructInit
 395              		.section	.text.DMA_Cmd,"ax",%progbits
 396              		.align	1
 397              		.global	DMA_Cmd
 398              		.thumb
 399              		.thumb_func
 400              		.type	DMA_Cmd, %function
 401              	DMA_Cmd:
 402              	.LFB113:
 450:stm32f4xx_dma.c **** }
 451:stm32f4xx_dma.c **** 
 452:stm32f4xx_dma.c **** /**
 453:stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 454:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 455:stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 456:stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 457:stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 458:stm32f4xx_dma.c ****   *
 459:stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 460:stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 461:stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 462:stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 463:stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 464:stm32f4xx_dma.c ****   *        the point where it was paused.          
 465:stm32f4xx_dma.c ****   *    
 466:stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 467:stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 468:stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 469:stm32f4xx_dma.c ****   *        parameter is wrong.
 470:stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 471:stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 472:stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 473:stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 474:stm32f4xx_dma.c ****   *        this single data is finished.            
 475:stm32f4xx_dma.c ****   *    
 476:stm32f4xx_dma.c ****   * @retval None
 477:stm32f4xx_dma.c ****   */
 478:stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 479:stm32f4xx_dma.c **** {
 403              		.loc 1 479 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL14:
 480:stm32f4xx_dma.c ****   /* Check the parameters */
 481:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 482:stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 483:stm32f4xx_dma.c **** 
 484:stm32f4xx_dma.c ****   if (NewState != DISABLE)
 485:stm32f4xx_dma.c ****   {
 486:stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 487:stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 409              		.loc 1 487 0
 410 0000 0368     		ldr	r3, [r0, #0]	@ D.6120,* DMAy_Streamx
 484:stm32f4xx_dma.c ****   if (NewState != DISABLE)
 411              		.loc 1 484 0
ARM GAS  /tmp/ccXZiPD3.s 			page 17


 412 0002 11B1     		cbz	r1, .L34	@ NewState,
 413              		.loc 1 487 0
 414 0004 43F00101 		orr	r1, r3, #1	@ D.6121, D.6120,
 415              	.LVL15:
 416 0008 01E0     		b	.L36	@
 417              	.LVL16:
 418              	.L34:
 488:stm32f4xx_dma.c ****   }
 489:stm32f4xx_dma.c ****   else
 490:stm32f4xx_dma.c ****   {
 491:stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 492:stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 419              		.loc 1 492 0
 420 000a 23F00101 		bic	r1, r3, #1	@ D.6124, D.6123,
 421              	.LVL17:
 422              	.L36:
 423 000e 0160     		str	r1, [r0, #0]	@ D.6124,* DMAy_Streamx
 424 0010 7047     		bx	lr	@
 425              		.cfi_endproc
 426              	.LFE113:
 427              		.size	DMA_Cmd, .-DMA_Cmd
 428              		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 429              		.align	1
 430              		.global	DMA_PeriphIncOffsetSizeConfig
 431              		.thumb
 432              		.thumb_func
 433              		.type	DMA_PeriphIncOffsetSizeConfig, %function
 434              	DMA_PeriphIncOffsetSizeConfig:
 435              	.LFB114:
 493:stm32f4xx_dma.c ****   }
 494:stm32f4xx_dma.c **** }
 495:stm32f4xx_dma.c **** 
 496:stm32f4xx_dma.c **** /**
 497:stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 498:stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 499:stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 500:stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 501:stm32f4xx_dma.c ****   *   
 502:stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 503:stm32f4xx_dma.c ****   *     
 504:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 505:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 506:stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 507:stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 508:stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 509:stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 510:stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 511:stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 512:stm32f4xx_dma.c ****   * @retval None
 513:stm32f4xx_dma.c ****   */
 514:stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 515:stm32f4xx_dma.c **** {
 436              		.loc 1 515 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
ARM GAS  /tmp/ccXZiPD3.s 			page 18


 441              	.LVL18:
 516:stm32f4xx_dma.c ****   /* Check the parameters */
 517:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 518:stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 519:stm32f4xx_dma.c **** 
 520:stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 521:stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 522:stm32f4xx_dma.c ****   {
 523:stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 524:stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 442              		.loc 1 524 0
 443 0000 0368     		ldr	r3, [r0, #0]	@ D.6113,* DMAy_Streamx
 521:stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 444              		.loc 1 521 0
 445 0002 11B1     		cbz	r1, .L38	@ DMA_Pincos,
 446              		.loc 1 524 0
 447 0004 43F40041 		orr	r1, r3, #32768	@ D.6114, D.6113,
 448              	.LVL19:
 449 0008 01E0     		b	.L40	@
 450              	.LVL20:
 451              	.L38:
 525:stm32f4xx_dma.c ****   }
 526:stm32f4xx_dma.c ****   else
 527:stm32f4xx_dma.c ****   {
 528:stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 529:stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 452              		.loc 1 529 0
 453 000a 23F40041 		bic	r1, r3, #32768	@ D.6117, D.6116,
 454              	.LVL21:
 455              	.L40:
 456 000e 0160     		str	r1, [r0, #0]	@ D.6117,* DMAy_Streamx
 457 0010 7047     		bx	lr	@
 458              		.cfi_endproc
 459              	.LFE114:
 460              		.size	DMA_PeriphIncOffsetSizeConfig, .-DMA_PeriphIncOffsetSizeConfig
 461              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 462              		.align	1
 463              		.global	DMA_FlowControllerConfig
 464              		.thumb
 465              		.thumb_func
 466              		.type	DMA_FlowControllerConfig, %function
 467              	DMA_FlowControllerConfig:
 468              	.LFB115:
 530:stm32f4xx_dma.c ****   }
 531:stm32f4xx_dma.c **** }
 532:stm32f4xx_dma.c **** 
 533:stm32f4xx_dma.c **** /**
 534:stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 535:stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 536:stm32f4xx_dma.c ****   *       
 537:stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 538:stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 539:stm32f4xx_dma.c ****   *  
 540:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 541:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 542:stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 543:stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccXZiPD3.s 			page 19


 544:stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 545:stm32f4xx_dma.c ****   *                                      the DMA controller.
 546:stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 547:stm32f4xx_dma.c ****   *                                          is the peripheral.    
 548:stm32f4xx_dma.c ****   * @retval None
 549:stm32f4xx_dma.c ****   */
 550:stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 551:stm32f4xx_dma.c **** {
 469              		.loc 1 551 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474              	.LVL22:
 552:stm32f4xx_dma.c ****   /* Check the parameters */
 553:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 554:stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 555:stm32f4xx_dma.c **** 
 556:stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 557:stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 558:stm32f4xx_dma.c ****   {
 559:stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 560:stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 475              		.loc 1 560 0
 476 0000 0368     		ldr	r3, [r0, #0]	@ D.6106,* DMAy_Streamx
 557:stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 477              		.loc 1 557 0
 478 0002 11B1     		cbz	r1, .L42	@ DMA_FlowCtrl,
 479              		.loc 1 560 0
 480 0004 43F02001 		orr	r1, r3, #32	@ D.6107, D.6106,
 481              	.LVL23:
 482 0008 01E0     		b	.L44	@
 483              	.LVL24:
 484              	.L42:
 561:stm32f4xx_dma.c ****   }
 562:stm32f4xx_dma.c ****   else
 563:stm32f4xx_dma.c ****   {
 564:stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 565:stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 485              		.loc 1 565 0
 486 000a 23F02001 		bic	r1, r3, #32	@ D.6110, D.6109,
 487              	.LVL25:
 488              	.L44:
 489 000e 0160     		str	r1, [r0, #0]	@ D.6110,* DMAy_Streamx
 490 0010 7047     		bx	lr	@
 491              		.cfi_endproc
 492              	.LFE115:
 493              		.size	DMA_FlowControllerConfig, .-DMA_FlowControllerConfig
 494              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 495              		.align	1
 496              		.global	DMA_SetCurrDataCounter
 497              		.thumb
 498              		.thumb_func
 499              		.type	DMA_SetCurrDataCounter, %function
 500              	DMA_SetCurrDataCounter:
 501              	.LFB116:
 566:stm32f4xx_dma.c ****   }
ARM GAS  /tmp/ccXZiPD3.s 			page 20


 567:stm32f4xx_dma.c **** }
 568:stm32f4xx_dma.c **** /**
 569:stm32f4xx_dma.c ****   * @}
 570:stm32f4xx_dma.c ****   */
 571:stm32f4xx_dma.c **** 
 572:stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 573:stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 574:stm32f4xx_dma.c ****  *
 575:stm32f4xx_dma.c **** @verbatim   
 576:stm32f4xx_dma.c ****  ===============================================================================
 577:stm32f4xx_dma.c ****                       ##### Data Counter functions #####
 578:stm32f4xx_dma.c ****  ===============================================================================  
 579:stm32f4xx_dma.c ****     [..]
 580:stm32f4xx_dma.c ****     This subsection provides function allowing to configure and read the buffer size
 581:stm32f4xx_dma.c ****     (number of data to be transferred). 
 582:stm32f4xx_dma.c ****     [..]
 583:stm32f4xx_dma.c ****     The DMA data counter can be written only when the DMA Stream is disabled 
 584:stm32f4xx_dma.c ****     (ie. after transfer complete event).
 585:stm32f4xx_dma.c ****     [..]
 586:stm32f4xx_dma.c ****     The following function can be used to write the Stream data counter value:
 587:stm32f4xx_dma.c ****       (+) void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 588:stm32f4xx_dma.c ****       -@- It is advised to use this function rather than DMA_Init() in situations 
 589:stm32f4xx_dma.c ****           where only the Data buffer needs to be reloaded.
 590:stm32f4xx_dma.c ****       -@- If the Source and Destination Data Sizes are different, then the value 
 591:stm32f4xx_dma.c ****           written in data counter, expressing the number of transfers, is relative 
 592:stm32f4xx_dma.c ****           to the number of transfers from the Peripheral point of view.
 593:stm32f4xx_dma.c ****           ie. If Memory data size is Word, Peripheral data size is Half-Words, 
 594:stm32f4xx_dma.c ****           then the value to be configured in the data counter is the number 
 595:stm32f4xx_dma.c ****           of Half-Words to be transferred from/to the peripheral.
 596:stm32f4xx_dma.c ****     [..]
 597:stm32f4xx_dma.c ****     The DMA data counter can be read to indicate the number of remaining transfers for
 598:stm32f4xx_dma.c ****     the relative DMA Stream. This counter is decremented at the end of each data 
 599:stm32f4xx_dma.c ****     transfer and when the transfer is complete: 
 600:stm32f4xx_dma.c ****       (+) If Normal mode is selected: the counter is set to 0.
 601:stm32f4xx_dma.c ****       (+) If Circular mode is selected: the counter is reloaded with the initial value
 602:stm32f4xx_dma.c ****           (configured before enabling the DMA Stream)
 603:stm32f4xx_dma.c ****      [..]
 604:stm32f4xx_dma.c ****      The following function can be used to read the Stream data counter value:
 605:stm32f4xx_dma.c ****        (+) uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 606:stm32f4xx_dma.c **** 
 607:stm32f4xx_dma.c **** @endverbatim
 608:stm32f4xx_dma.c ****   * @{
 609:stm32f4xx_dma.c ****   */
 610:stm32f4xx_dma.c **** 
 611:stm32f4xx_dma.c **** /**
 612:stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 613:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 614:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 615:stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 616:stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 617:stm32f4xx_dma.c ****   *            
 618:stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 619:stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 620:stm32f4xx_dma.c ****   *           
 621:stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 622:stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 623:stm32f4xx_dma.c ****   *           
ARM GAS  /tmp/ccXZiPD3.s 			page 21


 624:stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 625:stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 626:stm32f4xx_dma.c ****   *      
 627:stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 628:stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 629:stm32f4xx_dma.c ****   *      
 630:stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 631:stm32f4xx_dma.c ****   */
 632:stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 633:stm32f4xx_dma.c **** {
 502              		.loc 1 633 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL26:
 634:stm32f4xx_dma.c ****   /* Check the parameters */
 635:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 636:stm32f4xx_dma.c **** 
 637:stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 638:stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 508              		.loc 1 638 0
 509 0000 4160     		str	r1, [r0, #4]	@ Counter, DMAy_Streamx_3(D)->NDTR
 510 0002 7047     		bx	lr	@
 511              		.cfi_endproc
 512              	.LFE116:
 513              		.size	DMA_SetCurrDataCounter, .-DMA_SetCurrDataCounter
 514              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 515              		.align	1
 516              		.global	DMA_GetCurrDataCounter
 517              		.thumb
 518              		.thumb_func
 519              		.type	DMA_GetCurrDataCounter, %function
 520              	DMA_GetCurrDataCounter:
 521              	.LFB117:
 639:stm32f4xx_dma.c **** }
 640:stm32f4xx_dma.c **** 
 641:stm32f4xx_dma.c **** /**
 642:stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 643:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 644:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 645:stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 646:stm32f4xx_dma.c ****   */
 647:stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 648:stm32f4xx_dma.c **** {
 522              		.loc 1 648 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527              	.LVL27:
 649:stm32f4xx_dma.c ****   /* Check the parameters */
 650:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 651:stm32f4xx_dma.c **** 
 652:stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 653:stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 528              		.loc 1 653 0
ARM GAS  /tmp/ccXZiPD3.s 			page 22


 529 0000 4068     		ldr	r0, [r0, #4]	@ D.6101, DMAy_Streamx_1(D)->NDTR
 530              	.LVL28:
 654:stm32f4xx_dma.c **** }
 531              		.loc 1 654 0
 532 0002 80B2     		uxth	r0, r0	@, D.6101
 533 0004 7047     		bx	lr	@
 534              		.cfi_endproc
 535              	.LFE117:
 536              		.size	DMA_GetCurrDataCounter, .-DMA_GetCurrDataCounter
 537              		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 538              		.align	1
 539              		.global	DMA_DoubleBufferModeConfig
 540              		.thumb
 541              		.thumb_func
 542              		.type	DMA_DoubleBufferModeConfig, %function
 543              	DMA_DoubleBufferModeConfig:
 544              	.LFB118:
 655:stm32f4xx_dma.c **** /**
 656:stm32f4xx_dma.c ****   * @}
 657:stm32f4xx_dma.c ****   */
 658:stm32f4xx_dma.c **** 
 659:stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 660:stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 661:stm32f4xx_dma.c ****  *
 662:stm32f4xx_dma.c **** @verbatim   
 663:stm32f4xx_dma.c ****  ===============================================================================
 664:stm32f4xx_dma.c ****                     ##### Double Buffer mode functions #####
 665:stm32f4xx_dma.c ****  ===============================================================================  
 666:stm32f4xx_dma.c ****     [..]
 667:stm32f4xx_dma.c ****     This subsection provides function allowing to configure and control the double 
 668:stm32f4xx_dma.c ****     buffer mode parameters.
 669:stm32f4xx_dma.c ****     
 670:stm32f4xx_dma.c ****     [..]
 671:stm32f4xx_dma.c ****     The Double Buffer mode can be used only when Circular mode is enabled.
 672:stm32f4xx_dma.c ****     The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 673:stm32f4xx_dma.c ****     
 674:stm32f4xx_dma.c ****     [..]
 675:stm32f4xx_dma.c ****     The Double Buffer mode allows to set two different Memory addresses from/to which
 676:stm32f4xx_dma.c ****     the DMA controller will access alternatively (after completing transfer to/from 
 677:stm32f4xx_dma.c ****     target memory 0, it will start transfer to/from target memory 1).
 678:stm32f4xx_dma.c ****     This allows to reduce software overhead for double buffering and reduce the CPU
 679:stm32f4xx_dma.c ****     access time.
 680:stm32f4xx_dma.c ****     
 681:stm32f4xx_dma.c ****     [..]
 682:stm32f4xx_dma.c ****     Two functions must be called before calling the DMA_Init() function:
 683:stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 684:stm32f4xx_dma.c ****           uint32_t Memory1BaseAddr, uint32_t DMA_CurrentMemory);
 685:stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 686:stm32f4xx_dma.c ****       
 687:stm32f4xx_dma.c ****     [..]
 688:stm32f4xx_dma.c ****     DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address 
 689:stm32f4xx_dma.c ****     and the first Memory target from/to which the transfer will start after 
 690:stm32f4xx_dma.c ****     enabling the DMA Stream. Then DMA_DoubleBufferModeCmd() must be called 
 691:stm32f4xx_dma.c ****     to enable the Double Buffer mode (or disable it when it should not be used).
 692:stm32f4xx_dma.c ****   
 693:stm32f4xx_dma.c ****     [..]
 694:stm32f4xx_dma.c ****     Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is
ARM GAS  /tmp/ccXZiPD3.s 			page 23


 695:stm32f4xx_dma.c ****     stopped) to modify on of the target Memories addresses or to check wich Memory target is curren
 696:stm32f4xx_dma.c ****     used:
 697:stm32f4xx_dma.c ****       (+) void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 698:stm32f4xx_dma.c ****                 uint32_t MemoryBaseAddr, uint32_t DMA_MemoryTarget);
 699:stm32f4xx_dma.c ****       (+) uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 700:stm32f4xx_dma.c ****       
 701:stm32f4xx_dma.c ****     [..]
 702:stm32f4xx_dma.c ****     DMA_MemoryTargetConfig() can be called to modify the base address of one of 
 703:stm32f4xx_dma.c ****     the two target Memories.
 704:stm32f4xx_dma.c ****     The Memory of which the base address will be modified must not be currently 
 705:stm32f4xx_dma.c ****     be used by the DMA Stream (ie. if the DMA Stream is currently transferring 
 706:stm32f4xx_dma.c ****     from Memory 1 then you can only modify base address of target Memory 0 and vice versa).
 707:stm32f4xx_dma.c ****     To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() whi
 708:stm32f4xx_dma.c ****     returns the index of the Memory target currently in use by the DMA Stream.
 709:stm32f4xx_dma.c **** 
 710:stm32f4xx_dma.c **** @endverbatim
 711:stm32f4xx_dma.c ****   * @{
 712:stm32f4xx_dma.c ****   */
 713:stm32f4xx_dma.c ****   
 714:stm32f4xx_dma.c **** /**
 715:stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 716:stm32f4xx_dma.c ****   *         and the current memory target.
 717:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 718:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 719:stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 720:stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 721:stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 722:stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 723:stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 724:stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 725:stm32f4xx_dma.c ****   *       
 726:stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 727:stm32f4xx_dma.c ****   *   
 728:stm32f4xx_dma.c ****   * @retval None
 729:stm32f4xx_dma.c ****   */
 730:stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 731:stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 732:stm32f4xx_dma.c **** {  
 545              		.loc 1 732 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              		@ link register save eliminated.
 550              	.LVL29:
 733:stm32f4xx_dma.c ****   /* Check the parameters */
 734:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 735:stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 736:stm32f4xx_dma.c **** 
 737:stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 738:stm32f4xx_dma.c ****   {
 739:stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 740:stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 551              		.loc 1 740 0
 552 0000 0368     		ldr	r3, [r0, #0]	@ D.6095,* DMAy_Streamx
 737:stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 553              		.loc 1 737 0
 554 0002 12B1     		cbz	r2, .L48	@ DMA_CurrentMemory,
ARM GAS  /tmp/ccXZiPD3.s 			page 24


 555              		.loc 1 740 0
 556 0004 43F40022 		orr	r2, r3, #524288	@ D.6096, D.6095,
 557              	.LVL30:
 558 0008 01E0     		b	.L50	@
 559              	.LVL31:
 560              	.L48:
 741:stm32f4xx_dma.c ****   }
 742:stm32f4xx_dma.c ****   else
 743:stm32f4xx_dma.c ****   {
 744:stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 745:stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 561              		.loc 1 745 0
 562 000a 23F40022 		bic	r2, r3, #524288	@ D.6099, D.6098,
 563              	.LVL32:
 564              	.L50:
 565 000e 0260     		str	r2, [r0, #0]	@ D.6099,* DMAy_Streamx
 746:stm32f4xx_dma.c ****   }
 747:stm32f4xx_dma.c **** 
 748:stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 749:stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 566              		.loc 1 749 0
 567 0010 0161     		str	r1, [r0, #16]	@ Memory1BaseAddr, DMAy_Streamx_2(D)->M1AR
 568 0012 7047     		bx	lr	@
 569              		.cfi_endproc
 570              	.LFE118:
 571              		.size	DMA_DoubleBufferModeConfig, .-DMA_DoubleBufferModeConfig
 572              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 573              		.align	1
 574              		.global	DMA_DoubleBufferModeCmd
 575              		.thumb
 576              		.thumb_func
 577              		.type	DMA_DoubleBufferModeCmd, %function
 578              	DMA_DoubleBufferModeCmd:
 579              	.LFB119:
 750:stm32f4xx_dma.c **** }
 751:stm32f4xx_dma.c **** 
 752:stm32f4xx_dma.c **** /**
 753:stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 754:stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 755:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 756:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 757:stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 758:stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 759:stm32f4xx_dma.c ****   * @retval None
 760:stm32f4xx_dma.c ****   */
 761:stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 762:stm32f4xx_dma.c **** {  
 580              		.loc 1 762 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585              	.LVL33:
 763:stm32f4xx_dma.c ****   /* Check the parameters */
 764:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 765:stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 766:stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccXZiPD3.s 			page 25


 767:stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 768:stm32f4xx_dma.c ****   if (NewState != DISABLE)
 769:stm32f4xx_dma.c ****   {
 770:stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 771:stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 586              		.loc 1 771 0
 587 0000 0368     		ldr	r3, [r0, #0]	@ D.6088,* DMAy_Streamx
 768:stm32f4xx_dma.c ****   if (NewState != DISABLE)
 588              		.loc 1 768 0
 589 0002 11B1     		cbz	r1, .L52	@ NewState,
 590              		.loc 1 771 0
 591 0004 43F48021 		orr	r1, r3, #262144	@ D.6089, D.6088,
 592              	.LVL34:
 593 0008 01E0     		b	.L54	@
 594              	.LVL35:
 595              	.L52:
 772:stm32f4xx_dma.c ****   }
 773:stm32f4xx_dma.c ****   else
 774:stm32f4xx_dma.c ****   {
 775:stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 776:stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 596              		.loc 1 776 0
 597 000a 23F48021 		bic	r1, r3, #262144	@ D.6092, D.6091,
 598              	.LVL36:
 599              	.L54:
 600 000e 0160     		str	r1, [r0, #0]	@ D.6092,* DMAy_Streamx
 601 0010 7047     		bx	lr	@
 602              		.cfi_endproc
 603              	.LFE119:
 604              		.size	DMA_DoubleBufferModeCmd, .-DMA_DoubleBufferModeCmd
 605              		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 606              		.align	1
 607              		.global	DMA_MemoryTargetConfig
 608              		.thumb
 609              		.thumb_func
 610              		.type	DMA_MemoryTargetConfig, %function
 611              	DMA_MemoryTargetConfig:
 612              	.LFB120:
 777:stm32f4xx_dma.c ****   }
 778:stm32f4xx_dma.c **** }
 779:stm32f4xx_dma.c **** 
 780:stm32f4xx_dma.c **** /**
 781:stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 782:stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 783:stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 784:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 785:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 786:stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 787:stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 788:stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 789:stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 790:stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 791:stm32f4xx_dma.c ****   * 
 792:stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 793:stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 794:stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 795:stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
ARM GAS  /tmp/ccXZiPD3.s 			page 26


 796:stm32f4xx_dma.c ****   *          address of Memory 0.
 797:stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 798:stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 799:stm32f4xx_dma.c ****   *  
 800:stm32f4xx_dma.c ****   * @retval None
 801:stm32f4xx_dma.c ****   */
 802:stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 803:stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 804:stm32f4xx_dma.c **** {
 613              		.loc 1 804 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618              	.LVL37:
 805:stm32f4xx_dma.c ****   /* Check the parameters */
 806:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 807:stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 808:stm32f4xx_dma.c ****     
 809:stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 810:stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 619              		.loc 1 810 0
 620 0000 0AB1     		cbz	r2, .L56	@ DMA_MemoryTarget,
 811:stm32f4xx_dma.c ****   {
 812:stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 813:stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 621              		.loc 1 813 0
 622 0002 0161     		str	r1, [r0, #16]	@ MemoryBaseAddr, DMAy_Streamx_2(D)->M1AR
 623 0004 7047     		bx	lr	@
 624              	.L56:
 814:stm32f4xx_dma.c ****   }  
 815:stm32f4xx_dma.c ****   else
 816:stm32f4xx_dma.c ****   {
 817:stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 818:stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 625              		.loc 1 818 0
 626 0006 C160     		str	r1, [r0, #12]	@ MemoryBaseAddr, DMAy_Streamx_2(D)->M0AR
 627 0008 7047     		bx	lr	@
 628              		.cfi_endproc
 629              	.LFE120:
 630              		.size	DMA_MemoryTargetConfig, .-DMA_MemoryTargetConfig
 631              		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 632              		.align	1
 633              		.global	DMA_GetCurrentMemoryTarget
 634              		.thumb
 635              		.thumb_func
 636              		.type	DMA_GetCurrentMemoryTarget, %function
 637              	DMA_GetCurrentMemoryTarget:
 638              	.LFB121:
 819:stm32f4xx_dma.c ****   }
 820:stm32f4xx_dma.c **** }
 821:stm32f4xx_dma.c **** 
 822:stm32f4xx_dma.c **** /**
 823:stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 824:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 825:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 826:stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
ARM GAS  /tmp/ccXZiPD3.s 			page 27


 827:stm32f4xx_dma.c ****   */
 828:stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 829:stm32f4xx_dma.c **** {
 639              		.loc 1 829 0
 640              		.cfi_startproc
 641              		@ args = 0, pretend = 0, frame = 0
 642              		@ frame_needed = 0, uses_anonymous_args = 0
 643              		@ link register save eliminated.
 644              	.LVL38:
 830:stm32f4xx_dma.c ****   uint32_t tmp = 0;
 831:stm32f4xx_dma.c ****   
 832:stm32f4xx_dma.c ****   /* Check the parameters */
 833:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 834:stm32f4xx_dma.c **** 
 835:stm32f4xx_dma.c ****   /* Get the current memory target */
 836:stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 645              		.loc 1 836 0
 646 0000 0068     		ldr	r0, [r0, #0]	@ D.6076, DMAy_Streamx_3(D)->CR
 647              	.LVL39:
 837:stm32f4xx_dma.c ****   {
 838:stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 839:stm32f4xx_dma.c ****     tmp = 1;
 840:stm32f4xx_dma.c ****   }  
 841:stm32f4xx_dma.c ****   else
 842:stm32f4xx_dma.c ****   {
 843:stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 844:stm32f4xx_dma.c ****     tmp = 0;    
 845:stm32f4xx_dma.c ****   }
 846:stm32f4xx_dma.c ****   return tmp;
 847:stm32f4xx_dma.c **** }
 648              		.loc 1 847 0
 649 0002 C0F3C040 		ubfx	r0, r0, #19, #1	@, D.6076,,
 650              	.LVL40:
 651 0006 7047     		bx	lr	@
 652              		.cfi_endproc
 653              	.LFE121:
 654              		.size	DMA_GetCurrentMemoryTarget, .-DMA_GetCurrentMemoryTarget
 655              		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 656              		.align	1
 657              		.global	DMA_GetCmdStatus
 658              		.thumb
 659              		.thumb_func
 660              		.type	DMA_GetCmdStatus, %function
 661              	DMA_GetCmdStatus:
 662              	.LFB122:
 848:stm32f4xx_dma.c **** /**
 849:stm32f4xx_dma.c ****   * @}
 850:stm32f4xx_dma.c ****   */
 851:stm32f4xx_dma.c **** 
 852:stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 853:stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 854:stm32f4xx_dma.c ****  *
 855:stm32f4xx_dma.c **** @verbatim   
 856:stm32f4xx_dma.c ****  ===============================================================================
 857:stm32f4xx_dma.c ****               ##### Interrupts and flags management functions #####
 858:stm32f4xx_dma.c ****  ===============================================================================  
 859:stm32f4xx_dma.c ****     [..]
ARM GAS  /tmp/ccXZiPD3.s 			page 28


 860:stm32f4xx_dma.c ****     This subsection provides functions allowing to
 861:stm32f4xx_dma.c ****       (+) Check the DMA enable status
 862:stm32f4xx_dma.c ****       (+) Check the FIFO status 
 863:stm32f4xx_dma.c ****       (+) Configure the DMA Interrupts sources and check or clear the flags or 
 864:stm32f4xx_dma.c ****           pending bits status.  
 865:stm32f4xx_dma.c ****            
 866:stm32f4xx_dma.c ****     [..]
 867:stm32f4xx_dma.c ****       (#) DMA Enable status:
 868:stm32f4xx_dma.c ****           After configuring the DMA Stream (DMA_Init() function) and enabling 
 869:stm32f4xx_dma.c ****           the stream, it is recommended to check (or wait until) the DMA Stream 
 870:stm32f4xx_dma.c ****           is effectively enabled. A Stream may remain disabled if a configuration 
 871:stm32f4xx_dma.c ****           parameter is wrong. After disabling a DMA Stream, it is also recommended 
 872:stm32f4xx_dma.c ****           to check (or wait until) the DMA Stream is effectively disabled. 
 873:stm32f4xx_dma.c ****           If a Stream is disabled while a data transfer is ongoing, the current 
 874:stm32f4xx_dma.c ****           data will be transferred and the Stream will be effectively disabled 
 875:stm32f4xx_dma.c ****           only after this data transfer completion.
 876:stm32f4xx_dma.c ****           To monitor this state it is possible to use the following function:
 877:stm32f4xx_dma.c ****         (++) FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 878:stm32f4xx_dma.c ****  
 879:stm32f4xx_dma.c ****       (#) FIFO Status:
 880:stm32f4xx_dma.c ****           It is possible to monitor the FIFO status when a transfer is ongoing 
 881:stm32f4xx_dma.c ****           using the following function:
 882:stm32f4xx_dma.c ****         (++) uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 883:stm32f4xx_dma.c ****  
 884:stm32f4xx_dma.c ****       (#) DMA Interrupts and Flags:
 885:stm32f4xx_dma.c ****           The user should identify which mode will be used in his application 
 886:stm32f4xx_dma.c ****           to manage the DMA controller events: Polling mode or Interrupt mode. 
 887:stm32f4xx_dma.c ****     
 888:stm32f4xx_dma.c ****     *** Polling Mode ***
 889:stm32f4xx_dma.c ****     ====================
 890:stm32f4xx_dma.c ****     [..]
 891:stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 892:stm32f4xx_dma.c ****     (x : DMA Stream number )
 893:stm32f4xx_dma.c ****       (#) DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 894:stm32f4xx_dma.c ****       (#) DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 895:stm32f4xx_dma.c ****       (#) DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 896:stm32f4xx_dma.c ****       (#) DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 897:stm32f4xx_dma.c ****       (#) DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 898:stm32f4xx_dma.c ****     [..]
 899:stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
 900:stm32f4xx_dma.c ****       (+) FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 901:stm32f4xx_dma.c ****       (+) void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 902:stm32f4xx_dma.c **** 
 903:stm32f4xx_dma.c ****     *** Interrupt Mode ***
 904:stm32f4xx_dma.c ****     ======================
 905:stm32f4xx_dma.c ****     [..]
 906:stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 907:stm32f4xx_dma.c **** 
 908:stm32f4xx_dma.c ****     *** Interrupt Source ***
 909:stm32f4xx_dma.c ****     ========================
 910:stm32f4xx_dma.c ****     [..]
 911:stm32f4xx_dma.c ****       (#) DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 912:stm32f4xx_dma.c ****       (#) DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 913:stm32f4xx_dma.c ****       (#) DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 914:stm32f4xx_dma.c ****       (#) DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 915:stm32f4xx_dma.c ****       (#) DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 916:stm32f4xx_dma.c ****     [..]
ARM GAS  /tmp/ccXZiPD3.s 			page 29


 917:stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
 918:stm32f4xx_dma.c ****       (+) void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewS
 919:stm32f4xx_dma.c ****       (+) ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 920:stm32f4xx_dma.c ****       (+) void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 921:stm32f4xx_dma.c **** 
 922:stm32f4xx_dma.c **** @endverbatim
 923:stm32f4xx_dma.c ****   * @{
 924:stm32f4xx_dma.c ****   */
 925:stm32f4xx_dma.c **** 
 926:stm32f4xx_dma.c **** /**
 927:stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 928:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 929:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 930:stm32f4xx_dma.c ****   *   
 931:stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 932:stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 933:stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 934:stm32f4xx_dma.c ****   *          parameter is wrong.
 935:stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 936:stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 937:stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 938:stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 939:stm32f4xx_dma.c ****   *          of this single data is finished.  
 940:stm32f4xx_dma.c ****   *      
 941:stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 942:stm32f4xx_dma.c ****   */
 943:stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 944:stm32f4xx_dma.c **** {
 663              		.loc 1 944 0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 667              		@ link register save eliminated.
 668              	.LVL41:
 945:stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 946:stm32f4xx_dma.c **** 
 947:stm32f4xx_dma.c ****   /* Check the parameters */
 948:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 949:stm32f4xx_dma.c **** 
 950:stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 669              		.loc 1 950 0
 670 0000 0068     		ldr	r0, [r0, #0]	@ D.6069, DMAy_Streamx_3(D)->CR
 671              	.LVL42:
 951:stm32f4xx_dma.c ****   {
 952:stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 953:stm32f4xx_dma.c ****     state = ENABLE;
 954:stm32f4xx_dma.c ****   }
 955:stm32f4xx_dma.c ****   else
 956:stm32f4xx_dma.c ****   {
 957:stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 958:stm32f4xx_dma.c ****         all transfers are complete) */
 959:stm32f4xx_dma.c ****     state = DISABLE;
 960:stm32f4xx_dma.c ****   }
 961:stm32f4xx_dma.c ****   return state;
 962:stm32f4xx_dma.c **** }
 672              		.loc 1 962 0
 673 0002 00F00100 		and	r0, r0, #1	@, D.6069,
ARM GAS  /tmp/ccXZiPD3.s 			page 30


 674              	.LVL43:
 675 0006 7047     		bx	lr	@
 676              		.cfi_endproc
 677              	.LFE122:
 678              		.size	DMA_GetCmdStatus, .-DMA_GetCmdStatus
 679              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 680              		.align	1
 681              		.global	DMA_GetFIFOStatus
 682              		.thumb
 683              		.thumb_func
 684              		.type	DMA_GetFIFOStatus, %function
 685              	DMA_GetFIFOStatus:
 686              	.LFB123:
 963:stm32f4xx_dma.c **** 
 964:stm32f4xx_dma.c **** /**
 965:stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 966:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 967:stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 968:stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 969:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 970:stm32f4xx_dma.c ****   *                                               and not empty.
 971:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 972:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 973:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 974:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 975:stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 976:stm32f4xx_dma.c ****   */
 977:stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 978:stm32f4xx_dma.c **** {
 687              		.loc 1 978 0
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 692              	.LVL44:
 979:stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 980:stm32f4xx_dma.c ****  
 981:stm32f4xx_dma.c ****   /* Check the parameters */
 982:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 983:stm32f4xx_dma.c ****   
 984:stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 985:stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 693              		.loc 1 985 0
 694 0000 4069     		ldr	r0, [r0, #20]	@ D.6066, DMAy_Streamx_2(D)->FCR
 695              	.LVL45:
 986:stm32f4xx_dma.c ****   
 987:stm32f4xx_dma.c ****   return tmpreg;
 988:stm32f4xx_dma.c **** }
 696              		.loc 1 988 0
 697 0002 00F03800 		and	r0, r0, #56	@, D.6066,
 698              	.LVL46:
 699 0006 7047     		bx	lr	@
 700              		.cfi_endproc
 701              	.LFE123:
 702              		.size	DMA_GetFIFOStatus, .-DMA_GetFIFOStatus
 703              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 704              		.align	1
ARM GAS  /tmp/ccXZiPD3.s 			page 31


 705              		.global	DMA_GetFlagStatus
 706              		.thumb
 707              		.thumb_func
 708              		.type	DMA_GetFlagStatus, %function
 709              	DMA_GetFlagStatus:
 710              	.LFB124:
 989:stm32f4xx_dma.c **** 
 990:stm32f4xx_dma.c **** /**
 991:stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 992:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 993:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 994:stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 995:stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 996:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 997:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 998:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 999:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1000:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1001:stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1002:stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
1003:stm32f4xx_dma.c ****   */
1004:stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1005:stm32f4xx_dma.c **** {
 711              		.loc 1 1005 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              	.LVL47:
1006:stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
1007:stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1008:stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
1009:stm32f4xx_dma.c **** 
1010:stm32f4xx_dma.c ****   /* Check the parameters */
1011:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1012:stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
1013:stm32f4xx_dma.c **** 
1014:stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1015:stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1016:stm32f4xx_dma.c ****   {
1017:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1018:stm32f4xx_dma.c ****     DMAy = DMA1; 
 716              		.loc 1 1018 0
 717 0000 0A4B     		ldr	r3, .L66	@ tmp157,
 718 0002 0B4A     		ldr	r2, .L66+4	@ tmp156,
1005:stm32f4xx_dma.c **** {
 719              		.loc 1 1005 0
 720 0004 10B5     		push	{r4, lr}	@
 721              	.LCFI1:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 4, -8
 724              		.cfi_offset 14, -4
 725              		.loc 1 1018 0
 726 0006 0B4C     		ldr	r4, .L66+8	@ tmp148,
 727 0008 A042     		cmp	r0, r4	@ DMAy_Streamx, tmp148
 728 000a 8CBF     		ite	hi	@
 729 000c 1046     		movhi	r0, r2	@, DMAy, tmp156
 730 000e 1846     		movls	r0, r3	@, DMAy, tmp157
ARM GAS  /tmp/ccXZiPD3.s 			page 32


 731              	.LVL48:
1019:stm32f4xx_dma.c ****   } 
1020:stm32f4xx_dma.c ****   else 
1021:stm32f4xx_dma.c ****   {
1022:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1023:stm32f4xx_dma.c ****     DMAy = DMA2; 
1024:stm32f4xx_dma.c ****   }
1025:stm32f4xx_dma.c **** 
1026:stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1027:stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 732              		.loc 1 1027 0
 733 0010 8B00     		lsls	r3, r1, #2	@, DMA_FLAG,
1028:stm32f4xx_dma.c ****   {
1029:stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1030:stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 734              		.loc 1 1030 0
 735 0012 4CBF     		ite	mi
 736 0014 4368     		ldrmi	r3, [r0, #4]	@ tmpreg, DMAy_2->HISR
 737              	.LVL49:
1031:stm32f4xx_dma.c ****   }
1032:stm32f4xx_dma.c ****   else
1033:stm32f4xx_dma.c ****   {
1034:stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1035:stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 738              		.loc 1 1035 0
 739 0016 0368     		ldrpl	r3, [r0, #0]	@ tmpreg, DMAy_2->LISR
 740              	.LVL50:
1036:stm32f4xx_dma.c ****   }   
1037:stm32f4xx_dma.c ****  
1038:stm32f4xx_dma.c ****   /* Mask the reserved bits */
1039:stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 741              		.loc 1 1039 0
 742 0018 21F0F021 		bic	r1, r1, #-268374016	@ tmp152, DMA_FLAG,
 743              	.LVL51:
 744 001c 21F08212 		bic	r2, r1, #8519810	@ tmp151, tmp152,
1040:stm32f4xx_dma.c **** 
1041:stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1042:stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 745              		.loc 1 1042 0
 746 0020 1A42     		tst	r2, r3	@ tmp151, tmpreg
1043:stm32f4xx_dma.c ****   {
1044:stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1045:stm32f4xx_dma.c ****     bitstatus = SET;
1046:stm32f4xx_dma.c ****   }
1047:stm32f4xx_dma.c ****   else
1048:stm32f4xx_dma.c ****   {
1049:stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1050:stm32f4xx_dma.c ****     bitstatus = RESET;
1051:stm32f4xx_dma.c ****   }
1052:stm32f4xx_dma.c **** 
1053:stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1054:stm32f4xx_dma.c ****   return  bitstatus;
1055:stm32f4xx_dma.c **** }
 747              		.loc 1 1055 0
 748 0022 0CBF     		ite	eq	@
 749 0024 0020     		moveq	r0, #0	@,
 750 0026 0120     		movne	r0, #1	@,
ARM GAS  /tmp/ccXZiPD3.s 			page 33


 751              	.LVL52:
 752 0028 10BD     		pop	{r4, pc}	@
 753              	.L67:
 754 002a 00BF     		.align	2
 755              	.L66:
 756 002c 00600240 		.word	1073897472
 757 0030 00640240 		.word	1073898496
 758 0034 0F640240 		.word	1073898511
 759              		.cfi_endproc
 760              	.LFE124:
 761              		.size	DMA_GetFlagStatus, .-DMA_GetFlagStatus
 762              		.section	.text.DMA_ClearFlag,"ax",%progbits
 763              		.align	1
 764              		.global	DMA_ClearFlag
 765              		.thumb
 766              		.thumb_func
 767              		.type	DMA_ClearFlag, %function
 768              	DMA_ClearFlag:
 769              	.LFB125:
1056:stm32f4xx_dma.c **** 
1057:stm32f4xx_dma.c **** /**
1058:stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1059:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1060:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1061:stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1062:stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1063:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1064:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1065:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1066:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1067:stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1068:stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1069:stm32f4xx_dma.c ****   * @retval None
1070:stm32f4xx_dma.c ****   */
1071:stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1072:stm32f4xx_dma.c **** {
 770              		.loc 1 1072 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              	.LVL53:
 775 0000 10B5     		push	{r4, lr}	@
 776              	.LCFI2:
 777              		.cfi_def_cfa_offset 8
 778              		.cfi_offset 4, -8
 779              		.cfi_offset 14, -4
1073:stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1074:stm32f4xx_dma.c **** 
1075:stm32f4xx_dma.c ****   /* Check the parameters */
1076:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1077:stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1078:stm32f4xx_dma.c **** 
1079:stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1080:stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1081:stm32f4xx_dma.c ****   {
1082:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1083:stm32f4xx_dma.c ****     DMAy = DMA1; 
ARM GAS  /tmp/ccXZiPD3.s 			page 34


 780              		.loc 1 1083 0
 781 0002 084B     		ldr	r3, .L73	@ tmp146,
 782 0004 084A     		ldr	r2, .L73+4	@ tmp145,
 783 0006 094C     		ldr	r4, .L73+8	@ tmp140,
 784 0008 A042     		cmp	r0, r4	@ DMAy_Streamx, tmp140
 785 000a 8CBF     		ite	hi	@
 786 000c 1046     		movhi	r0, r2	@, DMAy, tmp145
 787 000e 1846     		movls	r0, r3	@, DMAy, tmp146
 788              	.LVL54:
1084:stm32f4xx_dma.c ****   } 
1085:stm32f4xx_dma.c ****   else 
1086:stm32f4xx_dma.c ****   {
1087:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1088:stm32f4xx_dma.c ****     DMAy = DMA2; 
1089:stm32f4xx_dma.c ****   }
1090:stm32f4xx_dma.c **** 
1091:stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1092:stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 789              		.loc 1 1092 0
 790 0010 11F0005F 		tst	r1, #536870912	@ DMA_FLAG,
 791 0014 21F0F021 		bic	r1, r1, #-268374016	@ tmp144, DMA_FLAG,
 792              	.LVL55:
1093:stm32f4xx_dma.c ****   {
1094:stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1095:stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 793              		.loc 1 1095 0
 794 0018 21F08213 		bic	r3, r1, #8519810	@ D.6051, tmp144,
 795 001c 14BF     		ite	ne
 796 001e C360     		strne	r3, [r0, #12]	@ D.6051, DMAy_1->HIFCR
1096:stm32f4xx_dma.c ****   }
1097:stm32f4xx_dma.c ****   else 
1098:stm32f4xx_dma.c ****   {
1099:stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1100:stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 797              		.loc 1 1100 0
 798 0020 8360     		streq	r3, [r0, #8]	@ D.6051, DMAy_1->LIFCR
 799 0022 10BD     		pop	{r4, pc}	@
 800              	.L74:
 801              		.align	2
 802              	.L73:
 803 0024 00600240 		.word	1073897472
 804 0028 00640240 		.word	1073898496
 805 002c 0F640240 		.word	1073898511
 806              		.cfi_endproc
 807              	.LFE125:
 808              		.size	DMA_ClearFlag, .-DMA_ClearFlag
 809              		.section	.text.DMA_ITConfig,"ax",%progbits
 810              		.align	1
 811              		.global	DMA_ITConfig
 812              		.thumb
 813              		.thumb_func
 814              		.type	DMA_ITConfig, %function
 815              	DMA_ITConfig:
 816              	.LFB126:
1101:stm32f4xx_dma.c ****   }    
1102:stm32f4xx_dma.c **** }
1103:stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccXZiPD3.s 			page 35


1104:stm32f4xx_dma.c **** /**
1105:stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1106:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1107:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1108:stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1109:stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1110:stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1111:stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1112:stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1113:stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1114:stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1115:stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1116:stm32f4xx_dma.c ****   * @retval None
1117:stm32f4xx_dma.c ****   */
1118:stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1119:stm32f4xx_dma.c **** {
 817              		.loc 1 1119 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              		@ link register save eliminated.
 822              	.LVL56:
1120:stm32f4xx_dma.c ****   /* Check the parameters */
1121:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1122:stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1123:stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1124:stm32f4xx_dma.c **** 
1125:stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1126:stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 823              		.loc 1 1126 0
 824 0000 0B06     		lsls	r3, r1, #24	@, DMA_IT,
 825 0002 11D5     		bpl	.L76	@,
1127:stm32f4xx_dma.c ****   {
1128:stm32f4xx_dma.c ****     if (NewState != DISABLE)
1129:stm32f4xx_dma.c ****     {
1130:stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1131:stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 826              		.loc 1 1131 0
 827 0004 4369     		ldr	r3, [r0, #20]	@ D.6029,
1128:stm32f4xx_dma.c ****     if (NewState != DISABLE)
 828              		.loc 1 1128 0
 829 0006 4AB1     		cbz	r2, .L77	@ NewState,
 830              		.loc 1 1131 0
 831 0008 43F08003 		orr	r3, r3, #128	@ D.6030, D.6029,
1132:stm32f4xx_dma.c ****     }    
1133:stm32f4xx_dma.c ****     else 
1134:stm32f4xx_dma.c ****     {
1135:stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1136:stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
1137:stm32f4xx_dma.c ****     }
1138:stm32f4xx_dma.c ****   }
1139:stm32f4xx_dma.c **** 
1140:stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1141:stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 832              		.loc 1 1141 0
 833 000c 8029     		cmp	r1, #128	@ DMA_IT,
1131:stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
ARM GAS  /tmp/ccXZiPD3.s 			page 36


 834              		.loc 1 1131 0
 835 000e 4361     		str	r3, [r0, #20]	@ D.6030, DMAy_Streamx_4(D)->FCR
 836              		.loc 1 1141 0
 837 0010 14D0     		beq	.L75	@,
 838              	.L78:
1142:stm32f4xx_dma.c ****   {
1143:stm32f4xx_dma.c ****     if (NewState != DISABLE)
1144:stm32f4xx_dma.c ****     {
1145:stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1146:stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 839              		.loc 1 1146 0
 840 0012 0368     		ldr	r3, [r0, #0]	@ D.6038, DMAy_Streamx_4(D)->CR
 841 0014 01F01E02 		and	r2, r1, #30	@ tmp150, DMA_IT,
 842              	.LVL57:
 843 0018 1A43     		orrs	r2, r2, r3	@, D.6040, tmp150, D.6038
 844 001a 0EE0     		b	.L85	@
 845              	.LVL58:
 846              	.L77:
1136:stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 847              		.loc 1 1136 0
 848 001c 23F08002 		bic	r2, r3, #128	@ D.6033, D.6032,
 849              	.LVL59:
1141:stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 850              		.loc 1 1141 0
 851 0020 8029     		cmp	r1, #128	@ DMA_IT,
1136:stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 852              		.loc 1 1136 0
 853 0022 4261     		str	r2, [r0, #20]	@ D.6033, DMAy_Streamx_4(D)->FCR
1141:stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 854              		.loc 1 1141 0
 855 0024 04D1     		bne	.L80	@,
 856 0026 7047     		bx	lr	@
 857              	.LVL60:
 858              	.L76:
 859 0028 8029     		cmp	r1, #128	@ DMA_IT,
 860 002a 07D0     		beq	.L75	@,
1143:stm32f4xx_dma.c ****     if (NewState != DISABLE)
 861              		.loc 1 1143 0
 862 002c 002A     		cmp	r2, #0	@ NewState
 863 002e F0D1     		bne	.L78	@
 864              	.LVL61:
 865              	.L80:
1147:stm32f4xx_dma.c ****     }
1148:stm32f4xx_dma.c ****     else
1149:stm32f4xx_dma.c ****     {
1150:stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1151:stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 866              		.loc 1 1151 0
 867 0030 0368     		ldr	r3, [r0, #0]	@ D.6042, DMAy_Streamx_4(D)->CR
 868 0032 01F01E01 		and	r1, r1, #30	@ tmp151, DMA_IT,
 869              	.LVL62:
 870 0036 23EA0102 		bic	r2, r3, r1	@ D.6044, D.6042, tmp151
 871              	.L85:
 872 003a 0260     		str	r2, [r0, #0]	@ D.6044,* DMAy_Streamx
 873              	.L75:
 874 003c 7047     		bx	lr	@
 875              		.cfi_endproc
ARM GAS  /tmp/ccXZiPD3.s 			page 37


 876              	.LFE126:
 877              		.size	DMA_ITConfig, .-DMA_ITConfig
 878              		.section	.text.DMA_GetITStatus,"ax",%progbits
 879              		.align	1
 880              		.global	DMA_GetITStatus
 881              		.thumb
 882              		.thumb_func
 883              		.type	DMA_GetITStatus, %function
 884              	DMA_GetITStatus:
 885              	.LFB127:
1152:stm32f4xx_dma.c ****     }    
1153:stm32f4xx_dma.c ****   }
1154:stm32f4xx_dma.c **** }
1155:stm32f4xx_dma.c **** 
1156:stm32f4xx_dma.c **** /**
1157:stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1158:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1159:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1160:stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1161:stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1162:stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1163:stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1164:stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1165:stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1166:stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1167:stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1168:stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1169:stm32f4xx_dma.c ****   */
1170:stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1171:stm32f4xx_dma.c **** {
 886              		.loc 1 1171 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL63:
1172:stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
1173:stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1174:stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
1175:stm32f4xx_dma.c **** 
1176:stm32f4xx_dma.c ****   /* Check the parameters */
1177:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1178:stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1179:stm32f4xx_dma.c ****  
1180:stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1181:stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1182:stm32f4xx_dma.c ****   {
1183:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1184:stm32f4xx_dma.c ****     DMAy = DMA1; 
 891              		.loc 1 1184 0
 892 0000 114B     		ldr	r3, .L95	@ tmp163,
 893 0002 124A     		ldr	r2, .L95+4	@ tmp162,
1171:stm32f4xx_dma.c **** {
 894              		.loc 1 1171 0
 895 0004 10B5     		push	{r4, lr}	@
 896              	.LCFI3:
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 4, -8
ARM GAS  /tmp/ccXZiPD3.s 			page 38


 899              		.cfi_offset 14, -4
 900              		.loc 1 1184 0
 901 0006 124C     		ldr	r4, .L95+8	@ tmp150,
 902 0008 A042     		cmp	r0, r4	@ DMAy_Streamx, tmp150
 903 000a 8CBF     		ite	hi	@
 904 000c 1446     		movhi	r4, r2	@, DMAy, tmp162
 905 000e 1C46     		movls	r4, r3	@, DMAy, tmp163
 906              	.LVL64:
1185:stm32f4xx_dma.c ****   } 
1186:stm32f4xx_dma.c ****   else 
1187:stm32f4xx_dma.c ****   {
1188:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1189:stm32f4xx_dma.c ****     DMAy = DMA2; 
1190:stm32f4xx_dma.c ****   }
1191:stm32f4xx_dma.c **** 
1192:stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1193:stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 907              		.loc 1 1193 0
 908 0010 21F0F023 		bic	r3, r1, #-268374016	@ tmp152, DMA_IT,
 909 0014 23F0C313 		bic	r3, r3, #12779715	@ tmp151, tmp152,
 910 0018 2BB1     		cbz	r3, .L88	@ tmp151,
 911              	.LVL65:
1194:stm32f4xx_dma.c ****   {
1195:stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1196:stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
1197:stm32f4xx_dma.c ****     
1198:stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1199:stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 912              		.loc 1 1199 0
 913 001a 0068     		ldr	r0, [r0, #0]	@ D.6010, DMAy_Streamx_8(D)->CR
 914              	.LVL66:
1196:stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 915              		.loc 1 1196 0
 916 001c 00F01E02 		and	r2, r0, #30	@ tmp153, D.6010,
 917              		.loc 1 1199 0
 918 0020 02EAD122 		and	r2, r2, r1, lsr #11	@, enablestatus, tmp153, DMA_IT,
 919              	.LVL67:
 920 0024 02E0     		b	.L89	@
 921              	.LVL68:
 922              	.L88:
1200:stm32f4xx_dma.c ****   }
1201:stm32f4xx_dma.c ****   else 
1202:stm32f4xx_dma.c ****   {
1203:stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1204:stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 923              		.loc 1 1204 0
 924 0026 4069     		ldr	r0, [r0, #20]	@ D.6012, DMAy_Streamx_8(D)->FCR
 925              	.LVL69:
 926 0028 00F08002 		and	r2, r0, #128	@ enablestatus, D.6012,
 927              	.LVL70:
 928              	.L89:
1205:stm32f4xx_dma.c ****   }
1206:stm32f4xx_dma.c ****  
1207:stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1208:stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 929              		.loc 1 1208 0
 930 002c 8800     		lsls	r0, r1, #2	@, DMA_IT,
ARM GAS  /tmp/ccXZiPD3.s 			page 39


1209:stm32f4xx_dma.c ****   {
1210:stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1211:stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 931              		.loc 1 1211 0
 932 002e 4CBF     		ite	mi
 933 0030 6368     		ldrmi	r3, [r4, #4]	@ tmpreg, DMAy_2->HISR
 934              	.LVL71:
1212:stm32f4xx_dma.c ****   }
1213:stm32f4xx_dma.c ****   else
1214:stm32f4xx_dma.c ****   {
1215:stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1216:stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 935              		.loc 1 1216 0
 936 0032 2368     		ldrpl	r3, [r4, #0]	@ tmpreg, DMAy_2->LISR
 937              	.LVL72:
1217:stm32f4xx_dma.c ****   } 
1218:stm32f4xx_dma.c **** 
1219:stm32f4xx_dma.c ****   /* mask all reserved bits */
1220:stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 938              		.loc 1 1220 0
 939 0034 21F0F021 		bic	r1, r1, #-268374016	@ tmp157, DMA_IT,
 940              	.LVL73:
 941 0038 21F08210 		bic	r0, r1, #8519810	@ tmp156, tmp157,
1221:stm32f4xx_dma.c **** 
1222:stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1223:stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 942              		.loc 1 1223 0
 943 003c 1840     		ands	r0, r0, r3	@ tmp158, tmp156, tmpreg
 944 003e 02D0     		beq	.L92	@,
1224:stm32f4xx_dma.c ****   {
1225:stm32f4xx_dma.c ****     /* DMA_IT is set */
1226:stm32f4xx_dma.c ****     bitstatus = SET;
 945              		.loc 1 1226 0 discriminator 1
 946 0040 101C     		adds	r0, r2, #0	@ bitstatus, enablestatus,
 947 0042 18BF     		it	ne
 948 0044 0120     		movne	r0, #1	@ bitstatus,
 949              	.L92:
 950              	.LVL74:
1227:stm32f4xx_dma.c ****   }
1228:stm32f4xx_dma.c ****   else
1229:stm32f4xx_dma.c ****   {
1230:stm32f4xx_dma.c ****     /* DMA_IT is reset */
1231:stm32f4xx_dma.c ****     bitstatus = RESET;
1232:stm32f4xx_dma.c ****   }
1233:stm32f4xx_dma.c **** 
1234:stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1235:stm32f4xx_dma.c ****   return  bitstatus;
1236:stm32f4xx_dma.c **** }
 951              		.loc 1 1236 0
 952 0046 10BD     		pop	{r4, pc}	@
 953              	.L96:
 954              		.align	2
 955              	.L95:
 956 0048 00600240 		.word	1073897472
 957 004c 00640240 		.word	1073898496
 958 0050 0F640240 		.word	1073898511
 959              		.cfi_endproc
ARM GAS  /tmp/ccXZiPD3.s 			page 40


 960              	.LFE127:
 961              		.size	DMA_GetITStatus, .-DMA_GetITStatus
 962              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 963              		.align	1
 964              		.global	DMA_ClearITPendingBit
 965              		.thumb
 966              		.thumb_func
 967              		.type	DMA_ClearITPendingBit, %function
 968              	DMA_ClearITPendingBit:
 969              	.LFB128:
1237:stm32f4xx_dma.c **** 
1238:stm32f4xx_dma.c **** /**
1239:stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1240:stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1241:stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1242:stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1243:stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1244:stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1245:stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1246:stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1247:stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1248:stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1249:stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1250:stm32f4xx_dma.c ****   * @retval None
1251:stm32f4xx_dma.c ****   */
1252:stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1253:stm32f4xx_dma.c **** {
 970              		.loc 1 1253 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              	.LVL75:
 975 0000 10B5     		push	{r4, lr}	@
 976              	.LCFI4:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 4, -8
 979              		.cfi_offset 14, -4
1254:stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1255:stm32f4xx_dma.c **** 
1256:stm32f4xx_dma.c ****   /* Check the parameters */
1257:stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1258:stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1259:stm32f4xx_dma.c **** 
1260:stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1261:stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
1262:stm32f4xx_dma.c ****   {
1263:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1264:stm32f4xx_dma.c ****     DMAy = DMA1; 
 980              		.loc 1 1264 0
 981 0002 084B     		ldr	r3, .L102	@ tmp146,
 982 0004 084A     		ldr	r2, .L102+4	@ tmp145,
 983 0006 094C     		ldr	r4, .L102+8	@ tmp140,
 984 0008 A042     		cmp	r0, r4	@ DMAy_Streamx, tmp140
 985 000a 8CBF     		ite	hi	@
 986 000c 1046     		movhi	r0, r2	@, DMAy, tmp145
 987 000e 1846     		movls	r0, r3	@, DMAy, tmp146
 988              	.LVL76:
ARM GAS  /tmp/ccXZiPD3.s 			page 41


1265:stm32f4xx_dma.c ****   } 
1266:stm32f4xx_dma.c ****   else 
1267:stm32f4xx_dma.c ****   {
1268:stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1269:stm32f4xx_dma.c ****     DMAy = DMA2; 
1270:stm32f4xx_dma.c ****   }
1271:stm32f4xx_dma.c **** 
1272:stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1273:stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 989              		.loc 1 1273 0
 990 0010 11F0005F 		tst	r1, #536870912	@ DMA_IT,
 991 0014 21F0F021 		bic	r1, r1, #-268374016	@ tmp144, DMA_IT,
 992              	.LVL77:
1274:stm32f4xx_dma.c ****   {
1275:stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1276:stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 993              		.loc 1 1276 0
 994 0018 21F08213 		bic	r3, r1, #8519810	@ D.6001, tmp144,
 995 001c 14BF     		ite	ne
 996 001e C360     		strne	r3, [r0, #12]	@ D.6001, DMAy_1->HIFCR
1277:stm32f4xx_dma.c ****   }
1278:stm32f4xx_dma.c ****   else 
1279:stm32f4xx_dma.c ****   {
1280:stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1281:stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 997              		.loc 1 1281 0
 998 0020 8360     		streq	r3, [r0, #8]	@ D.6001, DMAy_1->LIFCR
 999 0022 10BD     		pop	{r4, pc}	@
 1000              	.L103:
 1001              		.align	2
 1002              	.L102:
 1003 0024 00600240 		.word	1073897472
 1004 0028 00640240 		.word	1073898496
 1005 002c 0F640240 		.word	1073898511
 1006              		.cfi_endproc
 1007              	.LFE128:
 1008              		.size	DMA_ClearITPendingBit, .-DMA_ClearITPendingBit
 1009              		.text
 1010              	.Letext0:
 1011              		.file 2 "/usr/bin/../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/include/stdint.h"
 1012              		.file 3 "stm32f4xx.h"
 1013              		.file 4 "stm32f4xx_dma.h"
 1014              		.file 5 "cmsis/core_cm4.h"
 1015              		.section	.debug_info,"",%progbits
 1016              	.Ldebug_info0:
 1017 0000 AF070000 		.4byte	0x7af
 1018 0004 0200     		.2byte	0x2
 1019 0006 00000000 		.4byte	.Ldebug_abbrev0
 1020 000a 04       		.byte	0x4
 1021 000b 01       		.uleb128 0x1
 1022 000c ED020000 		.4byte	.LASF80
 1023 0010 01       		.byte	0x1
 1024 0011 CC030000 		.4byte	.LASF81
 1025 0015 33000000 		.4byte	.LASF82
 1026 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1027 001d 00000000 		.4byte	0
 1028 0021 00000000 		.4byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 42


 1029 0025 00000000 		.4byte	.Ldebug_line0
 1030 0029 02       		.uleb128 0x2
 1031 002a 01       		.byte	0x1
 1032 002b 06       		.byte	0x6
 1033 002c 77020000 		.4byte	.LASF0
 1034 0030 02       		.uleb128 0x2
 1035 0031 01       		.byte	0x1
 1036 0032 08       		.byte	0x8
 1037 0033 69020000 		.4byte	.LASF1
 1038 0037 02       		.uleb128 0x2
 1039 0038 02       		.byte	0x2
 1040 0039 05       		.byte	0x5
 1041 003a 48010000 		.4byte	.LASF2
 1042 003e 03       		.uleb128 0x3
 1043 003f 48040000 		.4byte	.LASF4
 1044 0043 02       		.byte	0x2
 1045 0044 36       		.byte	0x36
 1046 0045 49000000 		.4byte	0x49
 1047 0049 02       		.uleb128 0x2
 1048 004a 02       		.byte	0x2
 1049 004b 07       		.byte	0x7
 1050 004c 62030000 		.4byte	.LASF3
 1051 0050 03       		.uleb128 0x3
 1052 0051 87030000 		.4byte	.LASF5
 1053 0055 02       		.byte	0x2
 1054 0056 4F       		.byte	0x4f
 1055 0057 5B000000 		.4byte	0x5b
 1056 005b 02       		.uleb128 0x2
 1057 005c 04       		.byte	0x4
 1058 005d 05       		.byte	0x5
 1059 005e F5010000 		.4byte	.LASF6
 1060 0062 03       		.uleb128 0x3
 1061 0063 C7020000 		.4byte	.LASF7
 1062 0067 02       		.byte	0x2
 1063 0068 50       		.byte	0x50
 1064 0069 6D000000 		.4byte	0x6d
 1065 006d 02       		.uleb128 0x2
 1066 006e 04       		.byte	0x4
 1067 006f 07       		.byte	0x7
 1068 0070 04040000 		.4byte	.LASF8
 1069 0074 02       		.uleb128 0x2
 1070 0075 08       		.byte	0x8
 1071 0076 05       		.byte	0x5
 1072 0077 73010000 		.4byte	.LASF9
 1073 007b 02       		.uleb128 0x2
 1074 007c 08       		.byte	0x8
 1075 007d 07       		.byte	0x7
 1076 007e 9E020000 		.4byte	.LASF10
 1077 0082 04       		.uleb128 0x4
 1078 0083 04       		.byte	0x4
 1079 0084 05       		.byte	0x5
 1080 0085 696E7400 		.ascii	"int\000"
 1081 0089 02       		.uleb128 0x2
 1082 008a 04       		.byte	0x4
 1083 008b 07       		.byte	0x7
 1084 008c D0020000 		.4byte	.LASF11
 1085 0090 02       		.uleb128 0x2
ARM GAS  /tmp/ccXZiPD3.s 			page 43


 1086 0091 04       		.byte	0x4
 1087 0092 07       		.byte	0x7
 1088 0093 88000000 		.4byte	.LASF12
 1089 0097 05       		.uleb128 0x5
 1090 0098 62000000 		.4byte	0x62
 1091 009c 05       		.uleb128 0x5
 1092 009d 50000000 		.4byte	0x50
 1093 00a1 06       		.uleb128 0x6
 1094 00a2 01       		.byte	0x1
 1095 00a3 03       		.byte	0x3
 1096 00a4 1D01     		.2byte	0x11d
 1097 00a6 B7000000 		.4byte	0xb7
 1098 00aa 07       		.uleb128 0x7
 1099 00ab 6C040000 		.4byte	.LASF13
 1100 00af 00       		.sleb128 0
 1101 00b0 08       		.uleb128 0x8
 1102 00b1 53455400 		.ascii	"SET\000"
 1103 00b5 01       		.sleb128 1
 1104 00b6 00       		.byte	0
 1105 00b7 09       		.uleb128 0x9
 1106 00b8 CF040000 		.4byte	.LASF14
 1107 00bc 03       		.byte	0x3
 1108 00bd 1D01     		.2byte	0x11d
 1109 00bf A1000000 		.4byte	0xa1
 1110 00c3 09       		.uleb128 0x9
 1111 00c4 D4010000 		.4byte	.LASF15
 1112 00c8 03       		.byte	0x3
 1113 00c9 1D01     		.2byte	0x11d
 1114 00cb A1000000 		.4byte	0xa1
 1115 00cf 06       		.uleb128 0x6
 1116 00d0 01       		.byte	0x1
 1117 00d1 03       		.byte	0x3
 1118 00d2 1F01     		.2byte	0x11f
 1119 00d4 E5000000 		.4byte	0xe5
 1120 00d8 07       		.uleb128 0x7
 1121 00d9 40010000 		.4byte	.LASF16
 1122 00dd 00       		.sleb128 0
 1123 00de 07       		.uleb128 0x7
 1124 00df DA040000 		.4byte	.LASF17
 1125 00e3 01       		.sleb128 1
 1126 00e4 00       		.byte	0
 1127 00e5 09       		.uleb128 0x9
 1128 00e6 1B040000 		.4byte	.LASF18
 1129 00ea 03       		.byte	0x3
 1130 00eb 1F01     		.2byte	0x11f
 1131 00ed CF000000 		.4byte	0xcf
 1132 00f1 0A       		.uleb128 0xa
 1133 00f2 18       		.byte	0x18
 1134 00f3 03       		.byte	0x3
 1135 00f4 D701     		.2byte	0x1d7
 1136 00f6 54010000 		.4byte	0x154
 1137 00fa 0B       		.uleb128 0xb
 1138 00fb 435200   		.ascii	"CR\000"
 1139 00fe 03       		.byte	0x3
 1140 00ff D901     		.2byte	0x1d9
 1141 0101 97000000 		.4byte	0x97
 1142 0105 02       		.byte	0x2
ARM GAS  /tmp/ccXZiPD3.s 			page 44


 1143 0106 23       		.byte	0x23
 1144 0107 00       		.uleb128 0
 1145 0108 0C       		.uleb128 0xc
 1146 0109 16040000 		.4byte	.LASF19
 1147 010d 03       		.byte	0x3
 1148 010e DA01     		.2byte	0x1da
 1149 0110 97000000 		.4byte	0x97
 1150 0114 02       		.byte	0x2
 1151 0115 23       		.byte	0x23
 1152 0116 04       		.uleb128 0x4
 1153 0117 0B       		.uleb128 0xb
 1154 0118 50415200 		.ascii	"PAR\000"
 1155 011c 03       		.byte	0x3
 1156 011d DB01     		.2byte	0x1db
 1157 011f 97000000 		.4byte	0x97
 1158 0123 02       		.byte	0x2
 1159 0124 23       		.byte	0x23
 1160 0125 08       		.uleb128 0x8
 1161 0126 0C       		.uleb128 0xc
 1162 0127 FF030000 		.4byte	.LASF20
 1163 012b 03       		.byte	0x3
 1164 012c DC01     		.2byte	0x1dc
 1165 012e 97000000 		.4byte	0x97
 1166 0132 02       		.byte	0x2
 1167 0133 23       		.byte	0x23
 1168 0134 0C       		.uleb128 0xc
 1169 0135 0C       		.uleb128 0xc
 1170 0136 75030000 		.4byte	.LASF21
 1171 013a 03       		.byte	0x3
 1172 013b DD01     		.2byte	0x1dd
 1173 013d 97000000 		.4byte	0x97
 1174 0141 02       		.byte	0x2
 1175 0142 23       		.byte	0x23
 1176 0143 10       		.uleb128 0x10
 1177 0144 0B       		.uleb128 0xb
 1178 0145 46435200 		.ascii	"FCR\000"
 1179 0149 03       		.byte	0x3
 1180 014a DE01     		.2byte	0x1de
 1181 014c 97000000 		.4byte	0x97
 1182 0150 02       		.byte	0x2
 1183 0151 23       		.byte	0x23
 1184 0152 14       		.uleb128 0x14
 1185 0153 00       		.byte	0
 1186 0154 09       		.uleb128 0x9
 1187 0155 1A000000 		.4byte	.LASF22
 1188 0159 03       		.byte	0x3
 1189 015a DF01     		.2byte	0x1df
 1190 015c F1000000 		.4byte	0xf1
 1191 0160 0A       		.uleb128 0xa
 1192 0161 10       		.byte	0x10
 1193 0162 03       		.byte	0x3
 1194 0163 E101     		.2byte	0x1e1
 1195 0165 A6010000 		.4byte	0x1a6
 1196 0169 0C       		.uleb128 0xc
 1197 016a 07020000 		.4byte	.LASF23
 1198 016e 03       		.byte	0x3
 1199 016f E301     		.2byte	0x1e3
ARM GAS  /tmp/ccXZiPD3.s 			page 45


 1200 0171 97000000 		.4byte	0x97
 1201 0175 02       		.byte	0x2
 1202 0176 23       		.byte	0x23
 1203 0177 00       		.uleb128 0
 1204 0178 0C       		.uleb128 0xc
 1205 0179 36030000 		.4byte	.LASF24
 1206 017d 03       		.byte	0x3
 1207 017e E401     		.2byte	0x1e4
 1208 0180 97000000 		.4byte	0x97
 1209 0184 02       		.byte	0x2
 1210 0185 23       		.byte	0x23
 1211 0186 04       		.uleb128 0x4
 1212 0187 0C       		.uleb128 0xc
 1213 0188 F9030000 		.4byte	.LASF25
 1214 018c 03       		.byte	0x3
 1215 018d E501     		.2byte	0x1e5
 1216 018f 97000000 		.4byte	0x97
 1217 0193 02       		.byte	0x2
 1218 0194 23       		.byte	0x23
 1219 0195 08       		.uleb128 0x8
 1220 0196 0C       		.uleb128 0xc
 1221 0197 6D010000 		.4byte	.LASF26
 1222 019b 03       		.byte	0x3
 1223 019c E601     		.2byte	0x1e6
 1224 019e 97000000 		.4byte	0x97
 1225 01a2 02       		.byte	0x2
 1226 01a3 23       		.byte	0x23
 1227 01a4 0C       		.uleb128 0xc
 1228 01a5 00       		.byte	0
 1229 01a6 09       		.uleb128 0x9
 1230 01a7 CE000000 		.4byte	.LASF27
 1231 01ab 03       		.byte	0x3
 1232 01ac E701     		.2byte	0x1e7
 1233 01ae 60010000 		.4byte	0x160
 1234 01b2 0D       		.uleb128 0xd
 1235 01b3 3C       		.byte	0x3c
 1236 01b4 04       		.byte	0x4
 1237 01b5 36       		.byte	0x36
 1238 01b6 8D020000 		.4byte	0x28d
 1239 01ba 0E       		.uleb128 0xe
 1240 01bb 51040000 		.4byte	.LASF28
 1241 01bf 04       		.byte	0x4
 1242 01c0 38       		.byte	0x38
 1243 01c1 62000000 		.4byte	0x62
 1244 01c5 02       		.byte	0x2
 1245 01c6 23       		.byte	0x23
 1246 01c7 00       		.uleb128 0
 1247 01c8 0E       		.uleb128 0xe
 1248 01c9 29010000 		.4byte	.LASF29
 1249 01cd 04       		.byte	0x4
 1250 01ce 3B       		.byte	0x3b
 1251 01cf 62000000 		.4byte	0x62
 1252 01d3 02       		.byte	0x2
 1253 01d4 23       		.byte	0x23
 1254 01d5 04       		.uleb128 0x4
 1255 01d6 0E       		.uleb128 0xe
 1256 01d7 72040000 		.4byte	.LASF30
ARM GAS  /tmp/ccXZiPD3.s 			page 46


 1257 01db 04       		.byte	0x4
 1258 01dc 3D       		.byte	0x3d
 1259 01dd 62000000 		.4byte	0x62
 1260 01e1 02       		.byte	0x2
 1261 01e2 23       		.byte	0x23
 1262 01e3 08       		.uleb128 0x8
 1263 01e4 0E       		.uleb128 0xe
 1264 01e5 18010000 		.4byte	.LASF31
 1265 01e9 04       		.byte	0x4
 1266 01ea 41       		.byte	0x41
 1267 01eb 62000000 		.4byte	0x62
 1268 01ef 02       		.byte	0x2
 1269 01f0 23       		.byte	0x23
 1270 01f1 0C       		.uleb128 0xc
 1271 01f2 0E       		.uleb128 0xe
 1272 01f3 86040000 		.4byte	.LASF32
 1273 01f7 04       		.byte	0x4
 1274 01f8 45       		.byte	0x45
 1275 01f9 62000000 		.4byte	0x62
 1276 01fd 02       		.byte	0x2
 1277 01fe 23       		.byte	0x23
 1278 01ff 10       		.uleb128 0x10
 1279 0200 0E       		.uleb128 0xe
 1280 0201 B1010000 		.4byte	.LASF33
 1281 0205 04       		.byte	0x4
 1282 0206 49       		.byte	0x49
 1283 0207 62000000 		.4byte	0x62
 1284 020b 02       		.byte	0x2
 1285 020c 23       		.byte	0x23
 1286 020d 14       		.uleb128 0x14
 1287 020e 0E       		.uleb128 0xe
 1288 020f 52010000 		.4byte	.LASF34
 1289 0213 04       		.byte	0x4
 1290 0214 4C       		.byte	0x4c
 1291 0215 62000000 		.4byte	0x62
 1292 0219 02       		.byte	0x2
 1293 021a 23       		.byte	0x23
 1294 021b 18       		.uleb128 0x18
 1295 021c 0E       		.uleb128 0xe
 1296 021d 42020000 		.4byte	.LASF35
 1297 0221 04       		.byte	0x4
 1298 0222 4F       		.byte	0x4f
 1299 0223 62000000 		.4byte	0x62
 1300 0227 02       		.byte	0x2
 1301 0228 23       		.byte	0x23
 1302 0229 1C       		.uleb128 0x1c
 1303 022a 0E       		.uleb128 0xe
 1304 022b E8040000 		.4byte	.LASF36
 1305 022f 04       		.byte	0x4
 1306 0230 52       		.byte	0x52
 1307 0231 62000000 		.4byte	0x62
 1308 0235 02       		.byte	0x2
 1309 0236 23       		.byte	0x23
 1310 0237 20       		.uleb128 0x20
 1311 0238 0E       		.uleb128 0xe
 1312 0239 95040000 		.4byte	.LASF37
 1313 023d 04       		.byte	0x4
ARM GAS  /tmp/ccXZiPD3.s 			page 47


 1314 023e 55       		.byte	0x55
 1315 023f 62000000 		.4byte	0x62
 1316 0243 02       		.byte	0x2
 1317 0244 23       		.byte	0x23
 1318 0245 24       		.uleb128 0x24
 1319 0246 0E       		.uleb128 0xe
 1320 0247 4A030000 		.4byte	.LASF38
 1321 024b 04       		.byte	0x4
 1322 024c 5A       		.byte	0x5a
 1323 024d 62000000 		.4byte	0x62
 1324 0251 02       		.byte	0x2
 1325 0252 23       		.byte	0x23
 1326 0253 28       		.uleb128 0x28
 1327 0254 0E       		.uleb128 0xe
 1328 0255 3B040000 		.4byte	.LASF39
 1329 0259 04       		.byte	0x4
 1330 025a 5D       		.byte	0x5d
 1331 025b 62000000 		.4byte	0x62
 1332 025f 02       		.byte	0x2
 1333 0260 23       		.byte	0x23
 1334 0261 2C       		.uleb128 0x2c
 1335 0262 0E       		.uleb128 0xe
 1336 0263 B5020000 		.4byte	.LASF40
 1337 0267 04       		.byte	0x4
 1338 0268 62       		.byte	0x62
 1339 0269 62000000 		.4byte	0x62
 1340 026d 02       		.byte	0x2
 1341 026e 23       		.byte	0x23
 1342 026f 30       		.uleb128 0x30
 1343 0270 0E       		.uleb128 0xe
 1344 0271 78000000 		.4byte	.LASF41
 1345 0275 04       		.byte	0x4
 1346 0276 65       		.byte	0x65
 1347 0277 62000000 		.4byte	0x62
 1348 027b 02       		.byte	0x2
 1349 027c 23       		.byte	0x23
 1350 027d 34       		.uleb128 0x34
 1351 027e 0E       		.uleb128 0xe
 1352 027f A8000000 		.4byte	.LASF42
 1353 0283 04       		.byte	0x4
 1354 0284 6A       		.byte	0x6a
 1355 0285 62000000 		.4byte	0x62
 1356 0289 02       		.byte	0x2
 1357 028a 23       		.byte	0x23
 1358 028b 38       		.uleb128 0x38
 1359 028c 00       		.byte	0
 1360 028d 03       		.uleb128 0x3
 1361 028e 59020000 		.4byte	.LASF43
 1362 0292 04       		.byte	0x4
 1363 0293 6E       		.byte	0x6e
 1364 0294 B2010000 		.4byte	0x1b2
 1365 0298 0F       		.uleb128 0xf
 1366 0299 01       		.byte	0x1
 1367 029a DC030000 		.4byte	.LASF44
 1368 029e 01       		.byte	0x1
 1369 029f C4       		.byte	0xc4
 1370 02a0 01       		.byte	0x1
ARM GAS  /tmp/ccXZiPD3.s 			page 48


 1371 02a1 00000000 		.4byte	.LFB110
 1372 02a5 0C010000 		.4byte	.LFE110
 1373 02a9 02       		.byte	0x2
 1374 02aa 7D       		.byte	0x7d
 1375 02ab 00       		.sleb128 0
 1376 02ac 01       		.byte	0x1
 1377 02ad C1020000 		.4byte	0x2c1
 1378 02b1 10       		.uleb128 0x10
 1379 02b2 0B010000 		.4byte	.LASF46
 1380 02b6 01       		.byte	0x1
 1381 02b7 C4       		.byte	0xc4
 1382 02b8 C1020000 		.4byte	0x2c1
 1383 02bc 00000000 		.4byte	.LLST0
 1384 02c0 00       		.byte	0
 1385 02c1 11       		.uleb128 0x11
 1386 02c2 04       		.byte	0x4
 1387 02c3 54010000 		.4byte	0x154
 1388 02c7 12       		.uleb128 0x12
 1389 02c8 01       		.byte	0x1
 1390 02c9 FE010000 		.4byte	.LASF45
 1391 02cd 01       		.byte	0x1
 1392 02ce 3F01     		.2byte	0x13f
 1393 02d0 01       		.byte	0x1
 1394 02d1 00000000 		.4byte	.LFB111
 1395 02d5 54000000 		.4byte	.LFE111
 1396 02d9 3A000000 		.4byte	.LLST1
 1397 02dd 01       		.byte	0x1
 1398 02de 11030000 		.4byte	0x311
 1399 02e2 13       		.uleb128 0x13
 1400 02e3 0B010000 		.4byte	.LASF46
 1401 02e7 01       		.byte	0x1
 1402 02e8 3F01     		.2byte	0x13f
 1403 02ea C1020000 		.4byte	0x2c1
 1404 02ee 01       		.byte	0x1
 1405 02ef 50       		.byte	0x50
 1406 02f0 14       		.uleb128 0x14
 1407 02f1 3B030000 		.4byte	.LASF47
 1408 02f5 01       		.byte	0x1
 1409 02f6 3F01     		.2byte	0x13f
 1410 02f8 11030000 		.4byte	0x311
 1411 02fc 5A000000 		.4byte	.LLST2
 1412 0300 15       		.uleb128 0x15
 1413 0301 31020000 		.4byte	.LASF66
 1414 0305 01       		.byte	0x1
 1415 0306 4101     		.2byte	0x141
 1416 0308 62000000 		.4byte	0x62
 1417 030c 7B000000 		.4byte	.LLST3
 1418 0310 00       		.byte	0
 1419 0311 11       		.uleb128 0x11
 1420 0312 04       		.byte	0x4
 1421 0313 8D020000 		.4byte	0x28d
 1422 0317 16       		.uleb128 0x16
 1423 0318 01       		.byte	0x1
 1424 0319 99000000 		.4byte	.LASF48
 1425 031d 01       		.byte	0x1
 1426 031e 9301     		.2byte	0x193
 1427 0320 01       		.byte	0x1
ARM GAS  /tmp/ccXZiPD3.s 			page 49


 1428 0321 00000000 		.4byte	.LFB112
 1429 0325 22000000 		.4byte	.LFE112
 1430 0329 02       		.byte	0x2
 1431 032a 7D       		.byte	0x7d
 1432 032b 00       		.sleb128 0
 1433 032c 01       		.byte	0x1
 1434 032d 40030000 		.4byte	0x340
 1435 0331 13       		.uleb128 0x13
 1436 0332 3B030000 		.4byte	.LASF47
 1437 0336 01       		.byte	0x1
 1438 0337 9301     		.2byte	0x193
 1439 0339 11030000 		.4byte	0x311
 1440 033d 01       		.byte	0x1
 1441 033e 50       		.byte	0x50
 1442 033f 00       		.byte	0
 1443 0340 16       		.uleb128 0x16
 1444 0341 01       		.byte	0x1
 1445 0342 12000000 		.4byte	.LASF49
 1446 0346 01       		.byte	0x1
 1447 0347 DE01     		.2byte	0x1de
 1448 0349 01       		.byte	0x1
 1449 034a 00000000 		.4byte	.LFB113
 1450 034e 12000000 		.4byte	.LFE113
 1451 0352 02       		.byte	0x2
 1452 0353 7D       		.byte	0x7d
 1453 0354 00       		.sleb128 0
 1454 0355 01       		.byte	0x1
 1455 0356 79030000 		.4byte	0x379
 1456 035a 13       		.uleb128 0x13
 1457 035b 0B010000 		.4byte	.LASF46
 1458 035f 01       		.byte	0x1
 1459 0360 DE01     		.2byte	0x1de
 1460 0362 C1020000 		.4byte	0x2c1
 1461 0366 01       		.byte	0x1
 1462 0367 50       		.byte	0x50
 1463 0368 14       		.uleb128 0x14
 1464 0369 20010000 		.4byte	.LASF50
 1465 036d 01       		.byte	0x1
 1466 036e DE01     		.2byte	0x1de
 1467 0370 E5000000 		.4byte	0xe5
 1468 0374 D2000000 		.4byte	.LLST4
 1469 0378 00       		.byte	0
 1470 0379 16       		.uleb128 0x16
 1471 037a 01       		.byte	0x1
 1472 037b AE030000 		.4byte	.LASF51
 1473 037f 01       		.byte	0x1
 1474 0380 0202     		.2byte	0x202
 1475 0382 01       		.byte	0x1
 1476 0383 00000000 		.4byte	.LFB114
 1477 0387 12000000 		.4byte	.LFE114
 1478 038b 02       		.byte	0x2
 1479 038c 7D       		.byte	0x7d
 1480 038d 00       		.sleb128 0
 1481 038e 01       		.byte	0x1
 1482 038f B2030000 		.4byte	0x3b2
 1483 0393 13       		.uleb128 0x13
 1484 0394 0B010000 		.4byte	.LASF46
ARM GAS  /tmp/ccXZiPD3.s 			page 50


 1485 0398 01       		.byte	0x1
 1486 0399 0202     		.2byte	0x202
 1487 039b C1020000 		.4byte	0x2c1
 1488 039f 01       		.byte	0x1
 1489 03a0 50       		.byte	0x50
 1490 03a1 14       		.uleb128 0x14
 1491 03a2 57030000 		.4byte	.LASF52
 1492 03a6 01       		.byte	0x1
 1493 03a7 0202     		.2byte	0x202
 1494 03a9 62000000 		.4byte	0x62
 1495 03ad 0C010000 		.4byte	.LLST5
 1496 03b1 00       		.byte	0
 1497 03b2 16       		.uleb128 0x16
 1498 03b3 01       		.byte	0x1
 1499 03b4 81010000 		.4byte	.LASF53
 1500 03b8 01       		.byte	0x1
 1501 03b9 2602     		.2byte	0x226
 1502 03bb 01       		.byte	0x1
 1503 03bc 00000000 		.4byte	.LFB115
 1504 03c0 12000000 		.4byte	.LFE115
 1505 03c4 02       		.byte	0x2
 1506 03c5 7D       		.byte	0x7d
 1507 03c6 00       		.sleb128 0
 1508 03c7 01       		.byte	0x1
 1509 03c8 EB030000 		.4byte	0x3eb
 1510 03cc 13       		.uleb128 0x13
 1511 03cd 0B010000 		.4byte	.LASF46
 1512 03d1 01       		.byte	0x1
 1513 03d2 2602     		.2byte	0x226
 1514 03d4 C1020000 		.4byte	0x2c1
 1515 03d8 01       		.byte	0x1
 1516 03d9 50       		.byte	0x50
 1517 03da 14       		.uleb128 0x14
 1518 03db 7A030000 		.4byte	.LASF54
 1519 03df 01       		.byte	0x1
 1520 03e0 2602     		.2byte	0x226
 1521 03e2 62000000 		.4byte	0x62
 1522 03e6 46010000 		.4byte	.LLST6
 1523 03ea 00       		.byte	0
 1524 03eb 16       		.uleb128 0x16
 1525 03ec 01       		.byte	0x1
 1526 03ed 1A020000 		.4byte	.LASF55
 1527 03f1 01       		.byte	0x1
 1528 03f2 7802     		.2byte	0x278
 1529 03f4 01       		.byte	0x1
 1530 03f5 00000000 		.4byte	.LFB116
 1531 03f9 04000000 		.4byte	.LFE116
 1532 03fd 02       		.byte	0x2
 1533 03fe 7D       		.byte	0x7d
 1534 03ff 00       		.sleb128 0
 1535 0400 01       		.byte	0x1
 1536 0401 22040000 		.4byte	0x422
 1537 0405 13       		.uleb128 0x13
 1538 0406 0B010000 		.4byte	.LASF46
 1539 040a 01       		.byte	0x1
 1540 040b 7802     		.2byte	0x278
 1541 040d C1020000 		.4byte	0x2c1
ARM GAS  /tmp/ccXZiPD3.s 			page 51


 1542 0411 01       		.byte	0x1
 1543 0412 50       		.byte	0x50
 1544 0413 13       		.uleb128 0x13
 1545 0414 91000000 		.4byte	.LASF56
 1546 0418 01       		.byte	0x1
 1547 0419 7802     		.2byte	0x278
 1548 041b 3E000000 		.4byte	0x3e
 1549 041f 01       		.byte	0x1
 1550 0420 51       		.byte	0x51
 1551 0421 00       		.byte	0
 1552 0422 17       		.uleb128 0x17
 1553 0423 01       		.byte	0x1
 1554 0424 9E040000 		.4byte	.LASF64
 1555 0428 01       		.byte	0x1
 1556 0429 8702     		.2byte	0x287
 1557 042b 01       		.byte	0x1
 1558 042c 3E000000 		.4byte	0x3e
 1559 0430 00000000 		.4byte	.LFB117
 1560 0434 06000000 		.4byte	.LFE117
 1561 0438 02       		.byte	0x2
 1562 0439 7D       		.byte	0x7d
 1563 043a 00       		.sleb128 0
 1564 043b 01       		.byte	0x1
 1565 043c 51040000 		.4byte	0x451
 1566 0440 14       		.uleb128 0x14
 1567 0441 0B010000 		.4byte	.LASF46
 1568 0445 01       		.byte	0x1
 1569 0446 8702     		.2byte	0x287
 1570 0448 C1020000 		.4byte	0x2c1
 1571 044c 80010000 		.4byte	.LLST7
 1572 0450 00       		.byte	0
 1573 0451 16       		.uleb128 0x16
 1574 0452 01       		.byte	0x1
 1575 0453 83020000 		.4byte	.LASF57
 1576 0457 01       		.byte	0x1
 1577 0458 DA02     		.2byte	0x2da
 1578 045a 01       		.byte	0x1
 1579 045b 00000000 		.4byte	.LFB118
 1580 045f 14000000 		.4byte	.LFE118
 1581 0463 02       		.byte	0x2
 1582 0464 7D       		.byte	0x7d
 1583 0465 00       		.sleb128 0
 1584 0466 01       		.byte	0x1
 1585 0467 98040000 		.4byte	0x498
 1586 046b 13       		.uleb128 0x13
 1587 046c 0B010000 		.4byte	.LASF46
 1588 0470 01       		.byte	0x1
 1589 0471 DA02     		.2byte	0x2da
 1590 0473 C1020000 		.4byte	0x2c1
 1591 0477 01       		.byte	0x1
 1592 0478 50       		.byte	0x50
 1593 0479 13       		.uleb128 0x13
 1594 047a 2B040000 		.4byte	.LASF58
 1595 047e 01       		.byte	0x1
 1596 047f DA02     		.2byte	0x2da
 1597 0481 62000000 		.4byte	0x62
 1598 0485 01       		.byte	0x1
ARM GAS  /tmp/ccXZiPD3.s 			page 52


 1599 0486 51       		.byte	0x51
 1600 0487 14       		.uleb128 0x14
 1601 0488 00000000 		.4byte	.LASF59
 1602 048c 01       		.byte	0x1
 1603 048d DB02     		.2byte	0x2db
 1604 048f 62000000 		.4byte	0x62
 1605 0493 A1010000 		.4byte	.LLST8
 1606 0497 00       		.byte	0
 1607 0498 16       		.uleb128 0x16
 1608 0499 01       		.byte	0x1
 1609 049a DD010000 		.4byte	.LASF60
 1610 049e 01       		.byte	0x1
 1611 049f F902     		.2byte	0x2f9
 1612 04a1 01       		.byte	0x1
 1613 04a2 00000000 		.4byte	.LFB119
 1614 04a6 12000000 		.4byte	.LFE119
 1615 04aa 02       		.byte	0x2
 1616 04ab 7D       		.byte	0x7d
 1617 04ac 00       		.sleb128 0
 1618 04ad 01       		.byte	0x1
 1619 04ae D1040000 		.4byte	0x4d1
 1620 04b2 13       		.uleb128 0x13
 1621 04b3 0B010000 		.4byte	.LASF46
 1622 04b7 01       		.byte	0x1
 1623 04b8 F902     		.2byte	0x2f9
 1624 04ba C1020000 		.4byte	0x2c1
 1625 04be 01       		.byte	0x1
 1626 04bf 50       		.byte	0x50
 1627 04c0 14       		.uleb128 0x14
 1628 04c1 20010000 		.4byte	.LASF50
 1629 04c5 01       		.byte	0x1
 1630 04c6 F902     		.2byte	0x2f9
 1631 04c8 E5000000 		.4byte	0xe5
 1632 04cc DB010000 		.4byte	.LLST9
 1633 04d0 00       		.byte	0
 1634 04d1 16       		.uleb128 0x16
 1635 04d2 01       		.byte	0x1
 1636 04d3 9A010000 		.4byte	.LASF61
 1637 04d7 01       		.byte	0x1
 1638 04d8 2203     		.2byte	0x322
 1639 04da 01       		.byte	0x1
 1640 04db 00000000 		.4byte	.LFB120
 1641 04df 0A000000 		.4byte	.LFE120
 1642 04e3 02       		.byte	0x2
 1643 04e4 7D       		.byte	0x7d
 1644 04e5 00       		.sleb128 0
 1645 04e6 01       		.byte	0x1
 1646 04e7 16050000 		.4byte	0x516
 1647 04eb 13       		.uleb128 0x13
 1648 04ec 0B010000 		.4byte	.LASF46
 1649 04f0 01       		.byte	0x1
 1650 04f1 2203     		.2byte	0x322
 1651 04f3 C1020000 		.4byte	0x2c1
 1652 04f7 01       		.byte	0x1
 1653 04f8 50       		.byte	0x50
 1654 04f9 13       		.uleb128 0x13
 1655 04fa 5D040000 		.4byte	.LASF62
ARM GAS  /tmp/ccXZiPD3.s 			page 53


 1656 04fe 01       		.byte	0x1
 1657 04ff 2203     		.2byte	0x322
 1658 0501 62000000 		.4byte	0x62
 1659 0505 01       		.byte	0x1
 1660 0506 51       		.byte	0x51
 1661 0507 13       		.uleb128 0x13
 1662 0508 F5000000 		.4byte	.LASF63
 1663 050c 01       		.byte	0x1
 1664 050d 2303     		.2byte	0x323
 1665 050f 62000000 		.4byte	0x62
 1666 0513 01       		.byte	0x1
 1667 0514 52       		.byte	0x52
 1668 0515 00       		.byte	0
 1669 0516 17       		.uleb128 0x17
 1670 0517 01       		.byte	0x1
 1671 0518 DA000000 		.4byte	.LASF65
 1672 051c 01       		.byte	0x1
 1673 051d 3C03     		.2byte	0x33c
 1674 051f 01       		.byte	0x1
 1675 0520 62000000 		.4byte	0x62
 1676 0524 00000000 		.4byte	.LFB121
 1677 0528 08000000 		.4byte	.LFE121
 1678 052c 02       		.byte	0x2
 1679 052d 7D       		.byte	0x7d
 1680 052e 00       		.sleb128 0
 1681 052f 01       		.byte	0x1
 1682 0530 55050000 		.4byte	0x555
 1683 0534 14       		.uleb128 0x14
 1684 0535 0B010000 		.4byte	.LASF46
 1685 0539 01       		.byte	0x1
 1686 053a 3C03     		.2byte	0x33c
 1687 053c C1020000 		.4byte	0x2c1
 1688 0540 15020000 		.4byte	.LLST10
 1689 0544 18       		.uleb128 0x18
 1690 0545 746D7000 		.ascii	"tmp\000"
 1691 0549 01       		.byte	0x1
 1692 054a 3E03     		.2byte	0x33e
 1693 054c 62000000 		.4byte	0x62
 1694 0550 36020000 		.4byte	.LLST11
 1695 0554 00       		.byte	0
 1696 0555 17       		.uleb128 0x17
 1697 0556 01       		.byte	0x1
 1698 0557 C3010000 		.4byte	.LASF67
 1699 055b 01       		.byte	0x1
 1700 055c AF03     		.2byte	0x3af
 1701 055e 01       		.byte	0x1
 1702 055f E5000000 		.4byte	0xe5
 1703 0563 00000000 		.4byte	.LFB122
 1704 0567 08000000 		.4byte	.LFE122
 1705 056b 02       		.byte	0x2
 1706 056c 7D       		.byte	0x7d
 1707 056d 00       		.sleb128 0
 1708 056e 01       		.byte	0x1
 1709 056f 94050000 		.4byte	0x594
 1710 0573 14       		.uleb128 0x14
 1711 0574 0B010000 		.4byte	.LASF46
 1712 0578 01       		.byte	0x1
ARM GAS  /tmp/ccXZiPD3.s 			page 54


 1713 0579 AF03     		.2byte	0x3af
 1714 057b C1020000 		.4byte	0x2c1
 1715 057f 60020000 		.4byte	.LLST12
 1716 0583 15       		.uleb128 0x15
 1717 0584 2D000000 		.4byte	.LASF68
 1718 0588 01       		.byte	0x1
 1719 0589 B103     		.2byte	0x3b1
 1720 058b E5000000 		.4byte	0xe5
 1721 058f 81020000 		.4byte	.LLST13
 1722 0593 00       		.byte	0
 1723 0594 17       		.uleb128 0x17
 1724 0595 01       		.byte	0x1
 1725 0596 BC000000 		.4byte	.LASF69
 1726 059a 01       		.byte	0x1
 1727 059b D103     		.2byte	0x3d1
 1728 059d 01       		.byte	0x1
 1729 059e 62000000 		.4byte	0x62
 1730 05a2 00000000 		.4byte	.LFB123
 1731 05a6 08000000 		.4byte	.LFE123
 1732 05aa 02       		.byte	0x2
 1733 05ab 7D       		.byte	0x7d
 1734 05ac 00       		.sleb128 0
 1735 05ad 01       		.byte	0x1
 1736 05ae D3050000 		.4byte	0x5d3
 1737 05b2 14       		.uleb128 0x14
 1738 05b3 0B010000 		.4byte	.LASF46
 1739 05b7 01       		.byte	0x1
 1740 05b8 D103     		.2byte	0x3d1
 1741 05ba C1020000 		.4byte	0x2c1
 1742 05be A4020000 		.4byte	.LLST14
 1743 05c2 15       		.uleb128 0x15
 1744 05c3 31020000 		.4byte	.LASF66
 1745 05c7 01       		.byte	0x1
 1746 05c8 D303     		.2byte	0x3d3
 1747 05ca 62000000 		.4byte	0x62
 1748 05ce C5020000 		.4byte	.LLST15
 1749 05d2 00       		.byte	0
 1750 05d3 19       		.uleb128 0x19
 1751 05d4 01       		.byte	0x1
 1752 05d5 E7030000 		.4byte	.LASF70
 1753 05d9 01       		.byte	0x1
 1754 05da EC03     		.2byte	0x3ec
 1755 05dc 01       		.byte	0x1
 1756 05dd B7000000 		.4byte	0xb7
 1757 05e1 00000000 		.4byte	.LFB124
 1758 05e5 38000000 		.4byte	.LFE124
 1759 05e9 F4020000 		.4byte	.LLST16
 1760 05ed 01       		.byte	0x1
 1761 05ee 43060000 		.4byte	0x643
 1762 05f2 14       		.uleb128 0x14
 1763 05f3 0B010000 		.4byte	.LASF46
 1764 05f7 01       		.byte	0x1
 1765 05f8 EC03     		.2byte	0x3ec
 1766 05fa C1020000 		.4byte	0x2c1
 1767 05fe 14030000 		.4byte	.LLST17
 1768 0602 14       		.uleb128 0x14
 1769 0603 8F030000 		.4byte	.LASF71
ARM GAS  /tmp/ccXZiPD3.s 			page 55


 1770 0607 01       		.byte	0x1
 1771 0608 EC03     		.2byte	0x3ec
 1772 060a 62000000 		.4byte	0x62
 1773 060e 35030000 		.4byte	.LLST18
 1774 0612 15       		.uleb128 0x15
 1775 0613 38020000 		.4byte	.LASF72
 1776 0617 01       		.byte	0x1
 1777 0618 EE03     		.2byte	0x3ee
 1778 061a B7000000 		.4byte	0xb7
 1779 061e 56030000 		.4byte	.LLST19
 1780 0622 15       		.uleb128 0x15
 1781 0623 06010000 		.4byte	.LASF73
 1782 0627 01       		.byte	0x1
 1783 0628 EF03     		.2byte	0x3ef
 1784 062a 43060000 		.4byte	0x643
 1785 062e 9B030000 		.4byte	.LLST20
 1786 0632 15       		.uleb128 0x15
 1787 0633 31020000 		.4byte	.LASF66
 1788 0637 01       		.byte	0x1
 1789 0638 F003     		.2byte	0x3f0
 1790 063a 62000000 		.4byte	0x62
 1791 063e D6030000 		.4byte	.LLST21
 1792 0642 00       		.byte	0
 1793 0643 11       		.uleb128 0x11
 1794 0644 04       		.byte	0x4
 1795 0645 A6010000 		.4byte	0x1a6
 1796 0649 12       		.uleb128 0x12
 1797 064a 01       		.byte	0x1
 1798 064b 0C020000 		.4byte	.LASF74
 1799 064f 01       		.byte	0x1
 1800 0650 2F04     		.2byte	0x42f
 1801 0652 01       		.byte	0x1
 1802 0653 00000000 		.4byte	.LFB125
 1803 0657 30000000 		.4byte	.LFE125
 1804 065b 08040000 		.4byte	.LLST22
 1805 065f 01       		.byte	0x1
 1806 0660 93060000 		.4byte	0x693
 1807 0664 14       		.uleb128 0x14
 1808 0665 0B010000 		.4byte	.LASF46
 1809 0669 01       		.byte	0x1
 1810 066a 2F04     		.2byte	0x42f
 1811 066c C1020000 		.4byte	0x2c1
 1812 0670 28040000 		.4byte	.LLST23
 1813 0674 14       		.uleb128 0x14
 1814 0675 8F030000 		.4byte	.LASF71
 1815 0679 01       		.byte	0x1
 1816 067a 2F04     		.2byte	0x42f
 1817 067c 62000000 		.4byte	0x62
 1818 0680 49040000 		.4byte	.LLST24
 1819 0684 1A       		.uleb128 0x1a
 1820 0685 06010000 		.4byte	.LASF73
 1821 0689 01       		.byte	0x1
 1822 068a 3104     		.2byte	0x431
 1823 068c 43060000 		.4byte	0x643
 1824 0690 01       		.byte	0x1
 1825 0691 50       		.byte	0x50
 1826 0692 00       		.byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 56


 1827 0693 16       		.uleb128 0x16
 1828 0694 01       		.byte	0x1
 1829 0695 B5040000 		.4byte	.LASF75
 1830 0699 01       		.byte	0x1
 1831 069a 5E04     		.2byte	0x45e
 1832 069c 01       		.byte	0x1
 1833 069d 00000000 		.4byte	.LFB126
 1834 06a1 3E000000 		.4byte	.LFE126
 1835 06a5 02       		.byte	0x2
 1836 06a6 7D       		.byte	0x7d
 1837 06a7 00       		.sleb128 0
 1838 06a8 01       		.byte	0x1
 1839 06a9 DC060000 		.4byte	0x6dc
 1840 06ad 13       		.uleb128 0x13
 1841 06ae 0B010000 		.4byte	.LASF46
 1842 06b2 01       		.byte	0x1
 1843 06b3 5E04     		.2byte	0x45e
 1844 06b5 C1020000 		.4byte	0x2c1
 1845 06b9 01       		.byte	0x1
 1846 06ba 50       		.byte	0x50
 1847 06bb 14       		.uleb128 0x14
 1848 06bc E1040000 		.4byte	.LASF76
 1849 06c0 01       		.byte	0x1
 1850 06c1 5E04     		.2byte	0x45e
 1851 06c3 62000000 		.4byte	0x62
 1852 06c7 6A040000 		.4byte	.LLST25
 1853 06cb 14       		.uleb128 0x14
 1854 06cc 20010000 		.4byte	.LASF50
 1855 06d0 01       		.byte	0x1
 1856 06d1 5E04     		.2byte	0x45e
 1857 06d3 E5000000 		.4byte	0xe5
 1858 06d7 8B040000 		.4byte	.LLST26
 1859 06db 00       		.byte	0
 1860 06dc 19       		.uleb128 0x19
 1861 06dd 01       		.byte	0x1
 1862 06de DD020000 		.4byte	.LASF77
 1863 06e2 01       		.byte	0x1
 1864 06e3 9204     		.2byte	0x492
 1865 06e5 01       		.byte	0x1
 1866 06e6 C3000000 		.4byte	0xc3
 1867 06ea 00000000 		.4byte	.LFB127
 1868 06ee 54000000 		.4byte	.LFE127
 1869 06f2 DE040000 		.4byte	.LLST27
 1870 06f6 01       		.byte	0x1
 1871 06f7 5A070000 		.4byte	0x75a
 1872 06fb 14       		.uleb128 0x14
 1873 06fc 0B010000 		.4byte	.LASF46
 1874 0700 01       		.byte	0x1
 1875 0701 9204     		.2byte	0x492
 1876 0703 C1020000 		.4byte	0x2c1
 1877 0707 FE040000 		.4byte	.LLST28
 1878 070b 14       		.uleb128 0x14
 1879 070c E1040000 		.4byte	.LASF76
 1880 0710 01       		.byte	0x1
 1881 0711 9204     		.2byte	0x492
 1882 0713 62000000 		.4byte	0x62
 1883 0717 38050000 		.4byte	.LLST29
ARM GAS  /tmp/ccXZiPD3.s 			page 57


 1884 071b 15       		.uleb128 0x15
 1885 071c 38020000 		.4byte	.LASF72
 1886 0720 01       		.byte	0x1
 1887 0721 9404     		.2byte	0x494
 1888 0723 C3000000 		.4byte	0xc3
 1889 0727 59050000 		.4byte	.LLST30
 1890 072b 1A       		.uleb128 0x1a
 1891 072c 06010000 		.4byte	.LASF73
 1892 0730 01       		.byte	0x1
 1893 0731 9504     		.2byte	0x495
 1894 0733 43060000 		.4byte	0x643
 1895 0737 01       		.byte	0x1
 1896 0738 54       		.byte	0x54
 1897 0739 15       		.uleb128 0x15
 1898 073a 31020000 		.4byte	.LASF66
 1899 073e 01       		.byte	0x1
 1900 073f 9604     		.2byte	0x496
 1901 0741 62000000 		.4byte	0x62
 1902 0745 78050000 		.4byte	.LLST31
 1903 0749 15       		.uleb128 0x15
 1904 074a 60010000 		.4byte	.LASF78
 1905 074e 01       		.byte	0x1
 1906 074f 9604     		.2byte	0x496
 1907 0751 62000000 		.4byte	0x62
 1908 0755 C7050000 		.4byte	.LLST32
 1909 0759 00       		.byte	0
 1910 075a 12       		.uleb128 0x12
 1911 075b 01       		.byte	0x1
 1912 075c 98030000 		.4byte	.LASF79
 1913 0760 01       		.byte	0x1
 1914 0761 E404     		.2byte	0x4e4
 1915 0763 01       		.byte	0x1
 1916 0764 00000000 		.4byte	.LFB128
 1917 0768 30000000 		.4byte	.LFE128
 1918 076c FD050000 		.4byte	.LLST33
 1919 0770 01       		.byte	0x1
 1920 0771 A4070000 		.4byte	0x7a4
 1921 0775 14       		.uleb128 0x14
 1922 0776 0B010000 		.4byte	.LASF46
 1923 077a 01       		.byte	0x1
 1924 077b E404     		.2byte	0x4e4
 1925 077d C1020000 		.4byte	0x2c1
 1926 0781 1D060000 		.4byte	.LLST34
 1927 0785 14       		.uleb128 0x14
 1928 0786 E1040000 		.4byte	.LASF76
 1929 078a 01       		.byte	0x1
 1930 078b E404     		.2byte	0x4e4
 1931 078d 62000000 		.4byte	0x62
 1932 0791 3E060000 		.4byte	.LLST35
 1933 0795 1A       		.uleb128 0x1a
 1934 0796 06010000 		.4byte	.LASF73
 1935 079a 01       		.byte	0x1
 1936 079b E604     		.2byte	0x4e6
 1937 079d 43060000 		.4byte	0x643
 1938 07a1 01       		.byte	0x1
 1939 07a2 50       		.byte	0x50
 1940 07a3 00       		.byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 58


 1941 07a4 1B       		.uleb128 0x1b
 1942 07a5 C2040000 		.4byte	.LASF83
 1943 07a9 05       		.byte	0x5
 1944 07aa 9806     		.2byte	0x698
 1945 07ac 9C000000 		.4byte	0x9c
 1946 07b0 01       		.byte	0x1
 1947 07b1 01       		.byte	0x1
 1948 07b2 00       		.byte	0
 1949              		.section	.debug_abbrev,"",%progbits
 1950              	.Ldebug_abbrev0:
 1951 0000 01       		.uleb128 0x1
 1952 0001 11       		.uleb128 0x11
 1953 0002 01       		.byte	0x1
 1954 0003 25       		.uleb128 0x25
 1955 0004 0E       		.uleb128 0xe
 1956 0005 13       		.uleb128 0x13
 1957 0006 0B       		.uleb128 0xb
 1958 0007 03       		.uleb128 0x3
 1959 0008 0E       		.uleb128 0xe
 1960 0009 1B       		.uleb128 0x1b
 1961 000a 0E       		.uleb128 0xe
 1962 000b 55       		.uleb128 0x55
 1963 000c 06       		.uleb128 0x6
 1964 000d 11       		.uleb128 0x11
 1965 000e 01       		.uleb128 0x1
 1966 000f 52       		.uleb128 0x52
 1967 0010 01       		.uleb128 0x1
 1968 0011 10       		.uleb128 0x10
 1969 0012 06       		.uleb128 0x6
 1970 0013 00       		.byte	0
 1971 0014 00       		.byte	0
 1972 0015 02       		.uleb128 0x2
 1973 0016 24       		.uleb128 0x24
 1974 0017 00       		.byte	0
 1975 0018 0B       		.uleb128 0xb
 1976 0019 0B       		.uleb128 0xb
 1977 001a 3E       		.uleb128 0x3e
 1978 001b 0B       		.uleb128 0xb
 1979 001c 03       		.uleb128 0x3
 1980 001d 0E       		.uleb128 0xe
 1981 001e 00       		.byte	0
 1982 001f 00       		.byte	0
 1983 0020 03       		.uleb128 0x3
 1984 0021 16       		.uleb128 0x16
 1985 0022 00       		.byte	0
 1986 0023 03       		.uleb128 0x3
 1987 0024 0E       		.uleb128 0xe
 1988 0025 3A       		.uleb128 0x3a
 1989 0026 0B       		.uleb128 0xb
 1990 0027 3B       		.uleb128 0x3b
 1991 0028 0B       		.uleb128 0xb
 1992 0029 49       		.uleb128 0x49
 1993 002a 13       		.uleb128 0x13
 1994 002b 00       		.byte	0
 1995 002c 00       		.byte	0
 1996 002d 04       		.uleb128 0x4
 1997 002e 24       		.uleb128 0x24
ARM GAS  /tmp/ccXZiPD3.s 			page 59


 1998 002f 00       		.byte	0
 1999 0030 0B       		.uleb128 0xb
 2000 0031 0B       		.uleb128 0xb
 2001 0032 3E       		.uleb128 0x3e
 2002 0033 0B       		.uleb128 0xb
 2003 0034 03       		.uleb128 0x3
 2004 0035 08       		.uleb128 0x8
 2005 0036 00       		.byte	0
 2006 0037 00       		.byte	0
 2007 0038 05       		.uleb128 0x5
 2008 0039 35       		.uleb128 0x35
 2009 003a 00       		.byte	0
 2010 003b 49       		.uleb128 0x49
 2011 003c 13       		.uleb128 0x13
 2012 003d 00       		.byte	0
 2013 003e 00       		.byte	0
 2014 003f 06       		.uleb128 0x6
 2015 0040 04       		.uleb128 0x4
 2016 0041 01       		.byte	0x1
 2017 0042 0B       		.uleb128 0xb
 2018 0043 0B       		.uleb128 0xb
 2019 0044 3A       		.uleb128 0x3a
 2020 0045 0B       		.uleb128 0xb
 2021 0046 3B       		.uleb128 0x3b
 2022 0047 05       		.uleb128 0x5
 2023 0048 01       		.uleb128 0x1
 2024 0049 13       		.uleb128 0x13
 2025 004a 00       		.byte	0
 2026 004b 00       		.byte	0
 2027 004c 07       		.uleb128 0x7
 2028 004d 28       		.uleb128 0x28
 2029 004e 00       		.byte	0
 2030 004f 03       		.uleb128 0x3
 2031 0050 0E       		.uleb128 0xe
 2032 0051 1C       		.uleb128 0x1c
 2033 0052 0D       		.uleb128 0xd
 2034 0053 00       		.byte	0
 2035 0054 00       		.byte	0
 2036 0055 08       		.uleb128 0x8
 2037 0056 28       		.uleb128 0x28
 2038 0057 00       		.byte	0
 2039 0058 03       		.uleb128 0x3
 2040 0059 08       		.uleb128 0x8
 2041 005a 1C       		.uleb128 0x1c
 2042 005b 0D       		.uleb128 0xd
 2043 005c 00       		.byte	0
 2044 005d 00       		.byte	0
 2045 005e 09       		.uleb128 0x9
 2046 005f 16       		.uleb128 0x16
 2047 0060 00       		.byte	0
 2048 0061 03       		.uleb128 0x3
 2049 0062 0E       		.uleb128 0xe
 2050 0063 3A       		.uleb128 0x3a
 2051 0064 0B       		.uleb128 0xb
 2052 0065 3B       		.uleb128 0x3b
 2053 0066 05       		.uleb128 0x5
 2054 0067 49       		.uleb128 0x49
ARM GAS  /tmp/ccXZiPD3.s 			page 60


 2055 0068 13       		.uleb128 0x13
 2056 0069 00       		.byte	0
 2057 006a 00       		.byte	0
 2058 006b 0A       		.uleb128 0xa
 2059 006c 13       		.uleb128 0x13
 2060 006d 01       		.byte	0x1
 2061 006e 0B       		.uleb128 0xb
 2062 006f 0B       		.uleb128 0xb
 2063 0070 3A       		.uleb128 0x3a
 2064 0071 0B       		.uleb128 0xb
 2065 0072 3B       		.uleb128 0x3b
 2066 0073 05       		.uleb128 0x5
 2067 0074 01       		.uleb128 0x1
 2068 0075 13       		.uleb128 0x13
 2069 0076 00       		.byte	0
 2070 0077 00       		.byte	0
 2071 0078 0B       		.uleb128 0xb
 2072 0079 0D       		.uleb128 0xd
 2073 007a 00       		.byte	0
 2074 007b 03       		.uleb128 0x3
 2075 007c 08       		.uleb128 0x8
 2076 007d 3A       		.uleb128 0x3a
 2077 007e 0B       		.uleb128 0xb
 2078 007f 3B       		.uleb128 0x3b
 2079 0080 05       		.uleb128 0x5
 2080 0081 49       		.uleb128 0x49
 2081 0082 13       		.uleb128 0x13
 2082 0083 38       		.uleb128 0x38
 2083 0084 0A       		.uleb128 0xa
 2084 0085 00       		.byte	0
 2085 0086 00       		.byte	0
 2086 0087 0C       		.uleb128 0xc
 2087 0088 0D       		.uleb128 0xd
 2088 0089 00       		.byte	0
 2089 008a 03       		.uleb128 0x3
 2090 008b 0E       		.uleb128 0xe
 2091 008c 3A       		.uleb128 0x3a
 2092 008d 0B       		.uleb128 0xb
 2093 008e 3B       		.uleb128 0x3b
 2094 008f 05       		.uleb128 0x5
 2095 0090 49       		.uleb128 0x49
 2096 0091 13       		.uleb128 0x13
 2097 0092 38       		.uleb128 0x38
 2098 0093 0A       		.uleb128 0xa
 2099 0094 00       		.byte	0
 2100 0095 00       		.byte	0
 2101 0096 0D       		.uleb128 0xd
 2102 0097 13       		.uleb128 0x13
 2103 0098 01       		.byte	0x1
 2104 0099 0B       		.uleb128 0xb
 2105 009a 0B       		.uleb128 0xb
 2106 009b 3A       		.uleb128 0x3a
 2107 009c 0B       		.uleb128 0xb
 2108 009d 3B       		.uleb128 0x3b
 2109 009e 0B       		.uleb128 0xb
 2110 009f 01       		.uleb128 0x1
 2111 00a0 13       		.uleb128 0x13
ARM GAS  /tmp/ccXZiPD3.s 			page 61


 2112 00a1 00       		.byte	0
 2113 00a2 00       		.byte	0
 2114 00a3 0E       		.uleb128 0xe
 2115 00a4 0D       		.uleb128 0xd
 2116 00a5 00       		.byte	0
 2117 00a6 03       		.uleb128 0x3
 2118 00a7 0E       		.uleb128 0xe
 2119 00a8 3A       		.uleb128 0x3a
 2120 00a9 0B       		.uleb128 0xb
 2121 00aa 3B       		.uleb128 0x3b
 2122 00ab 0B       		.uleb128 0xb
 2123 00ac 49       		.uleb128 0x49
 2124 00ad 13       		.uleb128 0x13
 2125 00ae 38       		.uleb128 0x38
 2126 00af 0A       		.uleb128 0xa
 2127 00b0 00       		.byte	0
 2128 00b1 00       		.byte	0
 2129 00b2 0F       		.uleb128 0xf
 2130 00b3 2E       		.uleb128 0x2e
 2131 00b4 01       		.byte	0x1
 2132 00b5 3F       		.uleb128 0x3f
 2133 00b6 0C       		.uleb128 0xc
 2134 00b7 03       		.uleb128 0x3
 2135 00b8 0E       		.uleb128 0xe
 2136 00b9 3A       		.uleb128 0x3a
 2137 00ba 0B       		.uleb128 0xb
 2138 00bb 3B       		.uleb128 0x3b
 2139 00bc 0B       		.uleb128 0xb
 2140 00bd 27       		.uleb128 0x27
 2141 00be 0C       		.uleb128 0xc
 2142 00bf 11       		.uleb128 0x11
 2143 00c0 01       		.uleb128 0x1
 2144 00c1 12       		.uleb128 0x12
 2145 00c2 01       		.uleb128 0x1
 2146 00c3 40       		.uleb128 0x40
 2147 00c4 0A       		.uleb128 0xa
 2148 00c5 9742     		.uleb128 0x2117
 2149 00c7 0C       		.uleb128 0xc
 2150 00c8 01       		.uleb128 0x1
 2151 00c9 13       		.uleb128 0x13
 2152 00ca 00       		.byte	0
 2153 00cb 00       		.byte	0
 2154 00cc 10       		.uleb128 0x10
 2155 00cd 05       		.uleb128 0x5
 2156 00ce 00       		.byte	0
 2157 00cf 03       		.uleb128 0x3
 2158 00d0 0E       		.uleb128 0xe
 2159 00d1 3A       		.uleb128 0x3a
 2160 00d2 0B       		.uleb128 0xb
 2161 00d3 3B       		.uleb128 0x3b
 2162 00d4 0B       		.uleb128 0xb
 2163 00d5 49       		.uleb128 0x49
 2164 00d6 13       		.uleb128 0x13
 2165 00d7 02       		.uleb128 0x2
 2166 00d8 06       		.uleb128 0x6
 2167 00d9 00       		.byte	0
 2168 00da 00       		.byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 62


 2169 00db 11       		.uleb128 0x11
 2170 00dc 0F       		.uleb128 0xf
 2171 00dd 00       		.byte	0
 2172 00de 0B       		.uleb128 0xb
 2173 00df 0B       		.uleb128 0xb
 2174 00e0 49       		.uleb128 0x49
 2175 00e1 13       		.uleb128 0x13
 2176 00e2 00       		.byte	0
 2177 00e3 00       		.byte	0
 2178 00e4 12       		.uleb128 0x12
 2179 00e5 2E       		.uleb128 0x2e
 2180 00e6 01       		.byte	0x1
 2181 00e7 3F       		.uleb128 0x3f
 2182 00e8 0C       		.uleb128 0xc
 2183 00e9 03       		.uleb128 0x3
 2184 00ea 0E       		.uleb128 0xe
 2185 00eb 3A       		.uleb128 0x3a
 2186 00ec 0B       		.uleb128 0xb
 2187 00ed 3B       		.uleb128 0x3b
 2188 00ee 05       		.uleb128 0x5
 2189 00ef 27       		.uleb128 0x27
 2190 00f0 0C       		.uleb128 0xc
 2191 00f1 11       		.uleb128 0x11
 2192 00f2 01       		.uleb128 0x1
 2193 00f3 12       		.uleb128 0x12
 2194 00f4 01       		.uleb128 0x1
 2195 00f5 40       		.uleb128 0x40
 2196 00f6 06       		.uleb128 0x6
 2197 00f7 9742     		.uleb128 0x2117
 2198 00f9 0C       		.uleb128 0xc
 2199 00fa 01       		.uleb128 0x1
 2200 00fb 13       		.uleb128 0x13
 2201 00fc 00       		.byte	0
 2202 00fd 00       		.byte	0
 2203 00fe 13       		.uleb128 0x13
 2204 00ff 05       		.uleb128 0x5
 2205 0100 00       		.byte	0
 2206 0101 03       		.uleb128 0x3
 2207 0102 0E       		.uleb128 0xe
 2208 0103 3A       		.uleb128 0x3a
 2209 0104 0B       		.uleb128 0xb
 2210 0105 3B       		.uleb128 0x3b
 2211 0106 05       		.uleb128 0x5
 2212 0107 49       		.uleb128 0x49
 2213 0108 13       		.uleb128 0x13
 2214 0109 02       		.uleb128 0x2
 2215 010a 0A       		.uleb128 0xa
 2216 010b 00       		.byte	0
 2217 010c 00       		.byte	0
 2218 010d 14       		.uleb128 0x14
 2219 010e 05       		.uleb128 0x5
 2220 010f 00       		.byte	0
 2221 0110 03       		.uleb128 0x3
 2222 0111 0E       		.uleb128 0xe
 2223 0112 3A       		.uleb128 0x3a
 2224 0113 0B       		.uleb128 0xb
 2225 0114 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccXZiPD3.s 			page 63


 2226 0115 05       		.uleb128 0x5
 2227 0116 49       		.uleb128 0x49
 2228 0117 13       		.uleb128 0x13
 2229 0118 02       		.uleb128 0x2
 2230 0119 06       		.uleb128 0x6
 2231 011a 00       		.byte	0
 2232 011b 00       		.byte	0
 2233 011c 15       		.uleb128 0x15
 2234 011d 34       		.uleb128 0x34
 2235 011e 00       		.byte	0
 2236 011f 03       		.uleb128 0x3
 2237 0120 0E       		.uleb128 0xe
 2238 0121 3A       		.uleb128 0x3a
 2239 0122 0B       		.uleb128 0xb
 2240 0123 3B       		.uleb128 0x3b
 2241 0124 05       		.uleb128 0x5
 2242 0125 49       		.uleb128 0x49
 2243 0126 13       		.uleb128 0x13
 2244 0127 02       		.uleb128 0x2
 2245 0128 06       		.uleb128 0x6
 2246 0129 00       		.byte	0
 2247 012a 00       		.byte	0
 2248 012b 16       		.uleb128 0x16
 2249 012c 2E       		.uleb128 0x2e
 2250 012d 01       		.byte	0x1
 2251 012e 3F       		.uleb128 0x3f
 2252 012f 0C       		.uleb128 0xc
 2253 0130 03       		.uleb128 0x3
 2254 0131 0E       		.uleb128 0xe
 2255 0132 3A       		.uleb128 0x3a
 2256 0133 0B       		.uleb128 0xb
 2257 0134 3B       		.uleb128 0x3b
 2258 0135 05       		.uleb128 0x5
 2259 0136 27       		.uleb128 0x27
 2260 0137 0C       		.uleb128 0xc
 2261 0138 11       		.uleb128 0x11
 2262 0139 01       		.uleb128 0x1
 2263 013a 12       		.uleb128 0x12
 2264 013b 01       		.uleb128 0x1
 2265 013c 40       		.uleb128 0x40
 2266 013d 0A       		.uleb128 0xa
 2267 013e 9742     		.uleb128 0x2117
 2268 0140 0C       		.uleb128 0xc
 2269 0141 01       		.uleb128 0x1
 2270 0142 13       		.uleb128 0x13
 2271 0143 00       		.byte	0
 2272 0144 00       		.byte	0
 2273 0145 17       		.uleb128 0x17
 2274 0146 2E       		.uleb128 0x2e
 2275 0147 01       		.byte	0x1
 2276 0148 3F       		.uleb128 0x3f
 2277 0149 0C       		.uleb128 0xc
 2278 014a 03       		.uleb128 0x3
 2279 014b 0E       		.uleb128 0xe
 2280 014c 3A       		.uleb128 0x3a
 2281 014d 0B       		.uleb128 0xb
 2282 014e 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccXZiPD3.s 			page 64


 2283 014f 05       		.uleb128 0x5
 2284 0150 27       		.uleb128 0x27
 2285 0151 0C       		.uleb128 0xc
 2286 0152 49       		.uleb128 0x49
 2287 0153 13       		.uleb128 0x13
 2288 0154 11       		.uleb128 0x11
 2289 0155 01       		.uleb128 0x1
 2290 0156 12       		.uleb128 0x12
 2291 0157 01       		.uleb128 0x1
 2292 0158 40       		.uleb128 0x40
 2293 0159 0A       		.uleb128 0xa
 2294 015a 9742     		.uleb128 0x2117
 2295 015c 0C       		.uleb128 0xc
 2296 015d 01       		.uleb128 0x1
 2297 015e 13       		.uleb128 0x13
 2298 015f 00       		.byte	0
 2299 0160 00       		.byte	0
 2300 0161 18       		.uleb128 0x18
 2301 0162 34       		.uleb128 0x34
 2302 0163 00       		.byte	0
 2303 0164 03       		.uleb128 0x3
 2304 0165 08       		.uleb128 0x8
 2305 0166 3A       		.uleb128 0x3a
 2306 0167 0B       		.uleb128 0xb
 2307 0168 3B       		.uleb128 0x3b
 2308 0169 05       		.uleb128 0x5
 2309 016a 49       		.uleb128 0x49
 2310 016b 13       		.uleb128 0x13
 2311 016c 02       		.uleb128 0x2
 2312 016d 06       		.uleb128 0x6
 2313 016e 00       		.byte	0
 2314 016f 00       		.byte	0
 2315 0170 19       		.uleb128 0x19
 2316 0171 2E       		.uleb128 0x2e
 2317 0172 01       		.byte	0x1
 2318 0173 3F       		.uleb128 0x3f
 2319 0174 0C       		.uleb128 0xc
 2320 0175 03       		.uleb128 0x3
 2321 0176 0E       		.uleb128 0xe
 2322 0177 3A       		.uleb128 0x3a
 2323 0178 0B       		.uleb128 0xb
 2324 0179 3B       		.uleb128 0x3b
 2325 017a 05       		.uleb128 0x5
 2326 017b 27       		.uleb128 0x27
 2327 017c 0C       		.uleb128 0xc
 2328 017d 49       		.uleb128 0x49
 2329 017e 13       		.uleb128 0x13
 2330 017f 11       		.uleb128 0x11
 2331 0180 01       		.uleb128 0x1
 2332 0181 12       		.uleb128 0x12
 2333 0182 01       		.uleb128 0x1
 2334 0183 40       		.uleb128 0x40
 2335 0184 06       		.uleb128 0x6
 2336 0185 9742     		.uleb128 0x2117
 2337 0187 0C       		.uleb128 0xc
 2338 0188 01       		.uleb128 0x1
 2339 0189 13       		.uleb128 0x13
ARM GAS  /tmp/ccXZiPD3.s 			page 65


 2340 018a 00       		.byte	0
 2341 018b 00       		.byte	0
 2342 018c 1A       		.uleb128 0x1a
 2343 018d 34       		.uleb128 0x34
 2344 018e 00       		.byte	0
 2345 018f 03       		.uleb128 0x3
 2346 0190 0E       		.uleb128 0xe
 2347 0191 3A       		.uleb128 0x3a
 2348 0192 0B       		.uleb128 0xb
 2349 0193 3B       		.uleb128 0x3b
 2350 0194 05       		.uleb128 0x5
 2351 0195 49       		.uleb128 0x49
 2352 0196 13       		.uleb128 0x13
 2353 0197 02       		.uleb128 0x2
 2354 0198 0A       		.uleb128 0xa
 2355 0199 00       		.byte	0
 2356 019a 00       		.byte	0
 2357 019b 1B       		.uleb128 0x1b
 2358 019c 34       		.uleb128 0x34
 2359 019d 00       		.byte	0
 2360 019e 03       		.uleb128 0x3
 2361 019f 0E       		.uleb128 0xe
 2362 01a0 3A       		.uleb128 0x3a
 2363 01a1 0B       		.uleb128 0xb
 2364 01a2 3B       		.uleb128 0x3b
 2365 01a3 05       		.uleb128 0x5
 2366 01a4 49       		.uleb128 0x49
 2367 01a5 13       		.uleb128 0x13
 2368 01a6 3F       		.uleb128 0x3f
 2369 01a7 0C       		.uleb128 0xc
 2370 01a8 3C       		.uleb128 0x3c
 2371 01a9 0C       		.uleb128 0xc
 2372 01aa 00       		.byte	0
 2373 01ab 00       		.byte	0
 2374 01ac 00       		.byte	0
 2375              		.section	.debug_loc,"",%progbits
 2376              	.Ldebug_loc0:
 2377              	.LLST0:
 2378 0000 00000000 		.4byte	.LVL0
 2379 0004 80000000 		.4byte	.LVL1
 2380 0008 0100     		.2byte	0x1
 2381 000a 50       		.byte	0x50
 2382 000b 80000000 		.4byte	.LVL1
 2383 000f 86000000 		.4byte	.LVL2
 2384 0013 0400     		.2byte	0x4
 2385 0015 F3       		.byte	0xf3
 2386 0016 01       		.uleb128 0x1
 2387 0017 50       		.byte	0x50
 2388 0018 9F       		.byte	0x9f
 2389 0019 86000000 		.4byte	.LVL2
 2390 001d BA000000 		.4byte	.LVL3
 2391 0021 0100     		.2byte	0x1
 2392 0023 50       		.byte	0x50
 2393 0024 BA000000 		.4byte	.LVL3
 2394 0028 0C010000 		.4byte	.LFE110
 2395 002c 0400     		.2byte	0x4
 2396 002e F3       		.byte	0xf3
ARM GAS  /tmp/ccXZiPD3.s 			page 66


 2397 002f 01       		.uleb128 0x1
 2398 0030 50       		.byte	0x50
 2399 0031 9F       		.byte	0x9f
 2400 0032 00000000 		.4byte	0
 2401 0036 00000000 		.4byte	0
 2402              	.LLST1:
 2403 003a 00000000 		.4byte	.LFB111
 2404 003e 06000000 		.4byte	.LCFI0
 2405 0042 0200     		.2byte	0x2
 2406 0044 7D       		.byte	0x7d
 2407 0045 00       		.sleb128 0
 2408 0046 06000000 		.4byte	.LCFI0
 2409 004a 54000000 		.4byte	.LFE111
 2410 004e 0200     		.2byte	0x2
 2411 0050 7D       		.byte	0x7d
 2412 0051 08       		.sleb128 8
 2413 0052 00000000 		.4byte	0
 2414 0056 00000000 		.4byte	0
 2415              	.LLST2:
 2416 005a 00000000 		.4byte	.LVL4
 2417 005e 48000000 		.4byte	.LVL12
 2418 0062 0100     		.2byte	0x1
 2419 0064 51       		.byte	0x51
 2420 0065 48000000 		.4byte	.LVL12
 2421 0069 54000000 		.4byte	.LFE111
 2422 006d 0400     		.2byte	0x4
 2423 006f F3       		.byte	0xf3
 2424 0070 01       		.uleb128 0x1
 2425 0071 51       		.byte	0x51
 2426 0072 9F       		.byte	0x9f
 2427 0073 00000000 		.4byte	0
 2428 0077 00000000 		.4byte	0
 2429              	.LLST3:
 2430 007b 00000000 		.4byte	.LVL4
 2431 007f 02000000 		.4byte	.LVL5
 2432 0083 0200     		.2byte	0x2
 2433 0085 30       		.byte	0x30
 2434 0086 9F       		.byte	0x9f
 2435 0087 02000000 		.4byte	.LVL5
 2436 008b 08000000 		.4byte	.LVL6
 2437 008f 0100     		.2byte	0x1
 2438 0091 52       		.byte	0x52
 2439 0092 08000000 		.4byte	.LVL6
 2440 0096 34000000 		.4byte	.LVL8
 2441 009a 0100     		.2byte	0x1
 2442 009c 53       		.byte	0x53
 2443 009d 34000000 		.4byte	.LVL8
 2444 00a1 3A000000 		.4byte	.LVL9
 2445 00a5 0100     		.2byte	0x1
 2446 00a7 52       		.byte	0x52
 2447 00a8 3A000000 		.4byte	.LVL9
 2448 00ac 40000000 		.4byte	.LVL10
 2449 00b0 0100     		.2byte	0x1
 2450 00b2 54       		.byte	0x54
 2451 00b3 40000000 		.4byte	.LVL10
 2452 00b7 46000000 		.4byte	.LVL11
 2453 00bb 0100     		.2byte	0x1
ARM GAS  /tmp/ccXZiPD3.s 			page 67


 2454 00bd 52       		.byte	0x52
 2455 00be 46000000 		.4byte	.LVL11
 2456 00c2 54000000 		.4byte	.LFE111
 2457 00c6 0200     		.2byte	0x2
 2458 00c8 70       		.byte	0x70
 2459 00c9 14       		.sleb128 20
 2460 00ca 00000000 		.4byte	0
 2461 00ce 00000000 		.4byte	0
 2462              	.LLST4:
 2463 00d2 00000000 		.4byte	.LVL14
 2464 00d6 08000000 		.4byte	.LVL15
 2465 00da 0100     		.2byte	0x1
 2466 00dc 51       		.byte	0x51
 2467 00dd 08000000 		.4byte	.LVL15
 2468 00e1 0A000000 		.4byte	.LVL16
 2469 00e5 0400     		.2byte	0x4
 2470 00e7 F3       		.byte	0xf3
 2471 00e8 01       		.uleb128 0x1
 2472 00e9 51       		.byte	0x51
 2473 00ea 9F       		.byte	0x9f
 2474 00eb 0A000000 		.4byte	.LVL16
 2475 00ef 0E000000 		.4byte	.LVL17
 2476 00f3 0100     		.2byte	0x1
 2477 00f5 51       		.byte	0x51
 2478 00f6 0E000000 		.4byte	.LVL17
 2479 00fa 12000000 		.4byte	.LFE113
 2480 00fe 0400     		.2byte	0x4
 2481 0100 F3       		.byte	0xf3
 2482 0101 01       		.uleb128 0x1
 2483 0102 51       		.byte	0x51
 2484 0103 9F       		.byte	0x9f
 2485 0104 00000000 		.4byte	0
 2486 0108 00000000 		.4byte	0
 2487              	.LLST5:
 2488 010c 00000000 		.4byte	.LVL18
 2489 0110 08000000 		.4byte	.LVL19
 2490 0114 0100     		.2byte	0x1
 2491 0116 51       		.byte	0x51
 2492 0117 08000000 		.4byte	.LVL19
 2493 011b 0A000000 		.4byte	.LVL20
 2494 011f 0400     		.2byte	0x4
 2495 0121 F3       		.byte	0xf3
 2496 0122 01       		.uleb128 0x1
 2497 0123 51       		.byte	0x51
 2498 0124 9F       		.byte	0x9f
 2499 0125 0A000000 		.4byte	.LVL20
 2500 0129 0E000000 		.4byte	.LVL21
 2501 012d 0100     		.2byte	0x1
 2502 012f 51       		.byte	0x51
 2503 0130 0E000000 		.4byte	.LVL21
 2504 0134 12000000 		.4byte	.LFE114
 2505 0138 0400     		.2byte	0x4
 2506 013a F3       		.byte	0xf3
 2507 013b 01       		.uleb128 0x1
 2508 013c 51       		.byte	0x51
 2509 013d 9F       		.byte	0x9f
 2510 013e 00000000 		.4byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 68


 2511 0142 00000000 		.4byte	0
 2512              	.LLST6:
 2513 0146 00000000 		.4byte	.LVL22
 2514 014a 08000000 		.4byte	.LVL23
 2515 014e 0100     		.2byte	0x1
 2516 0150 51       		.byte	0x51
 2517 0151 08000000 		.4byte	.LVL23
 2518 0155 0A000000 		.4byte	.LVL24
 2519 0159 0400     		.2byte	0x4
 2520 015b F3       		.byte	0xf3
 2521 015c 01       		.uleb128 0x1
 2522 015d 51       		.byte	0x51
 2523 015e 9F       		.byte	0x9f
 2524 015f 0A000000 		.4byte	.LVL24
 2525 0163 0E000000 		.4byte	.LVL25
 2526 0167 0100     		.2byte	0x1
 2527 0169 51       		.byte	0x51
 2528 016a 0E000000 		.4byte	.LVL25
 2529 016e 12000000 		.4byte	.LFE115
 2530 0172 0400     		.2byte	0x4
 2531 0174 F3       		.byte	0xf3
 2532 0175 01       		.uleb128 0x1
 2533 0176 51       		.byte	0x51
 2534 0177 9F       		.byte	0x9f
 2535 0178 00000000 		.4byte	0
 2536 017c 00000000 		.4byte	0
 2537              	.LLST7:
 2538 0180 00000000 		.4byte	.LVL27
 2539 0184 02000000 		.4byte	.LVL28
 2540 0188 0100     		.2byte	0x1
 2541 018a 50       		.byte	0x50
 2542 018b 02000000 		.4byte	.LVL28
 2543 018f 06000000 		.4byte	.LFE117
 2544 0193 0400     		.2byte	0x4
 2545 0195 F3       		.byte	0xf3
 2546 0196 01       		.uleb128 0x1
 2547 0197 50       		.byte	0x50
 2548 0198 9F       		.byte	0x9f
 2549 0199 00000000 		.4byte	0
 2550 019d 00000000 		.4byte	0
 2551              	.LLST8:
 2552 01a1 00000000 		.4byte	.LVL29
 2553 01a5 08000000 		.4byte	.LVL30
 2554 01a9 0100     		.2byte	0x1
 2555 01ab 52       		.byte	0x52
 2556 01ac 08000000 		.4byte	.LVL30
 2557 01b0 0A000000 		.4byte	.LVL31
 2558 01b4 0400     		.2byte	0x4
 2559 01b6 F3       		.byte	0xf3
 2560 01b7 01       		.uleb128 0x1
 2561 01b8 52       		.byte	0x52
 2562 01b9 9F       		.byte	0x9f
 2563 01ba 0A000000 		.4byte	.LVL31
 2564 01be 0E000000 		.4byte	.LVL32
 2565 01c2 0100     		.2byte	0x1
 2566 01c4 52       		.byte	0x52
 2567 01c5 0E000000 		.4byte	.LVL32
ARM GAS  /tmp/ccXZiPD3.s 			page 69


 2568 01c9 14000000 		.4byte	.LFE118
 2569 01cd 0400     		.2byte	0x4
 2570 01cf F3       		.byte	0xf3
 2571 01d0 01       		.uleb128 0x1
 2572 01d1 52       		.byte	0x52
 2573 01d2 9F       		.byte	0x9f
 2574 01d3 00000000 		.4byte	0
 2575 01d7 00000000 		.4byte	0
 2576              	.LLST9:
 2577 01db 00000000 		.4byte	.LVL33
 2578 01df 08000000 		.4byte	.LVL34
 2579 01e3 0100     		.2byte	0x1
 2580 01e5 51       		.byte	0x51
 2581 01e6 08000000 		.4byte	.LVL34
 2582 01ea 0A000000 		.4byte	.LVL35
 2583 01ee 0400     		.2byte	0x4
 2584 01f0 F3       		.byte	0xf3
 2585 01f1 01       		.uleb128 0x1
 2586 01f2 51       		.byte	0x51
 2587 01f3 9F       		.byte	0x9f
 2588 01f4 0A000000 		.4byte	.LVL35
 2589 01f8 0E000000 		.4byte	.LVL36
 2590 01fc 0100     		.2byte	0x1
 2591 01fe 51       		.byte	0x51
 2592 01ff 0E000000 		.4byte	.LVL36
 2593 0203 12000000 		.4byte	.LFE119
 2594 0207 0400     		.2byte	0x4
 2595 0209 F3       		.byte	0xf3
 2596 020a 01       		.uleb128 0x1
 2597 020b 51       		.byte	0x51
 2598 020c 9F       		.byte	0x9f
 2599 020d 00000000 		.4byte	0
 2600 0211 00000000 		.4byte	0
 2601              	.LLST10:
 2602 0215 00000000 		.4byte	.LVL38
 2603 0219 02000000 		.4byte	.LVL39
 2604 021d 0100     		.2byte	0x1
 2605 021f 50       		.byte	0x50
 2606 0220 02000000 		.4byte	.LVL39
 2607 0224 08000000 		.4byte	.LFE121
 2608 0228 0400     		.2byte	0x4
 2609 022a F3       		.byte	0xf3
 2610 022b 01       		.uleb128 0x1
 2611 022c 50       		.byte	0x50
 2612 022d 9F       		.byte	0x9f
 2613 022e 00000000 		.4byte	0
 2614 0232 00000000 		.4byte	0
 2615              	.LLST11:
 2616 0236 00000000 		.4byte	.LVL38
 2617 023a 02000000 		.4byte	.LVL39
 2618 023e 0200     		.2byte	0x2
 2619 0240 30       		.byte	0x30
 2620 0241 9F       		.byte	0x9f
 2621 0242 02000000 		.4byte	.LVL39
 2622 0246 06000000 		.4byte	.LVL40
 2623 024a 0C00     		.2byte	0xc
 2624 024c 70       		.byte	0x70
ARM GAS  /tmp/ccXZiPD3.s 			page 70


 2625 024d 00       		.sleb128 0
 2626 024e 40       		.byte	0x40
 2627 024f 3F       		.byte	0x3f
 2628 0250 24       		.byte	0x24
 2629 0251 1A       		.byte	0x1a
 2630 0252 30       		.byte	0x30
 2631 0253 2E       		.byte	0x2e
 2632 0254 08       		.byte	0x8
 2633 0255 FF       		.byte	0xff
 2634 0256 1A       		.byte	0x1a
 2635 0257 9F       		.byte	0x9f
 2636 0258 00000000 		.4byte	0
 2637 025c 00000000 		.4byte	0
 2638              	.LLST12:
 2639 0260 00000000 		.4byte	.LVL41
 2640 0264 02000000 		.4byte	.LVL42
 2641 0268 0100     		.2byte	0x1
 2642 026a 50       		.byte	0x50
 2643 026b 02000000 		.4byte	.LVL42
 2644 026f 08000000 		.4byte	.LFE122
 2645 0273 0400     		.2byte	0x4
 2646 0275 F3       		.byte	0xf3
 2647 0276 01       		.uleb128 0x1
 2648 0277 50       		.byte	0x50
 2649 0278 9F       		.byte	0x9f
 2650 0279 00000000 		.4byte	0
 2651 027d 00000000 		.4byte	0
 2652              	.LLST13:
 2653 0281 00000000 		.4byte	.LVL41
 2654 0285 02000000 		.4byte	.LVL42
 2655 0289 0200     		.2byte	0x2
 2656 028b 30       		.byte	0x30
 2657 028c 9F       		.byte	0x9f
 2658 028d 02000000 		.4byte	.LVL42
 2659 0291 06000000 		.4byte	.LVL43
 2660 0295 0500     		.2byte	0x5
 2661 0297 70       		.byte	0x70
 2662 0298 00       		.sleb128 0
 2663 0299 31       		.byte	0x31
 2664 029a 1A       		.byte	0x1a
 2665 029b 9F       		.byte	0x9f
 2666 029c 00000000 		.4byte	0
 2667 02a0 00000000 		.4byte	0
 2668              	.LLST14:
 2669 02a4 00000000 		.4byte	.LVL44
 2670 02a8 02000000 		.4byte	.LVL45
 2671 02ac 0100     		.2byte	0x1
 2672 02ae 50       		.byte	0x50
 2673 02af 02000000 		.4byte	.LVL45
 2674 02b3 08000000 		.4byte	.LFE123
 2675 02b7 0400     		.2byte	0x4
 2676 02b9 F3       		.byte	0xf3
 2677 02ba 01       		.uleb128 0x1
 2678 02bb 50       		.byte	0x50
 2679 02bc 9F       		.byte	0x9f
 2680 02bd 00000000 		.4byte	0
 2681 02c1 00000000 		.4byte	0
ARM GAS  /tmp/ccXZiPD3.s 			page 71


 2682              	.LLST15:
 2683 02c5 00000000 		.4byte	.LVL44
 2684 02c9 02000000 		.4byte	.LVL45
 2685 02cd 0200     		.2byte	0x2
 2686 02cf 30       		.byte	0x30
 2687 02d0 9F       		.byte	0x9f
 2688 02d1 02000000 		.4byte	.LVL45
 2689 02d5 06000000 		.4byte	.LVL46
 2690 02d9 0600     		.2byte	0x6
 2691 02db 70       		.byte	0x70
 2692 02dc 00       		.sleb128 0
 2693 02dd 08       		.byte	0x8
 2694 02de 38       		.byte	0x38
 2695 02df 1A       		.byte	0x1a
 2696 02e0 9F       		.byte	0x9f
 2697 02e1 06000000 		.4byte	.LVL46
 2698 02e5 08000000 		.4byte	.LFE123
 2699 02e9 0100     		.2byte	0x1
 2700 02eb 50       		.byte	0x50
 2701 02ec 00000000 		.4byte	0
 2702 02f0 00000000 		.4byte	0
 2703              	.LLST16:
 2704 02f4 00000000 		.4byte	.LFB124
 2705 02f8 06000000 		.4byte	.LCFI1
 2706 02fc 0200     		.2byte	0x2
 2707 02fe 7D       		.byte	0x7d
 2708 02ff 00       		.sleb128 0
 2709 0300 06000000 		.4byte	.LCFI1
 2710 0304 38000000 		.4byte	.LFE124
 2711 0308 0200     		.2byte	0x2
 2712 030a 7D       		.byte	0x7d
 2713 030b 08       		.sleb128 8
 2714 030c 00000000 		.4byte	0
 2715 0310 00000000 		.4byte	0
 2716              	.LLST17:
 2717 0314 00000000 		.4byte	.LVL47
 2718 0318 10000000 		.4byte	.LVL48
 2719 031c 0100     		.2byte	0x1
 2720 031e 50       		.byte	0x50
 2721 031f 10000000 		.4byte	.LVL48
 2722 0323 38000000 		.4byte	.LFE124
 2723 0327 0400     		.2byte	0x4
 2724 0329 F3       		.byte	0xf3
 2725 032a 01       		.uleb128 0x1
 2726 032b 50       		.byte	0x50
 2727 032c 9F       		.byte	0x9f
 2728 032d 00000000 		.4byte	0
 2729 0331 00000000 		.4byte	0
 2730              	.LLST18:
 2731 0335 00000000 		.4byte	.LVL47
 2732 0339 1C000000 		.4byte	.LVL51
 2733 033d 0100     		.2byte	0x1
 2734 033f 51       		.byte	0x51
 2735 0340 1C000000 		.4byte	.LVL51
 2736 0344 38000000 		.4byte	.LFE124
 2737 0348 0400     		.2byte	0x4
 2738 034a F3       		.byte	0xf3
ARM GAS  /tmp/ccXZiPD3.s 			page 72


 2739 034b 01       		.uleb128 0x1
 2740 034c 51       		.byte	0x51
 2741 034d 9F       		.byte	0x9f
 2742 034e 00000000 		.4byte	0
 2743 0352 00000000 		.4byte	0
 2744              	.LLST19:
 2745 0356 00000000 		.4byte	.LVL47
 2746 035a 18000000 		.4byte	.LVL50
 2747 035e 0200     		.2byte	0x2
 2748 0360 30       		.byte	0x30
 2749 0361 9F       		.byte	0x9f
 2750 0362 18000000 		.4byte	.LVL50
 2751 0366 1C000000 		.4byte	.LVL51
 2752 036a 0E00     		.2byte	0xe
 2753 036c 71       		.byte	0x71
 2754 036d 00       		.sleb128 0
 2755 036e 73       		.byte	0x73
 2756 036f 00       		.sleb128 0
 2757 0370 1A       		.byte	0x1a
 2758 0371 0C       		.byte	0xc
 2759 0372 7D0F7D0F 		.4byte	0xf7d0f7d
 2760 0376 1A       		.byte	0x1a
 2761 0377 30       		.byte	0x30
 2762 0378 2E       		.byte	0x2e
 2763 0379 9F       		.byte	0x9f
 2764 037a 1C000000 		.4byte	.LVL51
 2765 037e 38000000 		.4byte	.LFE124
 2766 0382 0F00     		.2byte	0xf
 2767 0384 F3       		.byte	0xf3
 2768 0385 01       		.uleb128 0x1
 2769 0386 51       		.byte	0x51
 2770 0387 73       		.byte	0x73
 2771 0388 00       		.sleb128 0
 2772 0389 1A       		.byte	0x1a
 2773 038a 0C       		.byte	0xc
 2774 038b 7D0F7D0F 		.4byte	0xf7d0f7d
 2775 038f 1A       		.byte	0x1a
 2776 0390 30       		.byte	0x30
 2777 0391 2E       		.byte	0x2e
 2778 0392 9F       		.byte	0x9f
 2779 0393 00000000 		.4byte	0
 2780 0397 00000000 		.4byte	0
 2781              	.LLST20:
 2782 039b 10000000 		.4byte	.LVL48
 2783 039f 28000000 		.4byte	.LVL52
 2784 03a3 0100     		.2byte	0x1
 2785 03a5 50       		.byte	0x50
 2786 03a6 28000000 		.4byte	.LVL52
 2787 03aa 38000000 		.4byte	.LFE124
 2788 03ae 1E00     		.2byte	0x1e
 2789 03b0 0C       		.byte	0xc
 2790 03b1 00640240 		.4byte	0x40026400
 2791 03b5 0C       		.byte	0xc
 2792 03b6 00600240 		.4byte	0x40026000
 2793 03ba F3       		.byte	0xf3
 2794 03bb 01       		.uleb128 0x1
 2795 03bc 50       		.byte	0x50
ARM GAS  /tmp/ccXZiPD3.s 			page 73


 2796 03bd 40       		.byte	0x40
 2797 03be 4B       		.byte	0x4b
 2798 03bf 24       		.byte	0x24
 2799 03c0 22       		.byte	0x22
 2800 03c1 74       		.byte	0x74
 2801 03c2 00       		.sleb128 0
 2802 03c3 40       		.byte	0x40
 2803 03c4 4B       		.byte	0x4b
 2804 03c5 24       		.byte	0x24
 2805 03c6 22       		.byte	0x22
 2806 03c7 2B       		.byte	0x2b
 2807 03c8 28       		.byte	0x28
 2808 03c9 0100     		.2byte	0x1
 2809 03cb 16       		.byte	0x16
 2810 03cc 13       		.byte	0x13
 2811 03cd 9F       		.byte	0x9f
 2812 03ce 00000000 		.4byte	0
 2813 03d2 00000000 		.4byte	0
 2814              	.LLST21:
 2815 03d6 00000000 		.4byte	.LVL47
 2816 03da 16000000 		.4byte	.LVL49
 2817 03de 0200     		.2byte	0x2
 2818 03e0 30       		.byte	0x30
 2819 03e1 9F       		.byte	0x9f
 2820 03e2 16000000 		.4byte	.LVL49
 2821 03e6 18000000 		.4byte	.LVL50
 2822 03ea 0100     		.2byte	0x1
 2823 03ec 53       		.byte	0x53
 2824 03ed 18000000 		.4byte	.LVL50
 2825 03f1 38000000 		.4byte	.LFE124
 2826 03f5 0900     		.2byte	0x9
 2827 03f7 73       		.byte	0x73
 2828 03f8 00       		.sleb128 0
 2829 03f9 0C       		.byte	0xc
 2830 03fa 7D0F7D0F 		.4byte	0xf7d0f7d
 2831 03fe 1A       		.byte	0x1a
 2832 03ff 9F       		.byte	0x9f
 2833 0400 00000000 		.4byte	0
 2834 0404 00000000 		.4byte	0
 2835              	.LLST22:
 2836 0408 00000000 		.4byte	.LFB125
 2837 040c 02000000 		.4byte	.LCFI2
 2838 0410 0200     		.2byte	0x2
 2839 0412 7D       		.byte	0x7d
 2840 0413 00       		.sleb128 0
 2841 0414 02000000 		.4byte	.LCFI2
 2842 0418 30000000 		.4byte	.LFE125
 2843 041c 0200     		.2byte	0x2
 2844 041e 7D       		.byte	0x7d
 2845 041f 08       		.sleb128 8
 2846 0420 00000000 		.4byte	0
 2847 0424 00000000 		.4byte	0
 2848              	.LLST23:
 2849 0428 00000000 		.4byte	.LVL53
 2850 042c 10000000 		.4byte	.LVL54
 2851 0430 0100     		.2byte	0x1
 2852 0432 50       		.byte	0x50
ARM GAS  /tmp/ccXZiPD3.s 			page 74


 2853 0433 10000000 		.4byte	.LVL54
 2854 0437 30000000 		.4byte	.LFE125
 2855 043b 0400     		.2byte	0x4
 2856 043d F3       		.byte	0xf3
 2857 043e 01       		.uleb128 0x1
 2858 043f 50       		.byte	0x50
 2859 0440 9F       		.byte	0x9f
 2860 0441 00000000 		.4byte	0
 2861 0445 00000000 		.4byte	0
 2862              	.LLST24:
 2863 0449 00000000 		.4byte	.LVL53
 2864 044d 18000000 		.4byte	.LVL55
 2865 0451 0100     		.2byte	0x1
 2866 0453 51       		.byte	0x51
 2867 0454 18000000 		.4byte	.LVL55
 2868 0458 30000000 		.4byte	.LFE125
 2869 045c 0400     		.2byte	0x4
 2870 045e F3       		.byte	0xf3
 2871 045f 01       		.uleb128 0x1
 2872 0460 51       		.byte	0x51
 2873 0461 9F       		.byte	0x9f
 2874 0462 00000000 		.4byte	0
 2875 0466 00000000 		.4byte	0
 2876              	.LLST25:
 2877 046a 00000000 		.4byte	.LVL56
 2878 046e 36000000 		.4byte	.LVL62
 2879 0472 0100     		.2byte	0x1
 2880 0474 51       		.byte	0x51
 2881 0475 36000000 		.4byte	.LVL62
 2882 0479 3E000000 		.4byte	.LFE126
 2883 047d 0400     		.2byte	0x4
 2884 047f F3       		.byte	0xf3
 2885 0480 01       		.uleb128 0x1
 2886 0481 51       		.byte	0x51
 2887 0482 9F       		.byte	0x9f
 2888 0483 00000000 		.4byte	0
 2889 0487 00000000 		.4byte	0
 2890              	.LLST26:
 2891 048b 00000000 		.4byte	.LVL56
 2892 048f 18000000 		.4byte	.LVL57
 2893 0493 0100     		.2byte	0x1
 2894 0495 52       		.byte	0x52
 2895 0496 18000000 		.4byte	.LVL57
 2896 049a 1C000000 		.4byte	.LVL58
 2897 049e 0400     		.2byte	0x4
 2898 04a0 F3       		.byte	0xf3
 2899 04a1 01       		.uleb128 0x1
 2900 04a2 52       		.byte	0x52
 2901 04a3 9F       		.byte	0x9f
 2902 04a4 1C000000 		.4byte	.LVL58
 2903 04a8 20000000 		.4byte	.LVL59
 2904 04ac 0100     		.2byte	0x1
 2905 04ae 52       		.byte	0x52
 2906 04af 20000000 		.4byte	.LVL59
 2907 04b3 28000000 		.4byte	.LVL60
 2908 04b7 0400     		.2byte	0x4
 2909 04b9 F3       		.byte	0xf3
ARM GAS  /tmp/ccXZiPD3.s 			page 75


 2910 04ba 01       		.uleb128 0x1
 2911 04bb 52       		.byte	0x52
 2912 04bc 9F       		.byte	0x9f
 2913 04bd 28000000 		.4byte	.LVL60
 2914 04c1 30000000 		.4byte	.LVL61
 2915 04c5 0100     		.2byte	0x1
 2916 04c7 52       		.byte	0x52
 2917 04c8 30000000 		.4byte	.LVL61
 2918 04cc 3E000000 		.4byte	.LFE126
 2919 04d0 0400     		.2byte	0x4
 2920 04d2 F3       		.byte	0xf3
 2921 04d3 01       		.uleb128 0x1
 2922 04d4 52       		.byte	0x52
 2923 04d5 9F       		.byte	0x9f
 2924 04d6 00000000 		.4byte	0
 2925 04da 00000000 		.4byte	0
 2926              	.LLST27:
 2927 04de 00000000 		.4byte	.LFB127
 2928 04e2 06000000 		.4byte	.LCFI3
 2929 04e6 0200     		.2byte	0x2
 2930 04e8 7D       		.byte	0x7d
 2931 04e9 00       		.sleb128 0
 2932 04ea 06000000 		.4byte	.LCFI3
 2933 04ee 54000000 		.4byte	.LFE127
 2934 04f2 0200     		.2byte	0x2
 2935 04f4 7D       		.byte	0x7d
 2936 04f5 08       		.sleb128 8
 2937 04f6 00000000 		.4byte	0
 2938 04fa 00000000 		.4byte	0
 2939              	.LLST28:
 2940 04fe 00000000 		.4byte	.LVL63
 2941 0502 1C000000 		.4byte	.LVL66
 2942 0506 0100     		.2byte	0x1
 2943 0508 50       		.byte	0x50
 2944 0509 1C000000 		.4byte	.LVL66
 2945 050d 26000000 		.4byte	.LVL68
 2946 0511 0400     		.2byte	0x4
 2947 0513 F3       		.byte	0xf3
 2948 0514 01       		.uleb128 0x1
 2949 0515 50       		.byte	0x50
 2950 0516 9F       		.byte	0x9f
 2951 0517 26000000 		.4byte	.LVL68
 2952 051b 28000000 		.4byte	.LVL69
 2953 051f 0100     		.2byte	0x1
 2954 0521 50       		.byte	0x50
 2955 0522 28000000 		.4byte	.LVL69
 2956 0526 54000000 		.4byte	.LFE127
 2957 052a 0400     		.2byte	0x4
 2958 052c F3       		.byte	0xf3
 2959 052d 01       		.uleb128 0x1
 2960 052e 50       		.byte	0x50
 2961 052f 9F       		.byte	0x9f
 2962 0530 00000000 		.4byte	0
 2963 0534 00000000 		.4byte	0
 2964              	.LLST29:
 2965 0538 00000000 		.4byte	.LVL63
 2966 053c 38000000 		.4byte	.LVL73
ARM GAS  /tmp/ccXZiPD3.s 			page 76


 2967 0540 0100     		.2byte	0x1
 2968 0542 51       		.byte	0x51
 2969 0543 38000000 		.4byte	.LVL73
 2970 0547 54000000 		.4byte	.LFE127
 2971 054b 0400     		.2byte	0x4
 2972 054d F3       		.byte	0xf3
 2973 054e 01       		.uleb128 0x1
 2974 054f 51       		.byte	0x51
 2975 0550 9F       		.byte	0x9f
 2976 0551 00000000 		.4byte	0
 2977 0555 00000000 		.4byte	0
 2978              	.LLST30:
 2979 0559 00000000 		.4byte	.LVL63
 2980 055d 46000000 		.4byte	.LVL74
 2981 0561 0200     		.2byte	0x2
 2982 0563 30       		.byte	0x30
 2983 0564 9F       		.byte	0x9f
 2984 0565 46000000 		.4byte	.LVL74
 2985 0569 54000000 		.4byte	.LFE127
 2986 056d 0100     		.2byte	0x1
 2987 056f 50       		.byte	0x50
 2988 0570 00000000 		.4byte	0
 2989 0574 00000000 		.4byte	0
 2990              	.LLST31:
 2991 0578 00000000 		.4byte	.LVL63
 2992 057c 1A000000 		.4byte	.LVL65
 2993 0580 0200     		.2byte	0x2
 2994 0582 30       		.byte	0x30
 2995 0583 9F       		.byte	0x9f
 2996 0584 1A000000 		.4byte	.LVL65
 2997 0588 26000000 		.4byte	.LVL68
 2998 058c 0700     		.2byte	0x7
 2999 058e 71       		.byte	0x71
 3000 058f 00       		.sleb128 0
 3001 0590 3B       		.byte	0x3b
 3002 0591 25       		.byte	0x25
 3003 0592 4E       		.byte	0x4e
 3004 0593 1A       		.byte	0x1a
 3005 0594 9F       		.byte	0x9f
 3006 0595 26000000 		.4byte	.LVL68
 3007 0599 2C000000 		.4byte	.LVL70
 3008 059d 0200     		.2byte	0x2
 3009 059f 30       		.byte	0x30
 3010 05a0 9F       		.byte	0x9f
 3011 05a1 32000000 		.4byte	.LVL71
 3012 05a5 34000000 		.4byte	.LVL72
 3013 05a9 0100     		.2byte	0x1
 3014 05ab 53       		.byte	0x53
 3015 05ac 34000000 		.4byte	.LVL72
 3016 05b0 54000000 		.4byte	.LFE127
 3017 05b4 0900     		.2byte	0x9
 3018 05b6 73       		.byte	0x73
 3019 05b7 00       		.sleb128 0
 3020 05b8 0C       		.byte	0xc
 3021 05b9 7D0F7D0F 		.4byte	0xf7d0f7d
 3022 05bd 1A       		.byte	0x1a
 3023 05be 9F       		.byte	0x9f
ARM GAS  /tmp/ccXZiPD3.s 			page 77


 3024 05bf 00000000 		.4byte	0
 3025 05c3 00000000 		.4byte	0
 3026              	.LLST32:
 3027 05c7 00000000 		.4byte	.LVL63
 3028 05cb 24000000 		.4byte	.LVL67
 3029 05cf 0200     		.2byte	0x2
 3030 05d1 30       		.byte	0x30
 3031 05d2 9F       		.byte	0x9f
 3032 05d3 24000000 		.4byte	.LVL67
 3033 05d7 26000000 		.4byte	.LVL68
 3034 05db 0100     		.2byte	0x1
 3035 05dd 52       		.byte	0x52
 3036 05de 26000000 		.4byte	.LVL68
 3037 05e2 2C000000 		.4byte	.LVL70
 3038 05e6 0200     		.2byte	0x2
 3039 05e8 30       		.byte	0x30
 3040 05e9 9F       		.byte	0x9f
 3041 05ea 2C000000 		.4byte	.LVL70
 3042 05ee 54000000 		.4byte	.LFE127
 3043 05f2 0100     		.2byte	0x1
 3044 05f4 52       		.byte	0x52
 3045 05f5 00000000 		.4byte	0
 3046 05f9 00000000 		.4byte	0
 3047              	.LLST33:
 3048 05fd 00000000 		.4byte	.LFB128
 3049 0601 02000000 		.4byte	.LCFI4
 3050 0605 0200     		.2byte	0x2
 3051 0607 7D       		.byte	0x7d
 3052 0608 00       		.sleb128 0
 3053 0609 02000000 		.4byte	.LCFI4
 3054 060d 30000000 		.4byte	.LFE128
 3055 0611 0200     		.2byte	0x2
 3056 0613 7D       		.byte	0x7d
 3057 0614 08       		.sleb128 8
 3058 0615 00000000 		.4byte	0
 3059 0619 00000000 		.4byte	0
 3060              	.LLST34:
 3061 061d 00000000 		.4byte	.LVL75
 3062 0621 10000000 		.4byte	.LVL76
 3063 0625 0100     		.2byte	0x1
 3064 0627 50       		.byte	0x50
 3065 0628 10000000 		.4byte	.LVL76
 3066 062c 30000000 		.4byte	.LFE128
 3067 0630 0400     		.2byte	0x4
 3068 0632 F3       		.byte	0xf3
 3069 0633 01       		.uleb128 0x1
 3070 0634 50       		.byte	0x50
 3071 0635 9F       		.byte	0x9f
 3072 0636 00000000 		.4byte	0
 3073 063a 00000000 		.4byte	0
 3074              	.LLST35:
 3075 063e 00000000 		.4byte	.LVL75
 3076 0642 18000000 		.4byte	.LVL77
 3077 0646 0100     		.2byte	0x1
 3078 0648 51       		.byte	0x51
 3079 0649 18000000 		.4byte	.LVL77
 3080 064d 30000000 		.4byte	.LFE128
ARM GAS  /tmp/ccXZiPD3.s 			page 78


 3081 0651 0400     		.2byte	0x4
 3082 0653 F3       		.byte	0xf3
 3083 0654 01       		.uleb128 0x1
 3084 0655 51       		.byte	0x51
 3085 0656 9F       		.byte	0x9f
 3086 0657 00000000 		.4byte	0
 3087 065b 00000000 		.4byte	0
 3088              		.section	.debug_aranges,"",%progbits
 3089 0000 AC000000 		.4byte	0xac
 3090 0004 0200     		.2byte	0x2
 3091 0006 00000000 		.4byte	.Ldebug_info0
 3092 000a 04       		.byte	0x4
 3093 000b 00       		.byte	0
 3094 000c 0000     		.2byte	0
 3095 000e 0000     		.2byte	0
 3096 0010 00000000 		.4byte	.LFB110
 3097 0014 0C010000 		.4byte	.LFE110-.LFB110
 3098 0018 00000000 		.4byte	.LFB111
 3099 001c 54000000 		.4byte	.LFE111-.LFB111
 3100 0020 00000000 		.4byte	.LFB112
 3101 0024 22000000 		.4byte	.LFE112-.LFB112
 3102 0028 00000000 		.4byte	.LFB113
 3103 002c 12000000 		.4byte	.LFE113-.LFB113
 3104 0030 00000000 		.4byte	.LFB114
 3105 0034 12000000 		.4byte	.LFE114-.LFB114
 3106 0038 00000000 		.4byte	.LFB115
 3107 003c 12000000 		.4byte	.LFE115-.LFB115
 3108 0040 00000000 		.4byte	.LFB116
 3109 0044 04000000 		.4byte	.LFE116-.LFB116
 3110 0048 00000000 		.4byte	.LFB117
 3111 004c 06000000 		.4byte	.LFE117-.LFB117
 3112 0050 00000000 		.4byte	.LFB118
 3113 0054 14000000 		.4byte	.LFE118-.LFB118
 3114 0058 00000000 		.4byte	.LFB119
 3115 005c 12000000 		.4byte	.LFE119-.LFB119
 3116 0060 00000000 		.4byte	.LFB120
 3117 0064 0A000000 		.4byte	.LFE120-.LFB120
 3118 0068 00000000 		.4byte	.LFB121
 3119 006c 08000000 		.4byte	.LFE121-.LFB121
 3120 0070 00000000 		.4byte	.LFB122
 3121 0074 08000000 		.4byte	.LFE122-.LFB122
 3122 0078 00000000 		.4byte	.LFB123
 3123 007c 08000000 		.4byte	.LFE123-.LFB123
 3124 0080 00000000 		.4byte	.LFB124
 3125 0084 38000000 		.4byte	.LFE124-.LFB124
 3126 0088 00000000 		.4byte	.LFB125
 3127 008c 30000000 		.4byte	.LFE125-.LFB125
 3128 0090 00000000 		.4byte	.LFB126
 3129 0094 3E000000 		.4byte	.LFE126-.LFB126
 3130 0098 00000000 		.4byte	.LFB127
 3131 009c 54000000 		.4byte	.LFE127-.LFB127
 3132 00a0 00000000 		.4byte	.LFB128
 3133 00a4 30000000 		.4byte	.LFE128-.LFB128
 3134 00a8 00000000 		.4byte	0
 3135 00ac 00000000 		.4byte	0
 3136              		.section	.debug_ranges,"",%progbits
 3137              	.Ldebug_ranges0:
ARM GAS  /tmp/ccXZiPD3.s 			page 79


 3138 0000 00000000 		.4byte	.LFB110
 3139 0004 0C010000 		.4byte	.LFE110
 3140 0008 00000000 		.4byte	.LFB111
 3141 000c 54000000 		.4byte	.LFE111
 3142 0010 00000000 		.4byte	.LFB112
 3143 0014 22000000 		.4byte	.LFE112
 3144 0018 00000000 		.4byte	.LFB113
 3145 001c 12000000 		.4byte	.LFE113
 3146 0020 00000000 		.4byte	.LFB114
 3147 0024 12000000 		.4byte	.LFE114
 3148 0028 00000000 		.4byte	.LFB115
 3149 002c 12000000 		.4byte	.LFE115
 3150 0030 00000000 		.4byte	.LFB116
 3151 0034 04000000 		.4byte	.LFE116
 3152 0038 00000000 		.4byte	.LFB117
 3153 003c 06000000 		.4byte	.LFE117
 3154 0040 00000000 		.4byte	.LFB118
 3155 0044 14000000 		.4byte	.LFE118
 3156 0048 00000000 		.4byte	.LFB119
 3157 004c 12000000 		.4byte	.LFE119
 3158 0050 00000000 		.4byte	.LFB120
 3159 0054 0A000000 		.4byte	.LFE120
 3160 0058 00000000 		.4byte	.LFB121
 3161 005c 08000000 		.4byte	.LFE121
 3162 0060 00000000 		.4byte	.LFB122
 3163 0064 08000000 		.4byte	.LFE122
 3164 0068 00000000 		.4byte	.LFB123
 3165 006c 08000000 		.4byte	.LFE123
 3166 0070 00000000 		.4byte	.LFB124
 3167 0074 38000000 		.4byte	.LFE124
 3168 0078 00000000 		.4byte	.LFB125
 3169 007c 30000000 		.4byte	.LFE125
 3170 0080 00000000 		.4byte	.LFB126
 3171 0084 3E000000 		.4byte	.LFE126
 3172 0088 00000000 		.4byte	.LFB127
 3173 008c 54000000 		.4byte	.LFE127
 3174 0090 00000000 		.4byte	.LFB128
 3175 0094 30000000 		.4byte	.LFE128
 3176 0098 00000000 		.4byte	0
 3177 009c 00000000 		.4byte	0
 3178              		.section	.debug_line,"",%progbits
 3179              	.Ldebug_line0:
 3180 0000 C3020000 		.section	.debug_str,"MS",%progbits,1
 3180      0200B200 
 3180      00000201 
 3180      FB0E0D00 
 3180      01010101 
 3181              	.LASF59:
 3182 0000 444D415F 		.ascii	"DMA_CurrentMemory\000"
 3182      43757272 
 3182      656E744D 
 3182      656D6F72 
 3182      7900
 3183              	.LASF49:
 3184 0012 444D415F 		.ascii	"DMA_Cmd\000"
 3184      436D6400 
 3185              	.LASF22:
ARM GAS  /tmp/ccXZiPD3.s 			page 80


 3186 001a 444D415F 		.ascii	"DMA_Stream_TypeDef\000"
 3186      53747265 
 3186      616D5F54 
 3186      79706544 
 3186      656600
 3187              	.LASF68:
 3188 002d 73746174 		.ascii	"state\000"
 3188      6500
 3189              	.LASF82:
 3190 0033 2F686F6D 		.ascii	"/home/xavier/Documents/Xav/dev/stm32code/bitbox/boo"
 3190      652F7861 
 3190      76696572 
 3190      2F446F63 
 3190      756D656E 
 3191 0066 746C6F61 		.ascii	"tloader/FATFS-DBG\000"
 3191      6465722F 
 3191      46415446 
 3191      532D4442 
 3191      4700
 3192              	.LASF41:
 3193 0078 444D415F 		.ascii	"DMA_MemoryBurst\000"
 3193      4D656D6F 
 3193      72794275 
 3193      72737400 
 3194              	.LASF12:
 3195 0088 73697A65 		.ascii	"sizetype\000"
 3195      74797065 
 3195      00
 3196              	.LASF56:
 3197 0091 436F756E 		.ascii	"Counter\000"
 3197      74657200 
 3198              	.LASF48:
 3199 0099 444D415F 		.ascii	"DMA_StructInit\000"
 3199      53747275 
 3199      6374496E 
 3199      697400
 3200              	.LASF42:
 3201 00a8 444D415F 		.ascii	"DMA_PeripheralBurst\000"
 3201      50657269 
 3201      70686572 
 3201      616C4275 
 3201      72737400 
 3202              	.LASF69:
 3203 00bc 444D415F 		.ascii	"DMA_GetFIFOStatus\000"
 3203      47657446 
 3203      49464F53 
 3203      74617475 
 3203      7300
 3204              	.LASF27:
 3205 00ce 444D415F 		.ascii	"DMA_TypeDef\000"
 3205      54797065 
 3205      44656600 
 3206              	.LASF65:
 3207 00da 444D415F 		.ascii	"DMA_GetCurrentMemoryTarget\000"
 3207      47657443 
 3207      75727265 
 3207      6E744D65 
ARM GAS  /tmp/ccXZiPD3.s 			page 81


 3207      6D6F7279 
 3208              	.LASF63:
 3209 00f5 444D415F 		.ascii	"DMA_MemoryTarget\000"
 3209      4D656D6F 
 3209      72795461 
 3209      72676574 
 3209      00
 3210              	.LASF73:
 3211 0106 444D4179 		.ascii	"DMAy\000"
 3211      00
 3212              	.LASF46:
 3213 010b 444D4179 		.ascii	"DMAy_Streamx\000"
 3213      5F537472 
 3213      65616D78 
 3213      00
 3214              	.LASF31:
 3215 0118 444D415F 		.ascii	"DMA_DIR\000"
 3215      44495200 
 3216              	.LASF50:
 3217 0120 4E657753 		.ascii	"NewState\000"
 3217      74617465 
 3217      00
 3218              	.LASF29:
 3219 0129 444D415F 		.ascii	"DMA_PeripheralBaseAddr\000"
 3219      50657269 
 3219      70686572 
 3219      616C4261 
 3219      73654164 
 3220              	.LASF16:
 3221 0140 44495341 		.ascii	"DISABLE\000"
 3221      424C4500 
 3222              	.LASF2:
 3223 0148 73686F72 		.ascii	"short int\000"
 3223      7420696E 
 3223      7400
 3224              	.LASF34:
 3225 0152 444D415F 		.ascii	"DMA_MemoryInc\000"
 3225      4D656D6F 
 3225      7279496E 
 3225      6300
 3226              	.LASF78:
 3227 0160 656E6162 		.ascii	"enablestatus\000"
 3227      6C657374 
 3227      61747573 
 3227      00
 3228              	.LASF26:
 3229 016d 48494643 		.ascii	"HIFCR\000"
 3229      5200
 3230              	.LASF9:
 3231 0173 6C6F6E67 		.ascii	"long long int\000"
 3231      206C6F6E 
 3231      6720696E 
 3231      7400
 3232              	.LASF53:
 3233 0181 444D415F 		.ascii	"DMA_FlowControllerConfig\000"
 3233      466C6F77 
 3233      436F6E74 
ARM GAS  /tmp/ccXZiPD3.s 			page 82


 3233      726F6C6C 
 3233      6572436F 
 3234              	.LASF61:
 3235 019a 444D415F 		.ascii	"DMA_MemoryTargetConfig\000"
 3235      4D656D6F 
 3235      72795461 
 3235      72676574 
 3235      436F6E66 
 3236              	.LASF33:
 3237 01b1 444D415F 		.ascii	"DMA_PeripheralInc\000"
 3237      50657269 
 3237      70686572 
 3237      616C496E 
 3237      6300
 3238              	.LASF67:
 3239 01c3 444D415F 		.ascii	"DMA_GetCmdStatus\000"
 3239      47657443 
 3239      6D645374 
 3239      61747573 
 3239      00
 3240              	.LASF15:
 3241 01d4 49545374 		.ascii	"ITStatus\000"
 3241      61747573 
 3241      00
 3242              	.LASF60:
 3243 01dd 444D415F 		.ascii	"DMA_DoubleBufferModeCmd\000"
 3243      446F7562 
 3243      6C654275 
 3243      66666572 
 3243      4D6F6465 
 3244              	.LASF6:
 3245 01f5 6C6F6E67 		.ascii	"long int\000"
 3245      20696E74 
 3245      00
 3246              	.LASF45:
 3247 01fe 444D415F 		.ascii	"DMA_Init\000"
 3247      496E6974 
 3247      00
 3248              	.LASF23:
 3249 0207 4C495352 		.ascii	"LISR\000"
 3249      00
 3250              	.LASF74:
 3251 020c 444D415F 		.ascii	"DMA_ClearFlag\000"
 3251      436C6561 
 3251      72466C61 
 3251      6700
 3252              	.LASF55:
 3253 021a 444D415F 		.ascii	"DMA_SetCurrDataCounter\000"
 3253      53657443 
 3253      75727244 
 3253      61746143 
 3253      6F756E74 
 3254              	.LASF66:
 3255 0231 746D7072 		.ascii	"tmpreg\000"
 3255      656700
 3256              	.LASF72:
 3257 0238 62697473 		.ascii	"bitstatus\000"
ARM GAS  /tmp/ccXZiPD3.s 			page 83


 3257      74617475 
 3257      7300
 3258              	.LASF35:
 3259 0242 444D415F 		.ascii	"DMA_PeripheralDataSize\000"
 3259      50657269 
 3259      70686572 
 3259      616C4461 
 3259      74615369 
 3260              	.LASF43:
 3261 0259 444D415F 		.ascii	"DMA_InitTypeDef\000"
 3261      496E6974 
 3261      54797065 
 3261      44656600 
 3262              	.LASF1:
 3263 0269 756E7369 		.ascii	"unsigned char\000"
 3263      676E6564 
 3263      20636861 
 3263      7200
 3264              	.LASF0:
 3265 0277 7369676E 		.ascii	"signed char\000"
 3265      65642063 
 3265      68617200 
 3266              	.LASF57:
 3267 0283 444D415F 		.ascii	"DMA_DoubleBufferModeConfig\000"
 3267      446F7562 
 3267      6C654275 
 3267      66666572 
 3267      4D6F6465 
 3268              	.LASF10:
 3269 029e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3269      206C6F6E 
 3269      6720756E 
 3269      7369676E 
 3269      65642069 
 3270              	.LASF40:
 3271 02b5 444D415F 		.ascii	"DMA_FIFOThreshold\000"
 3271      4649464F 
 3271      54687265 
 3271      73686F6C 
 3271      6400
 3272              	.LASF7:
 3273 02c7 75696E74 		.ascii	"uint32_t\000"
 3273      33325F74 
 3273      00
 3274              	.LASF11:
 3275 02d0 756E7369 		.ascii	"unsigned int\000"
 3275      676E6564 
 3275      20696E74 
 3275      00
 3276              	.LASF77:
 3277 02dd 444D415F 		.ascii	"DMA_GetITStatus\000"
 3277      47657449 
 3277      54537461 
 3277      74757300 
 3278              	.LASF80:
 3279 02ed 474E5520 		.ascii	"GNU C 4.7.4 20130913 (release) [ARM/embedded-4_7-br"
 3279      4320342E 
ARM GAS  /tmp/ccXZiPD3.s 			page 84


 3279      372E3420 
 3279      32303133 
 3279      30393133 
 3280 0320 616E6368 		.ascii	"anch revision 202601]\000"
 3280      20726576 
 3280      6973696F 
 3280      6E203230 
 3280      32363031 
 3281              	.LASF24:
 3282 0336 48495352 		.ascii	"HISR\000"
 3282      00
 3283              	.LASF47:
 3284 033b 444D415F 		.ascii	"DMA_InitStruct\000"
 3284      496E6974 
 3284      53747275 
 3284      637400
 3285              	.LASF38:
 3286 034a 444D415F 		.ascii	"DMA_Priority\000"
 3286      5072696F 
 3286      72697479 
 3286      00
 3287              	.LASF52:
 3288 0357 444D415F 		.ascii	"DMA_Pincos\000"
 3288      50696E63 
 3288      6F7300
 3289              	.LASF3:
 3290 0362 73686F72 		.ascii	"short unsigned int\000"
 3290      7420756E 
 3290      7369676E 
 3290      65642069 
 3290      6E7400
 3291              	.LASF21:
 3292 0375 4D314152 		.ascii	"M1AR\000"
 3292      00
 3293              	.LASF54:
 3294 037a 444D415F 		.ascii	"DMA_FlowCtrl\000"
 3294      466C6F77 
 3294      4374726C 
 3294      00
 3295              	.LASF5:
 3296 0387 696E7433 		.ascii	"int32_t\000"
 3296      325F7400 
 3297              	.LASF71:
 3298 038f 444D415F 		.ascii	"DMA_FLAG\000"
 3298      464C4147 
 3298      00
 3299              	.LASF79:
 3300 0398 444D415F 		.ascii	"DMA_ClearITPendingBit\000"
 3300      436C6561 
 3300      72495450 
 3300      656E6469 
 3300      6E674269 
 3301              	.LASF51:
 3302 03ae 444D415F 		.ascii	"DMA_PeriphIncOffsetSizeConfig\000"
 3302      50657269 
 3302      7068496E 
 3302      634F6666 
ARM GAS  /tmp/ccXZiPD3.s 			page 85


 3302      73657453 
 3303              	.LASF81:
 3304 03cc 73746D33 		.ascii	"stm32f4xx_dma.c\000"
 3304      32663478 
 3304      785F646D 
 3304      612E6300 
 3305              	.LASF44:
 3306 03dc 444D415F 		.ascii	"DMA_DeInit\000"
 3306      4465496E 
 3306      697400
 3307              	.LASF70:
 3308 03e7 444D415F 		.ascii	"DMA_GetFlagStatus\000"
 3308      47657446 
 3308      6C616753 
 3308      74617475 
 3308      7300
 3309              	.LASF25:
 3310 03f9 4C494643 		.ascii	"LIFCR\000"
 3310      5200
 3311              	.LASF20:
 3312 03ff 4D304152 		.ascii	"M0AR\000"
 3312      00
 3313              	.LASF8:
 3314 0404 6C6F6E67 		.ascii	"long unsigned int\000"
 3314      20756E73 
 3314      69676E65 
 3314      6420696E 
 3314      7400
 3315              	.LASF19:
 3316 0416 4E445452 		.ascii	"NDTR\000"
 3316      00
 3317              	.LASF18:
 3318 041b 46756E63 		.ascii	"FunctionalState\000"
 3318      74696F6E 
 3318      616C5374 
 3318      61746500 
 3319              	.LASF58:
 3320 042b 4D656D6F 		.ascii	"Memory1BaseAddr\000"
 3320      72793142 
 3320      61736541 
 3320      64647200 
 3321              	.LASF39:
 3322 043b 444D415F 		.ascii	"DMA_FIFOMode\000"
 3322      4649464F 
 3322      4D6F6465 
 3322      00
 3323              	.LASF4:
 3324 0448 75696E74 		.ascii	"uint16_t\000"
 3324      31365F74 
 3324      00
 3325              	.LASF28:
 3326 0451 444D415F 		.ascii	"DMA_Channel\000"
 3326      4368616E 
 3326      6E656C00 
 3327              	.LASF62:
 3328 045d 4D656D6F 		.ascii	"MemoryBaseAddr\000"
 3328      72794261 
ARM GAS  /tmp/ccXZiPD3.s 			page 86


 3328      73654164 
 3328      647200
 3329              	.LASF13:
 3330 046c 52455345 		.ascii	"RESET\000"
 3330      5400
 3331              	.LASF30:
 3332 0472 444D415F 		.ascii	"DMA_Memory0BaseAddr\000"
 3332      4D656D6F 
 3332      72793042 
 3332      61736541 
 3332      64647200 
 3333              	.LASF32:
 3334 0486 444D415F 		.ascii	"DMA_BufferSize\000"
 3334      42756666 
 3334      65725369 
 3334      7A6500
 3335              	.LASF37:
 3336 0495 444D415F 		.ascii	"DMA_Mode\000"
 3336      4D6F6465 
 3336      00
 3337              	.LASF64:
 3338 049e 444D415F 		.ascii	"DMA_GetCurrDataCounter\000"
 3338      47657443 
 3338      75727244 
 3338      61746143 
 3338      6F756E74 
 3339              	.LASF75:
 3340 04b5 444D415F 		.ascii	"DMA_ITConfig\000"
 3340      4954436F 
 3340      6E666967 
 3340      00
 3341              	.LASF83:
 3342 04c2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3342      52784275 
 3342      66666572 
 3342      00
 3343              	.LASF14:
 3344 04cf 466C6167 		.ascii	"FlagStatus\000"
 3344      53746174 
 3344      757300
 3345              	.LASF17:
 3346 04da 454E4142 		.ascii	"ENABLE\000"
 3346      4C4500
 3347              	.LASF76:
 3348 04e1 444D415F 		.ascii	"DMA_IT\000"
 3348      495400
 3349              	.LASF36:
 3350 04e8 444D415F 		.ascii	"DMA_MemoryDataSize\000"
 3350      4D656D6F 
 3350      72794461 
 3350      74615369 
 3350      7A6500
 3351              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.4 20130913 (release) [ARM/embedded-4_7-br
ARM GAS  /tmp/ccXZiPD3.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma.c
     /tmp/ccXZiPD3.s:69     .text.DMA_DeInit:0000000000000000 $t
     /tmp/ccXZiPD3.s:74     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/ccXZiPD3.s:231    .text.DMA_DeInit:00000000000000c0 $d
     /tmp/ccXZiPD3.s:254    .text.DMA_Init:0000000000000000 $t
     /tmp/ccXZiPD3.s:259    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/ccXZiPD3.s:342    .text.DMA_Init:0000000000000050 $d
     /tmp/ccXZiPD3.s:347    .text.DMA_StructInit:0000000000000000 $t
     /tmp/ccXZiPD3.s:352    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/ccXZiPD3.s:396    .text.DMA_Cmd:0000000000000000 $t
     /tmp/ccXZiPD3.s:401    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/ccXZiPD3.s:429    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 $t
     /tmp/ccXZiPD3.s:434    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccXZiPD3.s:462    .text.DMA_FlowControllerConfig:0000000000000000 $t
     /tmp/ccXZiPD3.s:467    .text.DMA_FlowControllerConfig:0000000000000000 DMA_FlowControllerConfig
     /tmp/ccXZiPD3.s:495    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/ccXZiPD3.s:500    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/ccXZiPD3.s:515    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/ccXZiPD3.s:520    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/ccXZiPD3.s:538    .text.DMA_DoubleBufferModeConfig:0000000000000000 $t
     /tmp/ccXZiPD3.s:543    .text.DMA_DoubleBufferModeConfig:0000000000000000 DMA_DoubleBufferModeConfig
     /tmp/ccXZiPD3.s:573    .text.DMA_DoubleBufferModeCmd:0000000000000000 $t
     /tmp/ccXZiPD3.s:578    .text.DMA_DoubleBufferModeCmd:0000000000000000 DMA_DoubleBufferModeCmd
     /tmp/ccXZiPD3.s:606    .text.DMA_MemoryTargetConfig:0000000000000000 $t
     /tmp/ccXZiPD3.s:611    .text.DMA_MemoryTargetConfig:0000000000000000 DMA_MemoryTargetConfig
     /tmp/ccXZiPD3.s:632    .text.DMA_GetCurrentMemoryTarget:0000000000000000 $t
     /tmp/ccXZiPD3.s:637    .text.DMA_GetCurrentMemoryTarget:0000000000000000 DMA_GetCurrentMemoryTarget
     /tmp/ccXZiPD3.s:656    .text.DMA_GetCmdStatus:0000000000000000 $t
     /tmp/ccXZiPD3.s:661    .text.DMA_GetCmdStatus:0000000000000000 DMA_GetCmdStatus
     /tmp/ccXZiPD3.s:680    .text.DMA_GetFIFOStatus:0000000000000000 $t
     /tmp/ccXZiPD3.s:685    .text.DMA_GetFIFOStatus:0000000000000000 DMA_GetFIFOStatus
     /tmp/ccXZiPD3.s:704    .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/ccXZiPD3.s:709    .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/ccXZiPD3.s:756    .text.DMA_GetFlagStatus:000000000000002c $d
     /tmp/ccXZiPD3.s:763    .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/ccXZiPD3.s:768    .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/ccXZiPD3.s:803    .text.DMA_ClearFlag:0000000000000024 $d
     /tmp/ccXZiPD3.s:810    .text.DMA_ITConfig:0000000000000000 $t
     /tmp/ccXZiPD3.s:815    .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/ccXZiPD3.s:879    .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/ccXZiPD3.s:884    .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/ccXZiPD3.s:956    .text.DMA_GetITStatus:0000000000000048 $d
     /tmp/ccXZiPD3.s:963    .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/ccXZiPD3.s:968    .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
     /tmp/ccXZiPD3.s:1003   .text.DMA_ClearITPendingBit:0000000000000024 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
