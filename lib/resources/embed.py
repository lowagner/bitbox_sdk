#! /usr/bin/env python3
'''
Embeds binaries to C code (not C++)
Outputs to stdout as a header file.
Define DATA_IMPLEMENTATION to include it as an include file.

Alternatives :
    - use objcopy but this needs to specify the binary
      of the output ( which we might not know on sdl )
    - use ld and -o binary. this works but this will put
      all data in .data section which put it in ram, without
      being able to change it.
    - use incbin on inline assembly. this will work too but
      it's slightly more complex and relies on inline assembly
      so a bit less portable.
    - use xxd utility : this only works on linux and we lack the
      ability to export the header or control prefix / extensions.
'''

import sys
import re
import os.path
import argparse

LINELEN = 120 # line len in the file

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('files', nargs='+', metavar='file',help='filenames to embed. optionnally set filename:cname to use another symbol')
parser.add_argument('--prefix', default="data_", help='prefix for file names symbols in C')
parser.add_argument('-r','--remove', default="", nargs="+",help='extension to remove from names')

args=parser.parse_args()

# known extensions types ?
PREFIX = args.prefix.upper()
# embed files

def printable(n) :
    # 0-9 to avoid octal clash, / to avoid comments , ? to avoid trigraphs
    return n>=32 and n<127 and chr(n) not in "\\\"0123456789/?"

def gen_lines(data) :
    "generator of quoted lines from big string"
    s=""
    for c in data :
        s+= chr(c) if printable(c) else "\%o"%c
        if len(s)>=LINELEN :
            yield s
            s=""
    yield s

print ("/*\n  file autogenerated by %s, do no edit."%os.path.basename(sys.argv[0]))
print ("  define %sIMPLEMENTATION to include the real data, once.\n*/\n"%args.prefix.upper())
all_files=[]
for file in args.files :
    if ':' in file :
        file,quoted = file.split(':',1)
    else :
        base,ext = file.rsplit('.',1)

        # only keep basename, quote special chars
        quoted = re.sub(r'(^[^a-zA-Z])|[^0-9a-zA-Z_]','_',os.path.basename(base if ext in args.remove else file))

    # get file size
    size = os.path.getsize(file)
    all_files.append((file, quoted, size))

print ("#ifndef %sDECLARATION"%PREFIX)
print ("#define %sDECLARATION"%PREFIX)
print ()

sumsize = sum(n for (_,_,n) in all_files )
print ("// Total size: %dk."%(sumsize//1024))
for f,q,n in all_files :
    print ("extern const char %s%s[%d];\t// from %s - %d%%"%(args.prefix, q,n,f,n*100//sumsize))

print ()
print ("\n#endif // %sDECLARATION"%PREFIX)
print ("\n#ifdef %sIMPLEMENTATION"%PREFIX + "  // "+"-"*80+"\n")

for f,q,n in all_files :
    print ("const char %s%s[%d] =" % (args.prefix,q,n))
    print ("\n".join(" \"%s\""%line for line in gen_lines(open(f,'rb').read()))+";\n")

print ("\n#endif // %sIMPLEMENTATION"%PREFIX)
